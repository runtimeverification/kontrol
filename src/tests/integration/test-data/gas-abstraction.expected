
┌─ 1 (root, leaf, init, pending)
│   k: #execute ~> CONTINUATION:K
│   pc: 0
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode

┌─ 2 (root, leaf, target, terminal)
│   k: #halt ~> CONTINUATION:K
│   pc: PC_CELL_5d410f2a:Int
│   callDepth: CALLDEPTH_CELL_5d410f2a:Int
│   statusCode: STATUSCODE_FINAL:StatusCode


Node 1:

( <generatedTop>
  <foundry>
    <kevm>
      <k>
        #execute
        ~> CONTINUATION:K
      </k>
      <exit-code>
        EXITCODE_CELL:Int
      </exit-code>
      <mode>
        NORMAL
      </mode>
      <schedule>
        SHANGHAI
      </schedule>
      <useGas>
        true
      </useGas>
      <ethereum>
        <evm>
          <output>
            OUTPUT_CELL:Bytes
          </output>
          <statusCode>
            STATUSCODE:StatusCode
          </statusCode>
          <callStack>
            .List
          </callStack>
          <interimStates>
            .List
          </interimStates>
          <touchedAccounts>
            TOUCHEDACCOUNTS_CELL:Set
          </touchedAccounts>
          <callState>
            ...
            ...
            <id>
              728815563385977040452943777879061427756277306518
            </id>
            <caller>
              CALLER_ID:Int
            </caller>
            <callData>
              b"c\xfe\xc36"
            </callData>
            <callValue>
              0
            </callValue>
            <wordStack>
              .WordStack
            </wordStack>
            <localMem>
              b""
            </localMem>
            ...
            ...
            <memoryUsed>
              0
            </memoryUsed>
            <callGas>
              CALLGAS_CELL:Gas
            </callGas>
            <static>
              false
            </static>
            <callDepth>
              0
            </callDepth>
          </callState>
          <substate>
            <selfDestruct>
              SELFDESTRUCT_CELL:Set
            </selfDestruct>
            <log>
              .List
            </log>
            <refund>
              REFUND_CELL:Int
            </refund>
            <accessedAccounts>
              .Set
            </accessedAccounts>
            <accessedStorage>
              .Map
            </accessedStorage>
          </substate>
          <gasPrice>
            GASPRICE_CELL:Int
          </gasPrice>
          <origin>
            ORIGIN_ID:Int
          </origin>
          <blockhashes>
            BLOCKHASHES_CELL:List
          </blockhashes>
          <block>
            <previousHash>
              PREVIOUSHASH_CELL:Int
            </previousHash>
            <ommersHash>
              OMMERSHASH_CELL:Int
            </ommersHash>
            <coinbase>
              COINBASE_CELL:Int
            </coinbase>
            <stateRoot>
              STATEROOT_CELL:Int
            </stateRoot>
            <transactionsRoot>
              TRANSACTIONSROOT_CELL:Int
            </transactionsRoot>
            <receiptsRoot>
              RECEIPTSROOT_CELL:Int
            </receiptsRoot>
            <logsBloom>
              LOGSBLOOM_CELL:Bytes
            </logsBloom>
            <difficulty>
              DIFFICULTY_CELL:Int
            </difficulty>
            <number>
              NUMBER_CELL:Int
            </number>
            <gasLimit>
              GASLIMIT_CELL:Int
            </gasLimit>
            <gasUsed>
              GASUSED_CELL:Gas
            </gasUsed>
            <timestamp>
              TIMESTAMP_CELL:Int
            </timestamp>
            <extraData>
              EXTRADATA_CELL:Bytes
            </extraData>
            <mixHash>
              MIXHASH_CELL:Int
            </mixHash>
            <blockNonce>
              BLOCKNONCE_CELL:Int
            </blockNonce>
            <baseFee>
              BASEFEE_CELL:Int
            </baseFee>
            <withdrawalsRoot>
              WITHDRAWALSROOT_CELL:Int
            </withdrawalsRoot>
            <ommerBlockHeaders>
              OMMERBLOCKHEADERS_CELL:JSON
            </ommerBlockHeaders>
          </block>
        </evm>
        <network>
          <chainID>
            CHAINID_CELL:Int
          </chainID>
          <accounts>
            ( <account>
              <acctID>
                645326474426547203313410069153905908525362434349
              </acctID>
              <balance>
                0
              </balance>
              ...
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                0
              </nonce>
            </account>
            <account>
              <acctID>
                728815563385977040452943777879061427756277306518
              </acctID>
              <balance>
                0
              </balance>
              ...
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                1
              </nonce>
            </account> )
          </accounts>
          <txOrder>
            TXORDER_CELL:List
          </txOrder>
          <txPending>
            TXPENDING_CELL:List
          </txPending>
          <messages>
            MESSAGES_CELL:MessageCellMap
          </messages>
        </network>
      </ethereum>
    </kevm>
    <cheatcodes>
      <prank>
        <prevCaller>
          .Account
        </prevCaller>
        <prevOrigin>
          .Account
        </prevOrigin>
        <newCaller>
          .Account
        </newCaller>
        <newOrigin>
          .Account
        </newOrigin>
        <active>
          false
        </active>
        <depth>
          DEPTH_CELL:Int
        </depth>
        <singleCall>
          false
        </singleCall>
      </prank>
      <expectedRevert>
        <isRevertExpected>
          false
        </isRevertExpected>
        <expectedReason>
          EXPECTEDREASON_CELL:Bytes
        </expectedReason>
        <expectedDepth>
          EXPECTEDDEPTH_CELL:Int
        </expectedDepth>
      </expectedRevert>
      <expectedOpcode>
        <isOpcodeExpected>
          false
        </isOpcodeExpected>
        <expectedAddress>
          .Account
        </expectedAddress>
        <expectedValue>
          0
        </expectedValue>
        <expectedData>
          b""
        </expectedData>
        <opcodeType>
          .OpcodeType
        </opcodeType>
      </expectedOpcode>
      <expectEmit>
        <recordEvent>
          false
        </recordEvent>
        <isEventExpected>
          false
        </isEventExpected>
        <checkedTopics>
          CHECKEDTOPICS_CELL:List
        </checkedTopics>
        <checkedData>
          CHECKEDDATA_CELL:Bool
        </checkedData>
        <expectedEventAddress>
          EXPECTEDEVENTADDRESS_CELL:Account
        </expectedEventAddress>
      </expectEmit>
      <whitelist>
        <isCallWhitelistActive>
          false
        </isCallWhitelistActive>
        <isStorageWhitelistActive>
          false
        </isStorageWhitelistActive>
        <addressSet>
          .Set
        </addressSet>
        <storageSlotSet>
          .Set
        </storageSlotSet>
      </whitelist>
    </cheatcodes>
  </foundry>
  <generatedCounter>
    GENERATEDCOUNTER_CELL:Int
  </generatedCounter>
</generatedTop>
#And ( { true #Equals 0 <=Int CALLER_ID:Int }
#And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
#And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
#And ( { true #Equals CALLER_ID:Int <Int pow160 }
#And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
#And { true #Equals NUMBER_CELL:Int <=Int maxSInt256 } ) ) ) ) ) )



    
    
    

endmodule
1 Failure nodes. (1 pending and 0 failing)

Pending nodes:

ID: 1:

Join the Runtime Verification Discord server for support: https://discord.com/invite/CurfmXNtbN

Access documentation for KEVM foundry integration at https://docs.runtimeverification.com/kontrol
