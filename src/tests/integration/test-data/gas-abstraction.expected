
┌─ 1 (root, init)
│   k: #execute ~> CONTINUATION:K
│   pc: 0
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode
│
│  (683 steps)
├─ 3
│   k: #end EVMC_REVERT ~> #pc [ REVERT ] ~> #execute ~> CONTINUATION:K
│   pc: 2698
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode
│
┊  constraint: true
┊  subst: {
    CONTINUATION <- CONTINUATION:K
    EXITCODE_CELL <- EXITCODE_CELL:Int
    STATUSCODE <- STATUSCODE:StatusCode
    CALLER_ID <- CALLER_ID:Int
    VGAS <- VGAS:Int
    VGAS_4b7cee1f <- ( VGAS:Int +Int -373 )
    CALLGAS_CELL <- CALLGAS_CELL:Gas
    SELFDESTRUCT_CELL <- SELFDESTRUCT_CELL:Set
    REFUND_CELL <- REFUND_CELL:Int
    GASPRICE_CELL <- GASPRICE_CELL:Int
    ORIGIN_ID <- ORIGIN_ID:Int
    BLOCKHASHES_CELL <- BLOCKHASHES_CELL:List
    PREVIOUSHASH_CELL <- PREVIOUSHASH_CELL:Int
    OMMERSHASH_CELL <- OMMERSHASH_CELL:Int
    COINBASE_CELL <- COINBASE_CELL:Int
    STATEROOT_CELL <- STATEROOT_CELL:Int
    TRANSACTIONSROOT_CELL <- TRANSACTIONSROOT_CELL:Int
    RECEIPTSROOT_CELL <- RECEIPTSROOT_CELL:Int
    LOGSBLOOM_CELL <- LOGSBLOOM_CELL:Bytes
    DIFFICULTY_CELL <- DIFFICULTY_CELL:Int
    NUMBER_CELL <- NUMBER_CELL:Int
    GASLIMIT_CELL <- GASLIMIT_CELL:Int
    GASUSED_CELL <- GASUSED_CELL:Gas
    TIMESTAMP_CELL <- TIMESTAMP_CELL:Int
    EXTRADATA_CELL <- EXTRADATA_CELL:Bytes
    MIXHASH_CELL <- MIXHASH_CELL:Int
    BLOCKNONCE_CELL <- BLOCKNONCE_CELL:Int
    BASEFEE_CELL <- BASEFEE_CELL:Int
    WITHDRAWALSROOT_CELL <- WITHDRAWALSROOT_CELL:Int
    OMMERBLOCKHEADERS_CELL <- OMMERBLOCKHEADERS_CELL:JSON
    CHAINID_CELL <- CHAINID_CELL:Int
    TXORDER_CELL <- TXORDER_CELL:List
    TXPENDING_CELL <- TXPENDING_CELL:List
    MESSAGES_CELL <- MESSAGES_CELL:MessageCellMap
    PREVCALLER_CELL <- PREVCALLER_CELL:Account
    PREVORIGIN_CELL <- PREVORIGIN_CELL:Account
    NEWCALLER_CELL <- NEWCALLER_CELL:Account
    NEWORIGIN_CELL <- NEWORIGIN_CELL:Account
    DEPTH_CELL <- DEPTH_CELL:Int
    EXPECTEDREASON_CELL <- EXPECTEDREASON_CELL:Bytes
    EXPECTEDDEPTH_CELL <- EXPECTEDDEPTH_CELL:Int
    EXPECTEDADDRESS_CELL <- EXPECTEDADDRESS_CELL:Account
    EXPECTEDVALUE_CELL <- EXPECTEDVALUE_CELL:Int
    EXPECTEDDATA_CELL <- EXPECTEDDATA_CELL:Bytes
    OPCODETYPE_CELL <- OPCODETYPE_CELL:OpcodeType
    CHECKEDTOPICS_CELL <- CHECKEDTOPICS_CELL:List
    CHECKEDDATA_CELL <- CHECKEDDATA_CELL:Bool
    EXPECTEDEVENTADDRESS_CELL <- EXPECTEDEVENTADDRESS_CELL:Account
    GENERATEDCOUNTER_CELL <- GENERATEDCOUNTER_CELL:Int
}
├─ 4
│   k: #end EVMC_REVERT ~> #pc [ REVERT ] ~> #execute ~> CONTINUATION:K
│   pc: 2698
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode
│
│  (1 step)
├─ 5
│   k: #halt ~> #pc [ REVERT ] ~> #execute ~> CONTINUATION:K
│   pc: 2698
│   callDepth: 0
│   statusCode: EVMC_REVERT
│
│  (2 steps)
└─ 6 (leaf, terminal)
    k: #halt ~> CONTINUATION:K
    pc: 2698
    callDepth: 0
    statusCode: EVMC_REVERT


┌─ 2 (root, leaf, target, terminal)
│   k: #halt ~> CONTINUATION:K
│   pc: PC_CELL_5d410f2a:Int
│   callDepth: CALLDEPTH_CELL_5d410f2a:Int
│   statusCode: STATUSCODE_FINAL:StatusCode


Node 6:

( <generatedTop>
  <foundry>
    <kevm>
      <k>
        #halt
        ~> CONTINUATION:K
      </k>
      <exit-code>
        EXITCODE_CELL:Int
      </exit-code>
      <mode>
        NORMAL
      </mode>
      <schedule>
        SHANGHAI
      </schedule>
      <useGas>
        true
      </useGas>
      <ethereum>
        <evm>
          <output>
            b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
          </output>
          <statusCode>
            EVMC_REVERT
          </statusCode>
          <callStack>
            .List
          </callStack>
          <interimStates>
            .List
          </interimStates>
          <touchedAccounts>
            .Set
          </touchedAccounts>
          <callState>
            ...
            ...
            <id>
              728815563385977040452943777879061427756277306518
            </id>
            <caller>
              CALLER_ID:Int
            </caller>
            <callData>
              b"c\xfe\xc36"
            </callData>
            <callValue>
              0
            </callValue>
            <wordStack>
              ( 778 : ( ( VGAS:Int +Int -298 ) : ( 583 : ( 928 : ( 345 : ( ( VGAS:Int +Int -207 ) : ( 266 : ( selector ( "testInfiniteGas()" ) : .WordStack ) ) ) ) ) ) ) )
            </wordStack>
            <localMem>
              b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
            </localMem>
            ...
            ...
            <memoryUsed>
              3
            </memoryUsed>
            <callGas>
              CALLGAS_CELL:Gas
            </callGas>
            <static>
              false
            </static>
            <callDepth>
              0
            </callDepth>
          </callState>
          <substate>
            <selfDestruct>
              SELFDESTRUCT_CELL:Set
            </selfDestruct>
            <log>
              .List
            </log>
            <refund>
              REFUND_CELL:Int
            </refund>
            <accessedAccounts>
              .Set
            </accessedAccounts>
            <accessedStorage>
              .Map
            </accessedStorage>
          </substate>
          <gasPrice>
            GASPRICE_CELL:Int
          </gasPrice>
          <origin>
            ORIGIN_ID:Int
          </origin>
          <blockhashes>
            BLOCKHASHES_CELL:List
          </blockhashes>
          <block>
            <previousHash>
              PREVIOUSHASH_CELL:Int
            </previousHash>
            <ommersHash>
              OMMERSHASH_CELL:Int
            </ommersHash>
            <coinbase>
              COINBASE_CELL:Int
            </coinbase>
            <stateRoot>
              STATEROOT_CELL:Int
            </stateRoot>
            <transactionsRoot>
              TRANSACTIONSROOT_CELL:Int
            </transactionsRoot>
            <receiptsRoot>
              RECEIPTSROOT_CELL:Int
            </receiptsRoot>
            <logsBloom>
              LOGSBLOOM_CELL:Bytes
            </logsBloom>
            <difficulty>
              DIFFICULTY_CELL:Int
            </difficulty>
            <number>
              NUMBER_CELL:Int
            </number>
            <gasLimit>
              GASLIMIT_CELL:Int
            </gasLimit>
            <gasUsed>
              GASUSED_CELL:Gas
            </gasUsed>
            <timestamp>
              TIMESTAMP_CELL:Int
            </timestamp>
            <extraData>
              EXTRADATA_CELL:Bytes
            </extraData>
            <mixHash>
              MIXHASH_CELL:Int
            </mixHash>
            <blockNonce>
              BLOCKNONCE_CELL:Int
            </blockNonce>
            <baseFee>
              BASEFEE_CELL:Int
            </baseFee>
            <withdrawalsRoot>
              WITHDRAWALSROOT_CELL:Int
            </withdrawalsRoot>
            <ommerBlockHeaders>
              OMMERBLOCKHEADERS_CELL:JSON
            </ommerBlockHeaders>
          </block>
        </evm>
        <network>
          <chainID>
            CHAINID_CELL:Int
          </chainID>
          <accounts>
            ( <account>
              <acctID>
                645326474426547203313410069153905908525362434349
              </acctID>
              <balance>
                0
              </balance>
              ...
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                0
              </nonce>
            </account>
            <account>
              <acctID>
                728815563385977040452943777879061427756277306518
              </acctID>
              <balance>
                0
              </balance>
              ...
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                1
              </nonce>
            </account> )
          </accounts>
          <txOrder>
            TXORDER_CELL:List
          </txOrder>
          <txPending>
            TXPENDING_CELL:List
          </txPending>
          <messages>
            MESSAGES_CELL:MessageCellMap
          </messages>
        </network>
      </ethereum>
    </kevm>
    <cheatcodes>
      <prank>
        <prevCaller>
          PREVCALLER_CELL:Account
        </prevCaller>
        <prevOrigin>
          PREVORIGIN_CELL:Account
        </prevOrigin>
        <newCaller>
          NEWCALLER_CELL:Account
        </newCaller>
        <newOrigin>
          NEWORIGIN_CELL:Account
        </newOrigin>
        <active>
          false
        </active>
        <depth>
          DEPTH_CELL:Int
        </depth>
        <singleCall>
          false
        </singleCall>
      </prank>
      <expectedRevert>
        <isRevertExpected>
          false
        </isRevertExpected>
        <expectedReason>
          EXPECTEDREASON_CELL:Bytes
        </expectedReason>
        <expectedDepth>
          EXPECTEDDEPTH_CELL:Int
        </expectedDepth>
      </expectedRevert>
      <expectedOpcode>
        <isOpcodeExpected>
          false
        </isOpcodeExpected>
        <expectedAddress>
          EXPECTEDADDRESS_CELL:Account
        </expectedAddress>
        <expectedValue>
          EXPECTEDVALUE_CELL:Int
        </expectedValue>
        <expectedData>
          EXPECTEDDATA_CELL:Bytes
        </expectedData>
        <opcodeType>
          OPCODETYPE_CELL:OpcodeType
        </opcodeType>
      </expectedOpcode>
      <expectEmit>
        <recordEvent>
          false
        </recordEvent>
        <isEventExpected>
          false
        </isEventExpected>
        <checkedTopics>
          CHECKEDTOPICS_CELL:List
        </checkedTopics>
        <checkedData>
          CHECKEDDATA_CELL:Bool
        </checkedData>
        <expectedEventAddress>
          EXPECTEDEVENTADDRESS_CELL:Account
        </expectedEventAddress>
      </expectEmit>
      <whitelist>
        <isCallWhitelistActive>
          false
        </isCallWhitelistActive>
        <isStorageWhitelistActive>
          false
        </isStorageWhitelistActive>
        <addressSet>
          .Set
        </addressSet>
        <storageSlotSet>
          .Set
        </storageSlotSet>
      </whitelist>
    </cheatcodes>
  </foundry>
  <generatedCounter>
    GENERATEDCOUNTER_CELL:Int
  </generatedCounter>
</generatedTop>
#And ( { true #Equals 0 <=Int CALLER_ID:Int }
#And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
#And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
#And ( { true #Equals CALLER_ID:Int <Int pow160 }
#And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
#And ( { true #Equals NUMBER_CELL:Int <=Int maxSInt256 }
#And { true #Equals ( VGAS:Int +Int -298 ) <Int ( VGAS:Int +Int -207 ) } ) ) ) ) ) ) )



    
    
    rule [BASIC-BLOCK-1-TO-3]: <foundry>
           <kevm>
             <k>
               ( .K => #end EVMC_REVERT
               ~> #pc [ REVERT ] )
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               true
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( b"" => b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01" )
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   ...
                   ...
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c\xfe\xc36"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 778 : ( ( VGAS:Int +Int -298 ) : ( 583 : ( 928 : ( 345 : ( ( VGAS:Int +Int -207 ) : ( 266 : ( selector ( "testInfiniteGas()" ) : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80" )
                   </localMem>
                   ...
                   ...
                   <memoryUsed>
                     ( 0 => 3 )
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     ...
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     ...
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
               ))))))
       ensures ( VGAS:Int +Int -298 ) <Int ( VGAS:Int +Int -207 )
      [label(BASIC-BLOCK-1-TO-3)]
    
    rule [BASIC-BLOCK-4-TO-5]: <foundry>
           <kevm>
             <k>
               ( #end EVMC_REVERT => #halt )
               ~> #pc [ REVERT ]
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               true
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
                 </output>
                 <statusCode>
                   ( _STATUSCODE => EVMC_REVERT )
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   ...
                   ...
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c\xfe\xc36"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( 778 : ( ( VGAS:Int +Int -298 ) : ( 583 : ( 928 : ( 345 : ( ( VGAS:Int +Int -207 ) : ( 266 : ( selector ( "testInfiniteGas()" ) : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   ...
                   ...
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     ...
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     ...
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( ( VGAS:Int +Int -298 ) <Int ( VGAS:Int +Int -207 )
               )))))))
      [label(BASIC-BLOCK-4-TO-5)]
    
    rule [BASIC-BLOCK-5-TO-6]: <foundry>
           <kevm>
             <k>
               #halt
               ~> ( #pc [ REVERT ]
               ~> #execute => .K )
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               true
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
                 </output>
                 <statusCode>
                   EVMC_REVERT
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   ...
                   ...
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c\xfe\xc36"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( 778 : ( ( VGAS:Int +Int -298 ) : ( 583 : ( 928 : ( 345 : ( ( VGAS:Int +Int -207 ) : ( 266 : ( selector ( "testInfiniteGas()" ) : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   ...
                   ...
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     ...
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     ...
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( ( VGAS:Int +Int -298 ) <Int ( VGAS:Int +Int -207 )
               )))))))
      [label(BASIC-BLOCK-5-TO-6)]

endmodule
1 Failure nodes. (0 pending and 1 failing)

Failing nodes:

  Node id: 6
  Failure reason:
    Implication check failed, the following is the remaining implication:
    ( ( { true #Equals 0 <=Int CALLER_ID:Int }
    #And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
    #And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
    #And ( { true #Equals CALLER_ID:Int <Int pow160 }
    #And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
    #And ( { true #Equals NUMBER_CELL:Int <=Int maxSInt256 }
    #And { true #Equals ( VGAS:Int +Int -298 ) <Int ( VGAS:Int +Int -207 ) } ) ) ) ) ) ) #Implies { true #Equals foundry_success ( ... statusCode: EVMC_REVERT , failed: #lookup ( .Map , 46308022326495007027972728677917914892729792999299745830475596687180801507328 ) , revertExpected: false , opcodeExpected: false , recordEventExpected: false , eventExpected: false ) } )
  Path condition:
    #Top

Join the Runtime Verification Discord server for support: https://discord.com/invite/CurfmXNtbN

Access documentation for KEVM foundry integration at https://docs.runtimeverification.com/kontrol
