requires "foundry.md"

module AccountParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAccountParamsTestContract
    
    syntax S2KAccountParamsTestContract ::= "S2KAccountParamsTest" [symbol(), klabel(contract_AccountParamsTest)]
    
      
    
    syntax Field ::= AccountParamsTestField
    
    syntax AccountParamsTestField ::= "IS_TEST" [symbol(), klabel(field_AccountParamsTest_IS_TEST)]
    
    syntax AccountParamsTestField ::= "_failed" [symbol(), klabel(field_AccountParamsTest__failed)]
    
    syntax AccountParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AccountParamsTest_IS_SCRIPT)]
    
    syntax AccountParamsTestField ::= "stdstore" [symbol(), klabel(field_AccountParamsTest_stdstore)]
    
    rule  ( #loc ( S2KAccountParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAccountParamsTestContract "." S2KAccountParamsTestMethod [function(), symbol(), klabel(method_AccountParamsTest)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KISZUndTEST_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2Kfailed_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestDealConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestDealConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestDealSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestDealSymbolic_uint256)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestEtchConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestEtchConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestEtchSymbolic" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestEtchSymbolic_bytes)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestFailZUndGetNonceZUndfalse_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestFailZUndGetNonceZUndtrue_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestNonceSymbolic" "(" Int ":" "uint64" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestNonceSymbolic_uint64)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndGetNonceZUndfalse_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndGetNonceZUndtrue_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndNonceZUndExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndNonceZUndExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndNonceZUndNonExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndNonceZUndNonExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndgetNonceZUndunknownSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndgetNonceZUndunknownSymbolic_address)]
    
    syntax S2KAccountParamsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2Kvm_)]
    
    rule  ( S2KAccountParamsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestDealConcrete ( ) => #abiCallData ( "testDealConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestDealSymbolic ( V0_value : uint256 ) => #abiCallData ( "testDealSymbolic" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KAccountParamsTest . S2KtestEtchConcrete ( ) => #abiCallData ( "testEtchConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestEtchSymbolic ( V0_code : bytes ) => #abiCallData ( "testEtchSymbolic" , #bytes ( V0_code ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_code ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestFailZUndGetNonceZUndfalse ( ) => #abiCallData ( "testFail_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestFailZUndGetNonceZUndtrue ( ) => #abiCallData ( "testFail_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestNonceSymbolic ( V0_newNonce : uint64 ) => #abiCallData ( "testNonceSymbolic" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndGetNonceZUndfalse ( ) => #abiCallData ( "test_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndGetNonceZUndtrue ( ) => #abiCallData ( "test_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndNonceZUndExistentAddress ( ) => #abiCallData ( "test_Nonce_ExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndNonceZUndNonExistentAddress ( ) => #abiCallData ( "test_Nonce_NonExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndgetNonceZUndunknownSymbolic ( V0_addr : address ) => #abiCallData ( "test_getNonce_unknownSymbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KAccountParamsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testDealConcrete()" ) => 530093250 )
      
    
    rule  ( selector ( "testDealSymbolic(uint256)" ) => 2584982624 )
      
    
    rule  ( selector ( "testEtchConcrete()" ) => 807503996 )
      
    
    rule  ( selector ( "testEtchSymbolic(bytes)" ) => 2109411263 )
      
    
    rule  ( selector ( "testFail_GetNonce_false()" ) => 2393877859 )
      
    
    rule  ( selector ( "testFail_GetNonce_true()" ) => 1067907152 )
      
    
    rule  ( selector ( "testNonceSymbolic(uint64)" ) => 1310260491 )
      
    
    rule  ( selector ( "test_GetNonce_false()" ) => 3545243759 )
      
    
    rule  ( selector ( "test_GetNonce_true()" ) => 3968101798 )
      
    
    rule  ( selector ( "test_Nonce_ExistentAddress()" ) => 1598387740 )
      
    
    rule  ( selector ( "test_Nonce_NonExistentAddress()" ) => 2985064833 )
      
    
    rule  ( selector ( "test_getNonce_unknownSymbolic(address)" ) => 3941547284 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AddrTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAddrTestContract
    
    syntax S2KAddrTestContract ::= "S2KAddrTest" [symbol(), klabel(contract_AddrTest)]
    
      
    
    syntax Field ::= AddrTestField
    
    syntax AddrTestField ::= "IS_TEST" [symbol(), klabel(field_AddrTest_IS_TEST)]
    
    syntax AddrTestField ::= "_failed" [symbol(), klabel(field_AddrTest__failed)]
    
    syntax AddrTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AddrTest_IS_SCRIPT)]
    
    syntax AddrTestField ::= "stdstore" [symbol(), klabel(field_AddrTest_stdstore)]
    
    rule  ( #loc ( S2KAddrTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAddrTestContract "." S2KAddrTestMethod [function(), symbol(), klabel(method_AddrTest)]
    
    syntax S2KAddrTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AddrTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAddrTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AddrTest_S2KISZUndTEST_)]
    
    syntax S2KAddrTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AddrTest_S2Kfailed_)]
    
    syntax S2KAddrTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AddrTest_S2Kkevm_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestFailZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestFailZUndaddrZUndfalse_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestFailZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestFailZUndaddrZUndtrue_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndfalse_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndsymbolic_uint256)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndtrue_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndbuiltInAddresses" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndbuiltInAddresses_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndconcrete" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndnotBuiltinAddressZUndconcrete_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndsymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndnotBuiltinAddressZUndsymbolic_address)]
    
    syntax S2KAddrTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AddrTest_S2Kvm_)]
    
    rule  ( S2KAddrTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestFailZUndaddrZUndfalse ( ) => #abiCallData ( "testFail_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestFailZUndaddrZUndtrue ( ) => #abiCallData ( "testFail_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndfalse ( ) => #abiCallData ( "test_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "test_addr_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndtrue ( ) => #abiCallData ( "test_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndbuiltInAddresses ( ) => #abiCallData ( "test_builtInAddresses" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndnotBuiltinAddressZUndconcrete ( ) => #abiCallData ( "test_notBuiltinAddress_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndnotBuiltinAddressZUndsymbolic ( V0_addr : address ) => #abiCallData ( "test_notBuiltinAddress_symbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KAddrTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testFail_addr_false()" ) => 3302866643 )
      
    
    rule  ( selector ( "testFail_addr_true()" ) => 2486005453 )
      
    
    rule  ( selector ( "test_addr_false()" ) => 4124294109 )
      
    
    rule  ( selector ( "test_addr_symbolic(uint256)" ) => 3071220939 )
      
    
    rule  ( selector ( "test_addr_true()" ) => 809049819 )
      
    
    rule  ( selector ( "test_builtInAddresses()" ) => 3220291840 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_concrete()" ) => 2409208231 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_symbolic(address)" ) => 2160641203 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AllowChangesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAllowChangesTestContract
    
    syntax S2KAllowChangesTestContract ::= "S2KAllowChangesTest" [symbol(), klabel(contract_AllowChangesTest)]
    
      
    
    syntax Field ::= AllowChangesTestField
    
    syntax AllowChangesTestField ::= "IS_TEST" [symbol(), klabel(field_AllowChangesTest_IS_TEST)]
    
    syntax AllowChangesTestField ::= "_failed" [symbol(), klabel(field_AllowChangesTest__failed)]
    
    syntax AllowChangesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AllowChangesTest_IS_SCRIPT)]
    
    syntax AllowChangesTestField ::= "stdstore" [symbol(), klabel(field_AllowChangesTest_stdstore)]
    
    rule  ( #loc ( S2KAllowChangesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAllowChangesTestContract "." S2KAllowChangesTestMethod [function(), symbol(), klabel(method_AllowChangesTest)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KISZUndTEST_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kfailed_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kkevm_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Ktest" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Ktest_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestAllow" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestAllow_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestAllowZUndfail" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestAllowZUndfail_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestFailAllowCallsToAddress" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestFailAllowCallsToAddress_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestFailAllowChangesToStorage" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestFailAllowChangesToStorage_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kvm_)]
    
    rule  ( S2KAllowChangesTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Ktest ( ) => #abiCallData ( "test" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestAllow ( ) => #abiCallData ( "testAllow" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestAllowZUndfail ( ) => #abiCallData ( "testAllow_fail" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestFailAllowCallsToAddress ( ) => #abiCallData ( "testFailAllowCallsToAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestFailAllowChangesToStorage ( ) => #abiCallData ( "testFailAllowChangesToStorage" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "test()" ) => 4171824493 )
      
    
    rule  ( selector ( "testAllow()" ) => 3693132891 )
      
    
    rule  ( selector ( "testAllow_fail()" ) => 4129570225 )
      
    
    rule  ( selector ( "testFailAllowCallsToAddress()" ) => 1262828121 )
      
    
    rule  ( selector ( "testFailAllowChangesToStorage()" ) => 1529992487 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ValueStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KValueStoreContract
    
    syntax S2KValueStoreContract ::= "S2KValueStore" [symbol(), klabel(contract_ValueStore)]
    
      
    
    syntax Field ::= ValueStoreField
    
    syntax ValueStoreField ::= "value1" [symbol(), klabel(field_ValueStore_value1)]
    
    syntax ValueStoreField ::= "value2" [symbol(), klabel(field_ValueStore_value2)]
    
    rule  ( #loc ( S2KValueStore . value1 ) => 0 )
      
    
    rule  ( #loc ( S2KValueStore . value2 ) => 1 )
      
    
    syntax Bytes ::= S2KValueStoreContract "." S2KValueStoreMethod [function(), symbol(), klabel(method_ValueStore)]
    
    syntax S2KValueStoreMethod ::= "S2KchangeValue1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_S2KchangeValue1_uint256)]
    
    syntax S2KValueStoreMethod ::= "S2KchangeValue2" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_S2KchangeValue2_uint256)]
    
    syntax S2KValueStoreMethod ::= "S2Kvalue1" "(" ")" [symbol(), klabel(method_ValueStore_S2Kvalue1_)]
    
    syntax S2KValueStoreMethod ::= "S2Kvalue2" "(" ")" [symbol(), klabel(method_ValueStore_S2Kvalue2_)]
    
    rule  ( S2KValueStore . S2KchangeValue1 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue1" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . S2KchangeValue2 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue2" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . S2Kvalue1 ( ) => #abiCallData ( "value1" , .TypedArgs ) )
      
    
    rule  ( S2KValueStore . S2Kvalue2 ( ) => #abiCallData ( "value2" , .TypedArgs ) )
      
    
    rule  ( selector ( "changeValue1(uint256)" ) => 1634438405 )
      
    
    rule  ( selector ( "changeValue2(uint256)" ) => 367426214 )
      
    
    rule  ( selector ( "value1()" ) => 808665403 )
      
    
    rule  ( selector ( "value2()" ) => 1563665023 )
      

endmodule

module ArithmeticTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KArithmeticTestContract
    
    syntax S2KArithmeticTestContract ::= "S2KArithmeticTest" [symbol(), klabel(contract_ArithmeticTest)]
    
      
    
    syntax Field ::= ArithmeticTestField
    
    syntax ArithmeticTestField ::= "IS_TEST" [symbol(), klabel(field_ArithmeticTest_IS_TEST)]
    
    syntax ArithmeticTestField ::= "_failed" [symbol(), klabel(field_ArithmeticTest__failed)]
    
    syntax ArithmeticTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ArithmeticTest_IS_SCRIPT)]
    
    syntax ArithmeticTestField ::= "stdstore" [symbol(), klabel(field_ArithmeticTest_stdstore)]
    
    rule  ( #loc ( S2KArithmeticTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KArithmeticTestContract "." S2KArithmeticTestMethod [function(), symbol(), klabel(method_ArithmeticTest)]
    
    syntax S2KArithmeticTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KISZUndSCRIPT_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KISZUndTEST_)]
    
    syntax S2KArithmeticTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2Kfailed_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUnddecreasingZUnddiv" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUnddecreasingZUnddiv_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax1" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax1_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax1ZUndbroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax1ZUndbroken_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax2" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax2_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwdivZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwdivZUndrounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasing" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasing_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndgtZUndone" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndgtZUndone_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndoverflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndoverflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndpositive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndrounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverse_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2Kvm_)]
    
    rule  ( S2KArithmeticTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtestZUnddecreasingZUnddiv ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_decreasing_div" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax1 ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax1ZUndbroken ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1_broken" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax2 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_max2" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwdivZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wdiv_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasing ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndgtZUndone ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_gt_one" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndoverflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_overflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse_underflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_weakly_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_decreasing_div(uint256,uint256)" ) => 1011519306 )
      
    
    rule  ( selector ( "test_max1(uint256,uint256)" ) => 1625765100 )
      
    
    rule  ( selector ( "test_max1_broken(uint256,uint256)" ) => 2809107068 )
      
    
    rule  ( selector ( "test_max2(uint256,uint256)" ) => 434746443 )
      
    
    rule  ( selector ( "test_wdiv_rounding(uint256,uint256)" ) => 345004095 )
      
    
    rule  ( selector ( "test_wmul_increasing(uint256,uint256)" ) => 2784670501 )
      
    
    rule  ( selector ( "test_wmul_increasing_gt_one(uint256,uint256)" ) => 899022695 )
      
    
    rule  ( selector ( "test_wmul_increasing_overflow(uint256,uint256)" ) => 1123042280 )
      
    
    rule  ( selector ( "test_wmul_increasing_positive(uint256,uint256)" ) => 490103800 )
      
    
    rule  ( selector ( "test_wmul_rounding(uint256,uint256)" ) => 4261140569 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse(uint256,uint256)" ) => 3719613508 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse_underflow(uint256,uint256)" ) => 2736038219 )
      
    
    rule  ( selector ( "test_wmul_weakly_increasing_positive(uint256,uint256)" ) => 1421647895 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AssumeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssumeTestContract
    
    syntax S2KAssumeTestContract ::= "S2KAssumeTest" [symbol(), klabel(contract_AssumeTest)]
    
      
    
    syntax Field ::= AssumeTestField
    
    syntax AssumeTestField ::= "IS_TEST" [symbol(), klabel(field_AssumeTest_IS_TEST)]
    
    syntax AssumeTestField ::= "_failed" [symbol(), klabel(field_AssumeTest__failed)]
    
    syntax AssumeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssumeTest_IS_SCRIPT)]
    
    syntax AssumeTestField ::= "stdstore" [symbol(), klabel(field_AssumeTest_stdstore)]
    
    rule  ( #loc ( S2KAssumeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAssumeTestContract "." S2KAssumeTestMethod [function(), symbol(), klabel(method_AssumeTest)]
    
    syntax S2KAssumeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AssumeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAssumeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AssumeTest_S2KISZUndTEST_)]
    
    syntax S2KAssumeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AssumeTest_S2Kfailed_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestFailZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestFailZUndassumeZUndfalse_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestFailZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestFailZUndassumeZUndtrue_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndfalse_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndstaticCall" "(" Int ":" "bool" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndstaticCall_bool)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndtrue_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndmultiZUndassume" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndmultiZUndassume_address_address)]
    
    syntax S2KAssumeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AssumeTest_S2Kvm_)]
    
    rule  ( S2KAssumeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtestFailZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestFailZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndstaticCall ( V0_a : bool ) => #abiCallData ( "test_assume_staticCall" , #bool ( V0_a ) , .TypedArgs ) )
       ensures #rangeBool ( V0_a )
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndmultiZUndassume ( V0_alice : address , V1_bob : address ) => #abiCallData ( "test_multi_assume" , #address ( V0_alice ) , #address ( V1_bob ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_alice )
       andBool ( #rangeAddress ( V1_bob )
               ))
      
    
    rule  ( S2KAssumeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_assume_false(uint256,uint256)" ) => 1596879099 )
      
    
    rule  ( selector ( "testFail_assume_true(uint256,uint256)" ) => 246830810 )
      
    
    rule  ( selector ( "test_assume_false(uint256,uint256)" ) => 3827036084 )
      
    
    rule  ( selector ( "test_assume_staticCall(bool)" ) => 1479621703 )
      
    
    rule  ( selector ( "test_assume_true(uint256,uint256)" ) => 1861181564 )
      
    
    rule  ( selector ( "test_multi_assume(address,address)" ) => 2625007844 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BMCLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBMCLoopsTestContract
    
    syntax S2KBMCLoopsTestContract ::= "S2KBMCLoopsTest" [symbol(), klabel(contract_BMCLoopsTest)]
    
      
    
    syntax Field ::= BMCLoopsTestField
    
    syntax BMCLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_BMCLoopsTest_IS_TEST)]
    
    syntax BMCLoopsTestField ::= "_failed" [symbol(), klabel(field_BMCLoopsTest__failed)]
    
    syntax BMCLoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BMCLoopsTest_IS_SCRIPT)]
    
    syntax BMCLoopsTestField ::= "stdstore" [symbol(), klabel(field_BMCLoopsTest_stdstore)]
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KBMCLoopsTestContract "." S2KBMCLoopsTestMethod [function(), symbol(), klabel(method_BMCLoopsTest)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KISZUndTEST_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2Kfailed_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndbmc" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndbmc_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndconcrete" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndcountdownZUndconcrete_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndcountdownZUndsymbolic_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2Kvm_)]
    
    rule  ( S2KBMCLoopsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndbmc ( V0_n : uint256 ) => #abiCallData ( "test_bmc" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndcountdownZUndconcrete ( ) => #abiCallData ( "test_countdown_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndcountdownZUndsymbolic ( V0_n : uint256 ) => #abiCallData ( "test_countdown_symbolic" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_bmc(uint256)" ) => 2531276689 )
      
    
    rule  ( selector ( "test_countdown_concrete()" ) => 1189516988 )
      
    
    rule  ( selector ( "test_countdown_symbolic(uint256)" ) => 3183316184 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BlockParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBlockParamsTestContract
    
    syntax S2KBlockParamsTestContract ::= "S2KBlockParamsTest" [symbol(), klabel(contract_BlockParamsTest)]
    
      
    
    syntax Field ::= BlockParamsTestField
    
    syntax BlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestField ::= "_failed" [symbol(), klabel(field_BlockParamsTest__failed)]
    
    syntax BlockParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestField ::= "stdstore" [symbol(), klabel(field_BlockParamsTest_stdstore)]
    
    rule  ( #loc ( S2KBlockParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KBlockParamsTestContract "." S2KBlockParamsTestMethod [function(), symbol(), klabel(method_BlockParamsTest)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KISZUndTEST_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2Kfailed_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestBlockNumber" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestBlockNumber_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestChainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestChainId_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestCoinBase" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestCoinBase_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestFee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestFee_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestRoll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestRoll_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestWarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestWarp_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2Kvm_)]
    
    rule  ( S2KBlockParamsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestBlockNumber ( ) => #abiCallData ( "testBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestChainId ( V0_newChainId : uint256 ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KBlockParamsTest . S2KtestCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestFee ( V0_newFee : uint256 ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( S2KBlockParamsTest . S2KtestRoll ( V0_newHeight : uint256 ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KBlockParamsTest . S2KtestWarp ( V0_time : uint256 ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( S2KBlockParamsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testBlockNumber()" ) => 3916490861 )
      
    
    rule  ( selector ( "testChainId(uint256)" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase()" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee(uint256)" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll(uint256)" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp(uint256)" ) => 1957961066 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BroadcastTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBroadcastTestContract
    
    syntax S2KBroadcastTestContract ::= "S2KBroadcastTest" [symbol(), klabel(contract_BroadcastTest)]
    
      
    
    syntax Field ::= BroadcastTestField
    
    syntax BroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestField ::= "_failed" [symbol(), klabel(field_BroadcastTest__failed)]
    
    syntax BroadcastTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestField ::= "stdstore" [symbol(), klabel(field_BroadcastTest_stdstore)]
    
    syntax BroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_BroadcastTest_ACCOUNT_A)]
    
    syntax BroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_BroadcastTest_ACCOUNT_B)]
    
    rule  ( #loc ( S2KBroadcastTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_A ) => 8 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_B ) => 9 )
      
    
    syntax Bytes ::= S2KBroadcastTestContract "." S2KBroadcastTestMethod [function(), symbol(), klabel(method_BroadcastTest)]
    
    syntax S2KBroadcastTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KISZUndSCRIPT_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KISZUndTEST_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KdeployNoArgs" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KdeployNoArgs_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KdeployOther" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KdeployOther_)]
    
    syntax S2KBroadcastTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BroadcastTest_S2Kfailed_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KsetUp_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtestDeploy" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtestDeploy_)]
    
    syntax S2KBroadcastTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_BroadcastTest_S2Kvm_)]
    
    rule  ( S2KBroadcastTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KdeployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KdeployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtestDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs()" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther()" ) => 4254441026 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testDeploy()" ) => 894117685 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Constants-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KConstantsContract
    
    syntax S2KConstantsContract ::= "S2KConstants" [symbol(), klabel(contract_Constants)]
    
      

endmodule

module Contract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractContract
    
    syntax S2KContractContract ::= "S2KContract" [symbol(), klabel(contract_Contract)]
    
      

endmodule

module ContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractTestContract
    
    syntax S2KContractTestContract ::= "S2KContractTest" [symbol(), klabel(contract_ContractTest)]
    
      
    
    syntax Field ::= ContractTestField
    
    syntax ContractTestField ::= "IS_TEST" [symbol(), klabel(field_ContractTest_IS_TEST)]
    
    syntax ContractTestField ::= "_failed" [symbol(), klabel(field_ContractTest__failed)]
    
    syntax ContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestField ::= "stdstore" [symbol(), klabel(field_ContractTest_stdstore)]
    
    rule  ( #loc ( S2KContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KContractTestContract "." S2KContractTestMethod [function(), symbol(), klabel(method_ContractTest)]
    
    syntax S2KContractTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ContractTest_S2KISZUndSCRIPT_)]
    
    syntax S2KContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ContractTest_S2KISZUndTEST_)]
    
    syntax S2KContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ContractTest_S2Kfailed_)]
    
    syntax S2KContractTestMethod ::= "S2KtestExample" "(" ")" [symbol(), klabel(method_ContractTest_S2KtestExample_)]
    
    syntax S2KContractTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ContractTest_S2Kvm_)]
    
    rule  ( S2KContractTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtestExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testExample()" ) => 1062881834 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ContractBTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractBTestContract
    
    syntax S2KContractBTestContract ::= "S2KContractBTest" [symbol(), klabel(contract_ContractBTest)]
    
      
    
    syntax Field ::= ContractBTestField
    
    syntax ContractBTestField ::= "IS_TEST" [symbol(), klabel(field_ContractBTest_IS_TEST)]
    
    syntax ContractBTestField ::= "_failed" [symbol(), klabel(field_ContractBTest__failed)]
    
    syntax ContractBTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestField ::= "stdstore" [symbol(), klabel(field_ContractBTest_stdstore)]
    
    syntax ContractBTestField ::= "testNumber" [symbol(), klabel(field_ContractBTest_testNumber)]
    
    rule  ( #loc ( S2KContractBTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KContractBTest . testNumber ) => 8 )
      
    
    syntax Bytes ::= S2KContractBTestContract "." S2KContractBTestMethod [function(), symbol(), klabel(method_ContractBTest)]
    
    syntax S2KContractBTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ContractBTest_S2KISZUndSCRIPT_)]
    
    syntax S2KContractBTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ContractBTest_S2KISZUndTEST_)]
    
    syntax S2KContractBTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ContractBTest_S2Kfailed_)]
    
    syntax S2KContractBTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_ContractBTest_S2KsetUp_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestCannotSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestCannotSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestFailSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestFailSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestNumberIs42" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestNumberIs42_)]
    
    syntax S2KContractBTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ContractBTest_S2Kvm_)]
    
    rule  ( S2KContractBTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testCannotSubtract43()" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43()" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42()" ) => 795542700 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Counter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterContract
    
    syntax S2KCounterContract ::= "S2KCounter" [symbol(), klabel(contract_Counter)]
    
      
    
    syntax Field ::= CounterField
    
    syntax CounterField ::= "number" [symbol(), klabel(field_Counter_number)]
    
    rule  ( #loc ( S2KCounter . number ) => 0 )
      
    
    syntax Bytes ::= S2KCounterContract "." S2KCounterMethod [function(), symbol(), klabel(method_Counter)]
    
    syntax S2KCounterMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_Counter_S2Kincrement_)]
    
    syntax S2KCounterMethod ::= "S2Knumber" "(" ")" [symbol(), klabel(method_Counter_S2Knumber_)]
    
    syntax S2KCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Counter_S2KsetNumber_uint256)]
    
    rule  ( S2KCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . S2KsetNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , #uint256 ( V0_newNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newNumber )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )
      

endmodule

module CounterTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterTestContract
    
    syntax S2KCounterTestContract ::= "S2KCounterTest" [symbol(), klabel(contract_CounterTest)]
    
      
    
    syntax Field ::= CounterTestField
    
    syntax CounterTestField ::= "IS_TEST" [symbol(), klabel(field_CounterTest_IS_TEST)]
    
    syntax CounterTestField ::= "_failed" [symbol(), klabel(field_CounterTest__failed)]
    
    syntax CounterTestField ::= "IS_SCRIPT" [symbol(), klabel(field_CounterTest_IS_SCRIPT)]
    
    syntax CounterTestField ::= "stdstore" [symbol(), klabel(field_CounterTest_stdstore)]
    
    syntax CounterTestField ::= "counter" [symbol(), klabel(field_CounterTest_counter)]
    
    rule  ( #loc ( S2KCounterTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KCounterTest . counter ) => 8 )
      
    
    syntax Bytes ::= S2KCounterTestContract "." S2KCounterTestMethod [function(), symbol(), klabel(method_CounterTest)]
    
    syntax S2KCounterTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_CounterTest_S2KISZUndSCRIPT_)]
    
    syntax S2KCounterTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_CounterTest_S2KISZUndTEST_)]
    
    syntax S2KCounterTestMethod ::= "S2Kcounter" "(" ")" [symbol(), klabel(method_CounterTest_S2Kcounter_)]
    
    syntax S2KCounterTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_CounterTest_S2Kfailed_)]
    
    syntax S2KCounterTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_CounterTest_S2Kkevm_)]
    
    syntax S2KCounterTestMethod ::= "S2KtestIncrement" "(" ")" [symbol(), klabel(method_CounterTest_S2KtestIncrement_)]
    
    syntax S2KCounterTestMethod ::= "S2KtestSetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_CounterTest_S2KtestSetNumber_uint256)]
    
    syntax S2KCounterTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_CounterTest_S2Kvm_)]
    
    rule  ( S2KCounterTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kcounter ( ) => #abiCallData ( "counter" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtestIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtestSetNumber ( V0_x : uint256 ) => #abiCallData ( "testSetNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KCounterTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "counter()" ) => 1639719450 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testIncrement()" ) => 3105072586 )
      
    
    rule  ( selector ( "testSetNumber(uint256)" ) => 1895400894 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module DynamicTypes-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDynamicTypesContract
    
    syntax S2KDynamicTypesContract ::= "S2KDynamicTypes" [symbol(), klabel(contract_DynamicTypes)]
    
      
    
    syntax Field ::= DynamicTypesField
    
    syntax DynamicTypesField ::= "IS_TEST" [symbol(), klabel(field_DynamicTypes_IS_TEST)]
    
    syntax DynamicTypesField ::= "_failed" [symbol(), klabel(field_DynamicTypes__failed)]
    
    syntax DynamicTypesField ::= "IS_SCRIPT" [symbol(), klabel(field_DynamicTypes_IS_SCRIPT)]
    
    syntax DynamicTypesField ::= "stdstore" [symbol(), klabel(field_DynamicTypes_stdstore)]
    
    rule  ( #loc ( S2KDynamicTypes . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KDynamicTypesContract "." S2KDynamicTypesMethod [function(), symbol(), klabel(method_DynamicTypes)]
    
    syntax S2KDynamicTypesMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KISZUndSCRIPT_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KISZUndTEST_)]
    
    syntax S2KDynamicTypesMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DynamicTypes_S2Kfailed_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtestZUnddynamicZUndbyteZUndread" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_DynamicTypes_S2KtestZUnddynamicZUndbyteZUndread_bytes_uint256)]
    
    syntax S2KDynamicTypesMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_DynamicTypes_S2Kvm_)]
    
    rule  ( S2KDynamicTypes . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtestZUnddynamicZUndbyteZUndread ( V0_data : bytes , V1_offset : uint256 ) => #abiCallData ( "test_dynamic_byte_read" , #bytes ( V0_data ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_data ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( S2KDynamicTypes . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_dynamic_byte_read(bytes,uint256)" ) => 4003228173 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ExpectEmit-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectEmitContract
    
    syntax S2KExpectEmitContract ::= "S2KExpectEmit" [symbol(), klabel(contract_ExpectEmit)]
    
      
    
    syntax Bytes ::= S2KExpectEmitContract "." S2KExpectEmitMethod [function(), symbol(), klabel(method_ExpectEmit)]
    
    syntax S2KExpectEmitMethod ::= "S2Kt" "(" ")" [symbol(), klabel(method_ExpectEmit_S2Kt_)]
    
    rule  ( S2KExpectEmit . S2Kt ( ) => #abiCallData ( "t" , .TypedArgs ) )
      
    
    rule  ( selector ( "t()" ) => 2463158611 )
      

endmodule

module EmitContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEmitContractTestContract
    
    syntax S2KEmitContractTestContract ::= "S2KEmitContractTest" [symbol(), klabel(contract_EmitContractTest)]
    
      
    
    syntax Field ::= EmitContractTestField
    
    syntax EmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestField ::= "_failed" [symbol(), klabel(field_EmitContractTest__failed)]
    
    syntax EmitContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestField ::= "stdstore" [symbol(), klabel(field_EmitContractTest_stdstore)]
    
    rule  ( #loc ( S2KEmitContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KEmitContractTestContract "." S2KEmitContractTestMethod [function(), symbol(), klabel(method_EmitContractTest)]
    
    syntax S2KEmitContractTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KISZUndSCRIPT_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KISZUndTEST_)]
    
    syntax S2KEmitContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_EmitContractTest_S2Kfailed_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmit" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmit_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmitCheckEmitter" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmitCheckEmitter_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmitDoNotCheckData" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmitDoNotCheckData_)]
    
    syntax S2KEmitContractTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_EmitContractTest_S2Kvm_)]
    
    rule  ( S2KEmitContractTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testExpectEmit()" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter()" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData()" ) => 4244930061 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module EnvTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEnvTestContract
    
    syntax S2KEnvTestContract ::= "S2KEnvTest" [symbol(), klabel(contract_EnvTest)]
    
      
    
    syntax Field ::= EnvTestField
    
    syntax EnvTestField ::= "IS_TEST" [symbol(), klabel(field_EnvTest_IS_TEST)]
    
    syntax EnvTestField ::= "_failed" [symbol(), klabel(field_EnvTest__failed)]
    
    syntax EnvTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestField ::= "stdstore" [symbol(), klabel(field_EnvTest_stdstore)]
    
    rule  ( #loc ( S2KEnvTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KEnvTestContract "." S2KEnvTestMethod [function(), symbol(), klabel(method_EnvTest)]
    
    syntax S2KEnvTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_EnvTest_S2KISZUndSCRIPT_)]
    
    syntax S2KEnvTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_EnvTest_S2KISZUndTEST_)]
    
    syntax S2KEnvTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_EnvTest_S2Kfailed_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvAddress" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvAddress_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvAddresseArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvAddresseArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBool" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBool_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBoolArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBoolArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes32" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes32_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes32Array" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes32Array_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytesArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytesArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvInt" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvInt_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvIntArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvIntArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvString" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvString_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvStringArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvStringArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvUInt" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvUInt_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvUIntArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvUIntArray_)]
    
    syntax S2KEnvTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_EnvTest_S2Kvm_)]
    
    rule  ( S2KEnvTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testEnvAddress()" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray()" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool()" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray()" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes()" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32()" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array()" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray()" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt()" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray()" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString()" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray()" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt()" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray()" ) => 551796351 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Dummy-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDummyContract
    
    syntax S2KDummyContract ::= "S2KDummy" [symbol(), klabel(contract_Dummy)]
    
      
    
    syntax Bytes ::= S2KDummyContract "." S2KDummyMethod [function(), symbol(), klabel(method_Dummy)]
    
    syntax S2KDummyMethod ::= "S2KnumberA" "(" ")" [symbol(), klabel(method_Dummy_S2KnumberA_)]
    
    rule  ( S2KDummy . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )
      
    
    rule  ( selector ( "numberA()" ) => 2571869527 )
      

endmodule

module ExpectCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectCallTestContract
    
    syntax S2KExpectCallTestContract ::= "S2KExpectCallTest" [symbol(), klabel(contract_ExpectCallTest)]
    
      
    
    syntax Field ::= ExpectCallTestField
    
    syntax ExpectCallTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectCallTest_IS_TEST)]
    
    syntax ExpectCallTestField ::= "_failed" [symbol(), klabel(field_ExpectCallTest__failed)]
    
    syntax ExpectCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ExpectCallTest_IS_SCRIPT)]
    
    syntax ExpectCallTestField ::= "stdstore" [symbol(), klabel(field_ExpectCallTest_stdstore)]
    
    rule  ( #loc ( S2KExpectCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KExpectCallTestContract "." S2KExpectCallTestMethod [function(), symbol(), klabel(method_ExpectCallTest)]
    
    syntax S2KExpectCallTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KISZUndSCRIPT_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KISZUndTEST_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kfailed_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kkevm_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtestExpectRegularCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtestExpectRegularCall_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtestExpectStaticCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtestExpectStaticCall_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kvm_)]
    
    rule  ( S2KExpectCallTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtestExpectRegularCall ( ) => #abiCallData ( "testExpectRegularCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtestExpectStaticCall ( ) => #abiCallData ( "testExpectStaticCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testExpectRegularCall()" ) => 676731872 )
      
    
    rule  ( selector ( "testExpectStaticCall()" ) => 3219733999 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module DepthReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDepthReverterContract
    
    syntax S2KDepthReverterContract ::= "S2KDepthReverter" [symbol(), klabel(contract_DepthReverter)]
    
      
    
    syntax Field ::= DepthReverterField
    
    syntax DepthReverterField ::= "reverter" [symbol(), klabel(field_DepthReverter_reverter)]
    
    rule  ( #loc ( S2KDepthReverter . reverter ) => 0 )
      
    
    syntax Bytes ::= S2KDepthReverterContract "." S2KDepthReverterMethod [function(), symbol(), klabel(method_DepthReverter)]
    
    syntax S2KDepthReverterMethod ::= "S2KrevertAtNextDepth" "(" ")" [symbol(), klabel(method_DepthReverter_S2KrevertAtNextDepth_)]
    
    rule  ( S2KDepthReverter . S2KrevertAtNextDepth ( ) => #abiCallData ( "revertAtNextDepth" , .TypedArgs ) )
      
    
    rule  ( selector ( "revertAtNextDepth()" ) => 332278727 )
      

endmodule

module ExpectRevertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectRevertTestContract
    
    syntax S2KExpectRevertTestContract ::= "S2KExpectRevertTest" [symbol(), klabel(contract_ExpectRevertTest)]
    
      
    
    syntax Field ::= ExpectRevertTestField
    
    syntax ExpectRevertTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectRevertTest_IS_TEST)]
    
    syntax ExpectRevertTestField ::= "_failed" [symbol(), klabel(field_ExpectRevertTest__failed)]
    
    syntax ExpectRevertTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ExpectRevertTest_IS_SCRIPT)]
    
    syntax ExpectRevertTestField ::= "stdstore" [symbol(), klabel(field_ExpectRevertTest_stdstore)]
    
    rule  ( #loc ( S2KExpectRevertTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KExpectRevertTestContract "." S2KExpectRevertTestMethod [function(), symbol(), klabel(method_ExpectRevertTest)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KISZUndSCRIPT_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KISZUndTEST_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2Kfailed_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndExpectRevertZUndfailAndSuccess" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndExpectRevertZUndfailAndSuccess_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndbytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndempty" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndempty_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndfalse" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndfalse_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndmultipleReverts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndmultipleReverts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndExpectRevertZUndincreasedDepth" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndExpectRevertZUndincreasedDepth_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndbytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndencodedSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndencodedSymbolic_address)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinternalCall" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndinternalCall_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndmessage" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndmessage_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndreturnValue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndreturnValue_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndtrue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndtrue_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2Kvm_)]
    
    rule  ( S2KExpectRevertTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndExpectRevertZUndfailAndSuccess ( ) => #abiCallData ( "testFail_ExpectRevert_failAndSuccess" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "testFail_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndempty ( ) => #abiCallData ( "testFail_expectRevert_empty" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndfalse ( ) => #abiCallData ( "testFail_expectRevert_false" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndmultipleReverts ( ) => #abiCallData ( "testFail_expectRevert_multipleReverts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndExpectRevertZUndincreasedDepth ( ) => #abiCallData ( "test_ExpectRevert_increasedDepth" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "test_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndencodedSymbolic ( V0_controller : address ) => #abiCallData ( "test_expectRevert_encodedSymbolic" , #address ( V0_controller ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndinternalCall ( ) => #abiCallData ( "test_expectRevert_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndmessage ( ) => #abiCallData ( "test_expectRevert_message" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndreturnValue ( ) => #abiCallData ( "test_expectRevert_returnValue" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndtrue ( ) => #abiCallData ( "test_expectRevert_true" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_ExpectRevert_failAndSuccess()" ) => 2386222785 )
      
    
    rule  ( selector ( "testFail_expectRevert_bytes4()" ) => 3540765930 )
      
    
    rule  ( selector ( "testFail_expectRevert_empty()" ) => 3691097669 )
      
    
    rule  ( selector ( "testFail_expectRevert_false()" ) => 2152588325 )
      
    
    rule  ( selector ( "testFail_expectRevert_multipleReverts()" ) => 2539873268 )
      
    
    rule  ( selector ( "test_ExpectRevert_increasedDepth()" ) => 910856553 )
      
    
    rule  ( selector ( "test_expectRevert_bytes4()" ) => 1300765909 )
      
    
    rule  ( selector ( "test_expectRevert_encodedSymbolic(address)" ) => 27292786 )
      
    
    rule  ( selector ( "test_expectRevert_internalCall()" ) => 1766536967 )
      
    
    rule  ( selector ( "test_expectRevert_message()" ) => 3706733127 )
      
    
    rule  ( selector ( "test_expectRevert_returnValue()" ) => 4193569282 )
      
    
    rule  ( selector ( "test_expectRevert_true()" ) => 2931127071 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Reverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterContract
    
    syntax S2KReverterContract ::= "S2KReverter" [symbol(), klabel(contract_Reverter)]
    
      
    
    syntax Bytes ::= S2KReverterContract "." S2KReverterMethod [function(), symbol(), klabel(method_Reverter)]
    
    syntax S2KReverterMethod ::= "S2KnoRevert" "(" ")" [symbol(), klabel(method_Reverter_S2KnoRevert_)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithReason" "(" String ":" "string" ")" [symbol(), klabel(method_Reverter_S2KrevertWithReason_string)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithoutReason" "(" ")" [symbol(), klabel(method_Reverter_S2KrevertWithoutReason_)]
    
    rule  ( S2KReverter . S2KnoRevert ( ) => #abiCallData ( "noRevert" , .TypedArgs ) )
      
    
    rule  ( S2KReverter . S2KrevertWithReason ( V0__a : string ) => #abiCallData ( "revertWithReason" , #string ( V0__a ) , .TypedArgs ) )
      
    
    rule  ( S2KReverter . S2KrevertWithoutReason ( ) => #abiCallData ( "revertWithoutReason" , .TypedArgs ) )
      
    
    rule  ( selector ( "noRevert()" ) => 3072618433 )
      
    
    rule  ( selector ( "revertWithReason(string)" ) => 4154655617 )
      
    
    rule  ( selector ( "revertWithoutReason()" ) => 1097275021 )
      

endmodule

module ReverterWithReturn-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterWithReturnContract
    
    syntax S2KReverterWithReturnContract ::= "S2KReverterWithReturn" [symbol(), klabel(contract_ReverterWithReturn)]
    
      
    
    syntax Bytes ::= S2KReverterWithReturnContract "." S2KReverterWithReturnMethod [function(), symbol(), klabel(method_ReverterWithReturn)]
    
    syntax S2KReverterWithReturnMethod ::= "S2KreturnBytesUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_S2KreturnBytesUnless_bool)]
    
    syntax S2KReverterWithReturnMethod ::= "S2KreturnTupleUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_S2KreturnTupleUnless_bool)]
    
    rule  ( S2KReverterWithReturn . S2KreturnBytesUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnBytesUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( S2KReverterWithReturn . S2KreturnTupleUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnTupleUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( selector ( "returnBytesUnless(bool)" ) => 3511402276 )
      
    
    rule  ( selector ( "returnTupleUnless(bool)" ) => 3931056962 )
      

endmodule

module FfiTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFfiTestContract
    
    syntax S2KFfiTestContract ::= "S2KFfiTest" [symbol(), klabel(contract_FfiTest)]
    
      
    
    syntax Field ::= FfiTestField
    
    syntax FfiTestField ::= "IS_TEST" [symbol(), klabel(field_FfiTest_IS_TEST)]
    
    syntax FfiTestField ::= "_failed" [symbol(), klabel(field_FfiTest__failed)]
    
    syntax FfiTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestField ::= "stdstore" [symbol(), klabel(field_FfiTest_stdstore)]
    
    rule  ( #loc ( S2KFfiTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KFfiTestContract "." S2KFfiTestMethod [function(), symbol(), klabel(method_FfiTest)]
    
    syntax S2KFfiTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_FfiTest_S2KISZUndSCRIPT_)]
    
    syntax S2KFfiTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FfiTest_S2KISZUndTEST_)]
    
    syntax S2KFfiTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FfiTest_S2Kfailed_)]
    
    syntax S2KFfiTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_FfiTest_S2KsetUp_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIFOO" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIFOO_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIScript" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIScript_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIScript2" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIScript2_)]
    
    syntax S2KFfiTestMethod ::= "S2Ktestffi" "(" ")" [symbol(), klabel(method_FfiTest_S2Ktestffi_)]
    
    syntax S2KFfiTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_FfiTest_S2Kvm_)]
    
    rule  ( S2KFfiTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Ktestffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFFIFOO()" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript()" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2()" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi()" ) => 4068116 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module FilesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFilesTestContract
    
    syntax S2KFilesTestContract ::= "S2KFilesTest" [symbol(), klabel(contract_FilesTest)]
    
      
    
    syntax Field ::= FilesTestField
    
    syntax FilesTestField ::= "IS_TEST" [symbol(), klabel(field_FilesTest_IS_TEST)]
    
    syntax FilesTestField ::= "_failed" [symbol(), klabel(field_FilesTest__failed)]
    
    syntax FilesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestField ::= "stdstore" [symbol(), klabel(field_FilesTest_stdstore)]
    
    rule  ( #loc ( S2KFilesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KFilesTestContract "." S2KFilesTestMethod [function(), symbol(), klabel(method_FilesTest)]
    
    syntax S2KFilesTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_FilesTest_S2KISZUndSCRIPT_)]
    
    syntax S2KFilesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FilesTest_S2KISZUndTEST_)]
    
    syntax S2KFilesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FilesTest_S2Kfailed_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestFailRemoveFile" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestFailRemoveFile_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestReadWriteFile" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestReadWriteFile_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestReadWriteLine" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestReadWriteLine_)]
    
    syntax S2KFilesTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_FilesTest_S2Kvm_)]
    
    rule  ( S2KFilesTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFailRemoveFile()" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile()" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine()" ) => 3039298541 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ForkTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KForkTestContract
    
    syntax S2KForkTestContract ::= "S2KForkTest" [symbol(), klabel(contract_ForkTest)]
    
      
    
    syntax Field ::= ForkTestField
    
    syntax ForkTestField ::= "IS_TEST" [symbol(), klabel(field_ForkTest_IS_TEST)]
    
    syntax ForkTestField ::= "_failed" [symbol(), klabel(field_ForkTest__failed)]
    
    syntax ForkTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestField ::= "stdstore" [symbol(), klabel(field_ForkTest_stdstore)]
    
    rule  ( #loc ( S2KForkTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KForkTestContract "." S2KForkTestMethod [function(), symbol(), klabel(method_ForkTest)]
    
    syntax S2KForkTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ForkTest_S2KISZUndSCRIPT_)]
    
    syntax S2KForkTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ForkTest_S2KISZUndTEST_)]
    
    syntax S2KForkTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ForkTest_S2Kfailed_)]
    
    syntax S2KForkTestMethod ::= "S2KtestActiveFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestActiveFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestAllRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestAllRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateForkBlock_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateSelectFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateSelectFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateSelectForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateSelectForkBlock_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRPCUrlRevert" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRPCUrlRevert_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRollFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRollFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRollForkId" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRollForkId_)]
    
    syntax S2KForkTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ForkTest_S2Kvm_)]
    
    rule  ( S2KForkTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestActiveFork ( ) => #abiCallData ( "testActiveFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestAllRPCUrl ( ) => #abiCallData ( "testAllRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateFork ( ) => #abiCallData ( "testCreateFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateForkBlock ( ) => #abiCallData ( "testCreateForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateSelectFork ( ) => #abiCallData ( "testCreateSelectFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateSelectForkBlock ( ) => #abiCallData ( "testCreateSelectForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRPCUrl ( ) => #abiCallData ( "testRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRPCUrlRevert ( ) => #abiCallData ( "testRPCUrlRevert" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRollFork ( ) => #abiCallData ( "testRollFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRollForkId ( ) => #abiCallData ( "testRollForkId" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testActiveFork()" ) => 2981024546 )
      
    
    rule  ( selector ( "testAllRPCUrl()" ) => 707490019 )
      
    
    rule  ( selector ( "testCreateFork()" ) => 9848133 )
      
    
    rule  ( selector ( "testCreateForkBlock()" ) => 2820856803 )
      
    
    rule  ( selector ( "testCreateSelectFork()" ) => 2307095206 )
      
    
    rule  ( selector ( "testCreateSelectForkBlock()" ) => 269695700 )
      
    
    rule  ( selector ( "testRPCUrl()" ) => 3938449696 )
      
    
    rule  ( selector ( "testRPCUrlRevert()" ) => 470834373 )
      
    
    rule  ( selector ( "testRollFork()" ) => 3222356361 )
      
    
    rule  ( selector ( "testRollForkId()" ) => 3215996813 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module GasTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGasTestContract
    
    syntax S2KGasTestContract ::= "S2KGasTest" [symbol(), klabel(contract_GasTest)]
    
      
    
    syntax Field ::= GasTestField
    
    syntax GasTestField ::= "IS_TEST" [symbol(), klabel(field_GasTest_IS_TEST)]
    
    syntax GasTestField ::= "_failed" [symbol(), klabel(field_GasTest__failed)]
    
    syntax GasTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GasTest_IS_SCRIPT)]
    
    syntax GasTestField ::= "stdstore" [symbol(), klabel(field_GasTest_stdstore)]
    
    rule  ( #loc ( S2KGasTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KGasTestContract "." S2KGasTestMethod [function(), symbol(), klabel(method_GasTest)]
    
    syntax S2KGasTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_GasTest_S2KISZUndSCRIPT_)]
    
    syntax S2KGasTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_GasTest_S2KISZUndTEST_)]
    
    syntax S2KGasTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_GasTest_S2Kfailed_)]
    
    syntax S2KGasTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_GasTest_S2Kkevm_)]
    
    syntax S2KGasTestMethod ::= "S2KtestInfiniteGas" "(" ")" [symbol(), klabel(method_GasTest_S2KtestInfiniteGas_)]
    
    syntax S2KGasTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_GasTest_S2Kvm_)]
    
    rule  ( S2KGasTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtestInfiniteGas ( ) => #abiCallData ( "testInfiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testInfiniteGas()" ) => 1677640502 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module GetCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGetCodeTestContract
    
    syntax S2KGetCodeTestContract ::= "S2KGetCodeTest" [symbol(), klabel(contract_GetCodeTest)]
    
      
    
    syntax Field ::= GetCodeTestField
    
    syntax GetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestField ::= "_failed" [symbol(), klabel(field_GetCodeTest__failed)]
    
    syntax GetCodeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestField ::= "stdstore" [symbol(), klabel(field_GetCodeTest_stdstore)]
    
    syntax GetCodeTestField ::= "myToken" [symbol(), klabel(field_GetCodeTest_myToken)]
    
    rule  ( #loc ( S2KGetCodeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KGetCodeTest . myToken ) => 8 )
      
    
    syntax Bytes ::= S2KGetCodeTestContract "." S2KGetCodeTestMethod [function(), symbol(), klabel(method_GetCodeTest)]
    
    syntax S2KGetCodeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KISZUndTEST_)]
    
    syntax S2KGetCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_GetCodeTest_S2Kfailed_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KsetUp_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtestGetCode" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtestGetCode_)]
    
    syntax S2KGetCodeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_GetCodeTest_S2Kvm_)]
    
    rule  ( S2KGetCodeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtestGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testGetCode()" ) => 3906163359 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module KEVMCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsContract
    
    syntax S2KKEVMCheatsContract ::= "S2KKEVMCheats" [symbol(), klabel(contract_KEVMCheats)]
    
      
    
    syntax Bytes ::= S2KKEVMCheatsContract "." S2KKEVMCheatsMethod [function(), symbol(), klabel(method_KEVMCheats)]
    
    syntax S2KKEVMCheatsMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_KEVMCheats_S2Kkevm_)]
    
    rule  ( S2KKEVMCheats . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      

endmodule

module KEVMCheatsBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsBaseContract
    
    syntax S2KKEVMCheatsBaseContract ::= "S2KKEVMCheatsBase" [symbol(), klabel(contract_KEVMCheatsBase)]
    
      
    
    syntax Bytes ::= S2KKEVMCheatsBaseContract "." S2KKEVMCheatsBaseMethod [function(), symbol(), klabel(method_KEVMCheatsBase)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KallowCallsToAddress" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KallowCallsToAddress_address)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KallowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KallowChangesToStorage_address_uint256)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectCreate_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectCreate2_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectDelegateCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectNoCall" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectNoCall_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectRegularCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectRegularCall_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectStaticCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KinfiniteGas" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KinfiniteGas_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KsymbolicStorage" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KsymbolicStorage_address)]
    
    rule  ( S2KKEVMCheatsBase . S2KallowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KKEVMCheatsBase . S2KallowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KinfiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KsymbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )
      
    
    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )
      
    
    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )
      
    
    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )
      
    
    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )
      
    
    rule  ( selector ( "expectNoCall()" ) => 3861374088 )
      
    
    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )
      
    
    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )
      
    
    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )
      
    
    rule  ( selector ( "infiniteGas()" ) => 3986649939 )
      
    
    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )
      

endmodule

module LabelTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLabelTestContract
    
    syntax S2KLabelTestContract ::= "S2KLabelTest" [symbol(), klabel(contract_LabelTest)]
    
      
    
    syntax Field ::= LabelTestField
    
    syntax LabelTestField ::= "IS_TEST" [symbol(), klabel(field_LabelTest_IS_TEST)]
    
    syntax LabelTestField ::= "_failed" [symbol(), klabel(field_LabelTest__failed)]
    
    syntax LabelTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LabelTest_IS_SCRIPT)]
    
    syntax LabelTestField ::= "stdstore" [symbol(), klabel(field_LabelTest_stdstore)]
    
    rule  ( #loc ( S2KLabelTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KLabelTestContract "." S2KLabelTestMethod [function(), symbol(), klabel(method_LabelTest)]
    
    syntax S2KLabelTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_LabelTest_S2KISZUndSCRIPT_)]
    
    syntax S2KLabelTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_LabelTest_S2KISZUndTEST_)]
    
    syntax S2KLabelTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_LabelTest_S2Kfailed_)]
    
    syntax S2KLabelTestMethod ::= "S2KtestLabel" "(" ")" [symbol(), klabel(method_LabelTest_S2KtestLabel_)]
    
    syntax S2KLabelTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_LabelTest_S2Kvm_)]
    
    rule  ( S2KLabelTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtestLabel ( ) => #abiCallData ( "testLabel" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testLabel()" ) => 799101117 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module LoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLoopsTestContract
    
    syntax S2KLoopsTestContract ::= "S2KLoopsTest" [symbol(), klabel(contract_LoopsTest)]
    
      
    
    syntax Field ::= LoopsTestField
    
    syntax LoopsTestField ::= "IS_TEST" [symbol(), klabel(field_LoopsTest_IS_TEST)]
    
    syntax LoopsTestField ::= "_failed" [symbol(), klabel(field_LoopsTest__failed)]
    
    syntax LoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestField ::= "stdstore" [symbol(), klabel(field_LoopsTest_stdstore)]
    
    rule  ( #loc ( S2KLoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KLoopsTestContract "." S2KLoopsTestMethod [function(), symbol(), klabel(method_LoopsTest)]
    
    syntax S2KLoopsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_LoopsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_LoopsTest_S2KISZUndTEST_)]
    
    syntax S2KLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_LoopsTest_S2Kfailed_)]
    
    syntax S2KLoopsTestMethod ::= "S2KsumZUndN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KsumZUndN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsNotPrime" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsNotPrime_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrimeBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrimeBroken_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrimeOpt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrimeOpt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestMax" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestMax_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestMaxBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestMaxBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestNthPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestNthPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSort" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestSort_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSortBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestSortBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSqrt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSqrt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSumToN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSumToN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSumToNBroken" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSumToNBroken_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd10" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd10_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd100" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd100_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd1000" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd1000_)]
    
    syntax S2KLoopsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_LoopsTest_S2Kvm_)]
    
    rule  ( S2KLoopsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KsumZUndN ( V0_n : uint256 ) => #abiCallData ( "sum_N" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestIsNotPrime ( V0_n : uint256 ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrimeBroken ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrimeOpt ( V0_n : uint256 ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestNthPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestSqrt ( V0_x : uint256 ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KLoopsTest . S2KtestSumToN ( V0_n : uint256 ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestSumToNBroken ( V0_n : uint256 ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd10 ( ) => #abiCallData ( "test_sum_10" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd100 ( ) => #abiCallData ( "test_sum_100" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd1000 ( ) => #abiCallData ( "test_sum_1000" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "sum_N(uint256)" ) => 2123244496 )
      
    
    rule  ( selector ( "testIsNotPrime(uint256)" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime(uint256,uint256)" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken(uint256,uint256)" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt(uint256)" ) => 404719852 )
      
    
    rule  ( selector ( "testMax(uint256[])" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken(uint256[])" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime(uint256,uint256)" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort(uint256[])" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken(uint256[])" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt(uint256)" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN(uint256)" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken(uint256)" ) => 1318374999 )
      
    
    rule  ( selector ( "test_sum_10()" ) => 1087009050 )
      
    
    rule  ( selector ( "test_sum_100()" ) => 1519953344 )
      
    
    rule  ( selector ( "test_sum_1000()" ) => 222767225 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MethodDisambiguateTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMethodDisambiguateTestContract
    
    syntax S2KMethodDisambiguateTestContract ::= "S2KMethodDisambiguateTest" [symbol(), klabel(contract_MethodDisambiguateTest)]
    
      
    
    syntax Field ::= MethodDisambiguateTestField
    
    syntax MethodDisambiguateTestField ::= "IS_TEST" [symbol(), klabel(field_MethodDisambiguateTest_IS_TEST)]
    
    syntax MethodDisambiguateTestField ::= "_failed" [symbol(), klabel(field_MethodDisambiguateTest__failed)]
    
    syntax MethodDisambiguateTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MethodDisambiguateTest_IS_SCRIPT)]
    
    syntax MethodDisambiguateTestField ::= "stdstore" [symbol(), klabel(field_MethodDisambiguateTest_stdstore)]
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KMethodDisambiguateTestContract "." S2KMethodDisambiguateTestMethod [function(), symbol(), klabel(method_MethodDisambiguateTest)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KISZUndSCRIPT_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KISZUndTEST_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2Kfailed_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KgetNumber_uint256)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint32" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KgetNumber_uint32)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtestZUndmethodZUndcall" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtestZUndmethodZUndcall_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2Kvm_)]
    
    rule  ( S2KMethodDisambiguateTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KgetNumber ( V0_x : uint256 ) => #abiCallData ( "getNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KgetNumber ( V0_x : uint32 ) => #abiCallData ( "getNumber" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtestZUndmethodZUndcall ( ) => #abiCallData ( "test_method_call" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "getNumber(uint256)" ) => 4233508440 )
      
    
    rule  ( selector ( "getNumber(uint32)" ) => 144150998 )
      
    
    rule  ( selector ( "test_method_call()" ) => 1803637680 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MockCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMockCallTestContract
    
    syntax S2KMockCallTestContract ::= "S2KMockCallTest" [symbol(), klabel(contract_MockCallTest)]
    
      
    
    syntax Field ::= MockCallTestField
    
    syntax MockCallTestField ::= "IS_TEST" [symbol(), klabel(field_MockCallTest_IS_TEST)]
    
    syntax MockCallTestField ::= "_failed" [symbol(), klabel(field_MockCallTest__failed)]
    
    syntax MockCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestField ::= "stdstore" [symbol(), klabel(field_MockCallTest_stdstore)]
    
    rule  ( #loc ( S2KMockCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KMockCallTestContract "." S2KMockCallTestMethod [function(), symbol(), klabel(method_MockCallTest)]
    
    syntax S2KMockCallTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_MockCallTest_S2KISZUndSCRIPT_)]
    
    syntax S2KMockCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MockCallTest_S2KISZUndTEST_)]
    
    syntax S2KMockCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MockCallTest_S2Kfailed_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCall" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCall_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCallValue" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCallValue_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCalls" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCalls_)]
    
    syntax S2KMockCallTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_MockCallTest_S2Kvm_)]
    
    rule  ( S2KMockCallTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCall ( ) => #abiCallData ( "testMockCall" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testMockCall()" ) => 3143830108 )
      
    
    rule  ( selector ( "testMockCallValue()" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls()" ) => 957910350 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MyIERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyIERC20Contract
    
    syntax S2KMyIERC20Contract ::= "S2KMyIERC20" [symbol(), klabel(contract_MyIERC20)]
    
      
    
    syntax Bytes ::= S2KMyIERC20Contract "." S2KMyIERC20Method [function(), symbol(), klabel(method_MyIERC20)]
    
    syntax S2KMyIERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2Kapprove_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyIERC20_S2KbalanceOf_address)]
    
    syntax S2KMyIERC20Method ::= "S2Kdecimals" "(" ")" [symbol(), klabel(method_MyIERC20_S2Kdecimals_)]
    
    syntax S2KMyIERC20Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_MyIERC20_S2Ksymbol_)]
    
    syntax S2KMyIERC20Method ::= "S2KtotalSupply" "(" ")" [symbol(), klabel(method_MyIERC20_S2KtotalSupply_)]
    
    syntax S2KMyIERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2Ktransfer_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2KtransferFrom_address_address_uint256)]
    
    rule  ( S2KMyIERC20 . S2Kapprove ( V0_spender : address , V1_value : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))
      
    
    rule  ( S2KMyIERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyIERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2Ktransfer ( V0_recipient : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_recipient ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_recipient )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KMyIERC20 . S2KtransferFrom ( V0_sender : address , V1_recipient : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_sender ) , #address ( V1_recipient ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_sender )
       andBool ( #rangeAddress ( V1_recipient )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module MyToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyTokenContract
    
    syntax S2KMyTokenContract ::= "S2KMyToken" [symbol(), klabel(contract_MyToken)]
    
      
    
    syntax Field ::= MyTokenField
    
    syntax MyTokenField ::= "token" [symbol(), klabel(field_MyToken_token)]
    
    syntax MyTokenField ::= "balances" [symbol(), klabel(field_MyToken_balances)]
    
    rule  ( #loc ( S2KMyToken . token ) => 0 )
      
    
    rule  ( #loc ( S2KMyToken . balances ) => 1 )
      
    
    syntax Bytes ::= S2KMyTokenContract "." S2KMyTokenMethod [function(), symbol(), klabel(method_MyToken)]
    
    syntax S2KMyTokenMethod ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2KbalanceOf_address)]
    
    syntax S2KMyTokenMethod ::= "S2Kbalances" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2Kbalances_address)]
    
    syntax S2KMyTokenMethod ::= "S2Kpay" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2Kpay_address)]
    
    syntax S2KMyTokenMethod ::= "S2Ktoken" "(" ")" [symbol(), klabel(method_MyToken_S2Ktoken_)]
    
    rule  ( S2KMyToken . S2KbalanceOf ( V0_user : address ) => #abiCallData ( "balanceOf" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . S2Kbalances ( V0_ : address ) => #abiCallData ( "balances" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyToken . S2Kpay ( V0_user : address ) => #abiCallData ( "pay" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . S2Ktoken ( ) => #abiCallData ( "token" , .TypedArgs ) )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "balances(address)" ) => 669136355 )
      
    
    rule  ( selector ( "pay(address)" ) => 202497757 )
      
    
    rule  ( selector ( "token()" ) => 4228666474 )
      

endmodule

module NoImport-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KNoImportContract
    
    syntax S2KNoImportContract ::= "S2KNoImport" [symbol(), klabel(contract_NoImport)]
    
      
    
    syntax Bytes ::= S2KNoImportContract "." S2KNoImportMethod [function(), symbol(), klabel(method_NoImport)]
    
    syntax S2KNoImportMethod ::= "S2KtestZUndsourceZUndmap" "(" ")" [symbol(), klabel(method_NoImport_S2KtestZUndsourceZUndmap_)]
    
    rule  ( S2KNoImport . S2KtestZUndsourceZUndmap ( ) => #abiCallData ( "test_source_map" , .TypedArgs ) )
      
    
    rule  ( selector ( "test_source_map()" ) => 3563497491 )
      

endmodule

module OwnerUpOnly-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyContract
    
    syntax S2KOwnerUpOnlyContract ::= "S2KOwnerUpOnly" [symbol(), klabel(contract_OwnerUpOnly)]
    
      
    
    syntax Field ::= OwnerUpOnlyField
    
    syntax OwnerUpOnlyField ::= "count" [symbol(), klabel(field_OwnerUpOnly_count)]
    
    rule  ( #loc ( S2KOwnerUpOnly . count ) => 0 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyContract "." S2KOwnerUpOnlyMethod [function(), symbol(), klabel(method_OwnerUpOnly)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kcount_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kincrement_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kowner_)]
    
    rule  ( S2KOwnerUpOnly . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module OwnerUpOnlyTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyTestContract
    
    syntax S2KOwnerUpOnlyTestContract ::= "S2KOwnerUpOnlyTest" [symbol(), klabel(contract_OwnerUpOnlyTest)]
    
      
    
    syntax Field ::= OwnerUpOnlyTestField
    
    syntax OwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestField ::= "_failed" [symbol(), klabel(field_OwnerUpOnlyTest__failed)]
    
    syntax OwnerUpOnlyTestField ::= "IS_SCRIPT" [symbol(), klabel(field_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_OwnerUpOnlyTest_stdstore)]
    
    syntax OwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_OwnerUpOnlyTest_upOnly)]
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . upOnly ) => 8 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyTestContract "." S2KOwnerUpOnlyTestMethod [function(), symbol(), klabel(method_OwnerUpOnlyTest)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KISZUndSCRIPT_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KISZUndTEST_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2Kfailed_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KsetUp_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestFailIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestFailIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestIncrementAsOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2Kvm_)]
    
    rule  ( S2KOwnerUpOnlyTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner()" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner()" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner()" ) => 1980498343 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AdditionalToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAdditionalTokenContract
    
    syntax S2KAdditionalTokenContract ::= "S2KAdditionalToken" [symbol(), klabel(contract_AdditionalToken)]
    
      
    
    syntax Field ::= AdditionalTokenField
    
    syntax AdditionalTokenField ::= "count" [symbol(), klabel(field_AdditionalToken_count)]
    
    rule  ( #loc ( S2KAdditionalToken . count ) => 0 )
      
    
    syntax Bytes ::= S2KAdditionalTokenContract "." S2KAdditionalTokenMethod [function(), symbol(), klabel(method_AdditionalToken)]
    
    syntax S2KAdditionalTokenMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_AdditionalToken_S2Kcount_)]
    
    syntax S2KAdditionalTokenMethod ::= "S2KincrementCount" "(" ")" [symbol(), klabel(method_AdditionalToken_S2KincrementCount_)]
    
    syntax S2KAdditionalTokenMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_AdditionalToken_S2Kowner_)]
    
    rule  ( S2KAdditionalToken . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . S2KincrementCount ( ) => #abiCallData ( "incrementCount" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "incrementCount()" ) => 3842448270 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module PlainPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPlainPrankTestContract
    
    syntax S2KPlainPrankTestContract ::= "S2KPlainPrankTest" [symbol(), klabel(contract_PlainPrankTest)]
    
      
    
    syntax Field ::= PlainPrankTestField
    
    syntax PlainPrankTestField ::= "IS_TEST" [symbol(), klabel(field_PlainPrankTest_IS_TEST)]
    
    syntax PlainPrankTestField ::= "_failed" [symbol(), klabel(field_PlainPrankTest__failed)]
    
    syntax PlainPrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PlainPrankTest_IS_SCRIPT)]
    
    syntax PlainPrankTestField ::= "stdstore" [symbol(), klabel(field_PlainPrankTest_stdstore)]
    
    rule  ( #loc ( S2KPlainPrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KPlainPrankTestContract "." S2KPlainPrankTestMethod [function(), symbol(), klabel(method_PlainPrankTest)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KISZUndSCRIPT_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KISZUndTEST_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2Kfailed_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KinternalCounter" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KinternalCounter_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndexistingAlready" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestFailZUndstartPrankZUndexistingAlready_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndinternalCall" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestFailZUndstartPrankZUndinternalCall_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndprankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndprankZUndzeroAddressZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankWithOriginZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankWithOriginZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankZUndzeroAddressZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstopPrankZUndnotExistent" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstopPrankZUndnotExistent_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2Kvm_)]
    
    rule  ( S2KPlainPrankTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KinternalCounter ( ) => #abiCallData ( "internalCounter" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestFailZUndstartPrankZUndexistingAlready ( ) => #abiCallData ( "testFail_startPrank_existingAlready" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestFailZUndstartPrankZUndinternalCall ( ) => #abiCallData ( "testFail_startPrank_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndprankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_prank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankWithOriginZUndtrue ( ) => #abiCallData ( "test_startPrankWithOrigin_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankZUndtrue ( ) => #abiCallData ( "test_startPrank_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_startPrank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstopPrankZUndnotExistent ( ) => #abiCallData ( "test_stopPrank_notExistent" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "internalCounter()" ) => 2687914858 )
      
    
    rule  ( selector ( "testFail_startPrank_existingAlready()" ) => 2262269573 )
      
    
    rule  ( selector ( "testFail_startPrank_internalCall()" ) => 3075676477 )
      
    
    rule  ( selector ( "test_prank_zeroAddress_true()" ) => 3793950116 )
      
    
    rule  ( selector ( "test_startPrankWithOrigin_true()" ) => 1559633499 )
      
    
    rule  ( selector ( "test_startPrank_true()" ) => 243527947 )
      
    
    rule  ( selector ( "test_startPrank_zeroAddress_true()" ) => 858618957 )
      
    
    rule  ( selector ( "test_stopPrank_notExistent()" ) => 279002555 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Prank-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankContract
    
    syntax S2KPrankContract ::= "S2KPrank" [symbol(), klabel(contract_Prank)]
    
      
    
    syntax Field ::= PrankField
    
    syntax PrankField ::= "count" [symbol(), klabel(field_Prank_count)]
    
    rule  ( #loc ( S2KPrank . count ) => 0 )
      
    
    syntax Bytes ::= S2KPrankContract "." S2KPrankMethod [function(), symbol(), klabel(method_Prank)]
    
    syntax S2KPrankMethod ::= "S2Kadd" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_S2Kadd_uint256)]
    
    syntax S2KPrankMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_Prank_S2Kcount_)]
    
    syntax S2KPrankMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_Prank_S2Kowner_)]
    
    syntax S2KPrankMethod ::= "S2Ksubtract" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_S2Ksubtract_uint256)]
    
    rule  ( S2KPrank . S2Kadd ( V0_value : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KPrank . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . S2Ksubtract ( V0_value : uint256 ) => #abiCallData ( "subtract" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( selector ( "add(uint256)" ) => 268690130 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      
    
    rule  ( selector ( "subtract(uint256)" ) => 499146519 )
      

endmodule

module PrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankTestContract
    
    syntax S2KPrankTestContract ::= "S2KPrankTest" [symbol(), klabel(contract_PrankTest)]
    
      
    
    syntax Field ::= PrankTestField
    
    syntax PrankTestField ::= "IS_TEST" [symbol(), klabel(field_PrankTest_IS_TEST)]
    
    syntax PrankTestField ::= "_failed" [symbol(), klabel(field_PrankTest__failed)]
    
    syntax PrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestField ::= "stdstore" [symbol(), klabel(field_PrankTest_stdstore)]
    
    syntax PrankTestField ::= "prankContract" [symbol(), klabel(field_PrankTest_prankContract)]
    
    rule  ( #loc ( S2KPrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KPrankTest . prankContract ) => 8 )
      
    
    syntax Bytes ::= S2KPrankTestContract "." S2KPrankTestMethod [function(), symbol(), klabel(method_PrankTest)]
    
    syntax S2KPrankTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_PrankTest_S2KISZUndSCRIPT_)]
    
    syntax S2KPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PrankTest_S2KISZUndTEST_)]
    
    syntax S2KPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PrankTest_S2Kfailed_)]
    
    syntax S2KPrankTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_PrankTest_S2KsetUp_)]
    
    syntax S2KPrankTestMethod ::= "S2KtestAddAsOwner" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestAddAsOwner_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestAddStartPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestAddStartPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestFailAddPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestFailAddPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractAsTxOrigin" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractAsTxOrigin_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractFail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractFail_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractStartPrank" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractStartPrank_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_PrankTest_S2Kvm_)]
    
    rule  ( S2KPrankTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtestAddAsOwner ( V0_x : uint256 ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestAddStartPrank ( V0_x : uint256 ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestFailAddPrank ( V0_x : uint256 ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestSubtractAsTxOrigin ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KPrankTest . S2KtestSubtractFail ( V0_x : uint256 ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestSubtractStartPrank ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KPrankTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testAddAsOwner(uint256)" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank(uint256)" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank(uint256)" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin(uint256,uint256)" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail(uint256)" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank(uint256,uint256)" ) => 262874110 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module PreconditionsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPreconditionsTestContract
    
    syntax S2KPreconditionsTestContract ::= "S2KPreconditionsTest" [symbol(), klabel(contract_PreconditionsTest)]
    
      
    
    syntax Field ::= PreconditionsTestField
    
    syntax PreconditionsTestField ::= "IS_TEST" [symbol(), klabel(field_PreconditionsTest_IS_TEST)]
    
    syntax PreconditionsTestField ::= "_failed" [symbol(), klabel(field_PreconditionsTest__failed)]
    
    syntax PreconditionsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PreconditionsTest_IS_SCRIPT)]
    
    syntax PreconditionsTestField ::= "stdstore" [symbol(), klabel(field_PreconditionsTest_stdstore)]
    
    syntax PreconditionsTestField ::= "n" [symbol(), klabel(field_PreconditionsTest_n)]
    
    rule  ( #loc ( S2KPreconditionsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . n ) => 8 )
      
    
    syntax Bytes ::= S2KPreconditionsTestContract "." S2KPreconditionsTestMethod [function(), symbol(), klabel(method_PreconditionsTest)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KISZUndTEST_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kfailed_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kkevm_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KsetUp_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtestAssume" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtestAssume_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kvm_)]
    
    rule  ( S2KPreconditionsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtestAssume ( ) => #abiCallData ( "testAssume" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testAssume()" ) => 3928496829 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module RecordLogsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KRecordLogsTestContract
    
    syntax S2KRecordLogsTestContract ::= "S2KRecordLogsTest" [symbol(), klabel(contract_RecordLogsTest)]
    
      
    
    syntax Field ::= RecordLogsTestField
    
    syntax RecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestField ::= "_failed" [symbol(), klabel(field_RecordLogsTest__failed)]
    
    syntax RecordLogsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestField ::= "stdstore" [symbol(), klabel(field_RecordLogsTest_stdstore)]
    
    syntax RecordLogsTestField ::= "emitter" [symbol(), klabel(field_RecordLogsTest_emitter)]
    
    rule  ( #loc ( S2KRecordLogsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . emitter ) => 8 )
      
    
    syntax Bytes ::= S2KRecordLogsTestContract "." S2KRecordLogsTestMethod [function(), symbol(), klabel(method_RecordLogsTest)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KISZUndTEST_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2Kfailed_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KsetUp_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtestRecordLogs" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtestRecordLogs_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2Kvm_)]
    
    rule  ( S2KRecordLogsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtestRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testRecordLogs()" ) => 3623393624 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Safe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeContract
    
    syntax S2KSafeContract ::= "S2KSafe" [symbol(), klabel(contract_Safe)]
    
      
    
    syntax Bytes ::= S2KSafeContract "." S2KSafeMethod [function(), symbol(), klabel(method_Safe)]
    
    syntax S2KSafeMethod ::= "S2Kwithdraw" "(" ")" [symbol(), klabel(method_Safe_S2Kwithdraw_)]
    
    rule  ( S2KSafe . S2Kwithdraw ( ) => #abiCallData ( "withdraw" , .TypedArgs ) )
      
    
    rule  ( selector ( "withdraw()" ) => 1020253707 )
      

endmodule

module SafeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeTestContract
    
    syntax S2KSafeTestContract ::= "S2KSafeTest" [symbol(), klabel(contract_SafeTest)]
    
      
    
    syntax Field ::= SafeTestField
    
    syntax SafeTestField ::= "IS_TEST" [symbol(), klabel(field_SafeTest_IS_TEST)]
    
    syntax SafeTestField ::= "_failed" [symbol(), klabel(field_SafeTest__failed)]
    
    syntax SafeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestField ::= "stdstore" [symbol(), klabel(field_SafeTest_stdstore)]
    
    syntax SafeTestField ::= "safe" [symbol(), klabel(field_SafeTest_safe)]
    
    rule  ( #loc ( S2KSafeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSafeTest . safe ) => 8 )
      
    
    syntax Bytes ::= S2KSafeTestContract "." S2KSafeTestMethod [function(), symbol(), klabel(method_SafeTest)]
    
    syntax S2KSafeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SafeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSafeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SafeTest_S2KISZUndTEST_)]
    
    syntax S2KSafeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SafeTest_S2Kfailed_)]
    
    syntax S2KSafeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SafeTest_S2KsetUp_)]
    
    syntax S2KSafeTestMethod ::= "S2KtestWithdraw" "(" ")" [symbol(), klabel(method_SafeTest_S2KtestWithdraw_)]
    
    syntax S2KSafeTestMethod ::= "S2KtestWithdrawFuzz" "(" Int ":" "uint96" ")" [symbol(), klabel(method_SafeTest_S2KtestWithdrawFuzz_uint96)]
    
    syntax S2KSafeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SafeTest_S2Kvm_)]
    
    rule  ( S2KSafeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtestWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtestWithdrawFuzz ( V0_amount : uint96 ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( S2KSafeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testWithdraw()" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz(uint96)" ) => 3503970826 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Script-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KScriptContract
    
    syntax S2KScriptContract ::= "S2KScript" [symbol(), klabel(contract_Script)]
    
      
    
    syntax Field ::= ScriptField
    
    syntax ScriptField ::= "IS_SCRIPT" [symbol(), klabel(field_Script_IS_SCRIPT)]
    
    rule  ( #loc ( S2KScript . IS_SCRIPT ) => 0 )
      
    
    syntax Bytes ::= S2KScriptContract "." S2KScriptMethod [function(), symbol(), klabel(method_Script)]
    
    syntax S2KScriptMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Script_S2KISZUndSCRIPT_)]
    
    syntax S2KScriptMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_Script_S2Kvm_)]
    
    rule  ( S2KScript . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KScript . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Setup2Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetup2TestContract
    
    syntax S2KSetup2TestContract ::= "S2KSetup2Test" [symbol(), klabel(contract_Setup2Test)]
    
      
    
    syntax Field ::= Setup2TestField
    
    syntax Setup2TestField ::= "IS_TEST" [symbol(), klabel(field_Setup2Test_IS_TEST)]
    
    syntax Setup2TestField ::= "_failed" [symbol(), klabel(field_Setup2Test__failed)]
    
    syntax Setup2TestField ::= "IS_SCRIPT" [symbol(), klabel(field_Setup2Test_IS_SCRIPT)]
    
    syntax Setup2TestField ::= "stdstore" [symbol(), klabel(field_Setup2Test_stdstore)]
    
    syntax Setup2TestField ::= "a" [symbol(), klabel(field_Setup2Test_a)]
    
    syntax Setup2TestField ::= "b" [symbol(), klabel(field_Setup2Test_b)]
    
    syntax Setup2TestField ::= "c" [symbol(), klabel(field_Setup2Test_c)]
    
    rule  ( #loc ( S2KSetup2Test . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetup2Test . a ) => 8 )
      
    
    rule  ( #loc ( S2KSetup2Test . b ) => 9 )
      
    
    rule  ( #loc ( S2KSetup2Test . c ) => 10 )
      
    
    syntax Bytes ::= S2KSetup2TestContract "." S2KSetup2TestMethod [function(), symbol(), klabel(method_Setup2Test)]
    
    syntax S2KSetup2TestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Setup2Test_S2KISZUndSCRIPT_)]
    
    syntax S2KSetup2TestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Setup2Test_S2KISZUndTEST_)]
    
    syntax S2KSetup2TestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Setup2Test_S2Kfailed_)]
    
    syntax S2KSetup2TestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_Setup2Test_S2KsetUp_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtestFailZUndsetup" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtestFailZUndsetup_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtestZUndsetup" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtestZUndsetup_)]
    
    syntax S2KSetup2TestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_Setup2Test_S2Kvm_)]
    
    rule  ( S2KSetup2Test . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtestFailZUndsetup ( ) => #abiCallData ( "testFail_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtestZUndsetup ( ) => #abiCallData ( "test_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_setup()" ) => 3501410022 )
      
    
    rule  ( selector ( "test_setup()" ) => 2001288179 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SetUpDeployTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpDeployTestContract
    
    syntax S2KSetUpDeployTestContract ::= "S2KSetUpDeployTest" [symbol(), klabel(contract_SetUpDeployTest)]
    
      
    
    syntax Field ::= SetUpDeployTestField
    
    syntax SetUpDeployTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpDeployTest_IS_TEST)]
    
    syntax SetUpDeployTestField ::= "_failed" [symbol(), klabel(field_SetUpDeployTest__failed)]
    
    syntax SetUpDeployTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpDeployTest_IS_SCRIPT)]
    
    syntax SetUpDeployTestField ::= "stdstore" [symbol(), klabel(field_SetUpDeployTest_stdstore)]
    
    syntax SetUpDeployTestField ::= "token" [symbol(), klabel(field_SetUpDeployTest_token)]
    
    rule  ( #loc ( S2KSetUpDeployTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . token ) => 8 )
      
    
    syntax Bytes ::= S2KSetUpDeployTestContract "." S2KSetUpDeployTestMethod [function(), symbol(), klabel(method_SetUpDeployTest)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KISZUndTEST_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2Kfailed_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KsetUp_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtestZUndextcodesize" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtestZUndextcodesize_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2Kvm_)]
    
    rule  ( S2KSetUpDeployTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtestZUndextcodesize ( ) => #abiCallData ( "test_extcodesize" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "test_extcodesize()" ) => 1657400005 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SetUpTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpTestContract
    
    syntax S2KSetUpTestContract ::= "S2KSetUpTest" [symbol(), klabel(contract_SetUpTest)]
    
      
    
    syntax Field ::= SetUpTestField
    
    syntax SetUpTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpTest_IS_TEST)]
    
    syntax SetUpTestField ::= "_failed" [symbol(), klabel(field_SetUpTest__failed)]
    
    syntax SetUpTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestField ::= "stdstore" [symbol(), klabel(field_SetUpTest_stdstore)]
    
    syntax SetUpTestField ::= "counter" [symbol(), klabel(field_SetUpTest_counter)]
    
    rule  ( #loc ( S2KSetUpTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetUpTest . counter ) => 8 )
      
    
    syntax Bytes ::= S2KSetUpTestContract "." S2KSetUpTestMethod [function(), symbol(), klabel(method_SetUpTest)]
    
    syntax S2KSetUpTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SetUpTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSetUpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SetUpTest_S2KISZUndTEST_)]
    
    syntax S2KSetUpTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SetUpTest_S2Kfailed_)]
    
    syntax S2KSetUpTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SetUpTest_S2KsetUp_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtestSetUpCalled" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtestSetUpCalled_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtestSetUpCalledSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SetUpTest_S2KtestSetUpCalledSymbolic_uint256)]
    
    syntax S2KSetUpTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SetUpTest_S2Kvm_)]
    
    rule  ( S2KSetUpTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtestSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtestSetUpCalledSymbolic ( V0_x : uint256 ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KSetUpTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testSetUpCalled()" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic(uint256)" ) => 3332480466 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SignTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSignTestContract
    
    syntax S2KSignTestContract ::= "S2KSignTest" [symbol(), klabel(contract_SignTest)]
    
      
    
    syntax Field ::= SignTestField
    
    syntax SignTestField ::= "IS_TEST" [symbol(), klabel(field_SignTest_IS_TEST)]
    
    syntax SignTestField ::= "_failed" [symbol(), klabel(field_SignTest__failed)]
    
    syntax SignTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SignTest_IS_SCRIPT)]
    
    syntax SignTestField ::= "stdstore" [symbol(), klabel(field_SignTest_stdstore)]
    
    rule  ( #loc ( S2KSignTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KSignTestContract "." S2KSignTestMethod [function(), symbol(), klabel(method_SignTest)]
    
    syntax S2KSignTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SignTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSignTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SignTest_S2KISZUndTEST_)]
    
    syntax S2KSignTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SignTest_S2Kfailed_)]
    
    syntax S2KSignTestMethod ::= "S2KtestSign" "(" ")" [symbol(), klabel(method_SignTest_S2KtestSign_)]
    
    syntax S2KSignTestMethod ::= "S2KtestSignZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SignTest_S2KtestSignZUndsymbolic_uint256)]
    
    syntax S2KSignTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SignTest_S2Kvm_)]
    
    rule  ( S2KSignTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtestSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtestSignZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "testSign_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KSignTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testSign()" ) => 3985576159 )
      
    
    rule  ( selector ( "testSign_symbolic(uint256)" ) => 2942025997 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AssertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssertTestContract
    
    syntax S2KAssertTestContract ::= "S2KAssertTest" [symbol(), klabel(contract_AssertTest)]
    
      
    
    syntax Field ::= AssertTestField
    
    syntax AssertTestField ::= "IS_TEST" [symbol(), klabel(field_AssertTest_IS_TEST)]
    
    syntax AssertTestField ::= "_failed" [symbol(), klabel(field_AssertTest__failed)]
    
    syntax AssertTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssertTest_IS_SCRIPT)]
    
    syntax AssertTestField ::= "stdstore" [symbol(), klabel(field_AssertTest_stdstore)]
    
    syntax AssertTestField ::= "y" [symbol(), klabel(field_AssertTest_y)]
    
    rule  ( #loc ( S2KAssertTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KAssertTest . y ) => 8 )
      
    
    syntax Bytes ::= S2KAssertTestContract "." S2KAssertTestMethod [function(), symbol(), klabel(method_AssertTest)]
    
    syntax S2KAssertTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AssertTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAssertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AssertTest_S2KISZUndTEST_)]
    
    syntax S2KAssertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AssertTest_S2Kfailed_)]
    
    syntax S2KAssertTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AssertTest_S2Kkevm_)]
    
    syntax S2KAssertTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_AssertTest_S2KsetUp_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndassertZUndtrue_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndexpectZUndrevert" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndexpectZUndrevert_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndtrue_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndtrueZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndtrueZUndbranch_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndbranchZUndmerge" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndbranchZUndmerge_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndfailingZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndfailingZUndbranch_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndrevertZUndbranch" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndrevertZUndbranch_uint256_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AssertTest_S2Kvm_)]
    
    rule  ( S2KAssertTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndassertZUndfalse ( ) => #abiCallData ( "testFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndassertZUndtrue ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndexpectZUndrevert ( ) => #abiCallData ( "testFail_expect_revert" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndfalse ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndtrueZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_assert_true_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndbranchZUndmerge ( V0_x : uint256 ) => #abiCallData ( "test_branch_merge" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndfailingZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_failing_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndrevertZUndbranch ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_revert_branch" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KAssertTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_assert_false()" ) => 2057948334 )
      
    
    rule  ( selector ( "testFail_assert_true()" ) => 409427266 )
      
    
    rule  ( selector ( "testFail_expect_revert()" ) => 709747105 )
      
    
    rule  ( selector ( "test_assert_false()" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true_branch(uint256)" ) => 3267411143 )
      
    
    rule  ( selector ( "test_branch_merge(uint256)" ) => 1000659212 )
      
    
    rule  ( selector ( "test_failing_branch(uint256)" ) => 1176678741 )
      
    
    rule  ( selector ( "test_revert_branch(uint256,uint256)" ) => 2349784459 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SnapshotTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSnapshotTestContract
    
    syntax S2KSnapshotTestContract ::= "S2KSnapshotTest" [symbol(), klabel(contract_SnapshotTest)]
    
      
    
    syntax Field ::= SnapshotTestField
    
    syntax SnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestField ::= "_failed" [symbol(), klabel(field_SnapshotTest__failed)]
    
    syntax SnapshotTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestField ::= "stdstore" [symbol(), klabel(field_SnapshotTest_stdstore)]
    
    syntax SnapshotTestField ::= "store" [symbol(), klabel(field_SnapshotTest_store)]
    
    rule  ( #loc ( S2KSnapshotTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSnapshotTest . store ) => 8 )
      
    
    syntax Bytes ::= S2KSnapshotTestContract "." S2KSnapshotTestMethod [function(), symbol(), klabel(method_SnapshotTest)]
    
    syntax S2KSnapshotTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KISZUndTEST_)]
    
    syntax S2KSnapshotTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SnapshotTest_S2Kfailed_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KsetUp_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtestSnapshot" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtestSnapshot_)]
    
    syntax S2KSnapshotTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SnapshotTest_S2Kvm_)]
    
    rule  ( S2KSnapshotTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtestSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testSnapshot()" ) => 3204135818 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Store-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreContract
    
    syntax S2KStoreContract ::= "S2KStore" [symbol(), klabel(contract_Store)]
    
      
    
    syntax Field ::= StoreField
    
    syntax StoreField ::= "testNumber" [symbol(), klabel(field_Store_testNumber)]
    
    rule  ( #loc ( S2KStore . testNumber ) => 0 )
      

endmodule

module StoreTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreTestContract
    
    syntax S2KStoreTestContract ::= "S2KStoreTest" [symbol(), klabel(contract_StoreTest)]
    
      
    
    syntax Field ::= StoreTestField
    
    syntax StoreTestField ::= "IS_TEST" [symbol(), klabel(field_StoreTest_IS_TEST)]
    
    syntax StoreTestField ::= "_failed" [symbol(), klabel(field_StoreTest__failed)]
    
    syntax StoreTestField ::= "IS_SCRIPT" [symbol(), klabel(field_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestField ::= "stdstore" [symbol(), klabel(field_StoreTest_stdstore)]
    
    rule  ( #loc ( S2KStoreTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KStoreTestContract "." S2KStoreTestMethod [function(), symbol(), klabel(method_StoreTest)]
    
    syntax S2KStoreTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_StoreTest_S2KISZUndSCRIPT_)]
    
    syntax S2KStoreTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_StoreTest_S2KISZUndTEST_)]
    
    syntax S2KStoreTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_StoreTest_S2Kfailed_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestAccesses" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestAccesses_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadColdVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadColdVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreColdVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreColdVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestStoreLoad" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestStoreLoad_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestStoreLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestStoreLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_StoreTest_S2Kvm_)]
    
    rule  ( S2KStoreTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadColdVM ( ) => #abiCallData ( "testGasLoadColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadWarmUp ( ) => #abiCallData ( "testGasLoadWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadWarmVM ( ) => #abiCallData ( "testGasLoadWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreColdVM ( ) => #abiCallData ( "testGasStoreColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreWarmUp ( ) => #abiCallData ( "testGasStoreWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreWarmVM ( ) => #abiCallData ( "testGasStoreWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestLoadNonExistent ( ) => #abiCallData ( "testLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestStoreLoadNonExistent ( ) => #abiCallData ( "testStoreLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testAccesses()" ) => 159648693 )
      
    
    rule  ( selector ( "testGasLoadColdVM()" ) => 3801282741 )
      
    
    rule  ( selector ( "testGasLoadWarmUp()" ) => 604011046 )
      
    
    rule  ( selector ( "testGasLoadWarmVM()" ) => 2607902342 )
      
    
    rule  ( selector ( "testGasStoreColdVM()" ) => 2309593716 )
      
    
    rule  ( selector ( "testGasStoreWarmUp()" ) => 1546465326 )
      
    
    rule  ( selector ( "testGasStoreWarmVM()" ) => 100073271 )
      
    
    rule  ( selector ( "testLoadNonExistent()" ) => 2275977243 )
      
    
    rule  ( selector ( "testStoreLoad()" ) => 1208516723 )
      
    
    rule  ( selector ( "testStoreLoadNonExistent()" ) => 3912017339 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SymbolicStorageTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStorageTestContract
    
    syntax S2KSymbolicStorageTestContract ::= "S2KSymbolicStorageTest" [symbol(), klabel(contract_SymbolicStorageTest)]
    
      
    
    syntax Field ::= SymbolicStorageTestField
    
    syntax SymbolicStorageTestField ::= "IS_TEST" [symbol(), klabel(field_SymbolicStorageTest_IS_TEST)]
    
    syntax SymbolicStorageTestField ::= "_failed" [symbol(), klabel(field_SymbolicStorageTest__failed)]
    
    syntax SymbolicStorageTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SymbolicStorageTest_IS_SCRIPT)]
    
    syntax SymbolicStorageTestField ::= "stdstore" [symbol(), klabel(field_SymbolicStorageTest_stdstore)]
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KSymbolicStorageTestContract "." S2KSymbolicStorageTestMethod [function(), symbol(), klabel(method_SymbolicStorageTest)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KISZUndTEST_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kfailed_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kkevm_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestEmptyInitialStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestEmptyInitialStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestFailZUndSymbolicStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestFailZUndSymbolicStorage1_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kvm_)]
    
    rule  ( S2KSymbolicStorageTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestEmptyInitialStorage ( V0_slot : uint256 ) => #abiCallData ( "testEmptyInitialStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestFailZUndSymbolicStorage ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestFailZUndSymbolicStorage1 ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage1" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testEmptyInitialStorage(uint256)" ) => 2517793094 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage(uint256)" ) => 821477045 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage1(uint256)" ) => 2899744320 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SymbolicStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStoreContract
    
    syntax S2KSymbolicStoreContract ::= "S2KSymbolicStore" [symbol(), klabel(contract_SymbolicStore)]
    
      
    
    syntax Field ::= SymbolicStoreField
    
    syntax SymbolicStoreField ::= "testNumber" [symbol(), klabel(field_SymbolicStore_testNumber)]
    
    rule  ( #loc ( S2KSymbolicStore . testNumber ) => 0 )
      

endmodule

module Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestContract
    
    syntax S2KTestContract ::= "S2KTest" [symbol(), klabel(contract_Test)]
    
      
    
    syntax Field ::= TestField
    
    syntax TestField ::= "IS_TEST" [symbol(), klabel(field_Test_IS_TEST)]
    
    syntax TestField ::= "_failed" [symbol(), klabel(field_Test__failed)]
    
    syntax TestField ::= "IS_SCRIPT" [symbol(), klabel(field_Test_IS_SCRIPT)]
    
    syntax TestField ::= "stdstore" [symbol(), klabel(field_Test_stdstore)]
    
    rule  ( #loc ( S2KTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KTestContract "." S2KTestMethod [function(), symbol(), klabel(method_Test)]
    
    syntax S2KTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Test_S2KISZUndSCRIPT_)]
    
    syntax S2KTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Test_S2KISZUndTEST_)]
    
    syntax S2KTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Test_S2Kfailed_)]
    
    syntax S2KTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_Test_S2Kvm_)]
    
    rule  ( S2KTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module stdError-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdErrorContract
    
    syntax S2KstdErrorContract ::= "S2KstdError" [symbol(), klabel(contract_stdError)]
    
      
    
    syntax Bytes ::= S2KstdErrorContract "." S2KstdErrorMethod [function(), symbol(), klabel(method_stdError)]
    
    syntax S2KstdErrorMethod ::= "S2KarithmeticError" "(" ")" [symbol(), klabel(method_stdError_S2KarithmeticError_)]
    
    syntax S2KstdErrorMethod ::= "S2KassertionError" "(" ")" [symbol(), klabel(method_stdError_S2KassertionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KdivisionError" "(" ")" [symbol(), klabel(method_stdError_S2KdivisionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KencodeStorageError" "(" ")" [symbol(), klabel(method_stdError_S2KencodeStorageError_)]
    
    syntax S2KstdErrorMethod ::= "S2KenumConversionError" "(" ")" [symbol(), klabel(method_stdError_S2KenumConversionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KindexOOBError" "(" ")" [symbol(), klabel(method_stdError_S2KindexOOBError_)]
    
    syntax S2KstdErrorMethod ::= "S2KlowLevelError" "(" ")" [symbol(), klabel(method_stdError_S2KlowLevelError_)]
    
    syntax S2KstdErrorMethod ::= "S2KmemOverflowError" "(" ")" [symbol(), klabel(method_stdError_S2KmemOverflowError_)]
    
    syntax S2KstdErrorMethod ::= "S2KpopError" "(" ")" [symbol(), klabel(method_stdError_S2KpopError_)]
    
    syntax S2KstdErrorMethod ::= "S2KzeroVarError" "(" ")" [symbol(), klabel(method_stdError_S2KzeroVarError_)]
    
    rule  ( S2KstdError . S2KarithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KassertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KdivisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KencodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KenumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KindexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KlowLevelError ( ) => #abiCallData ( "lowLevelError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KmemOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KpopError ( ) => #abiCallData ( "popError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KzeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )
      
    
    rule  ( selector ( "arithmeticError()" ) => 2308253967 )
      
    
    rule  ( selector ( "assertionError()" ) => 271788407 )
      
    
    rule  ( selector ( "divisionError()" ) => 4202187332 )
      
    
    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )
      
    
    rule  ( selector ( "enumConversionError()" ) => 501503328 )
      
    
    rule  ( selector ( "indexOOBError()" ) => 99517970 )
      
    
    rule  ( selector ( "lowLevelError()" ) => 2889716422 )
      
    
    rule  ( selector ( "memOverflowError()" ) => 2557239144 )
      
    
    rule  ( selector ( "popError()" ) => 2989344077 )
      
    
    rule  ( selector ( "zeroVarError()" ) => 3061221850 )
      

endmodule

module stdMath-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdMathContract
    
    syntax S2KstdMathContract ::= "S2KstdMath" [symbol(), klabel(contract_stdMath)]
    
      

endmodule

module stdStorage-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdStorageContract
    
    syntax S2KstdStorageContract ::= "S2KstdStorage" [symbol(), klabel(contract_stdStorage)]
    
      
    
    syntax Bytes ::= S2KstdStorageContract "." S2KstdStorageMethod [function(), symbol(), klabel(method_stdStorage)]
    
    syntax S2KstdStorageMethod ::= "S2KbytesToBytes32" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_stdStorage_S2KbytesToBytes32_bytes_uint256)]
    
    rule  ( S2KstdStorage . S2KbytesToBytes32 ( V0_b : bytes , V1_offset : uint256 ) => #abiCallData ( "bytesToBytes32" , #bytes ( V0_b ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_b ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( selector ( "bytesToBytes32(bytes,uint256)" ) => 1398294841 )
      

endmodule

module TestNumber-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestNumberContract
    
    syntax S2KTestNumberContract ::= "S2KTestNumber" [symbol(), klabel(contract_TestNumber)]
    
      
    
    syntax Field ::= TestNumberField
    
    syntax TestNumberField ::= "IS_TEST" [symbol(), klabel(field_TestNumber_IS_TEST)]
    
    syntax TestNumberField ::= "_failed" [symbol(), klabel(field_TestNumber__failed)]
    
    syntax TestNumberField ::= "testNumber" [symbol(), klabel(field_TestNumber_testNumber)]
    
    rule  ( #loc ( S2KTestNumber . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . testNumber ) => 1 )
      
    
    syntax Bytes ::= S2KTestNumberContract "." S2KTestNumberMethod [function(), symbol(), klabel(method_TestNumber)]
    
    syntax S2KTestNumberMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_TestNumber_S2KISZUndTEST_)]
    
    syntax S2KTestNumberMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_TestNumber_S2Kfailed_)]
    
    syntax S2KTestNumberMethod ::= "S2Kt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_TestNumber_S2Kt_uint256)]
    
    syntax S2KTestNumberMethod ::= "S2KtestNumber" "(" ")" [symbol(), klabel(method_TestNumber_S2KtestNumber_)]
    
    rule  ( S2KTestNumber . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . S2Kt ( V0_a : uint256 ) => #abiCallData ( "t" , #uint256 ( V0_a ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_a )
      
    
    rule  ( S2KTestNumber . S2KtestNumber ( ) => #abiCallData ( "testNumber" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "t(uint256)" ) => 2950864753 )
      
    
    rule  ( selector ( "testNumber()" ) => 219771635 )
      

endmodule

module ToStringTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KToStringTestContract
    
    syntax S2KToStringTestContract ::= "S2KToStringTest" [symbol(), klabel(contract_ToStringTest)]
    
      
    
    syntax Field ::= ToStringTestField
    
    syntax ToStringTestField ::= "IS_TEST" [symbol(), klabel(field_ToStringTest_IS_TEST)]
    
    syntax ToStringTestField ::= "_failed" [symbol(), klabel(field_ToStringTest__failed)]
    
    syntax ToStringTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestField ::= "stdstore" [symbol(), klabel(field_ToStringTest_stdstore)]
    
    rule  ( #loc ( S2KToStringTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KToStringTestContract "." S2KToStringTestMethod [function(), symbol(), klabel(method_ToStringTest)]
    
    syntax S2KToStringTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ToStringTest_S2KISZUndSCRIPT_)]
    
    syntax S2KToStringTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ToStringTest_S2KISZUndTEST_)]
    
    syntax S2KToStringTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ToStringTest_S2Kfailed_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestAddressToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestAddressToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBoolToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBoolToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBytes32ToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBytes32ToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBytesToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBytesToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestIntToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestIntToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestUint256ToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestUint256ToString_)]
    
    syntax S2KToStringTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ToStringTest_S2Kvm_)]
    
    rule  ( S2KToStringTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testAddressToString()" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString()" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString()" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString()" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString()" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString()" ) => 98980210 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Token-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTokenContract
    
    syntax S2KTokenContract ::= "S2KToken" [symbol(), klabel(contract_Token)]
    
      
    
    syntax Field ::= TokenField
    
    syntax TokenField ::= "x" [symbol(), klabel(field_Token_x)]
    
    syntax TokenField ::= "balances" [symbol(), klabel(field_Token_balances)]
    
    syntax TokenField ::= "allowances" [symbol(), klabel(field_Token_allowances)]
    
    syntax TokenField ::= "name" [symbol(), klabel(field_Token_name)]
    
    syntax TokenField ::= "y" [symbol(), klabel(field_Token_y)]
    
    syntax TokenField ::= "z" [symbol(), klabel(field_Token_z)]
    
    syntax TokenField ::= "a" [symbol(), klabel(field_Token_a)]
    
    syntax TokenField ::= "foos" [symbol(), klabel(field_Token_foos)]
    
    rule  ( #loc ( S2KToken . x ) => 0 )
      
    
    rule  ( #loc ( S2KToken . balances ) => 1 )
      
    
    rule  ( #loc ( S2KToken . allowances ) => 2 )
      
    
    rule  ( #loc ( S2KToken . name ) => 3 )
      
    
    rule  ( #loc ( S2KToken . y ) => 4 )
      
    
    rule  ( #loc ( S2KToken . z ) => 4 )
      
    
    rule  ( #loc ( S2KToken . a ) => 4 )
      
    
    rule  ( #loc ( S2KToken . foos ) => 5 )
      
    
    syntax Bytes ::= S2KTokenContract "." S2KTokenMethod [function(), symbol(), klabel(method_Token)]
    
    syntax S2KTokenMethod ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Token_S2Ktransfer_address_uint256)]
    
    rule  ( S2KToken . S2Ktransfer ( V0_dst : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_dst ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      

endmodule

module BytesTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBytesTypeTestContract
    
    syntax S2KBytesTypeTestContract ::= "S2KBytesTypeTest" [symbol(), klabel(contract_BytesTypeTest)]
    
      
    
    syntax Bytes ::= S2KBytesTypeTestContract "." S2KBytesTypeTestMethod [function(), symbol(), klabel(method_BytesTypeTest)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestFailZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestFailZUndbytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestFailZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestFailZUndbytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes32ZUndfail" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes32ZUndfail_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes4ZUndfail" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes4ZUndfail_bytes4)]
    
    rule  ( S2KBytesTypeTest . S2KtestFailZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "testFail_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestFailZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "testFail_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes32ZUndfail ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32_fail" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes4ZUndfail ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4_fail" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( selector ( "testFail_bytes32(bytes32)" ) => 4289330289 )
      
    
    rule  ( selector ( "testFail_bytes4(bytes4)" ) => 3602852570 )
      
    
    rule  ( selector ( "test_bytes32(bytes32)" ) => 3436986189 )
      
    
    rule  ( selector ( "test_bytes32_fail(bytes32)" ) => 392713219 )
      
    
    rule  ( selector ( "test_bytes4(bytes4)" ) => 2814412853 )
      
    
    rule  ( selector ( "test_bytes4_fail(bytes4)" ) => 2510894010 )
      

endmodule

module IntTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KIntTypeTestContract
    
    syntax S2KIntTypeTestContract ::= "S2KIntTypeTest" [symbol(), klabel(contract_IntTypeTest)]
    
      
    
    syntax Bytes ::= S2KIntTypeTestContract "." S2KIntTypeTestMethod [function(), symbol(), klabel(method_IntTypeTest)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint128_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint256_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint64_int64)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint128_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint128ZUndfail" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint128ZUndfail_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint256_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint256ZUndfail" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint256ZUndfail_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint64_int64)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint64ZUndfail" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint64ZUndfail_int64)]
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint128 ( V0_x : int128 ) => #abiCallData ( "testFail_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint256 ( V0_x : int256 ) => #abiCallData ( "testFail_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint64 ( V0_x : int64 ) => #abiCallData ( "testFail_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint128 ( V0_x : int128 ) => #abiCallData ( "test_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint128ZUndfail ( V0_x : int128 ) => #abiCallData ( "test_int128_fail" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint256 ( V0_x : int256 ) => #abiCallData ( "test_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint256ZUndfail ( V0_x : int256 ) => #abiCallData ( "test_int256_fail" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint64 ( V0_x : int64 ) => #abiCallData ( "test_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint64ZUndfail ( V0_x : int64 ) => #abiCallData ( "test_int64_fail" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( selector ( "testFail_int128(int128)" ) => 1988540889 )
      
    
    rule  ( selector ( "testFail_int256(int256)" ) => 1185096419 )
      
    
    rule  ( selector ( "testFail_int64(int64)" ) => 1750678769 )
      
    
    rule  ( selector ( "test_int128(int128)" ) => 995880333 )
      
    
    rule  ( selector ( "test_int128_fail(int128)" ) => 1240751129 )
      
    
    rule  ( selector ( "test_int256(int256)" ) => 3818914766 )
      
    
    rule  ( selector ( "test_int256_fail(int256)" ) => 1877071906 )
      
    
    rule  ( selector ( "test_int64(int64)" ) => 1792301870 )
      
    
    rule  ( selector ( "test_int64_fail(int64)" ) => 2744099616 )
      

endmodule

module UintTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KUintTypeTestContract
    
    syntax S2KUintTypeTestContract ::= "S2KUintTypeTest" [symbol(), klabel(contract_UintTypeTest)]
    
      
    
    syntax Bytes ::= S2KUintTypeTestContract "." S2KUintTypeTestMethod [function(), symbol(), klabel(method_UintTypeTest)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint104ZUndfail" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint104ZUndfail_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint112ZUndfail" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint112ZUndfail_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint120ZUndfail" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint120ZUndfail_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint128ZUndfail" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint128ZUndfail_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint136ZUndfail" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint136ZUndfail_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint144ZUndfail" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint144ZUndfail_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint152ZUndfail" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint152ZUndfail_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint160ZUndfail" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint160ZUndfail_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint168ZUndfail" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint168ZUndfail_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint16ZUndfail" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint16ZUndfail_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint176ZUndfail" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint176ZUndfail_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint184ZUndfail" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint184ZUndfail_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint192ZUndfail" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint192ZUndfail_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint200ZUndfail" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint200ZUndfail_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint208ZUndfail" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint208ZUndfail_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint216ZUndfail" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint216ZUndfail_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint224ZUndfail" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint224ZUndfail_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint232ZUndfail" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint232ZUndfail_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint240ZUndfail" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint240ZUndfail_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint248ZUndfail" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint248ZUndfail_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint24ZUndfail" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint24ZUndfail_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint256ZUndfail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint256ZUndfail_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint32ZUndfail" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint32ZUndfail_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint40ZUndfail" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint40ZUndfail_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint48ZUndfail" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint48ZUndfail_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint56ZUndfail" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint56ZUndfail_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint64ZUndfail" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint64ZUndfail_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint72ZUndfail" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint72ZUndfail_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint80ZUndfail" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint80ZUndfail_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint88ZUndfail" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint88ZUndfail_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint8ZUndfail" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint8ZUndfail_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint96ZUndfail" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint96ZUndfail_uint96)]
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "testFail_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "testFail_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "testFail_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "testFail_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "testFail_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "testFail_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "testFail_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "testFail_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "testFail_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "testFail_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "testFail_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "testFail_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "testFail_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "testFail_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "testFail_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "testFail_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "testFail_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "testFail_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "testFail_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "testFail_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "testFail_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "testFail_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "testFail_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "testFail_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "testFail_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "testFail_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "testFail_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "testFail_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "testFail_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "testFail_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "testFail_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "testFail_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "test_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint104ZUndfail ( V0_x : uint104 ) => #abiCallData ( "test_uint104_fail" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "test_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint112ZUndfail ( V0_x : uint112 ) => #abiCallData ( "test_uint112_fail" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "test_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint120ZUndfail ( V0_x : uint120 ) => #abiCallData ( "test_uint120_fail" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "test_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint128ZUndfail ( V0_x : uint128 ) => #abiCallData ( "test_uint128_fail" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "test_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint136ZUndfail ( V0_x : uint136 ) => #abiCallData ( "test_uint136_fail" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "test_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint144ZUndfail ( V0_x : uint144 ) => #abiCallData ( "test_uint144_fail" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "test_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint152ZUndfail ( V0_x : uint152 ) => #abiCallData ( "test_uint152_fail" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "test_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "test_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint160ZUndfail ( V0_x : uint160 ) => #abiCallData ( "test_uint160_fail" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "test_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint168ZUndfail ( V0_x : uint168 ) => #abiCallData ( "test_uint168_fail" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint16ZUndfail ( V0_x : uint16 ) => #abiCallData ( "test_uint16_fail" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "test_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint176ZUndfail ( V0_x : uint176 ) => #abiCallData ( "test_uint176_fail" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "test_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint184ZUndfail ( V0_x : uint184 ) => #abiCallData ( "test_uint184_fail" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "test_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint192ZUndfail ( V0_x : uint192 ) => #abiCallData ( "test_uint192_fail" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "test_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint200ZUndfail ( V0_x : uint200 ) => #abiCallData ( "test_uint200_fail" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "test_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint208ZUndfail ( V0_x : uint208 ) => #abiCallData ( "test_uint208_fail" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "test_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint216ZUndfail ( V0_x : uint216 ) => #abiCallData ( "test_uint216_fail" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "test_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint224ZUndfail ( V0_x : uint224 ) => #abiCallData ( "test_uint224_fail" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "test_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint232ZUndfail ( V0_x : uint232 ) => #abiCallData ( "test_uint232_fail" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "test_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "test_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint240ZUndfail ( V0_x : uint240 ) => #abiCallData ( "test_uint240_fail" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "test_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint248ZUndfail ( V0_x : uint248 ) => #abiCallData ( "test_uint248_fail" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint24ZUndfail ( V0_x : uint24 ) => #abiCallData ( "test_uint24_fail" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "test_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint256ZUndfail ( V0_x : uint256 ) => #abiCallData ( "test_uint256_fail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "test_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint32ZUndfail ( V0_x : uint32 ) => #abiCallData ( "test_uint32_fail" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "test_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint40ZUndfail ( V0_x : uint40 ) => #abiCallData ( "test_uint40_fail" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "test_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint48ZUndfail ( V0_x : uint48 ) => #abiCallData ( "test_uint48_fail" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "test_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint56ZUndfail ( V0_x : uint56 ) => #abiCallData ( "test_uint56_fail" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "test_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint64ZUndfail ( V0_x : uint64 ) => #abiCallData ( "test_uint64_fail" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "test_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint72ZUndfail ( V0_x : uint72 ) => #abiCallData ( "test_uint72_fail" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "test_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "test_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint80ZUndfail ( V0_x : uint80 ) => #abiCallData ( "test_uint80_fail" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "test_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint88ZUndfail ( V0_x : uint88 ) => #abiCallData ( "test_uint88_fail" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint8ZUndfail ( V0_x : uint8 ) => #abiCallData ( "test_uint8_fail" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "test_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint96ZUndfail ( V0_x : uint96 ) => #abiCallData ( "test_uint96_fail" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( selector ( "testFail_uint104(uint104)" ) => 1709154444 )
      
    
    rule  ( selector ( "testFail_uint112(uint112)" ) => 3541489285 )
      
    
    rule  ( selector ( "testFail_uint120(uint120)" ) => 3839169067 )
      
    
    rule  ( selector ( "testFail_uint128(uint128)" ) => 791678561 )
      
    
    rule  ( selector ( "testFail_uint136(uint136)" ) => 3952257705 )
      
    
    rule  ( selector ( "testFail_uint144(uint144)" ) => 2439595565 )
      
    
    rule  ( selector ( "testFail_uint152(uint152)" ) => 1866291148 )
      
    
    rule  ( selector ( "testFail_uint16(uint16)" ) => 4076431644 )
      
    
    rule  ( selector ( "testFail_uint160(uint160)" ) => 3214193107 )
      
    
    rule  ( selector ( "testFail_uint168(uint168)" ) => 2636444862 )
      
    
    rule  ( selector ( "testFail_uint176(uint176)" ) => 1828125968 )
      
    
    rule  ( selector ( "testFail_uint184(uint184)" ) => 4099305155 )
      
    
    rule  ( selector ( "testFail_uint192(uint192)" ) => 2858210891 )
      
    
    rule  ( selector ( "testFail_uint200(uint200)" ) => 1080270217 )
      
    
    rule  ( selector ( "testFail_uint208(uint208)" ) => 1831022189 )
      
    
    rule  ( selector ( "testFail_uint216(uint216)" ) => 2125101602 )
      
    
    rule  ( selector ( "testFail_uint224(uint224)" ) => 420776541 )
      
    
    rule  ( selector ( "testFail_uint232(uint232)" ) => 3163478438 )
      
    
    rule  ( selector ( "testFail_uint24(uint24)" ) => 639153936 )
      
    
    rule  ( selector ( "testFail_uint240(uint240)" ) => 3089966003 )
      
    
    rule  ( selector ( "testFail_uint248(uint248)" ) => 3070004620 )
      
    
    rule  ( selector ( "testFail_uint256(uint256)" ) => 3436494846 )
      
    
    rule  ( selector ( "testFail_uint32(uint32)" ) => 3218360567 )
      
    
    rule  ( selector ( "testFail_uint40(uint40)" ) => 347856329 )
      
    
    rule  ( selector ( "testFail_uint48(uint48)" ) => 4178735009 )
      
    
    rule  ( selector ( "testFail_uint56(uint56)" ) => 979020984 )
      
    
    rule  ( selector ( "testFail_uint64(uint64)" ) => 819975489 )
      
    
    rule  ( selector ( "testFail_uint72(uint72)" ) => 2059244458 )
      
    
    rule  ( selector ( "testFail_uint8(uint8)" ) => 3679593874 )
      
    
    rule  ( selector ( "testFail_uint80(uint80)" ) => 4180733980 )
      
    
    rule  ( selector ( "testFail_uint88(uint88)" ) => 42555031 )
      
    
    rule  ( selector ( "testFail_uint96(uint96)" ) => 2962957343 )
      
    
    rule  ( selector ( "test_uint104(uint104)" ) => 2030507202 )
      
    
    rule  ( selector ( "test_uint104_fail(uint104)" ) => 3289769429 )
      
    
    rule  ( selector ( "test_uint112(uint112)" ) => 1247465894 )
      
    
    rule  ( selector ( "test_uint112_fail(uint112)" ) => 198559186 )
      
    
    rule  ( selector ( "test_uint120(uint120)" ) => 4013273041 )
      
    
    rule  ( selector ( "test_uint120_fail(uint120)" ) => 4156608892 )
      
    
    rule  ( selector ( "test_uint128(uint128)" ) => 784802761 )
      
    
    rule  ( selector ( "test_uint128_fail(uint128)" ) => 3283002391 )
      
    
    rule  ( selector ( "test_uint136(uint136)" ) => 3590751506 )
      
    
    rule  ( selector ( "test_uint136_fail(uint136)" ) => 1740049059 )
      
    
    rule  ( selector ( "test_uint144(uint144)" ) => 1224379367 )
      
    
    rule  ( selector ( "test_uint144_fail(uint144)" ) => 3911233113 )
      
    
    rule  ( selector ( "test_uint152(uint152)" ) => 3210764837 )
      
    
    rule  ( selector ( "test_uint152_fail(uint152)" ) => 2472528383 )
      
    
    rule  ( selector ( "test_uint16(uint16)" ) => 1262288561 )
      
    
    rule  ( selector ( "test_uint160(uint160)" ) => 2446641645 )
      
    
    rule  ( selector ( "test_uint160_fail(uint160)" ) => 1289572651 )
      
    
    rule  ( selector ( "test_uint168(uint168)" ) => 2789196255 )
      
    
    rule  ( selector ( "test_uint168_fail(uint168)" ) => 413418206 )
      
    
    rule  ( selector ( "test_uint16_fail(uint16)" ) => 2736127289 )
      
    
    rule  ( selector ( "test_uint176(uint176)" ) => 3119759714 )
      
    
    rule  ( selector ( "test_uint176_fail(uint176)" ) => 2926152828 )
      
    
    rule  ( selector ( "test_uint184(uint184)" ) => 2419331356 )
      
    
    rule  ( selector ( "test_uint184_fail(uint184)" ) => 809918532 )
      
    
    rule  ( selector ( "test_uint192(uint192)" ) => 126849335 )
      
    
    rule  ( selector ( "test_uint192_fail(uint192)" ) => 965859284 )
      
    
    rule  ( selector ( "test_uint200(uint200)" ) => 342308100 )
      
    
    rule  ( selector ( "test_uint200_fail(uint200)" ) => 3554205475 )
      
    
    rule  ( selector ( "test_uint208(uint208)" ) => 664969356 )
      
    
    rule  ( selector ( "test_uint208_fail(uint208)" ) => 515244431 )
      
    
    rule  ( selector ( "test_uint216(uint216)" ) => 2735221135 )
      
    
    rule  ( selector ( "test_uint216_fail(uint216)" ) => 1244132421 )
      
    
    rule  ( selector ( "test_uint224(uint224)" ) => 2791725032 )
      
    
    rule  ( selector ( "test_uint224_fail(uint224)" ) => 3535210075 )
      
    
    rule  ( selector ( "test_uint232(uint232)" ) => 2781872781 )
      
    
    rule  ( selector ( "test_uint232_fail(uint232)" ) => 3352181217 )
      
    
    rule  ( selector ( "test_uint24(uint24)" ) => 2865563805 )
      
    
    rule  ( selector ( "test_uint240(uint240)" ) => 3274361055 )
      
    
    rule  ( selector ( "test_uint240_fail(uint240)" ) => 4046179916 )
      
    
    rule  ( selector ( "test_uint248(uint248)" ) => 578604507 )
      
    
    rule  ( selector ( "test_uint248_fail(uint248)" ) => 3580188072 )
      
    
    rule  ( selector ( "test_uint24_fail(uint24)" ) => 2328572638 )
      
    
    rule  ( selector ( "test_uint256(uint256)" ) => 851358597 )
      
    
    rule  ( selector ( "test_uint256_fail(uint256)" ) => 1895666222 )
      
    
    rule  ( selector ( "test_uint32(uint32)" ) => 982223766 )
      
    
    rule  ( selector ( "test_uint32_fail(uint32)" ) => 768917897 )
      
    
    rule  ( selector ( "test_uint40(uint40)" ) => 1298765870 )
      
    
    rule  ( selector ( "test_uint40_fail(uint40)" ) => 1685882915 )
      
    
    rule  ( selector ( "test_uint48(uint48)" ) => 454435065 )
      
    
    rule  ( selector ( "test_uint48_fail(uint48)" ) => 491533732 )
      
    
    rule  ( selector ( "test_uint56(uint56)" ) => 58659965 )
      
    
    rule  ( selector ( "test_uint56_fail(uint56)" ) => 3185974238 )
      
    
    rule  ( selector ( "test_uint64(uint64)" ) => 2511119799 )
      
    
    rule  ( selector ( "test_uint64_fail(uint64)" ) => 2000886247 )
      
    
    rule  ( selector ( "test_uint72(uint72)" ) => 3694811120 )
      
    
    rule  ( selector ( "test_uint72_fail(uint72)" ) => 875540037 )
      
    
    rule  ( selector ( "test_uint8(uint8)" ) => 1704021016 )
      
    
    rule  ( selector ( "test_uint80(uint80)" ) => 3841083967 )
      
    
    rule  ( selector ( "test_uint80_fail(uint80)" ) => 3626141300 )
      
    
    rule  ( selector ( "test_uint88(uint88)" ) => 100068129 )
      
    
    rule  ( selector ( "test_uint88_fail(uint88)" ) => 318744457 )
      
    
    rule  ( selector ( "test_uint8_fail(uint8)" ) => 2865005996 )
      
    
    rule  ( selector ( "test_uint96(uint96)" ) => 1315861753 )
      
    
    rule  ( selector ( "test_uint96_fail(uint96)" ) => 1635628195 )
      

endmodule

module Vm-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KVmContract
    
    syntax S2KVmContract ::= "S2KVm" [symbol(), klabel(contract_Vm)]
    
      
    
    syntax Bytes ::= S2KVmContract "." S2KVmMethod [function(), symbol(), klabel(method_Vm)]
    
    syntax S2KVmMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kaccesses_address)]
    
    syntax S2KVmMethod ::= "S2KactiveFork" "(" ")" [symbol(), klabel(method_Vm_S2KactiveFork_)]
    
    syntax S2KVmMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kaddr_uint256)]
    
    syntax S2KVmMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kassume_bool)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_address)]
    
    syntax S2KVmMethod ::= "S2KchainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KchainId_uint256)]
    
    syntax S2KVmMethod ::= "S2KclearMockedCalls" "(" ")" [symbol(), klabel(method_Vm_S2KclearMockedCalls_)]
    
    syntax S2KVmMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcloseFile_string)]
    
    syntax S2KVmMethod ::= "S2Kcoinbase" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kcoinbase_address)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string_uint256)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string_uint256)]
    
    syntax S2KVmMethod ::= "S2Kdeal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kdeal_address_uint256)]
    
    syntax S2KVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_string_uint32)]
    
    syntax S2KVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_uint32)]
    
    syntax S2KVmMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string)]
    
    syntax S2KVmMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string)]
    
    syntax S2KVmMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string)]
    
    syntax S2KVmMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string)]
    
    syntax S2KVmMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string)]
    
    syntax S2KVmMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string_string)]
    
    syntax S2KVmMethod ::= "S2Ketch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2Ketch_address_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool_address)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes4)]
    
    syntax S2KVmMethod ::= "S2Kfee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kfee_uint256)]
    
    syntax S2KVmMethod ::= "S2Kffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2Kffi_string[])]
    
    syntax S2KVmMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KgetCode_string)]
    
    syntax S2KVmMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KgetNonce_address)]
    
    syntax S2KVmMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_Vm_S2KgetRecordedLogs_)]
    
    syntax S2KVmMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2Klabel_address_string)]
    
    syntax S2KVmMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kload_address_bytes32)]
    
    syntax S2KVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_uint256_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2Kprank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address)]
    
    syntax S2KVmMethod ::= "S2Kprank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address_address)]
    
    syntax S2KVmMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadFile_string)]
    
    syntax S2KVmMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadLine_string)]
    
    syntax S2KVmMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_Vm_S2Krecord_)]
    
    syntax S2KVmMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_Vm_S2KrecordLogs_)]
    
    syntax S2KVmMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KremoveFile_string)]
    
    syntax S2KVmMethod ::= "S2KrevertTo" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrevertTo_uint256)]
    
    syntax S2KVmMethod ::= "S2Kroll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kroll_uint256)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256_uint256)]
    
    syntax S2KVmMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KrpcUrl_string)]
    
    syntax S2KVmMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_Vm_S2KrpcUrls_)]
    
    syntax S2KVmMethod ::= "S2KselectFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KselectFork_uint256)]
    
    syntax S2KVmMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KsetEnv_string_string)]
    
    syntax S2KVmMethod ::= "S2KsetNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KsetNonce_address_uint64)]
    
    syntax S2KVmMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ksign_uint256_bytes32)]
    
    syntax S2KVmMethod ::= "S2Ksnapshot" "(" ")" [symbol(), klabel(method_Vm_S2Ksnapshot_)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_address)]
    
    syntax S2KVmMethod ::= "S2KstartPrank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address)]
    
    syntax S2KVmMethod ::= "S2KstartPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address_address)]
    
    syntax S2KVmMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstopBroadcast_)]
    
    syntax S2KVmMethod ::= "S2KstopPrank" "(" ")" [symbol(), klabel(method_Vm_S2KstopPrank_)]
    
    syntax S2KVmMethod ::= "S2Kstore" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kstore_address_bytes32_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KtoString_address)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KtoString_bool)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KtoString_int256)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KtoString_uint256)]
    
    syntax S2KVmMethod ::= "S2Kwarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kwarp_uint256)]
    
    syntax S2KVmMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteFile_string_string)]
    
    syntax S2KVmMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteLine_string_string)]
    
    rule  ( S2KVm . S2Kaccesses ( V0_ : address ) => #abiCallData ( "accesses" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KactiveFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kaddr ( V0_ : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2Kassume ( V0_ : bool ) => #abiCallData ( "assume" , #bool ( V0_ ) , .TypedArgs ) )
       ensures #rangeBool ( V0_ )
      
    
    rule  ( S2KVm . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kbroadcast ( V0_ : address ) => #abiCallData ( "broadcast" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KchainId ( V0_ : uint256 ) => #abiCallData ( "chainId" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KclearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcloseFile ( V0_ : string ) => #abiCallData ( "closeFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kcoinbase ( V0_ : address ) => #abiCallData ( "coinbase" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_ : string ) => #abiCallData ( "createFork" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_ : string , V1_ : uint256 ) => #abiCallData ( "createFork" , #string ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_ )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_ : string ) => #abiCallData ( "createSelectFork" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_ : string , V1_ : uint256 ) => #abiCallData ( "createSelectFork" , #string ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_ )
      
    
    rule  ( S2KVm . S2Kdeal ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "deal" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2KderiveKey ( V0_ : string , V1_ : string , V2_ : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_ ) , #string ( V1_ ) , #uint32 ( V2_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_ )
      
    
    rule  ( S2KVm . S2KderiveKey ( V0_ : string , V1_ : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_ ) , #uint32 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_ )
      
    
    rule  ( S2KVm . S2KenvAddress ( V0_ : string ) => #abiCallData ( "envAddress" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "envAddress" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBool ( V0_ : string ) => #abiCallData ( "envBool" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBool ( V0_ : string , V1_ : string ) => #abiCallData ( "envBool" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes ( V0_ : string ) => #abiCallData ( "envBytes" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "envBytes" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes32 ( V0_ : string ) => #abiCallData ( "envBytes32" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "envBytes32" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvInt ( V0_ : string ) => #abiCallData ( "envInt" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvInt ( V0_ : string , V1_ : string ) => #abiCallData ( "envInt" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvString ( V0_ : string ) => #abiCallData ( "envString" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvString ( V0_ : string , V1_ : string ) => #abiCallData ( "envString" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvUint ( V0_ : string ) => #abiCallData ( "envUint" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvUint ( V0_ : string , V1_ : string ) => #abiCallData ( "envUint" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Ketch ( V0_ : address , V1_ : bytes ) => #abiCallData ( "etch" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_ : bool , V1_ : bool , V2_ : bool , V3_ : bool ) => #abiCallData ( "expectEmit" , #bool ( V0_ ) , #bool ( V1_ ) , #bool ( V2_ ) , #bool ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_ )
       andBool ( #rangeBool ( V1_ )
       andBool ( #rangeBool ( V2_ )
       andBool ( #rangeBool ( V3_ )
               ))))
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_ : bool , V1_ : bool , V2_ : bool , V3_ : bool , V4_ : address ) => #abiCallData ( "expectEmit" , #bool ( V0_ ) , #bool ( V1_ ) , #bool ( V2_ ) , #bool ( V3_ ) , #address ( V4_ ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_ )
       andBool ( #rangeBool ( V1_ )
       andBool ( #rangeBool ( V2_ )
       andBool ( #rangeBool ( V3_ )
       andBool ( #rangeAddress ( V4_ )
               )))))
      
    
    rule  ( S2KVm . S2KexpectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KexpectRevert ( V0_ : bytes ) => #abiCallData ( "expectRevert" , #bytes ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_ ) )
      
    
    rule  ( S2KVm . S2KexpectRevert ( V0_ : bytes4 ) => #abiCallData ( "expectRevert" , #bytes4 ( V0_ ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_ )
      
    
    rule  ( S2KVm . S2Kfee ( V0_ : uint256 ) => #abiCallData ( "fee" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KgetCode ( V0_ : string ) => #abiCallData ( "getCode" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KgetNonce ( V0_ : address ) => #abiCallData ( "getNonce" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Klabel ( V0_ : address , V1_ : string ) => #abiCallData ( "label" , #address ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2Kload ( V0_ : address , V1_ : bytes32 ) => #abiCallData ( "load" , #address ( V0_ ) , #bytes32 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeBytes ( 32 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2KmockCall ( V0_ : address , V1_ : bytes , V2_ : bytes ) => #abiCallData ( "mockCall" , #address ( V0_ ) , #bytes ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KVm . S2KmockCall ( V0_ : address , V1_ : uint256 , V2_ : bytes , V3_ : bytes ) => #abiCallData ( "mockCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , #bytes ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_ ) )
               ))))
      
    
    rule  ( S2KVm . S2Kprank ( V0_ : address ) => #abiCallData ( "prank" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2Kprank ( V0_ : address , V1_ : address ) => #abiCallData ( "prank" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KVm . S2KreadFile ( V0_ : string ) => #abiCallData ( "readFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadLine ( V0_ : string ) => #abiCallData ( "readLine" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KremoveFile ( V0_ : string ) => #abiCallData ( "removeFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrevertTo ( V0_ : uint256 ) => #abiCallData ( "revertTo" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2Kroll ( V0_ : uint256 ) => #abiCallData ( "roll" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_ : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))
      
    
    rule  ( S2KVm . S2KrpcUrl ( V0_ : string ) => #abiCallData ( "rpcUrl" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KselectFork ( V0_ : uint256 ) => #abiCallData ( "selectFork" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KsetEnv ( V0_ : string , V1_ : string ) => #abiCallData ( "setEnv" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KsetNonce ( V0_ : address , V1_ : uint64 ) => #abiCallData ( "setNonce" , #address ( V0_ ) , #uint64 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2Ksign ( V0_ : uint256 , V1_ : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_ ) , #bytes32 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_ )
       andBool ( #rangeBytes ( 32 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2Ksnapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( V0_ : address ) => #abiCallData ( "startBroadcast" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KstartPrank ( V0_ : address ) => #abiCallData ( "startPrank" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KstartPrank ( V0_ : address , V1_ : address ) => #abiCallData ( "startPrank" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KVm . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kstore ( V0_ : address , V1_ : bytes32 , V2_ : bytes32 ) => #abiCallData ( "store" , #address ( V0_ ) , #bytes32 ( V1_ ) , #bytes32 ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeBytes ( 32 , V1_ )
       andBool ( #rangeBytes ( 32 , V2_ )
               )))
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : address ) => #abiCallData ( "toString" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : bool ) => #abiCallData ( "toString" , #bool ( V0_ ) , .TypedArgs ) )
       ensures #rangeBool ( V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : bytes ) => #abiCallData ( "toString" , #bytes ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_ ) )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_ ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : int256 ) => #abiCallData ( "toString" , #int256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2Kwarp ( V0_ : uint256 ) => #abiCallData ( "warp" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KwriteFile ( V0_ : string , V1_ : string ) => #abiCallData ( "writeFile" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KwriteLine ( V0_ : string , V1_ : string ) => #abiCallData ( "writeLine" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "activeFork()" ) => 789593890 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )
      
    
    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "coinbase(address)" ) => 4282924116 )
      
    
    rule  ( selector ( "createFork(string)" ) => 834286744 )
      
    
    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )
      
    
    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )
      
    
    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )
      
    
    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )
      
    
    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )
      
    
    rule  ( selector ( "expectRevert()" ) => 4102309908 )
      
    
    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )
      
    
    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )
      
    
    rule  ( selector ( "fee(uint256)" ) => 968063664 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )
      
    
    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )
      
    
    rule  ( selector ( "prank(address)" ) => 3395723175 )
      
    
    rule  ( selector ( "prank(address,address)" ) => 1206193358 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )
      
    
    rule  ( selector ( "roll(uint256)" ) => 528174896 )
      
    
    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )
      
    
    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "snapshot()" ) => 2534502746 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startPrank(address)" ) => 105151830 )
      
    
    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopPrank()" ) => 2428830011 )
      
    
    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "warp(uint256)" ) => 3856056066 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module console-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KconsoleContract
    
    syntax S2KconsoleContract ::= "S2Kconsole" [symbol(), klabel(contract_console)]
    
      

endmodule

module console2-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2Kconsole2Contract
    
    syntax S2Kconsole2Contract ::= "S2Kconsole2" [symbol(), klabel(contract_console2)]
    
      

endmodule

module DSTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDSTestContract
    
    syntax S2KDSTestContract ::= "S2KDSTest" [symbol(), klabel(contract_DSTest)]
    
      
    
    syntax Field ::= DSTestField
    
    syntax DSTestField ::= "IS_TEST" [symbol(), klabel(field_DSTest_IS_TEST)]
    
    syntax DSTestField ::= "_failed" [symbol(), klabel(field_DSTest__failed)]
    
    rule  ( #loc ( S2KDSTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDSTest . _failed ) => 0 )
      
    
    syntax Bytes ::= S2KDSTestContract "." S2KDSTestMethod [function(), symbol(), klabel(method_DSTest)]
    
    syntax S2KDSTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DSTest_S2KISZUndTEST_)]
    
    syntax S2KDSTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DSTest_S2Kfailed_)]
    
    rule  ( S2KDSTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDSTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule
