requires "foundry.md"

module S2KAccountParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAccountParamsTestContract
    
    syntax S2KAccountParamsTestContract ::= "S2KAccountParamsTest" [symbol(), klabel(contract_AccountParamsTest)]
    
      
    
    rule  ( #initBytecode ( S2KAccountParamsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611b6f8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638eafad63116100b8578063ba414fa61161007c578063ba414fa61461021a578063d350206f14610232578063e20c9f711461023a578063eaef3d1414610242578063ec846da614610255578063fa7626d41461025d57600080fd5b80638eafad63146101e7578063916a17c6146101ef5780639a13b460146101f7578063b1ec79811461020a578063b5508aa91461021257600080fd5b80633fa6f8501161010a5780633fa6f850146101875780634e18fd0b1461018f5780635f45761c146101a257806366d9a9a0146101aa5780637dbb0fbf146101bf57806385226c81146101d257600080fd5b80631ed7831c146101475780631f9894c2146101655780633021887c1461016f5780633e5e3c23146101775780633f7286f41461017f575b600080fd5b61014f61026a565b60405161015c9190611620565b60405180910390f35b61016d6102cc565b005b61016d61034e565b61014f610419565b61014f610479565b61016d6104d9565b61016d61019d366004611683565b610562565b61016d610742565b6101b2610834565b60405161015c91906116a7565b61016d6101cd36600461175a565b610923565b6101da6109f1565b60405161015c9190611828565b61016d610ac1565b6101b2610b48565b61016d61020536600461188a565b610c2e565b61016d610cab565b6101da610d46565b610222610e16565b604051901515815260200161015c565b61016d610f37565b61014f610f6c565b61016d6102503660046118a3565b610fcc565b61016d611227565b6007546102229060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156102c257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102a4575b5050505050905090565b60405163c88a5e6d60e01b81526101f960048201526101006024820152600080516020611b1a8339815191529063c88a5e6d90604401600060405180830381600087803b15801561031c57600080fd5b505af1158015610330573d6000803e3d6000fd5b5050505061034c6101f96001600160a01b0316316101006112b3565b565b604080518082018252601b81527f746869732073686f756c642062652045564d2062797465636f6465000000000060208201529051635a6b63c160e11b8152600080516020611b1a8339815191529063b4d6c782906103b490607c9085906004016118cc565b600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b50505050610416607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c826113a2565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156102c2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102a4575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102c2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102a4575050505050905090565b604051632d0335ab60e01b815260006004820181905290600080516020611b1a83398151915290632d0335ab906024015b602060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b91906118f8565b90506104168167ffffffffffffffff16600a6112b3565b604051632d0335ab60e01b8152306004820152600090600080516020611b1a83398151915290632d0335ab90602401602060405180830381865afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906118f8565b604051632631f2b160e11b815267ffffffffffffffff808316908516116004820152909150600080516020611b1a83398151915290634c63e5629060240160006040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505060405163f8e18b5760e01b815230600482015267ffffffffffffffff85166024820152600080516020611b1a833981519152925063f8e18b579150604401600060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015267ffffffffffffffff85169250600080516020611b1a8339815191529150632d0335ab90602401602060405180830381865afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072791906118f8565b67ffffffffffffffff161461073e5761073e611915565b5050565b60405163f8e18b5760e01b815230600482015260646024820152600080516020611b1a8339815191529063f8e18b5790604401600060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015260009250600080516020611b1a8339815191529150632d0335ab906024015b602060405180830381865afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081891906118f8565b90508067ffffffffffffffff1660641461041657610416611915565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561091a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561090257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108c45790505b50505050508152505081526020019060010190610858565b50505050905090565b604051635a6b63c160e11b8152600080516020611b1a8339815191529063b4d6c7829061095990607c908690869060040161192b565b600060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b5050505061073e607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113a292505050565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561091a578382906000526020600020018054610a349061196b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a609061196b565b8015610aad5780601f10610a8257610100808354040283529160200191610aad565b820191906000526020600020905b815481529060010190602001808311610a9057829003601f168201915b505050505081526020019060010190610a15565b604051632d0335ab60e01b8152306004820152600090600080516020611b1a83398151915290632d0335ab90602401602060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3191906118f8565b90506104168167ffffffffffffffff1660016112b3565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561091a5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c1657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610bd85790505b50505050508152505081526020019060010190610b6c565b60405163c88a5e6d60e01b8152610148600482015260248101829052600080516020611b1a8339815191529063c88a5e6d90604401600060405180830381600087803b158015610c7d57600080fd5b505af1158015610c91573d6000803e3d6000fd5b505050506104166101486001600160a01b031631826112b3565b60405163f8e18b5760e01b81526064600482018190526024820152600080516020611b1a8339815191529063f8e18b5790604401600060405180830381600087803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526064600482015260009250600080516020611b1a8339815191529150632d0335ab906024016107d7565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561091a578382906000526020600020018054610d899061196b565b80601f0160208091040260200160405190810160405280929190818152602001828054610db59061196b565b8015610e025780601f10610dd757610100808354040283529160200191610e02565b820191906000526020600020905b815481529060010190602001808311610de557829003601f168201915b505050505081526020019060010190610d6a565b600754600090610100900460ff1615610e385750600754610100900460ff1690565b6000600080516020611b1a8339815191523b15610f325760408051600080516020611b1a833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610eba917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016119a5565b60408051601f1981840301815290829052610ed4916119d6565b6000604051808303816000865af19150503d8060008114610f11576040519150601f19603f3d011682016040523d82523d6000602084013e610f16565b606091505b5091505080806020019051810190610f2e91906119f2565b9150505b919050565b604051632d0335ab60e01b815260646004820152600090600080516020611b1a83398151915290632d0335ab9060240161050a565b606060138054806020026020016040519081016040528092919081815260200182805480156102c2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102a4575050505050905090565b604051632631f2b160e11b8152600080516020611b1a8339815191526001600160a01b038316811415600483015290634c63e5629060240160006040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b5050604051632631f2b160e11b8152306001600160a01b03851614156004820152600080516020611b1a8339815191529250634c63e562915060240160006040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b5050604051632631f2b160e11b8152733fab184622dc19b6109349b94811493bf2a453626001600160a01b03851614156004820152600080516020611b1a8339815191529250634c63e562915060240160006040518083038186803b15801561110057600080fd5b505afa158015611114573d6000803e3d6000fd5b5050604051632631f2b160e11b8152734e59b44847b379578588920ca78fbf26c0b4956c6001600160a01b03851614156004820152600080516020611b1a8339815191529250634c63e562915060240160006040518083038186803b15801561117c57600080fd5b505afa158015611190573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526001600160a01b038416600482015260009250600080516020611b1a8339815191529150632d0335ab90602401602060405180830381865afa1580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d91906118f8565b905067ffffffffffffffff81161561073e5761073e611915565b604051632d0335ab60e01b8152306004820152600090600080516020611b1a83398151915290632d0335ab90602401602060405180830381865afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129791906118f8565b90508067ffffffffffffffff1660011461041657610416611915565b80821461073e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516113249060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161135b9190611a14565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516113929190611a4c565b60405180910390a161073e6113ac565b61073e82826114ac565b600080516020611b1a8339815191523b1561149b5760408051600080516020611b1a833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261143a92916020016119a5565b60408051601f1981840301815290829052611454916119d6565b6000604051808303816000865af19150503d8060008114611491576040519150601f19603f3d011682016040523d82523d6000602084013e611496565b606091505b505050505b6007805461ff001916610100179055565b6114b68282611593565b61073e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516115259060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161155c9190611a76565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516113929190611ab2565b8051825160019190036116165760005b8351811015611610578281815181106115be576115be611adc565b602001015160f81c60f81b6001600160f81b0319168482815181106115e5576115e5611adc565b01602001516001600160f81b031916146115fe57600091505b8061160881611af2565b9150506115a3565b5061161a565b5060005b92915050565b6020808252825182820181905260009190848201906040850190845b818110156116615783516001600160a01b03168352928401929184019160010161163c565b50909695505050505050565b67ffffffffffffffff8116811461041657600080fd5b60006020828403121561169557600080fd5b81356116a08161166d565b9392505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561174b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156117365783516001600160e01b0319168252928b019260019290920191908b019061170c565b50978a019795505050918701916001016116cf565b50919998505050505050505050565b6000806020838503121561176d57600080fd5b823567ffffffffffffffff8082111561178557600080fd5b818501915085601f83011261179957600080fd5b8135818111156117a857600080fd5b8660208285010111156117ba57600080fd5b60209290920196919550909350505050565b60005b838110156117e75781810151838201526020016117cf565b838111156117f6576000848401525b50505050565b600081518084526118148160208601602086016117cc565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561187d57603f1988860301845261186b8583516117fc565b9450928501929085019060010161184f565b5092979650505050505050565b60006020828403121561189c57600080fd5b5035919050565b6000602082840312156118b557600080fd5b81356001600160a01b03811681146116a057600080fd5b6001600160a01b03831681526040602082018190526000906118f0908301846117fc565b949350505050565b60006020828403121561190a57600080fd5b81516116a08161166d565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b600181811c9082168061197f57607f821691505b60208210810361199f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906119c88160048501602087016117cc565b919091016004019392505050565b600082516119e88184602087016117cc565b9190910192915050565b600060208284031215611a0457600080fd5b815180151581146116a057600080fd5b604081526000611a3e60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611a3e60408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611aa060408301600a8152690808080808081319599d60b21b602082015260400190565b82810360208401526118f081856117fc565b604081526000611aa060408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600060018201611b1257634e487b7160e01b600052601160045260246000fd5b506001019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220697c37888105253c1e80f906a1caadca24ed641ef03402c215922e1a566d85b364736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KAccountParamsTestField
    
    syntax S2KAccountParamsTestField ::= "stdstore" [symbol(), klabel(field_AccountParamsTest_stdstore)]
    
    syntax S2KAccountParamsTestField ::= "IS_TEST" [symbol(), klabel(field_AccountParamsTest_IS_TEST)]
    
    syntax S2KAccountParamsTestField ::= "_failed" [symbol(), klabel(field_AccountParamsTest__failed)]
    
    syntax S2KAccountParamsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_AccountParamsTest_stdChainsInitialized)]
    
    syntax S2KAccountParamsTestField ::= "chains" [symbol(), klabel(field_AccountParamsTest_chains)]
    
    syntax S2KAccountParamsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_AccountParamsTest_defaultRpcUrls)]
    
    syntax S2KAccountParamsTestField ::= "idToAlias" [symbol(), klabel(field_AccountParamsTest_idToAlias)]
    
    syntax S2KAccountParamsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_AccountParamsTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KAccountParamsTestField ::= "gasMeteringOff" [symbol(), klabel(field_AccountParamsTest_gasMeteringOff)]
    
    syntax S2KAccountParamsTestField ::= "_excludedContracts" [symbol(), klabel(field_AccountParamsTest__excludedContracts)]
    
    syntax S2KAccountParamsTestField ::= "_excludedSenders" [symbol(), klabel(field_AccountParamsTest__excludedSenders)]
    
    syntax S2KAccountParamsTestField ::= "_targetedContracts" [symbol(), klabel(field_AccountParamsTest__targetedContracts)]
    
    syntax S2KAccountParamsTestField ::= "_targetedSenders" [symbol(), klabel(field_AccountParamsTest__targetedSenders)]
    
    syntax S2KAccountParamsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_AccountParamsTest__excludedArtifacts)]
    
    syntax S2KAccountParamsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_AccountParamsTest__targetedArtifacts)]
    
    syntax S2KAccountParamsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_AccountParamsTest__targetedArtifactSelectors)]
    
    syntax S2KAccountParamsTestField ::= "_targetedSelectors" [symbol(), klabel(field_AccountParamsTest__targetedSelectors)]
    
    rule  ( #loc ( S2KAccountParamsTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KAccountParamsTestContract "." S2KAccountParamsTestMethod [function(), symbol(), klabel(method_AccountParamsTest)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KISZUndTEST_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KexcludeArtifacts_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KexcludeContracts_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KexcludeSenders_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2Kfailed_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtargetArtifacts_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtargetContracts_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtargetSelectors_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtargetSenders_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestDealConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestDealConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestDealSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestDealSymbolic_uint256)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestEtchConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestEtchConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestEtchSymbolic" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestEtchSymbolic_bytes)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestFailZUndGetNonceZUndfalse_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestFailZUndGetNonceZUndtrue_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestNonceSymbolic" "(" Int ":" "uint64" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestNonceSymbolic_uint64)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndGetNonceZUndfalse_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndGetNonceZUndtrue_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndNonceZUndExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndNonceZUndExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndNonceZUndNonExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndNonceZUndNonExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndgetNonceZUndunknownSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndgetNonceZUndunknownSymbolic_address)]
    
    rule  ( S2KAccountParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestDealConcrete ( ) => #abiCallData ( "testDealConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestDealSymbolic ( V0_value : uint256 ) => #abiCallData ( "testDealSymbolic" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KAccountParamsTest . S2KtestEtchConcrete ( ) => #abiCallData ( "testEtchConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestEtchSymbolic ( V0_code : bytes ) => #abiCallData ( "testEtchSymbolic" , #bytes ( V0_code ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_code ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestFailZUndGetNonceZUndfalse ( ) => #abiCallData ( "testFail_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestFailZUndGetNonceZUndtrue ( ) => #abiCallData ( "testFail_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestNonceSymbolic ( V0_newNonce : uint64 ) => #abiCallData ( "testNonceSymbolic" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndGetNonceZUndfalse ( ) => #abiCallData ( "test_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndGetNonceZUndtrue ( ) => #abiCallData ( "test_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndNonceZUndExistentAddress ( ) => #abiCallData ( "test_Nonce_ExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndNonceZUndNonExistentAddress ( ) => #abiCallData ( "test_Nonce_NonExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndgetNonceZUndunknownSymbolic ( V0_addr : address ) => #abiCallData ( "test_getNonce_unknownSymbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testDealConcrete()" ) => 530093250 )
      
    
    rule  ( selector ( "testDealSymbolic(uint256)" ) => 2584982624 )
      
    
    rule  ( selector ( "testEtchConcrete()" ) => 807503996 )
      
    
    rule  ( selector ( "testEtchSymbolic(bytes)" ) => 2109411263 )
      
    
    rule  ( selector ( "testFail_GetNonce_false()" ) => 2393877859 )
      
    
    rule  ( selector ( "testFail_GetNonce_true()" ) => 1067907152 )
      
    
    rule  ( selector ( "testNonceSymbolic(uint64)" ) => 1310260491 )
      
    
    rule  ( selector ( "test_GetNonce_false()" ) => 3545243759 )
      
    
    rule  ( selector ( "test_GetNonce_true()" ) => 3968101798 )
      
    
    rule  ( selector ( "test_Nonce_ExistentAddress()" ) => 1598387740 )
      
    
    rule  ( selector ( "test_Nonce_NonExistentAddress()" ) => 2985064833 )
      
    
    rule  ( selector ( "test_getNonce_unknownSymbolic(address)" ) => 3941547284 )
      

endmodule

module S2KAddrTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAddrTestContract
    
    syntax S2KAddrTestContract ::= "S2KAddrTest" [symbol(), klabel(contract_AddrTest)]
    
      
    
    rule  ( #initBytecode ( S2KAddrTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061127c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063942d6ecd116100ad578063c4ddbed311610071578063c4ddbed314610144578063d6a2ec76146101ee578063e20c9f711461022d578063f5d3bbdd14610235578063fa7626d41461023d57600080fd5b8063942d6ecd146101ab578063b5508aa9146101b3578063b70f1ccb146101bb578063ba414fa6146101ce578063bff1c100146101e657600080fd5b806366d9a9a0116100f457806366d9a9a01461015e57806380c8c4b31461017357806385226c81146101865780638f9999a71461019b578063916a17c6146101a357600080fd5b80631ed7831c1461012657806330391edb146101445780633e5e3c231461014e5780633f7286f414610156575b600080fd5b61012e61024a565b60405161013b9190610f64565b60405180910390f35b61014c6102ac565b005b61012e610343565b61012e6103a3565b610166610403565b60405161013b9190610fb1565b61014c610181366004611079565b6104f2565b61018e6105e7565b60405161013b91906110cd565b61014c6106b7565b6101666106c6565b61014c6107ac565b61018e610836565b61014c6101c9366004611147565b610906565b6101d6610a4d565b604051901515815260200161013b565b61014c610b6e565b6102157f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161013b565b61012e610bc4565b61014c610c24565b6007546101d69060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156102a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610284575b5050505050905090565b6040516001625e79b760e01b03198152600160048201526000906000805160206112278339815191529063ffa1864990602401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103209190611160565b905061034081737e5f4552091a69125d5dfcb7b8c2659029395bdf610c5c565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156102a2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610284575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102a2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610284575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104e95760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104d157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104935790505b50505050508152505081526020019060010190610427565b50505050905090565b604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b0383161415600482015260008051602061122783398151915290634c63e5629060240160006040518083038186803b15801561055657600080fd5b505afa15801561056a573d6000803e3d6000fd5b5050604051632631f2b160e11b81526000805160206112278339815191526001600160a01b03851681141560048301529250634c63e562915060240160006040518083038186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506103406105e282610da8565b610df4565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104e957838290600052602060002001805461062a9061117d565b80601f01602080910402602001604051908101604052809291908181526020018280546106569061117d565b80156106a35780601f10610678576101008083540402835291602001916106a3565b820191906000526020600020905b81548152906001019060200180831161068657829003601f168201915b50505050508152602001906001019061060b565b6106c46105e2606e610da8565b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104e95760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561079457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107565790505b505050505081525050815260200190600101906106ea565b6040516001625e79b760e01b0319815270014551231950b75fc4402da1732fc9bebe1960048201526000906000805160206112278339815191529063ffa18649906024015b602060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108329190611160565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104e95783829060005260206000200180546108799061117d565b80601f01602080910402602001604051908101604052809291908181526020018280546108a59061117d565b80156108f25780601f106108c7576101008083540402835291602001916108f2565b820191906000526020600020905b8154815290600101906020018083116108d557829003601f168201915b50505050508152602001906001019061085a565b604051632631f2b160e11b8152811515600482015260008051602061122783398151915290634c63e5629060240160006040518083038186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b5050604051632631f2b160e11b815270014551231950b75fc4402da1732fc9bebe19841060048201526000805160206112278339815191529250634c63e562915060240160006040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b50506040516001625e79b760e01b031981526004810184905260009250600080516020611227833981519152915063ffa1864990602401602060405180830381865afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190611160565b505050565b600754600090610100900460ff1615610a6f5750600754610100900460ff1690565b60006000805160206112278339815191523b15610b695760408051600080516020611227833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610af1917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016111b7565b60408051601f1981840301815290829052610b0b916111e8565b6000604051808303816000865af19150503d8060008114610b48576040519150601f19603f3d011682016040523d82523d6000602084013e610b4d565b606091505b5091505080806020019051810190610b659190611204565b9150505b919050565b610b8c30737fa9385be102ac3eac297483dd6233d62b3e1496610c5c565b6106c47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d600080516020611227833981519152610c5c565b606060138054806020026020016040519081016040528092919081815260200182805480156102a2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610284575050505050905090565b6040516001625e79b760e01b03198152600060048201819052906000805160206112278339815191529063ffa18649906024016107f1565b806001600160a01b0316826001600160a01b031614610832577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610ce29060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a1610832610e64565b60006001600160a01b03821660008051602061122783398151915214801590610dee57506001600160a01b038216737fa9385be102ac3eac297483dd6233d62b3e149614155b92915050565b80610340577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610e589060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16103405b6000805160206112278339815191523b15610f535760408051600080516020611227833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610ef292916020016111b7565b60408051601f1981840301815290829052610f0c916111e8565b6000604051808303816000865af19150503d8060008114610f49576040519150601f19603f3d011682016040523d82523d6000602084013e610f4e565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610fa55783516001600160a01b031683529284019291840191600101610f80565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561105557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110405783516001600160e01b0319168252928b019260019290920191908b0190611016565b50978a01979550505091870191600101610fd9565b50919998505050505050505050565b6001600160a01b038116811461034057600080fd5b60006020828403121561108b57600080fd5b813561109681611064565b9392505050565b60005b838110156110b85781810151838201526020016110a0565b838111156110c7576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561113a57878503603f190184528151805180875261111b818989018a850161109d565b601f01601f1916959095018601945092850192908501906001016110f4565b5092979650505050505050565b60006020828403121561115957600080fd5b5035919050565b60006020828403121561117257600080fd5b815161109681611064565b600181811c9082168061119157607f821691505b6020821081036111b157634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906111da81600485016020870161109d565b919091016004019392505050565b600082516111fa81846020870161109d565b9190910192915050565b60006020828403121561121657600080fd5b8151801515811461109657600080fdfe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212206f371217174b04b67a7ea0593d9695dd9b9b5d23e043282ed4ecd7eaf6b9907f64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KAddrTestField
    
    syntax S2KAddrTestField ::= "stdstore" [symbol(), klabel(field_AddrTest_stdstore)]
    
    syntax S2KAddrTestField ::= "IS_TEST" [symbol(), klabel(field_AddrTest_IS_TEST)]
    
    syntax S2KAddrTestField ::= "_failed" [symbol(), klabel(field_AddrTest__failed)]
    
    syntax S2KAddrTestField ::= "stdChainsInitialized" [symbol(), klabel(field_AddrTest_stdChainsInitialized)]
    
    syntax S2KAddrTestField ::= "chains" [symbol(), klabel(field_AddrTest_chains)]
    
    syntax S2KAddrTestField ::= "defaultRpcUrls" [symbol(), klabel(field_AddrTest_defaultRpcUrls)]
    
    syntax S2KAddrTestField ::= "idToAlias" [symbol(), klabel(field_AddrTest_idToAlias)]
    
    syntax S2KAddrTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_AddrTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KAddrTestField ::= "gasMeteringOff" [symbol(), klabel(field_AddrTest_gasMeteringOff)]
    
    syntax S2KAddrTestField ::= "_excludedContracts" [symbol(), klabel(field_AddrTest__excludedContracts)]
    
    syntax S2KAddrTestField ::= "_excludedSenders" [symbol(), klabel(field_AddrTest__excludedSenders)]
    
    syntax S2KAddrTestField ::= "_targetedContracts" [symbol(), klabel(field_AddrTest__targetedContracts)]
    
    syntax S2KAddrTestField ::= "_targetedSenders" [symbol(), klabel(field_AddrTest__targetedSenders)]
    
    syntax S2KAddrTestField ::= "_excludedArtifacts" [symbol(), klabel(field_AddrTest__excludedArtifacts)]
    
    syntax S2KAddrTestField ::= "_targetedArtifacts" [symbol(), klabel(field_AddrTest__targetedArtifacts)]
    
    syntax S2KAddrTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_AddrTest__targetedArtifactSelectors)]
    
    syntax S2KAddrTestField ::= "_targetedSelectors" [symbol(), klabel(field_AddrTest__targetedSelectors)]
    
    rule  ( #loc ( S2KAddrTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KAddrTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KAddrTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KAddrTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KAddrTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KAddrTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KAddrTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KAddrTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KAddrTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KAddrTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KAddrTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KAddrTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KAddrTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KAddrTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KAddrTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KAddrTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KAddrTestContract "." S2KAddrTestMethod [function(), symbol(), klabel(method_AddrTest)]
    
    syntax S2KAddrTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AddrTest_S2KISZUndTEST_)]
    
    syntax S2KAddrTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_AddrTest_S2KexcludeArtifacts_)]
    
    syntax S2KAddrTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_AddrTest_S2KexcludeContracts_)]
    
    syntax S2KAddrTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_AddrTest_S2KexcludeSenders_)]
    
    syntax S2KAddrTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AddrTest_S2Kfailed_)]
    
    syntax S2KAddrTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AddrTest_S2Kkevm_)]
    
    syntax S2KAddrTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_AddrTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KAddrTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_AddrTest_S2KtargetArtifacts_)]
    
    syntax S2KAddrTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_AddrTest_S2KtargetContracts_)]
    
    syntax S2KAddrTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_AddrTest_S2KtargetSelectors_)]
    
    syntax S2KAddrTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_AddrTest_S2KtargetSenders_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestFailZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestFailZUndaddrZUndfalse_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestFailZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestFailZUndaddrZUndtrue_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndfalse_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndsymbolic_uint256)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndtrue_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndbuiltInAddresses" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndbuiltInAddresses_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndconcrete" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndnotBuiltinAddressZUndconcrete_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndsymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndnotBuiltinAddressZUndsymbolic_address)]
    
    rule  ( S2KAddrTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestFailZUndaddrZUndfalse ( ) => #abiCallData ( "testFail_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestFailZUndaddrZUndtrue ( ) => #abiCallData ( "testFail_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndfalse ( ) => #abiCallData ( "test_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "test_addr_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndtrue ( ) => #abiCallData ( "test_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndbuiltInAddresses ( ) => #abiCallData ( "test_builtInAddresses" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndnotBuiltinAddressZUndconcrete ( ) => #abiCallData ( "test_notBuiltinAddress_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndnotBuiltinAddressZUndsymbolic ( V0_addr : address ) => #abiCallData ( "test_notBuiltinAddress_symbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_addr_false()" ) => 3302866643 )
      
    
    rule  ( selector ( "testFail_addr_true()" ) => 2486005453 )
      
    
    rule  ( selector ( "test_addr_false()" ) => 4124294109 )
      
    
    rule  ( selector ( "test_addr_symbolic(uint256)" ) => 3071220939 )
      
    
    rule  ( selector ( "test_addr_true()" ) => 809049819 )
      
    
    rule  ( selector ( "test_builtInAddresses()" ) => 3220291840 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_concrete()" ) => 2409208231 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_symbolic(address)" ) => 2160641203 )
      

endmodule

module S2KAllowChangesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAllowChangesTestContract
    
    syntax S2KAllowChangesTestContract ::= "S2KAllowChangesTest" [symbol(), klabel(contract_AllowChangesTest)]
    
      
    
    rule  ( #initBytecode ( S2KAllowChangesTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506113288061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b5508aa911610097578063e20c9f7111610066578063e20c9f71146101de578063f6243db1146101e6578063f8a8fd6d146101ee578063fa7626d4146101f657600080fd5b8063b5508aa914610177578063ba414fa61461017f578063d6a2ec7614610197578063dc20bc5b146101d657600080fd5b80635b31d527116100d35780635b31d5271461013d57806366d9a9a01461014557806385226c811461015a578063916a17c61461016f57600080fd5b80631ed7831c146101055780633e5e3c23146101235780633f7286f41461012b5780634b453a5914610133575b600080fd5b61010d610203565b60405161011a9190610f9c565b60405180910390f35b61010d610265565b61010d6102c5565b61013b610325565b005b61013b6104c1565b61014d61062b565b60405161011a9190610fe9565b61016261071a565b60405161011a91906110cc565b61014d6107ea565b6101626108d0565b6101876109a0565b604051901515815260200161011a565b6101be7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161011a565b61013b610acd565b61010d610c36565b61013b610c96565b61013b610e01565b6007546101879060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561025b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161023d575b5050505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561025b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161023d575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561025b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161023d575050505050905090565b600060405161033390610f90565b604051809103906000f08015801561034f573d6000803e3d6000fd5b509050600060405161036090610f90565b604051809103906000f08015801561037c573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b1580156103d557600080fd5b505af11580156103e9573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b15801561044957600080fd5b505af115801561045d573d6000803e3d6000fd5b505060405163616b8d0560e01b815261280560048201526001600160a01b038416925063616b8d0591506024015b600060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050505050565b60006040516104cf90610f90565b604051809103906000f0801580156104eb573d6000803e3d6000fd5b50905060006040516104fc90610f90565b604051809103906000f080158015610518573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b15801561057157600080fd5b505af1158015610585573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b1580156105e557600080fd5b505af11580156105f9573d6000803e3d6000fd5b5050604051630af33d5360e11b8152615b9c60048201526001600160a01b03851692506315e67aa6915060240161048b565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156107115760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106bb5790505b5050505050815250508152602001906001019061064f565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561071157838290600052602060002001805461075d90611146565b80601f016020809104026020016040519081016040528092919081815260200182805461078990611146565b80156107d65780601f106107ab576101008083540402835291602001916107d6565b820191906000526020600020905b8154815290600101906020018083116107b957829003601f168201915b50505050508152602001906001019061073e565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156107115760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108b857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161087a5790505b5050505050815250508152602001906001019061080e565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561071157838290600052602060002001805461091390611146565b80601f016020809104026020016040519081016040528092919081815260200182805461093f90611146565b801561098c5780601f106109615761010080835404028352916020019161098c565b820191906000526020600020905b81548152906001019060200180831161096f57829003601f168201915b5050505050815260200190600101906108f4565b600754600090610100900460ff16156109c25750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ac85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a50917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611180565b60408051601f1981840301815290829052610a6a916111b1565b6000604051808303816000865af19150503d8060008114610aa7576040519150601f19603f3d011682016040523d82523d6000602084013e610aac565b606091505b5091505080806020019051810190610ac491906111cd565b9150505b919050565b6000604051610adb90610f90565b604051809103906000f080158015610af7573d6000803e3d6000fd5b5090506000604051610b0890610f90565b604051809103906000f080158015610b24573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b158015610b7d57600080fd5b505af1158015610b91573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505060405163616b8d0560e01b8152605560048201526001600160a01b038516925063616b8d05915060240161048b565b6060601380548060200260200160405190810160405280929190818152602001828054801561025b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161023d575050505050905090565b6000604051610ca490610f90565b604051809103906000f080158015610cc0573d6000803e3d6000fd5b5090506000604051610cd190610f90565b604051809103906000f080158015610ced573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b158015610d4657600080fd5b505af1158015610d5a573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b158015610dba57600080fd5b505af1158015610dce573d6000803e3d6000fd5b5050604051630af33d5360e11b81526203941960048201526001600160a01b03851692506315e67aa6915060240161048b565b610e0b6001610e0d565b565b80610e81577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610e719060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610e81610e84565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610f7f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610f1e9291602001611180565b60408051601f1981840301815290829052610f38916111b1565b6000604051808303816000865af19150503d8060008114610f75576040519150601f19603f3d011682016040523d82523d6000602084013e610f7a565b606091505b505050505b6007805461ff001916610100179055565b60fc806111f783390190565b6020808252825182820181905260009190848201906040850190845b81811015610fdd5783516001600160a01b031683529284019291840191600101610fb8565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561108d57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110785783516001600160e01b0319168252928b019260019290920191908b019061104e565b50978a01979550505091870191600101611011565b50919998505050505050505050565b60005b838110156110b757818101518382015260200161109f565b838111156110c6576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561113957878503603f190184528151805180875261111a818989018a850161109c565b601f01601f1916959095018601945092850192908501906001016110f3565b5092979650505050505050565b600181811c9082168061115a57607f821691505b60208210810361117a57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906111a381600485016020870161109c565b919091016004019392505050565b600082516111c381846020870161109c565b9190910192915050565b6000602082840312156111df57600080fd5b815180151581146111ef57600080fd5b939250505056fe608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea26469706673582212206bdd86857ffc836e2336598d65d527c12a9255331ebc5651122cdc157f5648f564736f6c634300080d0033a264697066735822122041e2cd859acf91fa5a4f37c6719e05563f45fc3aa1b75b07909d7ffd1377ec9d64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KAllowChangesTestField
    
    syntax S2KAllowChangesTestField ::= "stdstore" [symbol(), klabel(field_AllowChangesTest_stdstore)]
    
    syntax S2KAllowChangesTestField ::= "IS_TEST" [symbol(), klabel(field_AllowChangesTest_IS_TEST)]
    
    syntax S2KAllowChangesTestField ::= "_failed" [symbol(), klabel(field_AllowChangesTest__failed)]
    
    syntax S2KAllowChangesTestField ::= "stdChainsInitialized" [symbol(), klabel(field_AllowChangesTest_stdChainsInitialized)]
    
    syntax S2KAllowChangesTestField ::= "chains" [symbol(), klabel(field_AllowChangesTest_chains)]
    
    syntax S2KAllowChangesTestField ::= "defaultRpcUrls" [symbol(), klabel(field_AllowChangesTest_defaultRpcUrls)]
    
    syntax S2KAllowChangesTestField ::= "idToAlias" [symbol(), klabel(field_AllowChangesTest_idToAlias)]
    
    syntax S2KAllowChangesTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_AllowChangesTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KAllowChangesTestField ::= "gasMeteringOff" [symbol(), klabel(field_AllowChangesTest_gasMeteringOff)]
    
    syntax S2KAllowChangesTestField ::= "_excludedContracts" [symbol(), klabel(field_AllowChangesTest__excludedContracts)]
    
    syntax S2KAllowChangesTestField ::= "_excludedSenders" [symbol(), klabel(field_AllowChangesTest__excludedSenders)]
    
    syntax S2KAllowChangesTestField ::= "_targetedContracts" [symbol(), klabel(field_AllowChangesTest__targetedContracts)]
    
    syntax S2KAllowChangesTestField ::= "_targetedSenders" [symbol(), klabel(field_AllowChangesTest__targetedSenders)]
    
    syntax S2KAllowChangesTestField ::= "_excludedArtifacts" [symbol(), klabel(field_AllowChangesTest__excludedArtifacts)]
    
    syntax S2KAllowChangesTestField ::= "_targetedArtifacts" [symbol(), klabel(field_AllowChangesTest__targetedArtifacts)]
    
    syntax S2KAllowChangesTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_AllowChangesTest__targetedArtifactSelectors)]
    
    syntax S2KAllowChangesTestField ::= "_targetedSelectors" [symbol(), klabel(field_AllowChangesTest__targetedSelectors)]
    
    rule  ( #loc ( S2KAllowChangesTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KAllowChangesTestContract "." S2KAllowChangesTestMethod [function(), symbol(), klabel(method_AllowChangesTest)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KISZUndTEST_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KexcludeArtifacts_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KexcludeContracts_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KexcludeSenders_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kfailed_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kkevm_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtargetArtifacts_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtargetContracts_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtargetSelectors_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtargetSenders_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Ktest" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Ktest_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestAllow" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestAllow_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestAllowZUndfail" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestAllowZUndfail_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestFailAllowCallsToAddress" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestFailAllowCallsToAddress_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestFailAllowChangesToStorage" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestFailAllowChangesToStorage_)]
    
    rule  ( S2KAllowChangesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Ktest ( ) => #abiCallData ( "test" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestAllow ( ) => #abiCallData ( "testAllow" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestAllowZUndfail ( ) => #abiCallData ( "testAllow_fail" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestFailAllowCallsToAddress ( ) => #abiCallData ( "testFailAllowCallsToAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestFailAllowChangesToStorage ( ) => #abiCallData ( "testFailAllowChangesToStorage" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test()" ) => 4171824493 )
      
    
    rule  ( selector ( "testAllow()" ) => 3693132891 )
      
    
    rule  ( selector ( "testAllow_fail()" ) => 4129570225 )
      
    
    rule  ( selector ( "testFailAllowCallsToAddress()" ) => 1262828121 )
      
    
    rule  ( selector ( "testFailAllowChangesToStorage()" ) => 1529992487 )
      

endmodule

module S2KValueStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KValueStoreContract
    
    syntax S2KValueStoreContract ::= "S2KValueStore" [symbol(), klabel(contract_ValueStore)]
    
      
    
    rule  ( #initBytecode ( S2KValueStore ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea26469706673582212206bdd86857ffc836e2336598d65d527c12a9255331ebc5651122cdc157f5648f564736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KValueStoreField
    
    syntax S2KValueStoreField ::= "value1" [symbol(), klabel(field_ValueStore_value1)]
    
    syntax S2KValueStoreField ::= "value2" [symbol(), klabel(field_ValueStore_value2)]
    
    rule  ( #loc ( S2KValueStore . value1 ) => 0 )
      
    
    rule  ( #loc ( S2KValueStore . value2 ) => 1 )
      
    
    syntax Bytes ::= S2KValueStoreContract "." S2KValueStoreMethod [function(), symbol(), klabel(method_ValueStore)]
    
    syntax S2KValueStoreMethod ::= "S2KchangeValue1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_S2KchangeValue1_uint256)]
    
    syntax S2KValueStoreMethod ::= "S2KchangeValue2" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_S2KchangeValue2_uint256)]
    
    syntax S2KValueStoreMethod ::= "S2Kvalue1" "(" ")" [symbol(), klabel(method_ValueStore_S2Kvalue1_)]
    
    syntax S2KValueStoreMethod ::= "S2Kvalue2" "(" ")" [symbol(), klabel(method_ValueStore_S2Kvalue2_)]
    
    rule  ( S2KValueStore . S2KchangeValue1 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue1" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . S2KchangeValue2 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue2" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . S2Kvalue1 ( ) => #abiCallData ( "value1" , .TypedArgs ) )
      
    
    rule  ( S2KValueStore . S2Kvalue2 ( ) => #abiCallData ( "value2" , .TypedArgs ) )
      
    
    rule  ( selector ( "changeValue1(uint256)" ) => 1634438405 )
      
    
    rule  ( selector ( "changeValue2(uint256)" ) => 367426214 )
      
    
    rule  ( selector ( "value1()" ) => 808665403 )
      
    
    rule  ( selector ( "value2()" ) => 1563665023 )
      

endmodule

module S2KAmbiguousTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAmbiguousTestContract
    
    syntax S2KAmbiguousTestContract ::= "S2KAmbiguousTest" [symbol(), klabel(contract_AmbiguousTest)]
    
      
    
    rule  ( #initBytecode ( S2KAmbiguousTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061017d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063029ad3241461005c5780631bc8f2e51461007057806329f11b2414610081578063360da4d21461006e578063b44b821914610070575b600080fd5b61006e61006a36600461008f565b5050565b005b61006e61007e366004610104565b50565b61006e61007e36600461011d565b600080602083850312156100a257600080fd5b823567ffffffffffffffff808211156100ba57600080fd5b818501915085601f8301126100ce57600080fd5b8135818111156100dd57600080fd5b8660208260051b85010111156100f257600080fd5b60209290920196919550909350505050565b60006020828403121561011657600080fd5b5035919050565b60006020828403121561012f57600080fd5b813560ff8116811461014057600080fd5b939250505056fea2646970667358221220936666807f8fb02a8fcfd4e8703ab22b9e93ee2e18a103ebe670f84184c60c2e64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KAmbiguousTestContract "." S2KAmbiguousTestMethod [function(), symbol(), klabel(method_AmbiguousTest)]
    
    syntax S2KAmbiguousTestMethod ::= "S2KtestZUndarrayZUndtype" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AmbiguousTest_S2KtestZUndarrayZUndtype_uint256)]
    
    syntax S2KAmbiguousTestMethod ::= "S2KtestZUndarrayZUndtype" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_AmbiguousTest_S2KtestZUndarrayZUndtype_uint256[])]
    
    syntax S2KAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AmbiguousTest_S2KtestZUndassertZUndtrue_)]
    
    syntax S2KAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AmbiguousTest_S2KtestZUndassertZUndtrue_uint256)]
    
    syntax S2KAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" Int ":" "uint8" ")" [symbol(), klabel(method_AmbiguousTest_S2KtestZUndassertZUndtrue_uint8)]
    
    rule  ( S2KAmbiguousTest . S2KtestZUndarrayZUndtype ( V0_ : uint256 ) => #abiCallData ( "test_array_type" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KAmbiguousTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAmbiguousTest . S2KtestZUndassertZUndtrue ( V0_ : uint256 ) => #abiCallData ( "test_assert_true" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KAmbiguousTest . S2KtestZUndassertZUndtrue ( V0_ : uint8 ) => #abiCallData ( "test_assert_true" , #uint8 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_ )
      
    
    rule  ( selector ( "test_array_type(uint256)" ) => 3024847385 )
      
    
    rule  ( selector ( "test_array_type(uint256[])" ) => 43701028 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true(uint256)" ) => 466154213 )
      
    
    rule  ( selector ( "test_assert_true(uint8)" ) => 703666980 )
      

endmodule

module S2KArithmeticTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KArithmeticTestContract
    
    syntax S2KArithmeticTestContract ::= "S2KArithmeticTest" [symbol(), klabel(contract_ArithmeticTest)]
    
      
    
    rule  ( #initBytecode ( S2KArithmeticTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061127e8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806366d9a9a0116100c3578063b5508aa91161007c578063b5508aa914610285578063ba414fa61461028d578063ddb4cc44146102a5578063e20c9f71146102b8578063fa7626d4146102c0578063fdfbd859146102cd57600080fd5b806366d9a9a01461021a57806385226c811461022f578063916a17c614610244578063a314a14b1461024c578063a5fab3251461025f578063a76f927c1461027257600080fd5b80633c4a8f4a116101155780633c4a8f4a146101be5780633e5e3c23146101d15780633f7286f4146101d957806342f043e8146101e157806354bca017146101f457806360e734ec1461020757600080fd5b80631490583f1461015257806319e9b44b146101675780631d3663f81461017a5780631ed7831c1461018d5780633595ff67146101ab575b600080fd5b610165610160366004610f68565b6102e0565b005b610165610175366004610f68565b61030e565b610165610188366004610f68565b610339565b610195610387565b6040516101a29190610f8a565b60405180910390f35b6101656101b9366004610f68565b6103e9565b6101656101cc366004610f68565b610417565b610195610469565b6101956104c9565b6101656101ef366004610f68565b610529565b610165610202366004610f68565b610535565b610165610215366004610f68565b610581565b6102226105fe565b6040516101a29190610fd7565b6102376106ed565b6040516101a291906110b6565b6102226107bd565b61016561025a366004610f68565b6108a3565b61016561026d366004610f68565b6108eb565b610165610280366004610f68565b6108f7565b61023761097e565b610295610a4e565b60405190151581526020016101a2565b6101656102b3366004610f68565b610b7b565b610195610ba9565b6007546102959060ff1681565b6101656102db366004610f68565b610c09565b60006102ec8383610c23565b905060006102fa8484610c5e565b905061030882821115610c73565b50505050565b600061031a8383610cea565b905061033483821015801561032f5750828210155b610c73565b505050565b8160001080156103495750806000105b156103835761035a82600019611146565b811161038357600061036c8383610d04565b9050610334818410801561032f5750818310610c73565b5050565b606060148054806020026020016040519081016040528092919081815260200182805480156103df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103c1575b5050505050905090565b81670de0b6b3a7640000108015610349575080670de0b6b3a764000010156103835761035a82600019611146565b600061042c6104268484610c23565b83610d19565b9050600061044361043d8585610c5e565b84610d04565b905061045184831115610c73565b61045d84821115610c73565b61030882821115610c73565b606060168054806020026020016040519081016040528092919081815260200182805480156103df576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103c1575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156103df576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103c1575050505050905090565b600061036c8383610d04565b8160001080156105455750806000105b156103835761055682600019611146565b81116103835760006105688383610d04565b905061033481841115801561032f575081831115610c73565b604051632631f2b160e11b8152818311156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b5050505060006105f28383610cea565b90506103348183610d39565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156106e45760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106cc57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161068e5790505b50505050508152505081526020019060010190610622565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156106e457838290600052602060002001805461073090611168565b80601f016020809104026020016040519081016040528092919081815260200182805461075c90611168565b80156107a95780601f1061077e576101008083540402835291602001916107a9565b820191906000526020600020905b81548152906001019060200180831161078c57829003601f168201915b505050505081526020019060010190610711565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156106e45760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561088b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161084d5790505b505050505081525050815260200190600101906107e1565b8160001080156108b35750806000105b15610383576108c482600019611146565b81116103835760006108df6108d98484610d04565b83610c5e565b90506103348382610d39565b61035a82600019611146565b604051632631f2b160e11b8152818311156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561094457600080fd5b505afa158015610958573d6000803e3d6000fd5b5050505060006109688383610cea565b90506103346109788260016111a2565b84610d39565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156106e45783829060005260206000200180546109c190611168565b80601f01602080910402602001604051908101604052809291908181526020018280546109ed90611168565b8015610a3a5780601f10610a0f57610100808354040283529160200191610a3a565b820191906000526020600020905b815481529060010190602001808311610a1d57829003601f168201915b5050505050815260200190600101906109a2565b600754600090610100900460ff1615610a705750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b765760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610afe917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016111ba565b60408051601f1981840301815290829052610b18916111eb565b6000604051808303816000865af19150503d8060008114610b55576040519150601f19603f3d011682016040523d82523d6000602084013e610b5a565b606091505b5091505080806020019051810190610b729190611207565b9150505b919050565b81670de0b6b3a76400001080156108b3575080670de0b6b3a76400001015610383576108c482600019611146565b606060138054806020026020016040519081016040528092919081815260200182805480156103df576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103c1575050505050905090565b6000610c158383610d19565b905060006102fa8484610d04565b600081610c31600282611146565b610c43670de0b6b3a764000086611229565b610c4d91906111a2565b610c579190611146565b9392505050565b600081610c4d670de0b6b3a764000085611229565b80610ce7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610cd79060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610ce7610e5c565b50565b600081831015610cfb575080610cfe565b50815b92915050565b6000670de0b6b3a7640000610c4d8385611229565b6000670de0b6b3a7640000610d2f600282611146565b610c438486611229565b808214610383577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610daa9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103835b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610f575760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610ef692916020016111ba565b60408051601f1981840301815290829052610f10916111eb565b6000604051808303816000865af19150503d8060008114610f4d576040519150601f19603f3d011682016040523d82523d6000602084013e610f52565b606091505b505050505b6007805461ff001916610100179055565b60008060408385031215610f7b57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610fcb5783516001600160a01b031683529284019291840191600101610fa6565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561107b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110665783516001600160e01b0319168252928b019260019290920191908b019061103c565b50978a01979550505091870191600101610fff565b50919998505050505050505050565b60005b838110156110a557818101518382015260200161108d565b838111156103085750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561112357878503603f1901845281518051808752611104818989018a850161108a565b601f01601f1916959095018601945092850192908501906001016110dd565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60008261116357634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061117c57607f821691505b60208210810361119c57634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156111b5576111b5611130565b500190565b6001600160e01b03198316815281516000906111dd81600485016020870161108a565b919091016004019392505050565b600082516111fd81846020870161108a565b9190910192915050565b60006020828403121561121957600080fd5b81518015158114610c5757600080fd5b600081600019048311821515161561124357611243611130565b50029056fea26469706673582212203d3183e4ebb0d78a514085a48da3361a40f4c73e00bc7c800e9b81a53c15de0e64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KArithmeticTestField
    
    syntax S2KArithmeticTestField ::= "stdstore" [symbol(), klabel(field_ArithmeticTest_stdstore)]
    
    syntax S2KArithmeticTestField ::= "IS_TEST" [symbol(), klabel(field_ArithmeticTest_IS_TEST)]
    
    syntax S2KArithmeticTestField ::= "_failed" [symbol(), klabel(field_ArithmeticTest__failed)]
    
    syntax S2KArithmeticTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ArithmeticTest_stdChainsInitialized)]
    
    syntax S2KArithmeticTestField ::= "chains" [symbol(), klabel(field_ArithmeticTest_chains)]
    
    syntax S2KArithmeticTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ArithmeticTest_defaultRpcUrls)]
    
    syntax S2KArithmeticTestField ::= "idToAlias" [symbol(), klabel(field_ArithmeticTest_idToAlias)]
    
    syntax S2KArithmeticTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ArithmeticTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KArithmeticTestField ::= "gasMeteringOff" [symbol(), klabel(field_ArithmeticTest_gasMeteringOff)]
    
    syntax S2KArithmeticTestField ::= "_excludedContracts" [symbol(), klabel(field_ArithmeticTest__excludedContracts)]
    
    syntax S2KArithmeticTestField ::= "_excludedSenders" [symbol(), klabel(field_ArithmeticTest__excludedSenders)]
    
    syntax S2KArithmeticTestField ::= "_targetedContracts" [symbol(), klabel(field_ArithmeticTest__targetedContracts)]
    
    syntax S2KArithmeticTestField ::= "_targetedSenders" [symbol(), klabel(field_ArithmeticTest__targetedSenders)]
    
    syntax S2KArithmeticTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ArithmeticTest__excludedArtifacts)]
    
    syntax S2KArithmeticTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ArithmeticTest__targetedArtifacts)]
    
    syntax S2KArithmeticTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ArithmeticTest__targetedArtifactSelectors)]
    
    syntax S2KArithmeticTestField ::= "_targetedSelectors" [symbol(), klabel(field_ArithmeticTest__targetedSelectors)]
    
    rule  ( #loc ( S2KArithmeticTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KArithmeticTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KArithmeticTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KArithmeticTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KArithmeticTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KArithmeticTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KArithmeticTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KArithmeticTestContract "." S2KArithmeticTestMethod [function(), symbol(), klabel(method_ArithmeticTest)]
    
    syntax S2KArithmeticTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KISZUndTEST_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KexcludeArtifacts_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KexcludeContracts_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KexcludeSenders_)]
    
    syntax S2KArithmeticTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2Kfailed_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KtargetArtifacts_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KtargetContracts_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KtargetSelectors_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KtargetSenders_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUnddecreasingZUnddiv" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUnddecreasingZUnddiv_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax1" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax1_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax1ZUndbroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax1ZUndbroken_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax2" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax2_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwdivZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwdivZUndrounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasing" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasing_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndgtZUndone" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndgtZUndone_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndoverflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndoverflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndpositive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndrounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverse_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive_uint256_uint256)]
    
    rule  ( S2KArithmeticTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtestZUnddecreasingZUnddiv ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_decreasing_div" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax1 ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax1ZUndbroken ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1_broken" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax2 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_max2" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwdivZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wdiv_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasing ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndgtZUndone ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_gt_one" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndoverflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_overflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse_underflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_weakly_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_decreasing_div(uint256,uint256)" ) => 1011519306 )
      
    
    rule  ( selector ( "test_max1(uint256,uint256)" ) => 1625765100 )
      
    
    rule  ( selector ( "test_max1_broken(uint256,uint256)" ) => 2809107068 )
      
    
    rule  ( selector ( "test_max2(uint256,uint256)" ) => 434746443 )
      
    
    rule  ( selector ( "test_wdiv_rounding(uint256,uint256)" ) => 345004095 )
      
    
    rule  ( selector ( "test_wmul_increasing(uint256,uint256)" ) => 2784670501 )
      
    
    rule  ( selector ( "test_wmul_increasing_gt_one(uint256,uint256)" ) => 899022695 )
      
    
    rule  ( selector ( "test_wmul_increasing_overflow(uint256,uint256)" ) => 1123042280 )
      
    
    rule  ( selector ( "test_wmul_increasing_positive(uint256,uint256)" ) => 490103800 )
      
    
    rule  ( selector ( "test_wmul_rounding(uint256,uint256)" ) => 4261140569 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse(uint256,uint256)" ) => 3719613508 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse_underflow(uint256,uint256)" ) => 2736038219 )
      
    
    rule  ( selector ( "test_wmul_weakly_increasing_positive(uint256,uint256)" ) => 1421647895 )
      

endmodule

module S2KAssumeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssumeTestContract
    
    syntax S2KAssumeTestContract ::= "S2KAssumeTest" [symbol(), klabel(contract_AssumeTest)]
    
      
    
    rule  ( #initBytecode ( S2KAssumeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061126b8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806385226c8111610097578063ba414fa611610066578063ba414fa6146101bb578063e20c9f71146101d3578063e41befb414610105578063fa7626d4146101db57600080fd5b806385226c8114610183578063916a17c6146101985780639c7670e4146101a0578063b5508aa9146101b357600080fd5b806358313c47116100d357806358313c47146101485780635f2e70fb1461015b57806366d9a9a01461016e5780636eef607c1461015b57600080fd5b80630eb656da146101055780631ed7831c1461011a5780633e5e3c23146101385780633f7286f414610140575b600080fd5b610118610113366004610f13565b6101e8565b005b610122610256565b60405161012f9190610f35565b60405180910390f35b6101226102b8565b610122610318565b610118610156366004610f90565b610378565b610118610169366004610f13565b61041e565b610176610451565b60405161012f9190610fb4565b61018b610540565b60405161012f9190611097565b610176610610565b6101186101ae366004611128565b6106f6565b61018b610aa0565b6101c3610b70565b604051901515815260200161012f565b610122610c91565b6007546101c39060ff1681565b604051632631f2b160e11b815281831415600482015260008051602061121683398151915290634c63e562906024015b60006040518083038186803b15801561023057600080fd5b505afa158015610244573d6000803e3d6000fd5b505050506102528282610cf1565b5050565b606060148054806020026020016040519081016040528092919081815260200182805480156102ae57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610290575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102ae576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610290575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102ae576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610290575050505050905090565b60405181151560248201526000805160206112168339815191529060440160408051601f198184030181529181526020820180516001600160e01b0316632631f2b160e11b179052516103cb919061115b565b600060405180830381855afa9150503d8060008114610406576040519150601f19603f3d011682016040523d82523d6000602084013e61040b565b606091505b5050508061041b5761041b611177565b50565b604051632631f2b160e11b8152818314600482015260008051602061121683398151915290634c63e56290602401610218565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156105375760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104e15790505b50505050508152505081526020019060010190610475565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156105375783829060005260206000200180546105839061118d565b80601f01602080910402602001604051908101604052809291908181526020018280546105af9061118d565b80156105fc5780601f106105d1576101008083540402835291602001916105fc565b820191906000526020600020905b8154815290600101906020018083116105df57829003601f168201915b505050505081526020019060010190610564565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156105375760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106de57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106a05790505b50505050508152505081526020019060010190610634565b604051632631f2b160e11b81526a636f6e736f6c652e6c6f676001600160a01b0384161415600482015260008051602061121683398151915290634c63e5629060240160006040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b5050604051632631f2b160e11b8152731804c8ab1f12e6bbf3894d4083f33e07309d1f386001600160a01b038616141560048201526000805160206112168339815191529250634c63e562915060240160006040518083038186803b1580156107cd57600080fd5b505afa1580156107e1573d6000803e3d6000fd5b5050604051632631f2b160e11b81526000805160206112168339815191526001600160a01b03861681141560048301529250634c63e562915060240160006040518083038186803b15801561083557600080fd5b505afa158015610849573d6000803e3d6000fd5b5050604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b038616141560048201526000805160206112168339815191529250634c63e562915060240160006040518083038186803b1580156108b157600080fd5b505afa1580156108c5573d6000803e3d6000fd5b5050604051632631f2b160e11b81526a636f6e736f6c652e6c6f676001600160a01b038516141560048201526000805160206112168339815191529250634c63e562915060240160006040518083038186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b5050604051632631f2b160e11b8152731804c8ab1f12e6bbf3894d4083f33e07309d1f386001600160a01b038516141560048201526000805160206112168339815191529250634c63e562915060240160006040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b5050604051632631f2b160e11b81526000805160206112168339815191526001600160a01b03851681141560048301529250634c63e562915060240160006040518083038186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b5050604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b038516141560048201526000805160206112168339815191529250634c63e562915060240160006040518083038186803b158015610a8457600080fd5b505afa158015610a98573d6000803e3d6000fd5b505050505050565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610537578382906000526020600020018054610ae39061118d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0f9061118d565b8015610b5c5780601f10610b3157610100808354040283529160200191610b5c565b820191906000526020600020905b815481529060010190602001808311610b3f57829003601f168201915b505050505081526020019060010190610ac4565b600754600090610100900460ff1615610b925750600754610100900460ff1690565b60006000805160206112168339815191523b15610c8c5760408051600080516020611216833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610c14917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016111c7565b60408051601f1981840301815290829052610c2e9161115b565b6000604051808303816000865af19150503d8060008114610c6b576040519150601f19603f3d011682016040523d82523d6000602084013e610c70565b606091505b5091505080806020019051810190610c8891906111f8565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102ae576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610290575050505050905090565b808214610252577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610d629060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16102526000805160206112168339815191523b15610f025760408051600080516020611216833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610ea192916020016111c7565b60408051601f1981840301815290829052610ebb9161115b565b6000604051808303816000865af19150503d8060008114610ef8576040519150601f19603f3d011682016040523d82523d6000602084013e610efd565b606091505b505050505b6007805461ff001916610100179055565b60008060408385031215610f2657600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610f765783516001600160a01b031683529284019291840191600101610f51565b50909695505050505050565b801515811461041b57600080fd5b600060208284031215610fa257600080fd5b8135610fad81610f82565b9392505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561105857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110435783516001600160e01b0319168252928b019260019290920191908b0190611019565b50978a01979550505091870191600101610fdc565b50919998505050505050505050565b60005b8381101561108257818101518382015260200161106a565b83811115611091576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561110457878503603f19018452815180518087526110e5818989018a8501611067565b601f01601f1916959095018601945092850192908501906001016110be565b5092979650505050505050565b80356001600160a01b0381168114610c8c57600080fd5b6000806040838503121561113b57600080fd5b61114483611111565b915061115260208401611111565b90509250929050565b6000825161116d818460208701611067565b9190910192915050565b634e487b7160e01b600052600160045260246000fd5b600181811c908216806111a157607f821691505b6020821081036111c157634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906111ea816004850160208701611067565b919091016004019392505050565b60006020828403121561120a57600080fd5b8151610fad81610f8256fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212203693451c50cb6e0111d75e1326680eab266bd881c25b792f3108fb938f7b46ca64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KAssumeTestField
    
    syntax S2KAssumeTestField ::= "stdstore" [symbol(), klabel(field_AssumeTest_stdstore)]
    
    syntax S2KAssumeTestField ::= "IS_TEST" [symbol(), klabel(field_AssumeTest_IS_TEST)]
    
    syntax S2KAssumeTestField ::= "_failed" [symbol(), klabel(field_AssumeTest__failed)]
    
    syntax S2KAssumeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_AssumeTest_stdChainsInitialized)]
    
    syntax S2KAssumeTestField ::= "chains" [symbol(), klabel(field_AssumeTest_chains)]
    
    syntax S2KAssumeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_AssumeTest_defaultRpcUrls)]
    
    syntax S2KAssumeTestField ::= "idToAlias" [symbol(), klabel(field_AssumeTest_idToAlias)]
    
    syntax S2KAssumeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_AssumeTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KAssumeTestField ::= "gasMeteringOff" [symbol(), klabel(field_AssumeTest_gasMeteringOff)]
    
    syntax S2KAssumeTestField ::= "_excludedContracts" [symbol(), klabel(field_AssumeTest__excludedContracts)]
    
    syntax S2KAssumeTestField ::= "_excludedSenders" [symbol(), klabel(field_AssumeTest__excludedSenders)]
    
    syntax S2KAssumeTestField ::= "_targetedContracts" [symbol(), klabel(field_AssumeTest__targetedContracts)]
    
    syntax S2KAssumeTestField ::= "_targetedSenders" [symbol(), klabel(field_AssumeTest__targetedSenders)]
    
    syntax S2KAssumeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_AssumeTest__excludedArtifacts)]
    
    syntax S2KAssumeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_AssumeTest__targetedArtifacts)]
    
    syntax S2KAssumeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_AssumeTest__targetedArtifactSelectors)]
    
    syntax S2KAssumeTestField ::= "_targetedSelectors" [symbol(), klabel(field_AssumeTest__targetedSelectors)]
    
    rule  ( #loc ( S2KAssumeTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KAssumeTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KAssumeTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KAssumeTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KAssumeTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KAssumeTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KAssumeTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KAssumeTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KAssumeTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KAssumeTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KAssumeTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KAssumeTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KAssumeTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KAssumeTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KAssumeTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KAssumeTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KAssumeTestContract "." S2KAssumeTestMethod [function(), symbol(), klabel(method_AssumeTest)]
    
    syntax S2KAssumeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AssumeTest_S2KISZUndTEST_)]
    
    syntax S2KAssumeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_AssumeTest_S2KexcludeArtifacts_)]
    
    syntax S2KAssumeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_AssumeTest_S2KexcludeContracts_)]
    
    syntax S2KAssumeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_AssumeTest_S2KexcludeSenders_)]
    
    syntax S2KAssumeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AssumeTest_S2Kfailed_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_AssumeTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_AssumeTest_S2KtargetArtifacts_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_AssumeTest_S2KtargetContracts_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_AssumeTest_S2KtargetSelectors_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_AssumeTest_S2KtargetSenders_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestFailZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestFailZUndassumeZUndfalse_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestFailZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestFailZUndassumeZUndtrue_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndfalse_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndstaticCall" "(" Int ":" "bool" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndstaticCall_bool)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndtrue_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndmultiZUndassume" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndmultiZUndassume_address_address)]
    
    rule  ( S2KAssumeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtestFailZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestFailZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndstaticCall ( V0_a : bool ) => #abiCallData ( "test_assume_staticCall" , #bool ( V0_a ) , .TypedArgs ) )
       ensures #rangeBool ( V0_a )
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndmultiZUndassume ( V0_alice : address , V1_bob : address ) => #abiCallData ( "test_multi_assume" , #address ( V0_alice ) , #address ( V1_bob ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_alice )
       andBool ( #rangeAddress ( V1_bob )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_assume_false(uint256,uint256)" ) => 1596879099 )
      
    
    rule  ( selector ( "testFail_assume_true(uint256,uint256)" ) => 246830810 )
      
    
    rule  ( selector ( "test_assume_false(uint256,uint256)" ) => 3827036084 )
      
    
    rule  ( selector ( "test_assume_staticCall(bool)" ) => 1479621703 )
      
    
    rule  ( selector ( "test_assume_true(uint256,uint256)" ) => 1861181564 )
      
    
    rule  ( selector ( "test_multi_assume(address,address)" ) => 2625007844 )
      

endmodule

module S2KBMCLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBMCLoopsTestContract
    
    syntax S2KBMCLoopsTestContract ::= "S2KBMCLoopsTest" [symbol(), klabel(contract_BMCLoopsTest)]
    
      
    
    rule  ( #initBytecode ( S2KBMCLoopsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610e0d8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa614610167578063bdbd8cd81461017f578063e20c9f7114610192578063fa7626d41461019a57600080fd5b8063916a17c61461014257806396e037911461014a578063b5508aa91461015f57600080fd5b80631ed7831c146100d45780633e5e3c23146100f25780633f7286f4146100fa57806346e696bc1461010257806366d9a9a01461011857806385226c811461012d575b600080fd5b6100dc6101a7565b6040516100e99190610af0565b60405180910390f35b6100dc610209565b6100dc610269565b61010a6102c9565b6040519081526020016100e9565b6101206102f8565b6040516100e99190610b3d565b6101356103e7565b6040516100e99190610c20565b6101206104b7565b61015d610158366004610c9a565b61059d565b005b6101356105d5565b61016f6106a5565b60405190151581526020016100e9565b61010a61018d366004610c9a565b6107d2565b6100dc610862565b60075461016f9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101ff57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101e1575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101ff576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e1575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101ff576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e1575050505050905090565b600060035b80156102e6576102df600182610cc9565b90506102ce565b80156102f4576102f4610ce0565b5090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103de5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103c657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103885790505b5050505050815250508152602001906001019061031c565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103de57838290600052602060002001805461042a90610cf6565b80601f016020809104026020016040519081016040528092919081815260200182805461045690610cf6565b80156104a35780601f10610478576101008083540402835291602001916104a3565b820191906000526020600020905b81548152906001019060200180831161048657829003601f168201915b50505050508152602001906001019061040b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103de5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561058557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105475790505b505050505081525050815260200190600101906104db565b6000805b828110156105c6576105b4600183610d30565b91506105bf81610d48565b90506105a1565b506105d181836108c2565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103de57838290600052602060002001805461061890610cf6565b80601f016020809104026020016040519081016040528092919081815260200182805461064490610cf6565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050815260200190600101906105f9565b600754600090610100900460ff16156106c75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107cd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610755917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d61565b60408051601f198184030181529082905261076f91610d92565b6000604051808303816000865af19150503d80600081146107ac576040519150601f19603f3d011682016040523d82523d6000602084013e6107b1565b606091505b50915050808060200190518101906107c99190610dae565b9150505b919050565b604051632631f2b160e11b815260038211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050505b81156108545761084d600183610cc9565b915061083c565b81156107cd576107cd610ce0565b606060138054806020026020016040519081016040528092919081815260200182805480156101ff576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e1575050505050905090565b8082146105d1577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109339060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16105d1737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610adf5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610a7e9291602001610d61565b60408051601f1981840301815290829052610a9891610d92565b6000604051808303816000865af19150503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610b315783516001600160a01b031683529284019291840191600101610b0c565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610be157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610bcc5783516001600160e01b0319168252928b019260019290920191908b0190610ba2565b50978a01979550505091870191600101610b65565b50919998505050505050505050565b60005b83811015610c0b578181015183820152602001610bf3565b83811115610c1a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c8d57878503603f1901845281518051808752610c6e818989018a8501610bf0565b601f01601f191695909501860194509285019290850190600101610c47565b5092979650505050505050565b600060208284031215610cac57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610cdb57610cdb610cb3565b500390565b634e487b7160e01b600052600160045260246000fd5b600181811c90821680610d0a57607f821691505b602082108103610d2a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610d4357610d43610cb3565b500190565b600060018201610d5a57610d5a610cb3565b5060010190565b6001600160e01b0319831681528151600090610d84816004850160208701610bf0565b919091016004019392505050565b60008251610da4818460208701610bf0565b9190910192915050565b600060208284031215610dc057600080fd5b81518015158114610dd057600080fd5b939250505056fea2646970667358221220ac989059e85216f7a2a95eb1c39bd996d29a5ca8de329c45a830e1b39deee25e64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KBMCLoopsTestField
    
    syntax S2KBMCLoopsTestField ::= "stdstore" [symbol(), klabel(field_BMCLoopsTest_stdstore)]
    
    syntax S2KBMCLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_BMCLoopsTest_IS_TEST)]
    
    syntax S2KBMCLoopsTestField ::= "_failed" [symbol(), klabel(field_BMCLoopsTest__failed)]
    
    syntax S2KBMCLoopsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_BMCLoopsTest_stdChainsInitialized)]
    
    syntax S2KBMCLoopsTestField ::= "chains" [symbol(), klabel(field_BMCLoopsTest_chains)]
    
    syntax S2KBMCLoopsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_BMCLoopsTest_defaultRpcUrls)]
    
    syntax S2KBMCLoopsTestField ::= "idToAlias" [symbol(), klabel(field_BMCLoopsTest_idToAlias)]
    
    syntax S2KBMCLoopsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_BMCLoopsTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KBMCLoopsTestField ::= "gasMeteringOff" [symbol(), klabel(field_BMCLoopsTest_gasMeteringOff)]
    
    syntax S2KBMCLoopsTestField ::= "_excludedContracts" [symbol(), klabel(field_BMCLoopsTest__excludedContracts)]
    
    syntax S2KBMCLoopsTestField ::= "_excludedSenders" [symbol(), klabel(field_BMCLoopsTest__excludedSenders)]
    
    syntax S2KBMCLoopsTestField ::= "_targetedContracts" [symbol(), klabel(field_BMCLoopsTest__targetedContracts)]
    
    syntax S2KBMCLoopsTestField ::= "_targetedSenders" [symbol(), klabel(field_BMCLoopsTest__targetedSenders)]
    
    syntax S2KBMCLoopsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_BMCLoopsTest__excludedArtifacts)]
    
    syntax S2KBMCLoopsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_BMCLoopsTest__targetedArtifacts)]
    
    syntax S2KBMCLoopsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_BMCLoopsTest__targetedArtifactSelectors)]
    
    syntax S2KBMCLoopsTestField ::= "_targetedSelectors" [symbol(), klabel(field_BMCLoopsTest__targetedSelectors)]
    
    rule  ( #loc ( S2KBMCLoopsTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KBMCLoopsTestContract "." S2KBMCLoopsTestMethod [function(), symbol(), klabel(method_BMCLoopsTest)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KISZUndTEST_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KexcludeArtifacts_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KexcludeContracts_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KexcludeSenders_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2Kfailed_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtargetArtifacts_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtargetContracts_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtargetSelectors_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtargetSenders_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndbmc" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndbmc_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndconcrete" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndcountdownZUndconcrete_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndcountdownZUndsymbolic_uint256)]
    
    rule  ( S2KBMCLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndbmc ( V0_n : uint256 ) => #abiCallData ( "test_bmc" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndcountdownZUndconcrete ( ) => #abiCallData ( "test_countdown_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndcountdownZUndsymbolic ( V0_n : uint256 ) => #abiCallData ( "test_countdown_symbolic" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_bmc(uint256)" ) => 2531276689 )
      
    
    rule  ( selector ( "test_countdown_concrete()" ) => 1189516988 )
      
    
    rule  ( selector ( "test_countdown_symbolic(uint256)" ) => 3183316184 )
      

endmodule

module S2KCommonBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCommonBaseContract
    
    syntax S2KCommonBaseContract ::= "S2KCommonBase" [symbol(), klabel(contract_CommonBase)]
    
      
    
    rule  ( #initBytecode ( S2KCommonBase ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KCommonBaseField
    
    syntax S2KCommonBaseField ::= "stdstore" [symbol(), klabel(field_CommonBase_stdstore)]
    
    rule  ( #loc ( S2KCommonBase . stdstore ) => 0 )
      

endmodule

module S2KScriptBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KScriptBaseContract
    
    syntax S2KScriptBaseContract ::= "S2KScriptBase" [symbol(), klabel(contract_ScriptBase)]
    
      
    
    rule  ( #initBytecode ( S2KScriptBase ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KScriptBaseField
    
    syntax S2KScriptBaseField ::= "stdstore" [symbol(), klabel(field_ScriptBase_stdstore)]
    
    rule  ( #loc ( S2KScriptBase . stdstore ) => 0 )
      

endmodule

module S2KTestBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestBaseContract
    
    syntax S2KTestBaseContract ::= "S2KTestBase" [symbol(), klabel(contract_TestBase)]
    
      
    
    rule  ( #initBytecode ( S2KTestBase ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KTestBaseField
    
    syntax S2KTestBaseField ::= "stdstore" [symbol(), klabel(field_TestBase_stdstore)]
    
    rule  ( #loc ( S2KTestBase . stdstore ) => 0 )
      

endmodule

module S2KBlockParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBlockParamsTestContract
    
    syntax S2KBlockParamsTestContract ::= "S2KBlockParamsTest" [symbol(), klabel(contract_BlockParamsTest)]
    
      
    
    rule  ( #initBytecode ( S2KBlockParamsTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KBlockParamsTestField
    
    syntax S2KBlockParamsTestField ::= "stdstore" [symbol(), klabel(field_BlockParamsTest_stdstore)]
    
    syntax S2KBlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_BlockParamsTest_IS_TEST)]
    
    syntax S2KBlockParamsTestField ::= "_failed" [symbol(), klabel(field_BlockParamsTest__failed)]
    
    syntax S2KBlockParamsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_BlockParamsTest_stdChainsInitialized)]
    
    syntax S2KBlockParamsTestField ::= "chains" [symbol(), klabel(field_BlockParamsTest_chains)]
    
    syntax S2KBlockParamsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_BlockParamsTest_defaultRpcUrls)]
    
    syntax S2KBlockParamsTestField ::= "idToAlias" [symbol(), klabel(field_BlockParamsTest_idToAlias)]
    
    syntax S2KBlockParamsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_BlockParamsTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KBlockParamsTestField ::= "gasMeteringOff" [symbol(), klabel(field_BlockParamsTest_gasMeteringOff)]
    
    syntax S2KBlockParamsTestField ::= "_excludedContracts" [symbol(), klabel(field_BlockParamsTest__excludedContracts)]
    
    syntax S2KBlockParamsTestField ::= "_excludedSenders" [symbol(), klabel(field_BlockParamsTest__excludedSenders)]
    
    syntax S2KBlockParamsTestField ::= "_targetedContracts" [symbol(), klabel(field_BlockParamsTest__targetedContracts)]
    
    syntax S2KBlockParamsTestField ::= "_targetedSenders" [symbol(), klabel(field_BlockParamsTest__targetedSenders)]
    
    syntax S2KBlockParamsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_BlockParamsTest__excludedArtifacts)]
    
    syntax S2KBlockParamsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_BlockParamsTest__targetedArtifacts)]
    
    syntax S2KBlockParamsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_BlockParamsTest__targetedArtifactSelectors)]
    
    syntax S2KBlockParamsTestField ::= "_targetedSelectors" [symbol(), klabel(field_BlockParamsTest__targetedSelectors)]
    
    rule  ( #loc ( S2KBlockParamsTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KBlockParamsTestContract "." S2KBlockParamsTestMethod [function(), symbol(), klabel(method_BlockParamsTest)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KISZUndTEST_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KexcludeArtifacts_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KexcludeContracts_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KexcludeSenders_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2Kfailed_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtargetArtifacts_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtargetContracts_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtargetSelectors_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtargetSenders_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestBlockNumber" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestBlockNumber_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestChainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestChainId_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestCoinBase" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestCoinBase_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestFee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestFee_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestRoll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestRoll_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestWarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestWarp_uint256)]
    
    rule  ( S2KBlockParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestBlockNumber ( ) => #abiCallData ( "testBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestChainId ( V0_newChainId : uint256 ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KBlockParamsTest . S2KtestCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestFee ( V0_newFee : uint256 ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( S2KBlockParamsTest . S2KtestRoll ( V0_newHeight : uint256 ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KBlockParamsTest . S2KtestWarp ( V0_time : uint256 ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testBlockNumber()" ) => 3916490861 )
      
    
    rule  ( selector ( "testChainId(uint256)" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase()" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee(uint256)" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll(uint256)" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp(uint256)" ) => 1957961066 )
      

endmodule

module S2KRollTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KRollTestContract
    
    syntax S2KRollTestContract ::= "S2KRollTest" [symbol(), klabel(contract_RollTest)]
    
      
    
    rule  ( #initBytecode ( S2KRollTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610a9f8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806385d77cb61161007157806385d77cb61461011b578063916a17c614610123578063b5508aa91461012b578063ba414fa614610133578063e20c9f711461014b578063fa7626d41461015357600080fd5b80630a9254e4146100b95780631ed7831c146100c35780633e5e3c23146100e15780633f7286f4146100e957806366d9a9a0146100f157806385226c8114610106575b600080fd5b6100c1610160565b005b6100cb6101c7565b6040516100d891906107fd565b60405180910390f35b6100cb610229565b6100cb610289565b6100f96102e9565b6040516100d8919061084a565b61010e6103d8565b6040516100d89190610929565b6100c16104a8565b6100f96104ba565b61010e6105a0565b61013b610670565b60405190151581526020016100d8565b6100cb61079d565b60075461013b9060ff1681565b6040516301f7b4f360e41b8152607b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b1580156101ad57600080fd5b505af11580156101c1573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561021f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610201575b5050505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561021f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610201575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561021f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610201575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103cf5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103b757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103795790505b5050505050815250508152602001906001019061030d565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103cf57838290600052602060002001805461041b906109a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610447906109a3565b80156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b5050505050815260200190600101906103fc565b43607b146104b8576104b86109dd565b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103cf5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561058857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161054a5790505b505050505081525050815260200190600101906104de565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103cf5783829060005260206000200180546105e3906109a3565b80601f016020809104026020016040519081016040528092919081815260200182805461060f906109a3565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050815260200190600101906105c4565b600754600090610100900460ff16156106925750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107985760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610720917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016109f3565b60408051601f198184030181529082905261073a91610a24565b6000604051808303816000865af19150503d8060008114610777576040519150601f19603f3d011682016040523d82523d6000602084013e61077c565b606091505b50915050808060200190518101906107949190610a40565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561021f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610201575050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101561083e5783516001600160a01b031683529284019291840191600101610819565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156108ee57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156108d95783516001600160e01b0319168252928b019260019290920191908b01906108af565b50978a01979550505091870191600101610872565b50919998505050505050505050565b60005b83811015610918578181015183820152602001610900565b838111156101c15750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561099657878503603f1901845281518051808752610977818989018a85016108fd565b601f01601f191695909501860194509285019290850190600101610950565b5092979650505050505050565b600181811c908216806109b757607f821691505b6020821081036109d757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610a168160048501602087016108fd565b919091016004019392505050565b60008251610a368184602087016108fd565b9190910192915050565b600060208284031215610a5257600080fd5b81518015158114610a6257600080fd5b939250505056fea2646970667358221220faf36685154018926e8024023ed0c96ab126277d8e1f33066ccdaa902893bbe764736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KRollTestField
    
    syntax S2KRollTestField ::= "stdstore" [symbol(), klabel(field_RollTest_stdstore)]
    
    syntax S2KRollTestField ::= "IS_TEST" [symbol(), klabel(field_RollTest_IS_TEST)]
    
    syntax S2KRollTestField ::= "_failed" [symbol(), klabel(field_RollTest__failed)]
    
    syntax S2KRollTestField ::= "stdChainsInitialized" [symbol(), klabel(field_RollTest_stdChainsInitialized)]
    
    syntax S2KRollTestField ::= "chains" [symbol(), klabel(field_RollTest_chains)]
    
    syntax S2KRollTestField ::= "defaultRpcUrls" [symbol(), klabel(field_RollTest_defaultRpcUrls)]
    
    syntax S2KRollTestField ::= "idToAlias" [symbol(), klabel(field_RollTest_idToAlias)]
    
    syntax S2KRollTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_RollTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KRollTestField ::= "gasMeteringOff" [symbol(), klabel(field_RollTest_gasMeteringOff)]
    
    syntax S2KRollTestField ::= "_excludedContracts" [symbol(), klabel(field_RollTest__excludedContracts)]
    
    syntax S2KRollTestField ::= "_excludedSenders" [symbol(), klabel(field_RollTest__excludedSenders)]
    
    syntax S2KRollTestField ::= "_targetedContracts" [symbol(), klabel(field_RollTest__targetedContracts)]
    
    syntax S2KRollTestField ::= "_targetedSenders" [symbol(), klabel(field_RollTest__targetedSenders)]
    
    syntax S2KRollTestField ::= "_excludedArtifacts" [symbol(), klabel(field_RollTest__excludedArtifacts)]
    
    syntax S2KRollTestField ::= "_targetedArtifacts" [symbol(), klabel(field_RollTest__targetedArtifacts)]
    
    syntax S2KRollTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_RollTest__targetedArtifactSelectors)]
    
    syntax S2KRollTestField ::= "_targetedSelectors" [symbol(), klabel(field_RollTest__targetedSelectors)]
    
    rule  ( #loc ( S2KRollTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KRollTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KRollTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KRollTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KRollTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KRollTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KRollTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KRollTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KRollTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KRollTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KRollTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KRollTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KRollTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KRollTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KRollTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KRollTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KRollTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KRollTestContract "." S2KRollTestMethod [function(), symbol(), klabel(method_RollTest)]
    
    syntax S2KRollTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_RollTest_S2KISZUndTEST_)]
    
    syntax S2KRollTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_RollTest_S2KexcludeArtifacts_)]
    
    syntax S2KRollTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_RollTest_S2KexcludeContracts_)]
    
    syntax S2KRollTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_RollTest_S2KexcludeSenders_)]
    
    syntax S2KRollTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_RollTest_S2Kfailed_)]
    
    syntax S2KRollTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_RollTest_S2KsetUp_)]
    
    syntax S2KRollTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_RollTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KRollTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_RollTest_S2KtargetArtifacts_)]
    
    syntax S2KRollTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_RollTest_S2KtargetContracts_)]
    
    syntax S2KRollTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_RollTest_S2KtargetSelectors_)]
    
    syntax S2KRollTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_RollTest_S2KtargetSenders_)]
    
    syntax S2KRollTestMethod ::= "S2KtestZUndrollZUndsetup" "(" ")" [symbol(), klabel(method_RollTest_S2KtestZUndrollZUndsetup_)]
    
    rule  ( S2KRollTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KRollTest . S2KtestZUndrollZUndsetup ( ) => #abiCallData ( "test_roll_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_roll_setup()" ) => 2245491894 )
      

endmodule

module S2KBroadcastTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBroadcastTestContract
    
    syntax S2KBroadcastTestContract ::= "S2KBroadcastTest" [symbol(), klabel(contract_BroadcastTest)]
    
      
    
    rule  ( #initBytecode ( S2KBroadcastTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061168a8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa6146101b6578063e20c9f71146101ce578063fa7626d4146101d6578063fd959e42146101e357600080fd5b806385226c8114610191578063916a17c6146101a6578063b5508aa9146101ae57600080fd5b80633e5e3c23116100c85780633e5e3c23146101645780633f7286f41461016c57806366d9a9a014610174578063715f1d5c1461018957600080fd5b80630a9254e4146100ef5780631ed7831c1461013e578063354b27351461015c575b600080fd5b61013c601b80546001600160a01b031990811673ea674fdde714fd979de3edf0f56aa9716b898ec817909155601c8054909116737109709ecfa91a80626ff3989d68f67f5b1dd12d179055565b005b6101466101eb565b6040516101539190611043565b60405180910390f35b61013c61024d565b61014661044f565b6101466104af565b61017c61050f565b6040516101539190611090565b61013c6105fe565b610199610872565b6040516101539190611173565b61017c610942565b610199610a28565b6101be610af8565b6040519015158152602001610153565b610146610c25565b6007546101be9060ff1681565b61013c610c85565b6060601480548060200260200160405190810160405280929190818152602001828054801561024357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610225575b5050505050905090565b601b5460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050506000600a6040516102ce90611036565b908152602001604051809103906000f0801580156102f0573d6000803e3d6000fd5b5060405163afe29f7160e01b81526004818101529091506000906001600160a01b0383169063afe29f71906024016020604051808303816000875af115801561033d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036191906111ed565b905061036e816000610dff565b601c5460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b505060405163afe29f7160e01b8152600560048201526001600160a01b038516925063afe29f7191506024016020604051808303816000875af1158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a91906111ed565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610243576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610225575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610243576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610225575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156105f55760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105dd57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161059f5790505b50505050508152505081526020019060010190610533565b50505050905090565b60008051602061163583398151915260001c6001600160a01b031663afc980406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561064a57600080fd5b505af115801561065e573d6000803e3d6000fd5b505050506000600560405161067290611036565b908152602001604051809103906000f080158015610694573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600060048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af11580156106df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070391906111ed565b5060008051602061163583398151915260001c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075057600080fd5b505af1158015610764573d6000803e3d6000fd5b505050506000601460405161077890611036565b908152602001604051809103906000f08015801561079a573d6000803e3d6000fd5b5060405163afe29f7160e01b8152601960048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af11580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906111ed565b5060008051602061163583398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050505050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156105f55783829060005260206000200180546108b590611206565b80601f01602080910402602001604051908101604052809291908181526020018280546108e190611206565b801561092e5780601f106109035761010080835404028352916020019161092e565b820191906000526020600020905b81548152906001019060200180831161091157829003601f168201915b505050505081526020019060010190610896565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156105f55760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a1057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109d25790505b50505050508152505081526020019060010190610966565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156105f5578382906000526020600020018054610a6b90611206565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9790611206565b8015610ae45780601f10610ab957610100808354040283529160200191610ae4565b820191906000526020600020905b815481529060010190602001808311610ac757829003601f168201915b505050505081526020019060010190610a4c565b600754600090610100900460ff1615610b1a5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c205760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610ba8917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611240565b60408051601f1981840301815290829052610bc291611271565b6000604051808303816000865af19150503d8060008114610bff576040519150601f19603f3d011682016040523d82523d6000602084013e610c04565b606091505b5091505080806020019051810190610c1c919061128d565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610243576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610225575050505050905090565b601b54604051637fec2a8d60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637fec2a8d90602401600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050506000600a604051610d0690611036565b908152602001604051809103906000f080158015610d28573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600160048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9791906111ed565b5060008051602061163583398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610de457600080fd5b505af1158015610df8573d6000803e3d6000fd5b5050505050565b808214610f26577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610e709060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610f26610f2a565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110255760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610fc49291602001611240565b60408051601f1981840301815290829052610fde91611271565b6000604051808303816000865af19150503d806000811461101b576040519150601f19603f3d011682016040523d82523d6000602084013e611020565b606091505b505050505b6007805461ff001916610100179055565b61037e806112b783390190565b6020808252825182820181905260009190848201906040850190845b818110156110845783516001600160a01b03168352928401929184019160010161105f565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561113457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561111f5783516001600160e01b0319168252928b019260019290920191908b01906110f5565b50978a019795505050918701916001016110b8565b50919998505050505050505050565b60005b8381101561115e578181015183820152602001611146565b8381111561116d576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111e057878503603f19018452815180518087526111c1818989018a8501611143565b601f01601f19169590950186019450928501929085019060010161119a565b5092979650505050505050565b6000602082840312156111ff57600080fd5b5051919050565b600181811c9082168061121a57607f821691505b60208210810361123a57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090611263816004850160208701611143565b919091016004019392505050565b60008251611283818460208701611143565b9190910192915050565b60006020828403121561129f57600080fd5b815180151581146112af57600080fd5b939250505056fe60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212209cdcc83402207bb1cf0005c6c056d60a22a8e840bece02a56ef09fc0f2db2d0e64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KBroadcastTestField
    
    syntax S2KBroadcastTestField ::= "stdstore" [symbol(), klabel(field_BroadcastTest_stdstore)]
    
    syntax S2KBroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_BroadcastTest_IS_TEST)]
    
    syntax S2KBroadcastTestField ::= "_failed" [symbol(), klabel(field_BroadcastTest__failed)]
    
    syntax S2KBroadcastTestField ::= "stdChainsInitialized" [symbol(), klabel(field_BroadcastTest_stdChainsInitialized)]
    
    syntax S2KBroadcastTestField ::= "chains" [symbol(), klabel(field_BroadcastTest_chains)]
    
    syntax S2KBroadcastTestField ::= "defaultRpcUrls" [symbol(), klabel(field_BroadcastTest_defaultRpcUrls)]
    
    syntax S2KBroadcastTestField ::= "idToAlias" [symbol(), klabel(field_BroadcastTest_idToAlias)]
    
    syntax S2KBroadcastTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_BroadcastTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KBroadcastTestField ::= "gasMeteringOff" [symbol(), klabel(field_BroadcastTest_gasMeteringOff)]
    
    syntax S2KBroadcastTestField ::= "_excludedContracts" [symbol(), klabel(field_BroadcastTest__excludedContracts)]
    
    syntax S2KBroadcastTestField ::= "_excludedSenders" [symbol(), klabel(field_BroadcastTest__excludedSenders)]
    
    syntax S2KBroadcastTestField ::= "_targetedContracts" [symbol(), klabel(field_BroadcastTest__targetedContracts)]
    
    syntax S2KBroadcastTestField ::= "_targetedSenders" [symbol(), klabel(field_BroadcastTest__targetedSenders)]
    
    syntax S2KBroadcastTestField ::= "_excludedArtifacts" [symbol(), klabel(field_BroadcastTest__excludedArtifacts)]
    
    syntax S2KBroadcastTestField ::= "_targetedArtifacts" [symbol(), klabel(field_BroadcastTest__targetedArtifacts)]
    
    syntax S2KBroadcastTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_BroadcastTest__targetedArtifactSelectors)]
    
    syntax S2KBroadcastTestField ::= "_targetedSelectors" [symbol(), klabel(field_BroadcastTest__targetedSelectors)]
    
    syntax S2KBroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_BroadcastTest_ACCOUNT_A)]
    
    syntax S2KBroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_BroadcastTest_ACCOUNT_B)]
    
    rule  ( #loc ( S2KBroadcastTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KBroadcastTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KBroadcastTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KBroadcastTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KBroadcastTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KBroadcastTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KBroadcastTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_A ) => 27 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_B ) => 28 )
      
    
    syntax Bytes ::= S2KBroadcastTestContract "." S2KBroadcastTestMethod [function(), symbol(), klabel(method_BroadcastTest)]
    
    syntax S2KBroadcastTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KISZUndTEST_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KdeployNoArgs" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KdeployNoArgs_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KdeployOther" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KdeployOther_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KexcludeArtifacts_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KexcludeContracts_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KexcludeSenders_)]
    
    syntax S2KBroadcastTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BroadcastTest_S2Kfailed_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KsetUp_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtargetArtifacts_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtargetContracts_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtargetSelectors_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtargetSenders_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtestDeploy" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtestDeploy_)]
    
    rule  ( S2KBroadcastTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KdeployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KdeployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtestDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs()" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther()" ) => 4254441026 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testDeploy()" ) => 894117685 )
      

endmodule

module S2KConstants-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KConstantsContract
    
    syntax S2KConstantsContract ::= "S2KConstants" [symbol(), klabel(contract_Constants)]
    
      
    
    rule  ( #initBytecode ( S2KConstants ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractContract
    
    syntax S2KContractContract ::= "S2KContract" [symbol(), klabel(contract_Contract)]
    
      
    
    rule  ( #initBytecode ( S2KContract ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f719aa262cc1b99b7e37851280c02555574c7f70119afa5d6c61eb2310a4d52064736f6c634300080d0033" ) )
      

endmodule

module S2KContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractTestContract
    
    syntax S2KContractTestContract ::= "S2KContractTest" [symbol(), klabel(contract_ContractTest)]
    
      
    
    rule  ( #initBytecode ( S2KContractTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610b908061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806385226c811161007157806385226c81146100fb578063916a17c614610110578063b5508aa914610118578063ba414fa614610120578063e20c9f7114610138578063fa7626d41461014057600080fd5b80631ed7831c146100ae5780633e5e3c23146100cc5780633f5a4a2a146100d45780633f7286f4146100de57806366d9a9a0146100e6575b600080fd5b6100b661014d565b6040516100c39190610900565b60405180910390f35b6100b66101af565b6100dc61020f565b005b6100b661021b565b6100ee61027b565b6040516100c3919061094d565b61010361036a565b6040516100c39190610a30565b6100ee61043a565b610103610520565b6101286105f0565b60405190151581526020016100c3565b6100b661071d565b6007546101289060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610187575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101a5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610187575050505050905090565b610219600161077d565b565b606060158054806020026020016040519081016040528092919081815260200182805480156101a5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610187575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103615760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561034957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161030b5790505b5050505050815250508152602001906001019061029f565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103615783829060005260206000200180546103ad90610aaa565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990610aaa565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b50505050508152602001906001019061038e565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103615760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ca5790505b5050505050815250508152602001906001019061045e565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036157838290600052602060002001805461056390610aaa565b80601f016020809104026020016040519081016040528092919081815260200182805461058f90610aaa565b80156105dc5780601f106105b1576101008083540402835291602001916105dc565b820191906000526020600020905b8154815290600101906020018083116105bf57829003601f168201915b505050505081526020019060010190610544565b600754600090610100900460ff16156106125750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107185760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916106a0917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ae4565b60408051601f19818403018152908290526106ba91610b15565b6000604051808303816000865af19150503d80600081146106f7576040519150601f19603f3d011682016040523d82523d6000602084013e6106fc565b606091505b50915050808060200190518101906107149190610b31565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101a5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610187575050505050905090565b806107f1577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107e19060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16107f16107f4565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108ef5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261088e9291602001610ae4565b60408051601f19818403018152908290526108a891610b15565b6000604051808303816000865af19150503d80600081146108e5576040519150601f19603f3d011682016040523d82523d6000602084013e6108ea565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156109415783516001600160a01b03168352928401929184019160010161091c565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156109f157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156109dc5783516001600160e01b0319168252928b019260019290920191908b01906109b2565b50978a01979550505091870191600101610975565b50919998505050505050505050565b60005b83811015610a1b578181015183820152602001610a03565b83811115610a2a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610a9d57878503603f1901845281518051808752610a7e818989018a8501610a00565b601f01601f191695909501860194509285019290850190600101610a57565b5092979650505050505050565b600181811c90821680610abe57607f821691505b602082108103610ade57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610b07816004850160208701610a00565b919091016004019392505050565b60008251610b27818460208701610a00565b9190910192915050565b600060208284031215610b4357600080fd5b81518015158114610b5357600080fd5b939250505056fea26469706673582212201461b0a1789c5ceef8043b8db138b086c41927bda3f70723607e9c4a42f6b20264736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KContractTestField
    
    syntax S2KContractTestField ::= "stdstore" [symbol(), klabel(field_ContractTest_stdstore)]
    
    syntax S2KContractTestField ::= "IS_TEST" [symbol(), klabel(field_ContractTest_IS_TEST)]
    
    syntax S2KContractTestField ::= "_failed" [symbol(), klabel(field_ContractTest__failed)]
    
    syntax S2KContractTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ContractTest_stdChainsInitialized)]
    
    syntax S2KContractTestField ::= "chains" [symbol(), klabel(field_ContractTest_chains)]
    
    syntax S2KContractTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ContractTest_defaultRpcUrls)]
    
    syntax S2KContractTestField ::= "idToAlias" [symbol(), klabel(field_ContractTest_idToAlias)]
    
    syntax S2KContractTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ContractTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KContractTestField ::= "gasMeteringOff" [symbol(), klabel(field_ContractTest_gasMeteringOff)]
    
    syntax S2KContractTestField ::= "_excludedContracts" [symbol(), klabel(field_ContractTest__excludedContracts)]
    
    syntax S2KContractTestField ::= "_excludedSenders" [symbol(), klabel(field_ContractTest__excludedSenders)]
    
    syntax S2KContractTestField ::= "_targetedContracts" [symbol(), klabel(field_ContractTest__targetedContracts)]
    
    syntax S2KContractTestField ::= "_targetedSenders" [symbol(), klabel(field_ContractTest__targetedSenders)]
    
    syntax S2KContractTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ContractTest__excludedArtifacts)]
    
    syntax S2KContractTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ContractTest__targetedArtifacts)]
    
    syntax S2KContractTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ContractTest__targetedArtifactSelectors)]
    
    syntax S2KContractTestField ::= "_targetedSelectors" [symbol(), klabel(field_ContractTest__targetedSelectors)]
    
    rule  ( #loc ( S2KContractTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KContractTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KContractTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KContractTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KContractTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KContractTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KContractTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KContractTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KContractTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KContractTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KContractTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KContractTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KContractTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KContractTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KContractTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KContractTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KContractTestContract "." S2KContractTestMethod [function(), symbol(), klabel(method_ContractTest)]
    
    syntax S2KContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ContractTest_S2KISZUndTEST_)]
    
    syntax S2KContractTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ContractTest_S2KexcludeArtifacts_)]
    
    syntax S2KContractTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ContractTest_S2KexcludeContracts_)]
    
    syntax S2KContractTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ContractTest_S2KexcludeSenders_)]
    
    syntax S2KContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ContractTest_S2Kfailed_)]
    
    syntax S2KContractTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ContractTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KContractTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ContractTest_S2KtargetArtifacts_)]
    
    syntax S2KContractTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ContractTest_S2KtargetContracts_)]
    
    syntax S2KContractTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ContractTest_S2KtargetSelectors_)]
    
    syntax S2KContractTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ContractTest_S2KtargetSenders_)]
    
    syntax S2KContractTestMethod ::= "S2KtestExample" "(" ")" [symbol(), klabel(method_ContractTest_S2KtestExample_)]
    
    rule  ( S2KContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtestExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testExample()" ) => 1062881834 )
      

endmodule

module S2KContractBTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractBTestContract
    
    syntax S2KContractBTestContract ::= "S2KContractBTest" [symbol(), klabel(contract_ContractBTest)]
    
      
    
    rule  ( #initBytecode ( S2KContractBTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610dbf8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa914610173578063ba414fa61461017b578063e20c9f7114610193578063fa7626d41461019b57600080fd5b806366d9a9a01461014157806385226c8114610156578063916a17c61461016b57600080fd5b80633790444c116100c85780633790444c146101215780633ce7a75c146101295780633e5e3c23146101315780633f7286f41461013957600080fd5b80630a9254e4146100ef5780631ed7831c146100fb5780632f6b04ac14610119575b600080fd5b6100f9602a601b55565b005b6101036101a8565b6040516101109190610ae3565b60405180910390f35b6100f961020a565b6100f9610219565b6100f96102d7565b6101036102ea565b61010361034a565b6101496103aa565b6040516101109190610b30565b61015e610499565b6040516101109190610c3f565b610149610569565b61015e61064f565b61018361071f565b6040519015158152602001610110565b61010361084c565b6007546101839060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561020057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101e2575b5050505050905090565b610217601b54602a6108ac565b565b60405160116024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b031916815261028b9190600401610ca1565b600060405180830381600087803b1580156102a557600080fd5b505af11580156102b9573d6000803e3d6000fd5b50505050602b601b60008282546102d09190610cbb565b9091555050565b602b601b60008282546102d09190610cbb565b60606016805480602002602001604051908101604052809291908181526020018280548015610200576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e2575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610200576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e2575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104905760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561047857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161043a5790505b505050505081525050815260200190600101906103ce565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104905783829060005260206000200180546104dc90610ce0565b80601f016020809104026020016040519081016040528092919081815260200182805461050890610ce0565b80156105555780601f1061052a57610100808354040283529160200191610555565b820191906000526020600020905b81548152906001019060200180831161053857829003601f168201915b5050505050815260200190600101906104bd565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104905760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561063757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105f95790505b5050505050815250508152602001906001019061058d565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561049057838290600052602060002001805461069290610ce0565b80601f01602080910402602001604051908101604052809291908181526020018280546106be90610ce0565b801561070b5780601f106106e05761010080835404028352916020019161070b565b820191906000526020600020905b8154815290600101906020018083116106ee57829003601f168201915b505050505081526020019060010190610673565b600754600090610100900460ff16156107415750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108475760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107cf917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d1a565b60408051601f19818403018152908290526107e991610d4b565b6000604051808303816000865af19150503d8060008114610826576040519150601f19603f3d011682016040523d82523d6000602084013e61082b565b606091505b50915050808060200190518101906108439190610d67565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610200576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e2575050505050905090565b8082146109d3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161091d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16109d36109d7565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ad25760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610a719291602001610d1a565b60408051601f1981840301815290829052610a8b91610d4b565b6000604051808303816000865af19150503d8060008114610ac8576040519150601f19603f3d011682016040523d82523d6000602084013e610acd565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610b245783516001600160a01b031683529284019291840191600101610aff565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610bd457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610bbf5783516001600160e01b0319168252928b019260019290920191908b0190610b95565b50978a01979550505091870191600101610b58565b50919998505050505050505050565b60005b83811015610bfe578181015183820152602001610be6565b83811115610c0d576000848401525b50505050565b60008151808452610c2b816020860160208601610be3565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c9457603f19888603018452610c82858351610c13565b94509285019290850190600101610c66565b5092979650505050505050565b602081526000610cb46020830184610c13565b9392505050565b600082821015610cdb57634e487b7160e01b600052601160045260246000fd5b500390565b600181811c90821680610cf457607f821691505b602082108103610d1457634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d3d816004850160208701610be3565b919091016004019392505050565b60008251610d5d818460208701610be3565b9190910192915050565b600060208284031215610d7957600080fd5b81518015158114610cb457600080fdfea26469706673582212204b62bad9401f13fe0094f3b87daf549ab21d3ea5ee81569bef1e9f1d9169200d64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KContractBTestField
    
    syntax S2KContractBTestField ::= "stdstore" [symbol(), klabel(field_ContractBTest_stdstore)]
    
    syntax S2KContractBTestField ::= "IS_TEST" [symbol(), klabel(field_ContractBTest_IS_TEST)]
    
    syntax S2KContractBTestField ::= "_failed" [symbol(), klabel(field_ContractBTest__failed)]
    
    syntax S2KContractBTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ContractBTest_stdChainsInitialized)]
    
    syntax S2KContractBTestField ::= "chains" [symbol(), klabel(field_ContractBTest_chains)]
    
    syntax S2KContractBTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ContractBTest_defaultRpcUrls)]
    
    syntax S2KContractBTestField ::= "idToAlias" [symbol(), klabel(field_ContractBTest_idToAlias)]
    
    syntax S2KContractBTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ContractBTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KContractBTestField ::= "gasMeteringOff" [symbol(), klabel(field_ContractBTest_gasMeteringOff)]
    
    syntax S2KContractBTestField ::= "_excludedContracts" [symbol(), klabel(field_ContractBTest__excludedContracts)]
    
    syntax S2KContractBTestField ::= "_excludedSenders" [symbol(), klabel(field_ContractBTest__excludedSenders)]
    
    syntax S2KContractBTestField ::= "_targetedContracts" [symbol(), klabel(field_ContractBTest__targetedContracts)]
    
    syntax S2KContractBTestField ::= "_targetedSenders" [symbol(), klabel(field_ContractBTest__targetedSenders)]
    
    syntax S2KContractBTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ContractBTest__excludedArtifacts)]
    
    syntax S2KContractBTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ContractBTest__targetedArtifacts)]
    
    syntax S2KContractBTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ContractBTest__targetedArtifactSelectors)]
    
    syntax S2KContractBTestField ::= "_targetedSelectors" [symbol(), klabel(field_ContractBTest__targetedSelectors)]
    
    syntax S2KContractBTestField ::= "testNumber" [symbol(), klabel(field_ContractBTest_testNumber)]
    
    rule  ( #loc ( S2KContractBTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KContractBTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KContractBTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KContractBTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KContractBTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KContractBTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KContractBTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KContractBTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KContractBTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KContractBTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KContractBTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KContractBTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KContractBTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KContractBTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KContractBTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KContractBTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KContractBTest . testNumber ) => 27 )
      
    
    syntax Bytes ::= S2KContractBTestContract "." S2KContractBTestMethod [function(), symbol(), klabel(method_ContractBTest)]
    
    syntax S2KContractBTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ContractBTest_S2KISZUndTEST_)]
    
    syntax S2KContractBTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ContractBTest_S2KexcludeArtifacts_)]
    
    syntax S2KContractBTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ContractBTest_S2KexcludeContracts_)]
    
    syntax S2KContractBTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ContractBTest_S2KexcludeSenders_)]
    
    syntax S2KContractBTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ContractBTest_S2Kfailed_)]
    
    syntax S2KContractBTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_ContractBTest_S2KsetUp_)]
    
    syntax S2KContractBTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KContractBTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtargetArtifacts_)]
    
    syntax S2KContractBTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtargetContracts_)]
    
    syntax S2KContractBTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtargetSelectors_)]
    
    syntax S2KContractBTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtargetSenders_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestCannotSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestCannotSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestFailSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestFailSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestNumberIs42" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestNumberIs42_)]
    
    rule  ( S2KContractBTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testCannotSubtract43()" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43()" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42()" ) => 795542700 )
      

endmodule

module S2KCounter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterContract
    
    syntax S2KCounterContract ::= "S2KCounter" [symbol(), klabel(contract_Counter)]
    
      
    
    rule  ( #initBytecode ( S2KCounter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d3317f91319e74004eff8c9f5d91a685e5db0446295db81865cf4740f04ad88a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KCounterField
    
    syntax S2KCounterField ::= "number" [symbol(), klabel(field_Counter_number)]
    
    rule  ( #loc ( S2KCounter . number ) => 0 )
      
    
    syntax Bytes ::= S2KCounterContract "." S2KCounterMethod [function(), symbol(), klabel(method_Counter)]
    
    syntax S2KCounterMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_Counter_S2Kincrement_)]
    
    syntax S2KCounterMethod ::= "S2Knumber" "(" ")" [symbol(), klabel(method_Counter_S2Knumber_)]
    
    syntax S2KCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Counter_S2KsetNumber_uint256)]
    
    rule  ( S2KCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . S2KsetNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , #uint256 ( V0_newNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newNumber )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )
      

endmodule

module S2KCounterTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterTestContract
    
    syntax S2KCounterTestContract ::= "S2KCounterTest" [symbol(), klabel(contract_CounterTest)]
    
      
    
    rule  ( #initBytecode ( S2KCounterTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061112d8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa61461019f578063d6a2ec76146101b7578063e20c9f71146101de578063fa7626d4146101e657600080fd5b8063916a17c614610187578063b5508aa91461018f578063b913a5ca1461019757600080fd5b806361bc221a116100c857806361bc221a1461011d57806366d9a9a01461014857806370f985be1461015d57806385226c811461017257600080fd5b80631ed7831c146100ef5780633e5e3c231461010d5780633f7286f414610115575b600080fd5b6100f76101f3565b6040516101049190610d55565b60405180910390f35b6100f7610255565b6100f76102b5565b601b54610130906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b610150610315565b6040516101049190610da2565b61017061016b366004610e55565b610404565b005b61017a61057c565b6040516101049190610e9e565b61015061064c565b61017a610732565b610170610802565b6101a7610984565b6040519015158152602001610104565b6101307f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6100f7610ab1565b6007546101a79060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561024b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161022d575b5050505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561024b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022d575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561024b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022d575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103fb5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103e357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103a55790505b50505050508152505081526020019060010190610339565b50505050905090565b60405161041090610d48565b604051809103906000f08015801561042c573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b5050601b54604051633fb5c1cb60e01b8152600481018590526001600160a01b039091169250633fb5c1cb9150602401600060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b50505050610579601b60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190610f18565b82610b11565b50565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103fb5783829060005260206000200180546105bf90610f31565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90610f31565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b5050505050815260200190600101906105a0565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103fb5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561071a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106dc5790505b50505050508152505081526020019060010190610670565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103fb57838290600052602060002001805461077590610f31565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190610f31565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505081526020019060010190610756565b60405161080e90610d48565b604051809103906000f08015801561082a573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b15801561088157600080fd5b505af1158015610895573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b50505050610982601b60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610f18565b6001610b11565b565b600754600090610100900460ff16156109a65750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610aac5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a34917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610f6b565b60408051601f1981840301815290829052610a4e91610f9c565b6000604051808303816000865af19150503d8060008114610a8b576040519150601f19603f3d011682016040523d82523d6000602084013e610a90565b606091505b5091505080806020019051810190610aa89190610fb8565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561024b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022d575050505050905090565b808214610c38577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b829060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610c38610c3c565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610d375760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610cd69291602001610f6b565b60408051601f1981840301815290829052610cf091610f9c565b6000604051808303816000865af19150503d8060008114610d2d576040519150601f19603f3d011682016040523d82523d6000602084013e610d32565b606091505b505050505b6007805461ff001916610100179055565b61011680610fe283390190565b6020808252825182820181905260009190848201906040850190845b81811015610d965783516001600160a01b031683529284019291840191600101610d71565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610e4657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610e315783516001600160e01b0319168252928b019260019290920191908b0190610e07565b50978a01979550505091870191600101610dca565b50919998505050505050505050565b600060208284031215610e6757600080fd5b5035919050565b60005b83811015610e89578181015183820152602001610e71565b83811115610e98576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f0b57878503603f1901845281518051808752610eec818989018a8501610e6e565b601f01601f191695909501860194509285019290850190600101610ec5565b5092979650505050505050565b600060208284031215610f2a57600080fd5b5051919050565b600181811c90821680610f4557607f821691505b602082108103610f6557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610f8e816004850160208701610e6e565b919091016004019392505050565b60008251610fae818460208701610e6e565b9190910192915050565b600060208284031215610fca57600080fd5b81518015158114610fda57600080fd5b939250505056fe608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d3317f91319e74004eff8c9f5d91a685e5db0446295db81865cf4740f04ad88a64736f6c634300080d0033a26469706673582212200be6fc0d2fb736df7e6832cf30e05ce816fe2b29307a5c9892c17d0b36f6253364736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KCounterTestField
    
    syntax S2KCounterTestField ::= "stdstore" [symbol(), klabel(field_CounterTest_stdstore)]
    
    syntax S2KCounterTestField ::= "IS_TEST" [symbol(), klabel(field_CounterTest_IS_TEST)]
    
    syntax S2KCounterTestField ::= "_failed" [symbol(), klabel(field_CounterTest__failed)]
    
    syntax S2KCounterTestField ::= "stdChainsInitialized" [symbol(), klabel(field_CounterTest_stdChainsInitialized)]
    
    syntax S2KCounterTestField ::= "chains" [symbol(), klabel(field_CounterTest_chains)]
    
    syntax S2KCounterTestField ::= "defaultRpcUrls" [symbol(), klabel(field_CounterTest_defaultRpcUrls)]
    
    syntax S2KCounterTestField ::= "idToAlias" [symbol(), klabel(field_CounterTest_idToAlias)]
    
    syntax S2KCounterTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_CounterTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KCounterTestField ::= "gasMeteringOff" [symbol(), klabel(field_CounterTest_gasMeteringOff)]
    
    syntax S2KCounterTestField ::= "_excludedContracts" [symbol(), klabel(field_CounterTest__excludedContracts)]
    
    syntax S2KCounterTestField ::= "_excludedSenders" [symbol(), klabel(field_CounterTest__excludedSenders)]
    
    syntax S2KCounterTestField ::= "_targetedContracts" [symbol(), klabel(field_CounterTest__targetedContracts)]
    
    syntax S2KCounterTestField ::= "_targetedSenders" [symbol(), klabel(field_CounterTest__targetedSenders)]
    
    syntax S2KCounterTestField ::= "_excludedArtifacts" [symbol(), klabel(field_CounterTest__excludedArtifacts)]
    
    syntax S2KCounterTestField ::= "_targetedArtifacts" [symbol(), klabel(field_CounterTest__targetedArtifacts)]
    
    syntax S2KCounterTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_CounterTest__targetedArtifactSelectors)]
    
    syntax S2KCounterTestField ::= "_targetedSelectors" [symbol(), klabel(field_CounterTest__targetedSelectors)]
    
    syntax S2KCounterTestField ::= "counter" [symbol(), klabel(field_CounterTest_counter)]
    
    rule  ( #loc ( S2KCounterTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KCounterTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KCounterTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KCounterTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KCounterTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KCounterTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KCounterTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KCounterTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KCounterTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KCounterTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KCounterTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KCounterTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KCounterTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KCounterTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KCounterTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KCounterTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KCounterTest . counter ) => 27 )
      
    
    syntax Bytes ::= S2KCounterTestContract "." S2KCounterTestMethod [function(), symbol(), klabel(method_CounterTest)]
    
    syntax S2KCounterTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_CounterTest_S2KISZUndTEST_)]
    
    syntax S2KCounterTestMethod ::= "S2Kcounter" "(" ")" [symbol(), klabel(method_CounterTest_S2Kcounter_)]
    
    syntax S2KCounterTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_CounterTest_S2KexcludeArtifacts_)]
    
    syntax S2KCounterTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_CounterTest_S2KexcludeContracts_)]
    
    syntax S2KCounterTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_CounterTest_S2KexcludeSenders_)]
    
    syntax S2KCounterTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_CounterTest_S2Kfailed_)]
    
    syntax S2KCounterTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_CounterTest_S2Kkevm_)]
    
    syntax S2KCounterTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KCounterTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetArtifacts_)]
    
    syntax S2KCounterTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetContracts_)]
    
    syntax S2KCounterTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetSelectors_)]
    
    syntax S2KCounterTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetSenders_)]
    
    syntax S2KCounterTestMethod ::= "S2KtestIncrement" "(" ")" [symbol(), klabel(method_CounterTest_S2KtestIncrement_)]
    
    syntax S2KCounterTestMethod ::= "S2KtestSetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_CounterTest_S2KtestSetNumber_uint256)]
    
    rule  ( S2KCounterTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kcounter ( ) => #abiCallData ( "counter" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtestIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtestSetNumber ( V0_x : uint256 ) => #abiCallData ( "testSetNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "counter()" ) => 1639719450 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testIncrement()" ) => 3105072586 )
      
    
    rule  ( selector ( "testSetNumber(uint256)" ) => 1895400894 )
      

endmodule

module S2KDynamicTypes-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDynamicTypesContract
    
    syntax S2KDynamicTypesContract ::= "S2KDynamicTypes" [symbol(), klabel(contract_DynamicTypes)]
    
      
    
    rule  ( #initBytecode ( S2KDynamicTypes ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610d268061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063916a17c611610071578063916a17c614610106578063b5508aa91461010e578063ba414fa614610116578063e20c9f711461012e578063ee9c6a0d14610136578063fa7626d41461014b57600080fd5b80631ed7831c146100ae5780633e5e3c23146100cc5780633f7286f4146100d457806366d9a9a0146100dc57806385226c81146100f1575b600080fd5b6100b6610158565b6040516100c391906109b5565b60405180910390f35b6100b66101ba565b6100b661021a565b6100e461027a565b6040516100c39190610a02565b6100f9610369565b6040516100c39190610ae5565b6100e4610439565b6100f961051f565b61011e6105ef565b60405190151581526020016100c3565b6100b661071c565b610149610144366004610b75565b61077c565b005b60075461011e9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610192575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101b0576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610192575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101b0576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610192575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103605760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561034857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161030a5790505b5050505050815250508152602001906001019061029e565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103605783829060005260206000200180546103ac90610c2a565b80601f01602080910402602001604051908101604052809291908181526020018280546103d890610c2a565b80156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b50505050508152602001906001019061038d565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103605760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104c95790505b5050505050815250508152602001906001019061045d565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036057838290600052602060002001805461056290610c2a565b80601f016020809104026020016040519081016040528092919081815260200182805461058e90610c2a565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081526020019060010190610543565b600754600090610100900460ff16156106115750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107175760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161069f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c64565b60408051601f19818403018152908290526106b991610c95565b6000604051808303816000865af19150503d80600081146106f6576040519150601f19603f3d011682016040523d82523d6000602084013e6106fb565b606091505b50915050808060200190518101906107139190610cb1565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101b0576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610192575050505050905090565b600082828151811061079057610790610cda565b0160200151604051632631f2b160e11b8152600360f89290921c9182106004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b5050505061082d8160ff166002148061081c57508160ff166001145b80610828575060ff8216155b610832565b505050565b806108a6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108969060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16108a66108a9565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109a45760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109439291602001610c64565b60408051601f198184030181529082905261095d91610c95565b6000604051808303816000865af19150503d806000811461099a576040519150601f19603f3d011682016040523d82523d6000602084013e61099f565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156109f65783516001600160a01b0316835292840192918401916001016109d1565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610aa657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610a915783516001600160e01b0319168252928b019260019290920191908b0190610a67565b50978a01979550505091870191600101610a2a565b50919998505050505050505050565b60005b83811015610ad0578181015183820152602001610ab8565b83811115610adf576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b5257878503603f1901845281518051808752610b33818989018a8501610ab5565b601f01601f191695909501860194509285019290850190600101610b0c565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610b8857600080fd5b823567ffffffffffffffff80821115610ba057600080fd5b818501915085601f830112610bb457600080fd5b813581811115610bc657610bc6610b5f565b604051601f8201601f19908116603f01168101908382118183101715610bee57610bee610b5f565b81604052828152886020848701011115610c0757600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600181811c90821680610c3e57607f821691505b602082108103610c5e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c87816004850160208701610ab5565b919091016004019392505050565b60008251610ca7818460208701610ab5565b9190910192915050565b600060208284031215610cc357600080fd5b81518015158114610cd357600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122017385678ed725f54cfe42d4b641e150467465fb1d01eb34561378443776bb95364736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KDynamicTypesField
    
    syntax S2KDynamicTypesField ::= "stdstore" [symbol(), klabel(field_DynamicTypes_stdstore)]
    
    syntax S2KDynamicTypesField ::= "IS_TEST" [symbol(), klabel(field_DynamicTypes_IS_TEST)]
    
    syntax S2KDynamicTypesField ::= "_failed" [symbol(), klabel(field_DynamicTypes__failed)]
    
    syntax S2KDynamicTypesField ::= "stdChainsInitialized" [symbol(), klabel(field_DynamicTypes_stdChainsInitialized)]
    
    syntax S2KDynamicTypesField ::= "chains" [symbol(), klabel(field_DynamicTypes_chains)]
    
    syntax S2KDynamicTypesField ::= "defaultRpcUrls" [symbol(), klabel(field_DynamicTypes_defaultRpcUrls)]
    
    syntax S2KDynamicTypesField ::= "idToAlias" [symbol(), klabel(field_DynamicTypes_idToAlias)]
    
    syntax S2KDynamicTypesField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_DynamicTypes_fallbackToDefaultRpcUrls)]
    
    syntax S2KDynamicTypesField ::= "gasMeteringOff" [symbol(), klabel(field_DynamicTypes_gasMeteringOff)]
    
    syntax S2KDynamicTypesField ::= "_excludedContracts" [symbol(), klabel(field_DynamicTypes__excludedContracts)]
    
    syntax S2KDynamicTypesField ::= "_excludedSenders" [symbol(), klabel(field_DynamicTypes__excludedSenders)]
    
    syntax S2KDynamicTypesField ::= "_targetedContracts" [symbol(), klabel(field_DynamicTypes__targetedContracts)]
    
    syntax S2KDynamicTypesField ::= "_targetedSenders" [symbol(), klabel(field_DynamicTypes__targetedSenders)]
    
    syntax S2KDynamicTypesField ::= "_excludedArtifacts" [symbol(), klabel(field_DynamicTypes__excludedArtifacts)]
    
    syntax S2KDynamicTypesField ::= "_targetedArtifacts" [symbol(), klabel(field_DynamicTypes__targetedArtifacts)]
    
    syntax S2KDynamicTypesField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_DynamicTypes__targetedArtifactSelectors)]
    
    syntax S2KDynamicTypesField ::= "_targetedSelectors" [symbol(), klabel(field_DynamicTypes__targetedSelectors)]
    
    rule  ( #loc ( S2KDynamicTypes . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KDynamicTypes . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KDynamicTypes . chains ) => 8 )
      
    
    rule  ( #loc ( S2KDynamicTypes . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KDynamicTypes . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KDynamicTypes . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KDynamicTypes . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KDynamicTypesContract "." S2KDynamicTypesMethod [function(), symbol(), klabel(method_DynamicTypes)]
    
    syntax S2KDynamicTypesMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KISZUndTEST_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KexcludeArtifacts_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KexcludeContracts_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KexcludeSenders_)]
    
    syntax S2KDynamicTypesMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DynamicTypes_S2Kfailed_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KtargetArtifactSelectors_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KtargetArtifacts_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KtargetContracts_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KtargetSelectors_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KtargetSenders_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtestZUnddynamicZUndbyteZUndread" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_DynamicTypes_S2KtestZUnddynamicZUndbyteZUndread_bytes_uint256)]
    
    rule  ( S2KDynamicTypes . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtestZUnddynamicZUndbyteZUndread ( V0_data : bytes , V1_offset : uint256 ) => #abiCallData ( "test_dynamic_byte_read" , #bytes ( V0_data ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_data ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_dynamic_byte_read(bytes,uint256)" ) => 4003228173 )
      

endmodule

module S2KExpectEmit-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectEmitContract
    
    syntax S2KExpectEmitContract ::= "S2KExpectEmit" [symbol(), klabel(contract_ExpectEmit)]
    
      
    
    rule  ( #initBytecode ( S2KExpectEmit ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KExpectEmitContract "." S2KExpectEmitMethod [function(), symbol(), klabel(method_ExpectEmit)]
    
    syntax S2KExpectEmitMethod ::= "S2Kt" "(" ")" [symbol(), klabel(method_ExpectEmit_S2Kt_)]
    
    rule  ( S2KExpectEmit . S2Kt ( ) => #abiCallData ( "t" , .TypedArgs ) )
      
    
    rule  ( selector ( "t()" ) => 2463158611 )
      

endmodule

module S2KEmitContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEmitContractTestContract
    
    syntax S2KEmitContractTestContract ::= "S2KEmitContractTest" [symbol(), klabel(contract_EmitContractTest)]
    
      
    
    rule  ( #initBytecode ( S2KEmitContractTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610daa8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063e20c9f7111610066578063e20c9f711461015e578063e3d9593914610166578063fa7626d41461016e578063fd047e0d1461017b57600080fd5b8063916a17c614610136578063b5508aa91461013e578063ba414fa61461014657600080fd5b80631ed7831c146100d45780633e5e3c23146100f25780633f7286f4146100fa57806366d9a9a01461010257806385226c81146101175780638e30cd391461012c575b600080fd5b6100dc610183565b6040516100e99190610a56565b60405180910390f35b6100dc6101e5565b6100dc610245565b61010a6102a5565b6040516100e99190610aa3565b61011f610394565b6040516100e99190610b86565b610134610464565b005b61010a61059d565b61011f610683565b61014e610753565b60405190151581526020016100e9565b6100dc610880565b6101346108e0565b60075461014e9060ff1681565b61013461096a565b606060148054806020026020016040519081016040528092919081815260200182805480156101db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101bd575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101db576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bd575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101db576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bd575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561038b5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561037357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103355790505b505050505081525050815260200190600101906102c9565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038b5783829060005260206000200180546103d790610c00565b80601f016020809104026020016040519081016040528092919081815260200182805461040390610c00565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b5050505050815260200190600101906103b8565b600060405161047290610a4a565b604051809103906000f08015801561048e573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201819052600060448301526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c2906084015b600060405180830381600087803b1580156104f557600080fd5b505af1158015610509573d6000803e3d6000fd5b505060405161053980825292503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3806001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b5050505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561038b5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561066b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161062d5790505b505050505081525050815260200190600101906105c1565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038b5783829060005260206000200180546106c690610c00565b80601f01602080910402602001604051908101604052809291908181526020018280546106f290610c00565b801561073f5780601f106107145761010080835404028352916020019161073f565b820191906000526020600020905b81548152906001019060200180831161072257829003601f168201915b5050505050815260200190600101906106a7565b600754600090610100900460ff16156107755750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561087b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610803917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3a565b60408051601f198184030181529082905261081d91610c6b565b6000604051808303816000865af19150503d806000811461085a576040519150601f19603f3d011682016040523d82523d6000602084013e61085f565b606091505b50915050808060200190518101906108779190610c87565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101db576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bd575050505050905090565b60006040516108ee90610a4a565b604051809103906000f08015801561090a573d6000803e3d6000fd5b506040516381bad6f360e01b8152600160048201819052602482018190526000604483015260648201526001600160a01b0382166084820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906381bad6f39060a4016104db565b600060405161097890610a4a565b604051809103906000f080158015610994573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201526000604482018190526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c290608401600060405180830381600087803b1580156109fa57600080fd5b505af1158015610a0e573d6000803e3d6000fd5b505060405161053a815261053992503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161053f565b60c480610cb183390190565b6020808252825182820181905260009190848201906040850190845b81811015610a975783516001600160a01b031683529284019291840191600101610a72565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b4757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b325783516001600160e01b0319168252928b019260019290920191908b0190610b08565b50978a01979550505091870191600101610acb565b50919998505050505050505050565b60005b83811015610b71578181015183820152602001610b59565b83811115610b80576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bf357878503603f1901845281518051808752610bd4818989018a8501610b56565b601f01601f191695909501860194509285019290850190600101610bad565b5092979650505050505050565b600181811c90821680610c1457607f821691505b602082108103610c3457634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c5d816004850160208701610b56565b919091016004019392505050565b60008251610c7d818460208701610b56565b9190910192915050565b600060208284031215610c9957600080fd5b81518015158114610ca957600080fd5b939250505056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a2646970667358221220c13ab2cefc19d25963c93611a28148f1379a3c8a052036257ea2302ef7dcce9364736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KEmitContractTestField
    
    syntax S2KEmitContractTestField ::= "stdstore" [symbol(), klabel(field_EmitContractTest_stdstore)]
    
    syntax S2KEmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_EmitContractTest_IS_TEST)]
    
    syntax S2KEmitContractTestField ::= "_failed" [symbol(), klabel(field_EmitContractTest__failed)]
    
    syntax S2KEmitContractTestField ::= "stdChainsInitialized" [symbol(), klabel(field_EmitContractTest_stdChainsInitialized)]
    
    syntax S2KEmitContractTestField ::= "chains" [symbol(), klabel(field_EmitContractTest_chains)]
    
    syntax S2KEmitContractTestField ::= "defaultRpcUrls" [symbol(), klabel(field_EmitContractTest_defaultRpcUrls)]
    
    syntax S2KEmitContractTestField ::= "idToAlias" [symbol(), klabel(field_EmitContractTest_idToAlias)]
    
    syntax S2KEmitContractTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_EmitContractTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KEmitContractTestField ::= "gasMeteringOff" [symbol(), klabel(field_EmitContractTest_gasMeteringOff)]
    
    syntax S2KEmitContractTestField ::= "_excludedContracts" [symbol(), klabel(field_EmitContractTest__excludedContracts)]
    
    syntax S2KEmitContractTestField ::= "_excludedSenders" [symbol(), klabel(field_EmitContractTest__excludedSenders)]
    
    syntax S2KEmitContractTestField ::= "_targetedContracts" [symbol(), klabel(field_EmitContractTest__targetedContracts)]
    
    syntax S2KEmitContractTestField ::= "_targetedSenders" [symbol(), klabel(field_EmitContractTest__targetedSenders)]
    
    syntax S2KEmitContractTestField ::= "_excludedArtifacts" [symbol(), klabel(field_EmitContractTest__excludedArtifacts)]
    
    syntax S2KEmitContractTestField ::= "_targetedArtifacts" [symbol(), klabel(field_EmitContractTest__targetedArtifacts)]
    
    syntax S2KEmitContractTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_EmitContractTest__targetedArtifactSelectors)]
    
    syntax S2KEmitContractTestField ::= "_targetedSelectors" [symbol(), klabel(field_EmitContractTest__targetedSelectors)]
    
    rule  ( #loc ( S2KEmitContractTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KEmitContractTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KEmitContractTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KEmitContractTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KEmitContractTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KEmitContractTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KEmitContractTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KEmitContractTestContract "." S2KEmitContractTestMethod [function(), symbol(), klabel(method_EmitContractTest)]
    
    syntax S2KEmitContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KISZUndTEST_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KexcludeArtifacts_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KexcludeContracts_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KexcludeSenders_)]
    
    syntax S2KEmitContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_EmitContractTest_S2Kfailed_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtargetArtifacts_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtargetContracts_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtargetSelectors_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtargetSenders_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmit" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmit_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmitCheckEmitter" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmitCheckEmitter_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmitDoNotCheckData" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmitDoNotCheckData_)]
    
    rule  ( S2KEmitContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testExpectEmit()" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter()" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData()" ) => 4244930061 )
      

endmodule

module S2KEnvTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEnvTestContract
    
    syntax S2KEnvTestContract ::= "S2KEnvTest" [symbol(), klabel(contract_EnvTest)]
    
      
    
    rule  ( #initBytecode ( S2KEnvTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50612c118061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637b290a42116100c3578063b5508aa91161007c578063b5508aa91461021f578063ba414fa614610227578063c45db9c51461023f578063d5d0918714610247578063e20c9f711461024f578063fa7626d41461025757600080fd5b80637b290a42146101e25780637cebe429146101ea57806385226c81146101f2578063916a17c6146102075780639a96435d1461020f578063aaa3bd3b1461021757600080fd5b80633f7286f4116101155780633f7286f4146101a5578063416c9f6a146101ad57806355151e53146101b557806355c7785a146101bd57806366d9a9a0146101c55780636c627094146101da57600080fd5b80631a9ca1b61461015d5780631ed7831c1461016757806320e3be7f14610185578063354e99c81461018d5780633b4996ff146101955780633e5e3c231461019d575b600080fd5b610165610264565b005b61016f61039f565b60405161017c9190612078565b60405180910390f35b610165610401565b6101656105b8565b6101656106e9565b61016f610804565b61016f610864565b6101656108c4565b610165610a1d565b610165610b45565b6101cd610ca0565b60405161017c91906120c5565b610165610d8f565b610165610e6c565b610165610f4e565b6101fa6110f6565b60405161017c91906121d0565b6101cd6111c6565b6101656112ac565b61016561154d565b6101fa611694565b61022f611764565b604051901515815260200161017c565b610165611885565b610165611a15565b61016f611c59565b60075461022f9060ff1681565b600060405180604001604052806009815260200168494e545f56414c554560b81b815250905060006040518060800160405280604e8152602001612afc604e9139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee906102db9085908590600401612232565b600060405180830381600087803b1580156102f557600080fd5b505af1158015610309573d6000803e3d6000fd5b505060405163892a0c6160e01b8152600160ff1b9250600091506000805160206129a78339815191529063892a0c6190610347908790600401612260565b602060405180830381865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610388919061227a565b905081811461039957610399612293565b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156103f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103d9575b5050505050905090565b60006040518060400160405280600b81526020016a55494e545f56414c55455360a81b81525090506000604051806080016040528060448152602001612b4a60449139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee9061047a9085908590600401612232565b600060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000808252918101829052925163f3dec09960e01b81529194509192506000805160206129a78339815191529063f3dec0999061050f9088908790600401612232565b600060405180830381865afa15801561052c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105549190810190612314565b90508160405160200161056791906123aa565b604051602081830303815290604052805190602001208160405160200161058e91906123de565b60405160208183030381529060405280519060200120146105b1576105b1612293565b5050505050565b604080518082018252600a815269424f4f4c5f56414c554560b01b602080830191909152825180840184526004808252637472756560e01b928201929092529251631eac91f760e11b81529192916000805160206129a783398151915291633d5923ee9161062a918691869101612232565b600060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b5050604051637ed1ec7d60e01b815260019250600091506000805160206129a783398151915290637ed1ec7d90610693908790600401612260565b602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190612424565b90508115158115151461039957610399612293565b60006040518060400160405280600a815260200169494e545f56414c55455360b01b815250905060006040518060c0016040528060878152602001612a7560879139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee906107619085908590600401612232565b600060405180830381600087803b15801561077b57600080fd5b505af115801561078f573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452600160ff1b81526001600160ff1b03918101919091529151630421811560e41b81529093509091506000906000805160206129a78339815191529063421811509061050f9088908790600401612232565b606060168054806020026020016040519081016040528092919081815260200182805480156103f7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103d9575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156103f7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103d9575050505050905090565b604080518082018252600c81526b535452494e475f56414c554560a01b60208083019190915282518084018452600d81526c68656c6c6f2c20776f726c642160981b918101919091529151631eac91f760e11b81529091906000805160206129a783398151915290633d5923ee906109429085908590600401612232565b600060405180830381600087803b15801561095c57600080fd5b505af1158015610970573d6000803e3d6000fd5b5050604080518082018252600d81526c68656c6c6f2c20776f726c642160981b6020820152905163f877cb1960e01b8152909250600091506000805160206129a78339815191529063f877cb19906109cc908790600401612260565b600060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a1191908101906124ab565b90506103998183611cb9565b60006040518060400160405280600e81526020016d425954455333325f56414c55455360901b815250905060006040518060600160405280602f81526020016129c7602f9139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee90610a999085908590600401612232565b600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b815260009181018290529251635af231c160e01b81529194509192506000805160206129a783398151915290635af231c19061050f9088908790600401612232565b60006040518060400160405280600b81526020016a42595445535f56414c554560a81b815250905060006040518060600160405280602a8152602001612a4b602a9139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee90610bbe9085908590600401612232565b600060405180830381600087803b158015610bd857600080fd5b505af1158015610bec573d6000803e3d6000fd5b505060408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516326bdd78360e11b8152909250600091506000805160206129a783398151915290634d7baf0690610c4f908790600401612260565b600060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9491908101906124ab565b90506103998183611dfa565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015610d865760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610d6e57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d305790505b50505050508152505081526020019060010190610cc4565b50505050905090565b604080518082018252600d81526c425954455333325f56414c554560981b602080830191909152825180840184526004808252630307830360e41b928201929092529251631eac91f760e11b81529192916000805160206129a783398151915291633d5923ee91610e04918691869101612232565b600060405180830381600087803b158015610e1e57600080fd5b505af1158015610e32573d6000803e3d6000fd5b5050604051634bca482160e11b8152600092508291506000805160206129a783398151915290639794904290610347908790600401612260565b60006040518060400160405280600a81526020016955494e545f56414c554560b01b815250905060006040518060800160405280604e8152602001612b8e604e9139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee90610ee49085908590600401612232565b600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b505060405163c1978d1f60e01b81526000199250600091506000805160206129a78339815191529063c1978d1f90610347908790600401612260565b604080518082018252600b81526a424f4f4c5f56414c55455360a81b602080830191909152825180840184526015815274747275652c66616c73652c747275652c66616c736560581b918101919091529151631eac91f760e11b81529091906000805160206129a783398151915290633d5923ee90610fd39085908590600401612232565b600060405180830381600087803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b50506040805180820182526001808252600b60fa1b602080840191909152835160808101855282815260009181018290528085019290925260608201819052925163aaaddeaf60e01b815291945092506000805160206129a78339815191529063aaaddeaf906110779088908790600401612232565b600060405180830381865afa158015611094573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110bc91908101906124e0565b9050816040516020016110cf919061256d565b604051602081830303815290604052805190602001208160405160200161058e91906125a3565b60606018805480602002602001604051908101604052809291908181526020016000905b82821015610d86578382906000526020600020018054611139906125cf565b80601f0160208091040260200160405190810160405280929190818152602001828054611165906125cf565b80156111b25780601f10611187576101008083540402835291602001916111b2565b820191906000526020600020905b81548152906001019060200180831161119557829003601f168201915b50505050508152602001906001019061111a565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015610d865760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561129457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116112565790505b505050505081525050815260200190600101906111ea565b60006040518060400160405280600c81526020016b42595445535f56414c55455360a01b815250905060006040518060600160405280602f81526020016129c7602f9139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee906113269085908590600401612232565b600060405180830381600087803b15801561134057600080fd5b505af1158015611354573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602082015281516002808252606082019093529093506000925090816020015b6060815260200190600190039081611388579050509050604051806040016040528060148152602001737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b815250816000815181106113df576113df612609565b602002602001018190525060405180604001604052806001815260200160008152508160018151811061141457611414612609565b602090810291909101015260405163ddc2651b60e01b81526000906000805160206129a78339815191529063ddc2651b906114559088908790600401612232565b600060405180830381865afa158015611472573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261149a919081019061261f565b905060005b8251811015611545578281815181106114ba576114ba612609565b60200260200101516040516020016114d291906126d0565b604051602081830303815290604052805190602001208282815181106114fa576114fa612609565b602002602001015160405160200161151291906126d0565b604051602081830303815290604052805190602001201461153557611535612293565b61153e816126ec565b905061149f565b505050505050565b60006040518060400160405280600d81526020016c414444524553535f56414c554560981b815250905060006040518060600160405280602a8152602001612a4b602a9139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee906115c89085908590600401612232565b600060405180830381600087803b1580156115e257600080fd5b505af11580156115f6573d6000803e3d6000fd5b505060405163350d56bf60e01b81526000805160206129a7833981519152925060009150829063350d56bf90611630908790600401612260565b602060405180830381865afa15801561164d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611671919061272a565b9050816001600160a01b0316816001600160a01b03161461039957610399612293565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610d865783829060005260206000200180546116d7906125cf565b80601f0160208091040260200160405190810160405280929190818152602001828054611703906125cf565b80156117505780601f1061172557610100808354040283529160200191611750565b820191906000526020600020905b81548152906001019060200180831161173357829003601f168201915b5050505050815260200190600101906116b8565b600754600090610100900460ff16156117865750600754610100900460ff1690565b60006000805160206129a78339815191523b1561188057604080516000805160206129a7833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611808917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001612745565b60408051601f1981840301815290829052611822916126d0565b6000604051808303816000865af19150503d806000811461185f576040519150601f19603f3d011682016040523d82523d6000602084013e611864565b606091505b509150508080602001905181019061187c9190612424565b9150505b919050565b60006040518060400160405280600e81526020016d414444524553535f56414c55455360901b815250905060006040518060800160405280605581526020016129f660559139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee906119019085908590600401612232565b600060405180830381600087803b15801561191b57600080fd5b505af115801561192f573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000805160206129a783398151915280825260009282018390529351635698dcfd60e11b81529295509350919063ad31b9fa906119969088908790600401612232565b600060405180830381865afa1580156119b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119db9190810190612776565b9050816040516020016119ee9190612803565b604051602081830303815290604052805190602001208160405160200161058e9190612831565b60006040518060400160405280600d81526020016c535452494e475f56414c55455360981b8152509050600060405180606001604052806038815260200161296f60389139604051631eac91f760e11b81529091506000805160206129a783398151915290633d5923ee90611a909085908590600401612232565b600060405180830381600087803b158015611aaa57600080fd5b505af1158015611abe573d6000803e3d6000fd5b505050506000604051806040016040528060018152602001601f60fa1b8152509050600060405180604001604052806040518060400160405280600d81526020016c68656c6c6f2c20776f726c642160981b81525081526020016040518060600160405280602a8152602001612a4b602a913990526040516314b02bc960e01b81529091506000906000805160206129a7833981519152906314b02bc990611b6c9088908790600401612232565b600060405180830381865afa158015611b89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bb19190810190612864565b905060005b600281101561154557828160028110611bd157611bd1612609565b6020020151604051602001611be691906126d0565b60405160208183030381529060405280519060200120828281518110611c0e57611c0e612609565b6020026020010151604051602001611c2691906126d0565b6040516020818303038152906040528051906020012014611c4957611c49612293565b611c52816126ec565b9050611bb6565b606060138054806020026020016040519081016040528092919081815260200182805480156103f7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103d9575050505050905090565b80604051602001611cca91906126d0565b6040516020818303038152906040528051906020012082604051602001611cf191906126d0565b6040516020818303038152906040528051906020012014611df6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611d789060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382604051611daf9190612908565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051611de69190612944565b60405180910390a1611df6611e04565b5050565b611df68282611f04565b6000805160206129a78339815191523b15611ef357604080516000805160206129a7833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052611e929291602001612745565b60408051601f1981840301815290829052611eac916126d0565b6000604051808303816000865af19150503d8060008114611ee9576040519150601f19603f3d011682016040523d82523d6000602084013e611eee565b606091505b505050505b6007805461ff001916610100179055565b611f0e8282611feb565b611df6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611f7d9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1882604051611fb49190612908565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051611de69190612944565b80518251600191900361206e5760005b83518110156120685782818151811061201657612016612609565b602001015160f81c60f81b6001600160f81b03191684828151811061203d5761203d612609565b01602001516001600160f81b0319161461205657600091505b80612060816126ec565b915050611ffb565b50612072565b5060005b92915050565b6020808252825182820181905260009190848201906040850190845b818110156120b95783516001600160a01b031683529284019291840191600101612094565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561216957898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156121545783516001600160e01b0319168252928b019260019290920191908b019061212a565b50978a019795505050918701916001016120ed565b50919998505050505050505050565b60005b8381101561219357818101518382015260200161217b565b838111156103995750506000910152565b600081518084526121bc816020860160208601612178565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561222557603f198886030184526122138583516121a4565b945092850192908501906001016121f7565b5092979650505050505050565b60408152600061224560408301856121a4565b828103602084015261225781856121a4565b95945050505050565b60208152600061227360208301846121a4565b9392505050565b60006020828403121561228c57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156122e8576122e86122a9565b604052919050565b600067ffffffffffffffff82111561230a5761230a6122a9565b5060051b60200190565b6000602080838503121561232757600080fd5b825167ffffffffffffffff81111561233e57600080fd5b8301601f8101851361234f57600080fd5b805161236261235d826122f0565b6122bf565b81815260059190911b8201830190838101908783111561238157600080fd5b928401925b8284101561239f57835182529284019290840190612386565b979650505050505050565b60008183825b60028110156123cf5781518352602092830192909101906001016123b0565b50505060408201905092915050565b815160009082906020808601845b83811015612408578151855293820193908201906001016123ec565b50929695505050505050565b8051801515811461188057600080fd5b60006020828403121561243657600080fd5b61227382612414565b600082601f83011261245057600080fd5b815167ffffffffffffffff81111561246a5761246a6122a9565b61247d601f8201601f19166020016122bf565b81815284602083860101111561249257600080fd5b6124a3826020830160208701612178565b949350505050565b6000602082840312156124bd57600080fd5b815167ffffffffffffffff8111156124d457600080fd5b6124a38482850161243f565b600060208083850312156124f357600080fd5b825167ffffffffffffffff81111561250a57600080fd5b8301601f8101851361251b57600080fd5b805161252961235d826122f0565b81815260059190911b8201830190838101908783111561254857600080fd5b928401925b8284101561239f5761255e84612414565b8252928401929084019061254d565b60008183825b60048110156125945781511515835260209283019290910190600101612573565b50505060808201905092915050565b815160009082906020808601845b838110156124085781511515855293820193908201906001016125b1565b600181811c908216806125e357607f821691505b60208210810361260357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000602080838503121561263257600080fd5b825167ffffffffffffffff8082111561264a57600080fd5b818501915085601f83011261265e57600080fd5b815161266c61235d826122f0565b81815260059190911b8301840190848101908883111561268b57600080fd5b8585015b838110156126c3578051858111156126a75760008081fd5b6126b58b89838a010161243f565b84525091860191860161268f565b5098975050505050505050565b600082516126e2818460208701612178565b9190910192915050565b60006001820161270c57634e487b7160e01b600052601160045260246000fd5b5060010190565b80516001600160a01b038116811461188057600080fd5b60006020828403121561273c57600080fd5b61227382612713565b6001600160e01b0319831681528151600090612768816004850160208701612178565b919091016004019392505050565b6000602080838503121561278957600080fd5b825167ffffffffffffffff8111156127a057600080fd5b8301601f810185136127b157600080fd5b80516127bf61235d826122f0565b81815260059190911b820183019083810190878311156127de57600080fd5b928401925b8284101561239f576127f484612713565b825292840192908401906127e3565b60008183825b60028110156123cf5781516001600160a01b0316835260209283019290910190600101612809565b815160009082906020808601845b838110156124085781516001600160a01b03168552938201939082019060010161283f565b6000602080838503121561287757600080fd5b825167ffffffffffffffff8082111561288f57600080fd5b818501915085601f8301126128a357600080fd5b81516128b161235d826122f0565b81815260059190911b830184019084810190888311156128d057600080fd5b8585015b838110156126c3578051858111156128ec5760008081fd5b6128fa8b89838a010161243f565b8452509186019186016128d4565b60408152600061293260408301600a8152690808080808081319599d60b21b602082015260400190565b82810360208401526124a381856121a4565b60408152600061293260408301600a8152690808080808149a59da1d60b21b60208201526040019056fe68656c6c6f2c20776f726c64217c3078373130393730394543666139316138303632366646333938394436386636374635623144443132440000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d3078373130393730394543666139316138303632366646333938394436386636374635623144443132442c307830303078373130393730394543666139316138303632366646333938394436386636374635623144443132442c3078303030303030303030303030303030303030303030303030303030303030303030303030303030303078373130393730394543666139316138303632366646333938394436386636374635623144443132442d3078383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302c2b3078374646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646462d3537383936303434363138363538303937373131373835343932353034333433393533393236363334393932333332383230323832303139373238373932303033393536353634383139393638302c307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030313135373932303839323337333136313935343233353730393835303038363837393037383533323639393834363635363430353634303339343537353834303037393133313239363339393335a2646970667358221220b461b414b6bb71f481e175e51c8b94dd99dd9e4b24909860614c3d32a2660e2c64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KEnvTestField
    
    syntax S2KEnvTestField ::= "stdstore" [symbol(), klabel(field_EnvTest_stdstore)]
    
    syntax S2KEnvTestField ::= "IS_TEST" [symbol(), klabel(field_EnvTest_IS_TEST)]
    
    syntax S2KEnvTestField ::= "_failed" [symbol(), klabel(field_EnvTest__failed)]
    
    syntax S2KEnvTestField ::= "stdChainsInitialized" [symbol(), klabel(field_EnvTest_stdChainsInitialized)]
    
    syntax S2KEnvTestField ::= "chains" [symbol(), klabel(field_EnvTest_chains)]
    
    syntax S2KEnvTestField ::= "defaultRpcUrls" [symbol(), klabel(field_EnvTest_defaultRpcUrls)]
    
    syntax S2KEnvTestField ::= "idToAlias" [symbol(), klabel(field_EnvTest_idToAlias)]
    
    syntax S2KEnvTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_EnvTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KEnvTestField ::= "gasMeteringOff" [symbol(), klabel(field_EnvTest_gasMeteringOff)]
    
    syntax S2KEnvTestField ::= "_excludedContracts" [symbol(), klabel(field_EnvTest__excludedContracts)]
    
    syntax S2KEnvTestField ::= "_excludedSenders" [symbol(), klabel(field_EnvTest__excludedSenders)]
    
    syntax S2KEnvTestField ::= "_targetedContracts" [symbol(), klabel(field_EnvTest__targetedContracts)]
    
    syntax S2KEnvTestField ::= "_targetedSenders" [symbol(), klabel(field_EnvTest__targetedSenders)]
    
    syntax S2KEnvTestField ::= "_excludedArtifacts" [symbol(), klabel(field_EnvTest__excludedArtifacts)]
    
    syntax S2KEnvTestField ::= "_targetedArtifacts" [symbol(), klabel(field_EnvTest__targetedArtifacts)]
    
    syntax S2KEnvTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_EnvTest__targetedArtifactSelectors)]
    
    syntax S2KEnvTestField ::= "_targetedSelectors" [symbol(), klabel(field_EnvTest__targetedSelectors)]
    
    rule  ( #loc ( S2KEnvTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KEnvTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KEnvTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KEnvTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KEnvTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KEnvTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KEnvTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KEnvTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KEnvTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KEnvTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KEnvTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KEnvTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KEnvTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KEnvTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KEnvTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KEnvTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KEnvTestContract "." S2KEnvTestMethod [function(), symbol(), klabel(method_EnvTest)]
    
    syntax S2KEnvTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_EnvTest_S2KISZUndTEST_)]
    
    syntax S2KEnvTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_EnvTest_S2KexcludeArtifacts_)]
    
    syntax S2KEnvTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_EnvTest_S2KexcludeContracts_)]
    
    syntax S2KEnvTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_EnvTest_S2KexcludeSenders_)]
    
    syntax S2KEnvTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_EnvTest_S2Kfailed_)]
    
    syntax S2KEnvTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_EnvTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KEnvTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_EnvTest_S2KtargetArtifacts_)]
    
    syntax S2KEnvTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_EnvTest_S2KtargetContracts_)]
    
    syntax S2KEnvTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_EnvTest_S2KtargetSelectors_)]
    
    syntax S2KEnvTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_EnvTest_S2KtargetSenders_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvAddress" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvAddress_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvAddresseArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvAddresseArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBool" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBool_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBoolArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBoolArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes32" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes32_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes32Array" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes32Array_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytesArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytesArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvInt" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvInt_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvIntArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvIntArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvString" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvString_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvStringArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvStringArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvUInt" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvUInt_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvUIntArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvUIntArray_)]
    
    rule  ( S2KEnvTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testEnvAddress()" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray()" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool()" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray()" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes()" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32()" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array()" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray()" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt()" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray()" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString()" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray()" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt()" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray()" ) => 551796351 )
      

endmodule

module S2KDummy-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDummyContract
    
    syntax S2KDummyContract ::= "S2KDummy" [symbol(), klabel(contract_Dummy)]
    
      
    
    rule  ( #initBytecode ( S2KDummy ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063994b9d5714602d575b600080fd5b60c860405190815260200160405180910390f3fea264697066735822122065a08d76e34bbfc171138c8323b510db8a287e6412d606e5765a09c9288dd87a64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KDummyContract "." S2KDummyMethod [function(), symbol(), klabel(method_Dummy)]
    
    syntax S2KDummyMethod ::= "S2KnumberA" "(" ")" [symbol(), klabel(method_Dummy_S2KnumberA_)]
    
    rule  ( S2KDummy . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )
      
    
    rule  ( selector ( "numberA()" ) => 2571869527 )
      

endmodule

module S2KExpectCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectCallTestContract
    
    syntax S2KExpectCallTestContract ::= "S2KExpectCallTest" [symbol(), klabel(contract_ExpectCallTest)]
    
      
    
    rule  ( #initBytecode ( S2KExpectCallTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610d9a8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063bfe93def11610066578063bfe93def1461015e578063d6a2ec7614610166578063e20c9f71146101a5578063fa7626d4146101ad57600080fd5b8063916a17c614610136578063b5508aa91461013e578063ba414fa61461014657600080fd5b80631ed7831c146100d457806328561be0146100f25780633e5e3c23146100fc5780633f7286f41461010457806366d9a9a01461010c57806385226c8114610121575b600080fd5b6100dc6101ba565b6040516100e991906109f4565b60405180910390f35b6100fa61021c565b005b6100dc610327565b6100dc610387565b6101146103e7565b6040516100e99190610a41565b6101296104d6565b6040516100e99190610b4c565b6101146105a6565b61012961068c565b61014e61075c565b60405190151581526020016100e9565b6100fa610889565b61018d7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100e9565b6100dc610988565b60075461014e9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561021257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f4575b5050505050905090565b600060405161022a906109e8565b604051809103906000f080158015610246573d6000803e3d6000fd5b506040805160048082526024820183526020820180516001600160e01b031663994b9d5760e01b17905291516375a12b4760e01b815292935083929091600091737109709ecfa91a80626ff3989d68f67f5b1dd12d916375a12b47916102b29187918691889101610bae565b600060405180830381600087803b1580156102cc57600080fd5b505af11580156102e0573d6000803e3d6000fd5b50505050600080835160208501600087613e80f1600181036103105760203d036103105760206000803e60005191505b508060c81461032157610321610bde565b50505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610212576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f4575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610212576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f4575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104cd5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104b557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104775790505b5050505050815250508152602001906001019061040b565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104cd57838290600052602060002001805461051990610bf4565b80601f016020809104026020016040519081016040528092919081815260200182805461054590610bf4565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050815260200190600101906104fa565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104cd5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561067457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106365790505b505050505081525050815260200190600101906105ca565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104cd5783829060005260206000200180546106cf90610bf4565b80601f01602080910402602001604051908101604052809291908181526020018280546106fb90610bf4565b80156107485780601f1061071d57610100808354040283529160200191610748565b820191906000526020600020905b81548152906001019060200180831161072b57829003601f168201915b5050505050815260200190600101906106b0565b600754600090610100900460ff161561077e5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108845760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161080c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2e565b60408051601f198184030181529082905261082691610c5f565b6000604051808303816000865af19150503d8060008114610863576040519150601f19603f3d011682016040523d82523d6000602084013e610868565b606091505b50915050808060200190518101906108809190610c7b565b9150505b919050565b6000604051610897906109e8565b604051809103906000f0801580156108b3573d6000803e3d6000fd5b506040805160048082526024820183526020820180516001600160e01b031663994b9d5760e01b179052915163214602db60e21b815292935083929091600091737109709ecfa91a80626ff3989d68f67f5b1dd12d916385180b6c9161091d918791879101610ca4565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b5050505060008083516020850186613e80fa600181036103105760203d036103105760206000803e505060005160c8811461032157610321610bde565b60606013805480602002602001604051908101604052809291908181526020018280548015610212576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f4575050505050905090565b609480610cd183390190565b6020808252825182820181905260009190848201906040850190845b81811015610a355783516001600160a01b031683529284019291840191600101610a10565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610ae557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610ad05783516001600160e01b0319168252928b019260019290920191908b0190610aa6565b50978a01979550505091870191600101610a69565b50919998505050505050505050565b60005b83811015610b0f578181015183820152602001610af7565b838111156103215750506000910152565b60008151808452610b38816020860160208601610af4565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ba157603f19888603018452610b8f858351610b20565b94509285019290850190600101610b73565b5092979650505050505050565b60018060a01b0384168152826020820152606060408201526000610bd56060830184610b20565b95945050505050565b634e487b7160e01b600052600160045260246000fd5b600181811c90821680610c0857607f821691505b602082108103610c2857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c51816004850160208701610af4565b919091016004019392505050565b60008251610c71818460208701610af4565b9190910192915050565b600060208284031215610c8d57600080fd5b81518015158114610c9d57600080fd5b9392505050565b6001600160a01b0383168152604060208201819052600090610cc890830184610b20565b94935050505056fe6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063994b9d5714602d575b600080fd5b60c860405190815260200160405180910390f3fea264697066735822122065a08d76e34bbfc171138c8323b510db8a287e6412d606e5765a09c9288dd87a64736f6c634300080d0033a26469706673582212204a28ce921b1c8b5cbea1d673d6002e1f037c535a8cb914be6cd6141110313a8064736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KExpectCallTestField
    
    syntax S2KExpectCallTestField ::= "stdstore" [symbol(), klabel(field_ExpectCallTest_stdstore)]
    
    syntax S2KExpectCallTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectCallTest_IS_TEST)]
    
    syntax S2KExpectCallTestField ::= "_failed" [symbol(), klabel(field_ExpectCallTest__failed)]
    
    syntax S2KExpectCallTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ExpectCallTest_stdChainsInitialized)]
    
    syntax S2KExpectCallTestField ::= "chains" [symbol(), klabel(field_ExpectCallTest_chains)]
    
    syntax S2KExpectCallTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ExpectCallTest_defaultRpcUrls)]
    
    syntax S2KExpectCallTestField ::= "idToAlias" [symbol(), klabel(field_ExpectCallTest_idToAlias)]
    
    syntax S2KExpectCallTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ExpectCallTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KExpectCallTestField ::= "gasMeteringOff" [symbol(), klabel(field_ExpectCallTest_gasMeteringOff)]
    
    syntax S2KExpectCallTestField ::= "_excludedContracts" [symbol(), klabel(field_ExpectCallTest__excludedContracts)]
    
    syntax S2KExpectCallTestField ::= "_excludedSenders" [symbol(), klabel(field_ExpectCallTest__excludedSenders)]
    
    syntax S2KExpectCallTestField ::= "_targetedContracts" [symbol(), klabel(field_ExpectCallTest__targetedContracts)]
    
    syntax S2KExpectCallTestField ::= "_targetedSenders" [symbol(), klabel(field_ExpectCallTest__targetedSenders)]
    
    syntax S2KExpectCallTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ExpectCallTest__excludedArtifacts)]
    
    syntax S2KExpectCallTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ExpectCallTest__targetedArtifacts)]
    
    syntax S2KExpectCallTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ExpectCallTest__targetedArtifactSelectors)]
    
    syntax S2KExpectCallTestField ::= "_targetedSelectors" [symbol(), klabel(field_ExpectCallTest__targetedSelectors)]
    
    rule  ( #loc ( S2KExpectCallTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KExpectCallTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KExpectCallTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KExpectCallTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KExpectCallTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KExpectCallTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KExpectCallTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KExpectCallTestContract "." S2KExpectCallTestMethod [function(), symbol(), klabel(method_ExpectCallTest)]
    
    syntax S2KExpectCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KISZUndTEST_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KexcludeArtifacts_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KexcludeContracts_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KexcludeSenders_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kfailed_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kkevm_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtargetArtifacts_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtargetContracts_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtargetSelectors_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtargetSenders_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtestExpectRegularCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtestExpectRegularCall_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtestExpectStaticCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtestExpectStaticCall_)]
    
    rule  ( S2KExpectCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtestExpectRegularCall ( ) => #abiCallData ( "testExpectRegularCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtestExpectStaticCall ( ) => #abiCallData ( "testExpectStaticCall" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testExpectRegularCall()" ) => 676731872 )
      
    
    rule  ( selector ( "testExpectStaticCall()" ) => 3219733999 )
      

endmodule

module S2KDepthReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDepthReverterContract
    
    syntax S2KDepthReverterContract ::= "S2KDepthReverter" [symbol(), klabel(contract_DepthReverter)]
    
      
    
    rule  ( #initBytecode ( S2KDepthReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61028e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea2646970667358221220bd1291f150428bc9e0f86e5636ee33644e92110ed3423496ccc2af925dd7308a64736f6c634300080d0033608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea264697066735822122023acfb2a4c40e11f6c4a5765b1407c48b4a5ee0df2d80a1c82876157846e912464736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KDepthReverterField
    
    syntax S2KDepthReverterField ::= "reverter" [symbol(), klabel(field_DepthReverter_reverter)]
    
    rule  ( #loc ( S2KDepthReverter . reverter ) => 0 )
      
    
    syntax Bytes ::= S2KDepthReverterContract "." S2KDepthReverterMethod [function(), symbol(), klabel(method_DepthReverter)]
    
    syntax S2KDepthReverterMethod ::= "S2KrevertAtNextDepth" "(" ")" [symbol(), klabel(method_DepthReverter_S2KrevertAtNextDepth_)]
    
    rule  ( S2KDepthReverter . S2KrevertAtNextDepth ( ) => #abiCallData ( "revertAtNextDepth" , .TypedArgs ) )
      
    
    rule  ( selector ( "revertAtNextDepth()" ) => 332278727 )
      

endmodule

module S2KExpectRevertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectRevertTestContract
    
    syntax S2KExpectRevertTestContract ::= "S2KExpectRevertTest" [symbol(), klabel(contract_ExpectRevertTest)]
    
      
    
    rule  ( #initBytecode ( S2KExpectRevertTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506127e68061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638e3adec1116100de578063ba414fa611610097578063dcf0424711610071578063dcf042471461026d578063e20c9f7114610275578063f9f4ca021461027d578063fa7626d41461028557600080fd5b8063ba414fa614610245578063d30bccea1461025d578063dc01ae451461026557600080fd5b80638e3adec1146102155780638fccf7181461021d578063916a17c614610225578063976363f41461022d578063aeb5731f14610235578063b5508aa91461023d57600080fd5b80634d881cd5116101305780634d881cd5146101cb57806354e22dbb146101d357806366d9a9a0146101db578063694b3707146101f0578063804de425146101f857806385226c811461020057600080fd5b806301a07472146101785780631570fffb1461018d5780631ed7831c14610195578063364a9169146101b35780633e5e3c23146101bb5780633f7286f4146101c3575b600080fd5b61018b610186366004611a18565b610292565b005b61018b61043a565b61019d610487565b6040516101aa9190611a48565b60405180910390f35b61018b6104e9565b61019d6105ce565b61019d61062e565b61018b61068e565b61018b610782565b6101e36107e7565b6040516101aa9190611a95565b61018b6108d6565b61018b610944565b610208610a3b565b6040516101aa9190611ba0565b61018b610b0b565b61018b610c9c565b6101e3610d58565b61018b610e3e565b61018b610f1c565b610208610f95565b61024d611065565b60405190151581526020016101aa565b61018b611192565b61018b611271565b61018b6112bd565b61019d6113c8565b61018b611428565b60075461024d9060ff1681565b60006040516102a0906119f1565b604051809103906000f0801580156102bc573d6000803e3d6000fd5b506040516303223eab60e11b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb39150631ded6b7360e11b90610363908690602401611c02565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526103a891600401611c3f565b600060405180830381600087803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b5050604051630b7f42bb60e31b81526001600160a01b0384169250635bfa15d89150610406908590600401611c02565b60006040518083038186803b15801561041e57600080fd5b505afa158015610432573d6000803e3d6000fd5b505050505050565b60405162461bcd60e51b815260206004820152601960248201527f546869732073686f756c6420626520617420646570746820320000000000000060448201526064015b60405180910390fd5b606060148054806020026020016040519081016040528092919081815260200182805480156104df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104c1575b5050505050905090565b60006040516104f7906119fe565b604051809103906000f080158015610513573d6000803e3d6000fd5b50905060008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561056257600080fd5b505af1158015610576573d6000803e3d6000fd5b50505050806001600160a01b03166313ce2bc76040518163ffffffff1660e01b815260040160006040518083038186803b1580156105b357600080fd5b505afa1580156105c7573d6000803e3d6000fd5b5050505050565b606060168054806020026020016040519081016040528092919081815260200182805480156104df576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c1575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156104df576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c1575050505050905090565b600060405161069c906119f1565b604051809103906000f0801580156106b8573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561070f57600080fd5b505af1158015610723573d6000803e3d6000fd5b505060405163f7a3038160e01b81526001600160a01b038416925063f7a30381915061076a906004016020808252600490820152631190525360e21b604082015260600190565b60006040518083038186803b1580156105b357600080fd5b306001600160a01b0316631570fffb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107bd57600080fd5b505af19250505080156107ce575060015b5060405162461bcd60e51b815260040161047e90611c52565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156108cd5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108b557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108775790505b5050505050815250508152602001906001019061080b565b50505050905090565b60008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050610942611660565b565b6000604051610952906119f1565b604051809103906000f08015801561096e573d6000803e3d6000fd5b50905060008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611c8f565b5050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156108cd578382906000526020600020018054610a7e90611cb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaa90611cb1565b8015610af75780601f10610acc57610100808354040283529160200191610af7565b820191906000526020600020905b815481529060010190602001808311610ada57829003601f168201915b505050505081526020019060010190610a5f565b6000604051610b19906119f1565b604051809103906000f080158015610b35573d6000803e3d6000fd5b50905060008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe9190611c8f565b5060008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156105b357600080fd5b60405163f28dceb360e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390610cd190600401611c52565b600060405180830381600087803b158015610ceb57600080fd5b505af1158015610cff573d6000803e3d6000fd5b50505050306001600160a01b03166354e22dbb6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b50505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156108cd5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610e2657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610de85790505b50505050508152505081526020019060010190610d7c565b6000604051610e4c906119f1565b604051809103906000f080158015610e68573d6000803e3d6000fd5b50905060008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eb757600080fd5b505af1158015610ecb573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610f0857600080fd5b505afa158015610c5f573d6000803e3d6000fd5b6000604051610f2a906119f1565b604051809103906000f080158015610f46573d6000803e3d6000fd5b50905060008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c4b57600080fd5b60606017805480602002602001604051908101604052809291908181526020016000905b828210156108cd578382906000526020600020018054610fd890611cb1565b80601f016020809104026020016040519081016040528092919081815260200182805461100490611cb1565b80156110515780601f1061102657610100808354040283529160200191611051565b820191906000526020600020905b81548152906001019060200180831161103457829003601f168201915b505050505081526020019060010190610fb9565b600754600090610100900460ff16156110875750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561118d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611115917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611ceb565b60408051601f198184030181529082905261112f91611d1c565b6000604051808303816000865af19150503d806000811461116c576040519150601f19603f3d011682016040523d82523d6000602084013e611171565b606091505b50915050808060200190518101906111899190611c8f565b9150505b919050565b60006040516111a0906119f1565b604051809103906000f0801580156111bc573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561121357600080fd5b505af1158015611227573d6000803e3d6000fd5b505060405163f7a3038160e01b8152602060048201526009602482015268213aba103330b4b61760b91b60448201526001600160a01b038416925063f7a30381915060640161076a565b60008051602061279183398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3e57600080fd5b60006040516112cb906119f1565b604051809103906000f0801580156112e7573d6000803e3d6000fd5b50604080518082018252601281527152657665727420526561736f6e204865726560701b6020820152905163f28dceb360e01b8152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9163f28dceb39161134791600401611c3f565b600060405180830381600087803b15801561136157600080fd5b505af1158015611375573d6000803e3d6000fd5b505060405163f7a3038160e01b815260206004820152601260248201527152657665727420526561736f6e204865726560701b60448201526001600160a01b038416925063f7a30381915060640161076a565b606060138054806020026020016040519081016040528092919081815260200182805480156104df576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c1575050505050905090565b600060405161143690611a0b565b604051809103906000f080158015611452573d6000803e3d6000fd5b5060405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b1580156114b857600080fd5b505af11580156114cc573d6000803e3d6000fd5b5050604051633452efc960e21b815260016004820152600092506001600160a01b038416915063d14bbf24906024016000604051808303816000875af115801561151a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115429190810190611d4e565b905061155d8160405180602001604052806000815250611682565b60405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b1580156115bf57600080fd5b505af11580156115d3573d6000803e3d6000fd5b505060405163752795a160e11b815260016004820152600092508291506001600160a01b0385169063ea4f2b429060240160408051808303816000875af1158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190611dfb565b91509150611655826000611779565b610d52816000611779565b60405162461bcd60e51b8152602060048201526000602482015260440161047e565b61168c8282611858565b610a37577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516116fb9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516117329190611e1f565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516117699190611e63565b60405180910390a1610a376118e5565b808214610a37577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516117ea9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516118219190611e8d565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516117699190611ec5565b8051825160019190036118db5760005b83518110156118d55782818151811061188357611883611eef565b602001015160f81c60f81b6001600160f81b0319168482815181106118aa576118aa611eef565b01602001516001600160f81b031916146118c357600091505b806118cd81611f05565b915050611868565b506118df565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156119e05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261197f9291602001611ceb565b60408051601f198184030181529082905261199991611d1c565b6000604051808303816000865af19150503d80600081146119d6576040519150601f19603f3d011682016040523d82523d6000602084013e6119db565b606091505b505050505b6007805461ff001916610100179055565b61028e80611f2d83390190565b6103cb806121bb83390190565b61020b8061258683390190565b600060208284031215611a2a57600080fd5b81356001600160a01b0381168114611a4157600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611a895783516001600160a01b031683529284019291840191600101611a64565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611b3957898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611b245783516001600160e01b0319168252928b019260019290920191908b0190611afa565b50978a01979550505091870191600101611abd565b50919998505050505050505050565b60005b83811015611b63578181015183820152602001611b4b565b83811115610d525750506000910152565b60008151808452611b8c816020860160208601611b48565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611bf557603f19888603018452611be3858351611b74565b94509285019290850190600101611bc7565b5092979650505050505050565b6001600160a01b039190911681526040602082018190526011908201527005452414e534645524f574e45525348495607c1b606082015260800190565b602081526000611a416020830184611b74565b6020815260006118df60208301601981527f546869732073686f756c64206265206174206465707468203100000000000000602082015260400190565b600060208284031215611ca157600080fd5b81518015158114611a4157600080fd5b600181811c90821680611cc557607f821691505b602082108103611ce557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090611d0e816004850160208701611b48565b919091016004019392505050565b60008251611d2e818460208701611b48565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611d6057600080fd5b815167ffffffffffffffff80821115611d7857600080fd5b818401915084601f830112611d8c57600080fd5b815181811115611d9e57611d9e611d38565b604051601f8201601f19908116603f01168101908382118183101715611dc657611dc6611d38565b81604052828152876020848701011115611ddf57600080fd5b611df0836020830160208801611b48565b979650505050505050565b60008060408385031215611e0e57600080fd5b505080516020909101519092909150565b604081526000611e4960408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611e5b8185611b74565b949350505050565b604081526000611e4960408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611eb760408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611eb760408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600060018201611f2557634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea264697066735822122023acfb2a4c40e11f6c4a5765b1407c48b4a5ee0df2d80a1c82876157846e912464736f6c634300080d0033608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61028e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea2646970667358221220bd1291f150428bc9e0f86e5636ee33644e92110ed3423496ccc2af925dd7308a64736f6c634300080d0033608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea264697066735822122023acfb2a4c40e11f6c4a5765b1407c48b4a5ee0df2d80a1c82876157846e912464736f6c634300080d0033608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220d18d29691d85d22f99d96a8b4e19087a1d90899fa6db301e479727aa5726fdcd64736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da264697066735822122069cb7b6fd77c0a35d751777e1a6575ebcfd1222f32d8996b7a48462ddbe3c0c264736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KExpectRevertTestField
    
    syntax S2KExpectRevertTestField ::= "stdstore" [symbol(), klabel(field_ExpectRevertTest_stdstore)]
    
    syntax S2KExpectRevertTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectRevertTest_IS_TEST)]
    
    syntax S2KExpectRevertTestField ::= "_failed" [symbol(), klabel(field_ExpectRevertTest__failed)]
    
    syntax S2KExpectRevertTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ExpectRevertTest_stdChainsInitialized)]
    
    syntax S2KExpectRevertTestField ::= "chains" [symbol(), klabel(field_ExpectRevertTest_chains)]
    
    syntax S2KExpectRevertTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ExpectRevertTest_defaultRpcUrls)]
    
    syntax S2KExpectRevertTestField ::= "idToAlias" [symbol(), klabel(field_ExpectRevertTest_idToAlias)]
    
    syntax S2KExpectRevertTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ExpectRevertTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KExpectRevertTestField ::= "gasMeteringOff" [symbol(), klabel(field_ExpectRevertTest_gasMeteringOff)]
    
    syntax S2KExpectRevertTestField ::= "_excludedContracts" [symbol(), klabel(field_ExpectRevertTest__excludedContracts)]
    
    syntax S2KExpectRevertTestField ::= "_excludedSenders" [symbol(), klabel(field_ExpectRevertTest__excludedSenders)]
    
    syntax S2KExpectRevertTestField ::= "_targetedContracts" [symbol(), klabel(field_ExpectRevertTest__targetedContracts)]
    
    syntax S2KExpectRevertTestField ::= "_targetedSenders" [symbol(), klabel(field_ExpectRevertTest__targetedSenders)]
    
    syntax S2KExpectRevertTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ExpectRevertTest__excludedArtifacts)]
    
    syntax S2KExpectRevertTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ExpectRevertTest__targetedArtifacts)]
    
    syntax S2KExpectRevertTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ExpectRevertTest__targetedArtifactSelectors)]
    
    syntax S2KExpectRevertTestField ::= "_targetedSelectors" [symbol(), klabel(field_ExpectRevertTest__targetedSelectors)]
    
    rule  ( #loc ( S2KExpectRevertTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KExpectRevertTestContract "." S2KExpectRevertTestMethod [function(), symbol(), klabel(method_ExpectRevertTest)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KISZUndTEST_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KexcludeArtifacts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KexcludeContracts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KexcludeSenders_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2Kfailed_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KrevertDepth1" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KrevertDepth1_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KrevertDepth2" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KrevertDepth2_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtargetArtifacts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtargetContracts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtargetSelectors_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtargetSenders_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndExpectRevertZUndfailAndSuccess" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndExpectRevertZUndfailAndSuccess_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndbytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndempty" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndempty_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndfalse" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndfalse_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndmultipleReverts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndmultipleReverts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndExpectRevertZUndincreasedDepth" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndExpectRevertZUndincreasedDepth_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndbytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndencodedSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndencodedSymbolic_address)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinDepth" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndinDepth_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinternalCall" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndinternalCall_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndmessage" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndmessage_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndreturnValue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndreturnValue_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndtrue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndtrue_)]
    
    rule  ( S2KExpectRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KrevertDepth1 ( ) => #abiCallData ( "revertDepth1" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KrevertDepth2 ( ) => #abiCallData ( "revertDepth2" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndExpectRevertZUndfailAndSuccess ( ) => #abiCallData ( "testFail_ExpectRevert_failAndSuccess" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "testFail_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndempty ( ) => #abiCallData ( "testFail_expectRevert_empty" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndfalse ( ) => #abiCallData ( "testFail_expectRevert_false" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndmultipleReverts ( ) => #abiCallData ( "testFail_expectRevert_multipleReverts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndExpectRevertZUndincreasedDepth ( ) => #abiCallData ( "test_ExpectRevert_increasedDepth" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "test_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndencodedSymbolic ( V0_controller : address ) => #abiCallData ( "test_expectRevert_encodedSymbolic" , #address ( V0_controller ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndinDepth ( ) => #abiCallData ( "test_expectRevert_inDepth" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndinternalCall ( ) => #abiCallData ( "test_expectRevert_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndmessage ( ) => #abiCallData ( "test_expectRevert_message" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndreturnValue ( ) => #abiCallData ( "test_expectRevert_returnValue" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndtrue ( ) => #abiCallData ( "test_expectRevert_true" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "revertDepth1()" ) => 1424108987 )
      
    
    rule  ( selector ( "revertDepth2()" ) => 359727099 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_ExpectRevert_failAndSuccess()" ) => 2386222785 )
      
    
    rule  ( selector ( "testFail_expectRevert_bytes4()" ) => 3540765930 )
      
    
    rule  ( selector ( "testFail_expectRevert_empty()" ) => 3691097669 )
      
    
    rule  ( selector ( "testFail_expectRevert_false()" ) => 2152588325 )
      
    
    rule  ( selector ( "testFail_expectRevert_multipleReverts()" ) => 2539873268 )
      
    
    rule  ( selector ( "test_ExpectRevert_increasedDepth()" ) => 910856553 )
      
    
    rule  ( selector ( "test_expectRevert_bytes4()" ) => 1300765909 )
      
    
    rule  ( selector ( "test_expectRevert_encodedSymbolic(address)" ) => 27292786 )
      
    
    rule  ( selector ( "test_expectRevert_inDepth()" ) => 2412574488 )
      
    
    rule  ( selector ( "test_expectRevert_internalCall()" ) => 1766536967 )
      
    
    rule  ( selector ( "test_expectRevert_message()" ) => 3706733127 )
      
    
    rule  ( selector ( "test_expectRevert_returnValue()" ) => 4193569282 )
      
    
    rule  ( selector ( "test_expectRevert_true()" ) => 2931127071 )
      

endmodule

module S2KReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterContract
    
    syntax S2KReverterContract ::= "S2KReverter" [symbol(), klabel(contract_Reverter)]
    
      
    
    rule  ( #initBytecode ( S2KReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea264697066735822122023acfb2a4c40e11f6c4a5765b1407c48b4a5ee0df2d80a1c82876157846e912464736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KReverterContract "." S2KReverterMethod [function(), symbol(), klabel(method_Reverter)]
    
    syntax S2KReverterMethod ::= "S2KnoRevert" "(" ")" [symbol(), klabel(method_Reverter_S2KnoRevert_)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithError" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_Reverter_S2KrevertWithError_address_string)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithReason" "(" String ":" "string" ")" [symbol(), klabel(method_Reverter_S2KrevertWithReason_string)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithoutReason" "(" ")" [symbol(), klabel(method_Reverter_S2KrevertWithoutReason_)]
    
    rule  ( S2KReverter . S2KnoRevert ( ) => #abiCallData ( "noRevert" , .TypedArgs ) )
      
    
    rule  ( S2KReverter . S2KrevertWithError ( V0_controller : address , V1_message : string ) => #abiCallData ( "revertWithError" , #address ( V0_controller ) , #string ( V1_message ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KReverter . S2KrevertWithReason ( V0__a : string ) => #abiCallData ( "revertWithReason" , #string ( V0__a ) , .TypedArgs ) )
      
    
    rule  ( S2KReverter . S2KrevertWithoutReason ( ) => #abiCallData ( "revertWithoutReason" , .TypedArgs ) )
      
    
    rule  ( selector ( "noRevert()" ) => 3072618433 )
      
    
    rule  ( selector ( "revertWithError(address,string)" ) => 1543116248 )
      
    
    rule  ( selector ( "revertWithReason(string)" ) => 4154655617 )
      
    
    rule  ( selector ( "revertWithoutReason()" ) => 1097275021 )
      

endmodule

module S2KReverterWithReturn-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterWithReturnContract
    
    syntax S2KReverterWithReturnContract ::= "S2KReverterWithReturn" [symbol(), klabel(contract_ReverterWithReturn)]
    
      
    
    rule  ( #initBytecode ( S2KReverterWithReturn ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220d18d29691d85d22f99d96a8b4e19087a1d90899fa6db301e479727aa5726fdcd64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KReverterWithReturnContract "." S2KReverterWithReturnMethod [function(), symbol(), klabel(method_ReverterWithReturn)]
    
    syntax S2KReverterWithReturnMethod ::= "S2KreturnBytesUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_S2KreturnBytesUnless_bool)]
    
    syntax S2KReverterWithReturnMethod ::= "S2KreturnTupleUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_S2KreturnTupleUnless_bool)]
    
    rule  ( S2KReverterWithReturn . S2KreturnBytesUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnBytesUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( S2KReverterWithReturn . S2KreturnTupleUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnTupleUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( selector ( "returnBytesUnless(bool)" ) => 3511402276 )
      
    
    rule  ( selector ( "returnTupleUnless(bool)" ) => 3931056962 )
      

endmodule

module S2KFfiTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFfiTestContract
    
    syntax S2KFfiTestContract ::= "S2KFfiTest" [symbol(), klabel(contract_FfiTest)]
    
      
    
    rule  ( #initBytecode ( S2KFfiTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KFfiTestField
    
    syntax S2KFfiTestField ::= "stdstore" [symbol(), klabel(field_FfiTest_stdstore)]
    
    syntax S2KFfiTestField ::= "IS_TEST" [symbol(), klabel(field_FfiTest_IS_TEST)]
    
    syntax S2KFfiTestField ::= "_failed" [symbol(), klabel(field_FfiTest__failed)]
    
    syntax S2KFfiTestField ::= "stdChainsInitialized" [symbol(), klabel(field_FfiTest_stdChainsInitialized)]
    
    syntax S2KFfiTestField ::= "chains" [symbol(), klabel(field_FfiTest_chains)]
    
    syntax S2KFfiTestField ::= "defaultRpcUrls" [symbol(), klabel(field_FfiTest_defaultRpcUrls)]
    
    syntax S2KFfiTestField ::= "idToAlias" [symbol(), klabel(field_FfiTest_idToAlias)]
    
    syntax S2KFfiTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_FfiTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KFfiTestField ::= "gasMeteringOff" [symbol(), klabel(field_FfiTest_gasMeteringOff)]
    
    syntax S2KFfiTestField ::= "_excludedContracts" [symbol(), klabel(field_FfiTest__excludedContracts)]
    
    syntax S2KFfiTestField ::= "_excludedSenders" [symbol(), klabel(field_FfiTest__excludedSenders)]
    
    syntax S2KFfiTestField ::= "_targetedContracts" [symbol(), klabel(field_FfiTest__targetedContracts)]
    
    syntax S2KFfiTestField ::= "_targetedSenders" [symbol(), klabel(field_FfiTest__targetedSenders)]
    
    syntax S2KFfiTestField ::= "_excludedArtifacts" [symbol(), klabel(field_FfiTest__excludedArtifacts)]
    
    syntax S2KFfiTestField ::= "_targetedArtifacts" [symbol(), klabel(field_FfiTest__targetedArtifacts)]
    
    syntax S2KFfiTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_FfiTest__targetedArtifactSelectors)]
    
    syntax S2KFfiTestField ::= "_targetedSelectors" [symbol(), klabel(field_FfiTest__targetedSelectors)]
    
    rule  ( #loc ( S2KFfiTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KFfiTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KFfiTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KFfiTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KFfiTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KFfiTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KFfiTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KFfiTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KFfiTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KFfiTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KFfiTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KFfiTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KFfiTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KFfiTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KFfiTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KFfiTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KFfiTestContract "." S2KFfiTestMethod [function(), symbol(), klabel(method_FfiTest)]
    
    syntax S2KFfiTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FfiTest_S2KISZUndTEST_)]
    
    syntax S2KFfiTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_FfiTest_S2KexcludeArtifacts_)]
    
    syntax S2KFfiTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_FfiTest_S2KexcludeContracts_)]
    
    syntax S2KFfiTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_FfiTest_S2KexcludeSenders_)]
    
    syntax S2KFfiTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FfiTest_S2Kfailed_)]
    
    syntax S2KFfiTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_FfiTest_S2KsetUp_)]
    
    syntax S2KFfiTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_FfiTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KFfiTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_FfiTest_S2KtargetArtifacts_)]
    
    syntax S2KFfiTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_FfiTest_S2KtargetContracts_)]
    
    syntax S2KFfiTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_FfiTest_S2KtargetSelectors_)]
    
    syntax S2KFfiTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_FfiTest_S2KtargetSenders_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIFOO" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIFOO_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIScript" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIScript_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIScript2" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIScript2_)]
    
    syntax S2KFfiTestMethod ::= "S2Ktestffi" "(" ")" [symbol(), klabel(method_FfiTest_S2Ktestffi_)]
    
    rule  ( S2KFfiTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Ktestffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFFIFOO()" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript()" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2()" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi()" ) => 4068116 )
      

endmodule

module S2KFilesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFilesTestContract
    
    syntax S2KFilesTestContract ::= "S2KFilesTest" [symbol(), klabel(contract_FilesTest)]
    
      
    
    rule  ( #initBytecode ( S2KFilesTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KFilesTestField
    
    syntax S2KFilesTestField ::= "stdstore" [symbol(), klabel(field_FilesTest_stdstore)]
    
    syntax S2KFilesTestField ::= "IS_TEST" [symbol(), klabel(field_FilesTest_IS_TEST)]
    
    syntax S2KFilesTestField ::= "_failed" [symbol(), klabel(field_FilesTest__failed)]
    
    syntax S2KFilesTestField ::= "stdChainsInitialized" [symbol(), klabel(field_FilesTest_stdChainsInitialized)]
    
    syntax S2KFilesTestField ::= "chains" [symbol(), klabel(field_FilesTest_chains)]
    
    syntax S2KFilesTestField ::= "defaultRpcUrls" [symbol(), klabel(field_FilesTest_defaultRpcUrls)]
    
    syntax S2KFilesTestField ::= "idToAlias" [symbol(), klabel(field_FilesTest_idToAlias)]
    
    syntax S2KFilesTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_FilesTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KFilesTestField ::= "gasMeteringOff" [symbol(), klabel(field_FilesTest_gasMeteringOff)]
    
    syntax S2KFilesTestField ::= "_excludedContracts" [symbol(), klabel(field_FilesTest__excludedContracts)]
    
    syntax S2KFilesTestField ::= "_excludedSenders" [symbol(), klabel(field_FilesTest__excludedSenders)]
    
    syntax S2KFilesTestField ::= "_targetedContracts" [symbol(), klabel(field_FilesTest__targetedContracts)]
    
    syntax S2KFilesTestField ::= "_targetedSenders" [symbol(), klabel(field_FilesTest__targetedSenders)]
    
    syntax S2KFilesTestField ::= "_excludedArtifacts" [symbol(), klabel(field_FilesTest__excludedArtifacts)]
    
    syntax S2KFilesTestField ::= "_targetedArtifacts" [symbol(), klabel(field_FilesTest__targetedArtifacts)]
    
    syntax S2KFilesTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_FilesTest__targetedArtifactSelectors)]
    
    syntax S2KFilesTestField ::= "_targetedSelectors" [symbol(), klabel(field_FilesTest__targetedSelectors)]
    
    rule  ( #loc ( S2KFilesTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KFilesTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KFilesTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KFilesTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KFilesTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KFilesTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KFilesTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KFilesTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KFilesTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KFilesTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KFilesTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KFilesTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KFilesTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KFilesTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KFilesTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KFilesTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KFilesTestContract "." S2KFilesTestMethod [function(), symbol(), klabel(method_FilesTest)]
    
    syntax S2KFilesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FilesTest_S2KISZUndTEST_)]
    
    syntax S2KFilesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_FilesTest_S2KexcludeArtifacts_)]
    
    syntax S2KFilesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_FilesTest_S2KexcludeContracts_)]
    
    syntax S2KFilesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_FilesTest_S2KexcludeSenders_)]
    
    syntax S2KFilesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FilesTest_S2Kfailed_)]
    
    syntax S2KFilesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_FilesTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KFilesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_FilesTest_S2KtargetArtifacts_)]
    
    syntax S2KFilesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_FilesTest_S2KtargetContracts_)]
    
    syntax S2KFilesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_FilesTest_S2KtargetSelectors_)]
    
    syntax S2KFilesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_FilesTest_S2KtargetSenders_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestFailRemoveFile" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestFailRemoveFile_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestReadWriteFile" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestReadWriteFile_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestReadWriteLine" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestReadWriteLine_)]
    
    rule  ( S2KFilesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFailRemoveFile()" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile()" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine()" ) => 3039298541 )
      

endmodule

module S2KForkTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KForkTestContract
    
    syntax S2KForkTestContract ::= "S2KForkTest" [symbol(), klabel(contract_ForkTest)]
    
      
    
    rule  ( #initBytecode ( S2KForkTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611f5b8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c8063916a17c6116100ad578063bfb0378d11610071578063bfb0378d146101ea578063c0114189146101f2578063e20c9f71146101fa578063eabff92014610202578063fa7626d41461020a57600080fd5b8063916a17c6146101b2578063a822dbe3146101ba578063b1aed322146101c2578063b5508aa9146101ca578063ba414fa6146101d257600080fd5b80633e5e3c23116100f45780633e5e3c23146101705780633f7286f41461017857806366d9a9a01461018057806385226c811461019557806389837aa6146101aa57600080fd5b80629645451461013057806310133ad41461013a5780631c105cc5146101425780631ed7831c1461014a5780632a2b70e314610168575b600080fd5b610138610217565b005b6101386102fe565b610138610385565b61015261046f565b60405161015f9190611844565b60405180910390f35b6101386104d1565b61015261068f565b6101526106ef565b61018861074f565b60405161015f9190611891565b61019d61083e565b60405161015f91906119a0565b61013861090e565b61018861098e565b610138610a74565b610138610b5d565b61019d610e59565b6101da610f29565b604051901515815260200161015f565b61013861104a565b6101386111d1565b610152611346565b6101386113a6565b6007546101da9060ff1681565b604051630637469360e31b8152600090600080516020611ec1833981519152906331ba34989061024990600401611a41565b6020604051808303816000875af1158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190611a59565b604051639ebf682760e01b815260048101829052909150600080516020611ec183398151915290639ebf682790602401600060405180830381600087803b1580156102d657600080fd5b505af11580156102ea573d6000803e3d6000fd5b505050506102fb4362e84c2e611457565b50565b6040516371ee464d60e01b8152600080516020611ec1833981519152906371ee464d906103329062e84c2990600401611a72565b6020604051808303816000875af1158015610351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103759190611a59565b506103834362e84c2961155c565b565b60405163f28dceb360e01b8152600080516020611ec18339815191529063f28dceb3906103b490600401611a92565b600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b505060405163975a6ce960e01b81526020600482015260076024820152661b585a5b9b995d60ca1b6044820152600080516020611ec1833981519152925063975a6ce99150606401600060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102fb9190810190611bdb565b606060148054806020026020016040519081016040528092919081815260200182805480156104c757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104a9575b5050505050905090565b60405163f28dceb360e01b8152600080516020611ec18339815191529063f28dceb39061050090600401611a92565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663a85a84186040518163ffffffff1660e01b8152600401600060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105bd9190810190611c10565b90506105cb8151600261155c565b6000816000815181106105e0576105e0611d2a565b6020026020010151905061062a8160006002811061060057610600611d2a565b6020020151604051806040016040528060078152602001661b585a5b9b995d60ca1b815250611617565b60008260018151811061063f5761063f611d2a565b6020026020010151905061068a8160006002811061065f5761065f611d2a565b6020020151604051806040016040528060088152602001676f7074696d69736d60c01b815250611617565b505050565b606060168054806020026020016040519081016040528092919081815260200182805480156104c7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104a9575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156104c7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104a9575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156108355760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561081d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107df5790505b50505050508152505081526020019060010190610773565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561083557838290600052602060002001805461088190611d40565b80601f01602080910402602001604051908101604052809291908181526020018280546108ad90611d40565b80156108fa5780601f106108cf576101008083540402835291602001916108fa565b820191906000526020600020905b8154815290600101906020018083116108dd57829003601f168201915b505050505081526020019060010190610862565b60405163261a000d60e21b8152600080516020611ec18339815191529063986800349061093d90600401611a41565b6020604051808303816000875af115801561095c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109809190611a59565b506103834362e84c2e611457565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156108355760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a5c57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a1e5790505b505050505081525050815260200190600101906109b2565b604051636ba3ba2b60e01b8152600090600080516020611ec183398151915290636ba3ba2b90610aab9062e84c2990600401611a72565b6020604051808303816000875af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190611a59565b604051639ebf682760e01b815260048101829052909150600080516020611ec183398151915290639ebf682790602401600060405180830381600087803b158015610b3857600080fd5b505af1158015610b4c573d6000803e3d6000fd5b505050506102fb4362e84c2961155c565b604051630637469360e31b8152600090600080516020611ec1833981519152906331ba349890610b8f90600401611a41565b6020604051808303816000875af1158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190611a59565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b6044820152909150600090600080516020611ec1833981519152906331ba3498906064016020604051808303816000875af1158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a9190611a59565b9050808203610c7b57610c7b611d7a565b604051639ebf682760e01b815260048101839052600080516020611ec183398151915290639ebf682790602401600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b50505050610d687f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316632f103f226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d629190611a59565b8361155c565b604051639ebf682760e01b815260048101829052600080516020611ec183398151915290639ebf682790602401600060405180830381600087803b158015610daf57600080fd5b505af1158015610dc3573d6000803e3d6000fd5b50505050610e557f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316632f103f226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4f9190611a59565b8261155c565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610835578382906000526020600020018054610e9c90611d40565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec890611d40565b8015610f155780601f10610eea57610100808354040283529160200191610f15565b820191906000526020600020905b815481529060010190602001808311610ef857829003601f168201915b505050505081526020019060010190610e7d565b600754600090610100900460ff1615610f4b5750600754610100900460ff1690565b6000600080516020611ec18339815191523b156110455760408051600080516020611ec1833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610fcd917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611d90565b60408051601f1981840301815290829052610fe791611dc1565b6000604051808303816000865af19150503d8060008114611024576040519150601f19603f3d011682016040523d82523d6000602084013e611029565b606091505b50915050808060200190518101906110419190611ddd565b9150505b919050565b604051630637469360e31b815260206004820152602560248201527f68747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f604482015264432f72706360d81b6064820152600090600080516020611ec1833981519152906331ba3498906084016020604051808303816000875af11580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190611a59565b6040516335d320e960e21b815260048101829052630110b11e6024820152909150600080516020611ec18339815191529063d74c83a490604401600060405180830381600087803b15801561114c57600080fd5b505af1158015611160573d6000803e3d6000fd5b5050604051639ebf682760e01b815260048101849052600080516020611ec18339815191529250639ebf68279150602401600060405180830381600087803b1580156111ab57600080fd5b505af11580156111bf573d6000803e3d6000fd5b505050506102fb43630110b11e61155c565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b6044820152600090600080516020611ec1833981519152906331ba3498906064016020604051808303816000875af1158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190611a59565b604051639ebf682760e01b815260048101829052909150600080516020611ec183398151915290639ebf682790602401600060405180830381600087803b1580156112b057600080fd5b505af11580156112c4573d6000803e3d6000fd5b505050506112d64363012ff055611457565b60405163d9bbf3a160e01b815263012fefb96004820152600080516020611ec18339815191529063d9bbf3a190602401600060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506102fb4363012fefb961155c565b606060138054806020026020016040519081016040528092919081815260200182805480156104c7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104a9575050505050905090565b60405163975a6ce960e01b81526020600482015260086024820152676f7074696d69736d60c01b6044820152600090600080516020611ec18339815191529063975a6ce990606401600060405180830381865afa15801561140b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114339190810190611bdb565b90506102fb81604051806060016040528060258152602001611ee160259139611617565b808211610e55577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516114c79060208082526021908201527f4572726f723a2061203e2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b6060820152602081018490529051600080516020611f068339815191529181900360800190a1604080518181526009918101919091526810102b30b63ab2903160b91b606082015260208101829052600080516020611f06833981519152906080015b60405180910390a1610e55611744565b808214610e55577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516115cd9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a1600080516020611f06833981519152826040516115f29190611e06565b60405180910390a1600080516020611f068339815191528160405161154c9190611e30565b806040516020016116289190611dc1565b604051602081830303815290604052805190602001208260405160200161164f9190611dc1565b6040516020818303038152906040528051906020012014610e55577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516116d69060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838260405161170d9190611e5a565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161154c9190611e96565b600080516020611ec18339815191523b156118335760408051600080516020611ec1833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526117d29291602001611d90565b60408051601f19818403018152908290526117ec91611dc1565b6000604051808303816000865af19150503d8060008114611829576040519150601f19603f3d011682016040523d82523d6000602084013e61182e565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156118855783516001600160a01b031683529284019291840191600101611860565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561193557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156119205783516001600160e01b0319168252928b019260019290920191908b01906118f6565b50978a019795505050918701916001016118b9565b50919998505050505050505050565b60005b8381101561195f578181015183820152602001611947565b8381111561196e576000848401525b50505050565b6000815180845261198c816020860160208601611944565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156119f557603f198886030184526119e3858351611974565b945092850192908501906001016119c7565b5092979650505050505050565b602681527f68747470733a2f2f6574682d6d61696e6e65742e7075626c69632e626c6173746020820152656170692e696f60d01b604082015260600190565b602081526000611a5360208301611a02565b92915050565b600060208284031215611a6b57600080fd5b5051919050565b604081526000611a8460408301611a02565b905082602083015292915050565b60208082526047908201527f4661696c656420746f207265736f6c766520656e762076617220605250435f4d60408201527f41494e4e4554603a20656e7669726f6e6d656e74207661726961626c65206e6f6060820152661d08199bdd5b9960ca1b608082015260a00190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611b3857611b38611aff565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b6757611b67611aff565b604052919050565b600082601f830112611b8057600080fd5b815167ffffffffffffffff811115611b9a57611b9a611aff565b611bad601f8201601f1916602001611b3e565b818152846020838601011115611bc257600080fd5b611bd3826020830160208701611944565b949350505050565b600060208284031215611bed57600080fd5b815167ffffffffffffffff811115611c0457600080fd5b611bd384828501611b6f565b60006020808385031215611c2357600080fd5b825167ffffffffffffffff80821115611c3b57600080fd5b818501915085601f830112611c4f57600080fd5b815181811115611c6157611c61611aff565b611c6f848260051b01611b3e565b81815260059190911b83018401908481019088831115611c8e57600080fd5b8585015b83811015611d1d57805185811115611ca957600080fd5b8601603f81018b13611cba57600080fd5b611cc2611b15565b808c606084011115611cd357600080fd5b8983015b60608401811015611d0d57805189811115611cf157600080fd5b611cff8f8d83880101611b6f565b845250918a01918a01611cd7565b5085525050918601918601611c92565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611d5457607f821691505b602082108103611d7457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090611db3816004850160208701611944565b919091016004019392505050565b60008251611dd3818460208701611944565b9190910192915050565b600060208284031215611def57600080fd5b81518015158114611dff57600080fd5b9392505050565b604081526000611a8460408301600a8152690808080808081319599d60b21b602082015260400190565b604081526000611a8460408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611e8460408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611bd38185611974565b604081526000611e8460408301600a8152690808080808149a59da1d60b21b60208201526040019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f6f7074696d69736d2e616c6368656d796170692e696f2f76322f2e2e2eb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8a2646970667358221220df55abd78590a7d5ab27f9bd7496d6e3d045671b026164787773e009c6597e6664736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KForkTestField
    
    syntax S2KForkTestField ::= "stdstore" [symbol(), klabel(field_ForkTest_stdstore)]
    
    syntax S2KForkTestField ::= "IS_TEST" [symbol(), klabel(field_ForkTest_IS_TEST)]
    
    syntax S2KForkTestField ::= "_failed" [symbol(), klabel(field_ForkTest__failed)]
    
    syntax S2KForkTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ForkTest_stdChainsInitialized)]
    
    syntax S2KForkTestField ::= "chains" [symbol(), klabel(field_ForkTest_chains)]
    
    syntax S2KForkTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ForkTest_defaultRpcUrls)]
    
    syntax S2KForkTestField ::= "idToAlias" [symbol(), klabel(field_ForkTest_idToAlias)]
    
    syntax S2KForkTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ForkTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KForkTestField ::= "gasMeteringOff" [symbol(), klabel(field_ForkTest_gasMeteringOff)]
    
    syntax S2KForkTestField ::= "_excludedContracts" [symbol(), klabel(field_ForkTest__excludedContracts)]
    
    syntax S2KForkTestField ::= "_excludedSenders" [symbol(), klabel(field_ForkTest__excludedSenders)]
    
    syntax S2KForkTestField ::= "_targetedContracts" [symbol(), klabel(field_ForkTest__targetedContracts)]
    
    syntax S2KForkTestField ::= "_targetedSenders" [symbol(), klabel(field_ForkTest__targetedSenders)]
    
    syntax S2KForkTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ForkTest__excludedArtifacts)]
    
    syntax S2KForkTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ForkTest__targetedArtifacts)]
    
    syntax S2KForkTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ForkTest__targetedArtifactSelectors)]
    
    syntax S2KForkTestField ::= "_targetedSelectors" [symbol(), klabel(field_ForkTest__targetedSelectors)]
    
    rule  ( #loc ( S2KForkTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KForkTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KForkTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KForkTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KForkTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KForkTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KForkTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KForkTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KForkTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KForkTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KForkTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KForkTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KForkTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KForkTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KForkTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KForkTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KForkTestContract "." S2KForkTestMethod [function(), symbol(), klabel(method_ForkTest)]
    
    syntax S2KForkTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ForkTest_S2KISZUndTEST_)]
    
    syntax S2KForkTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ForkTest_S2KexcludeArtifacts_)]
    
    syntax S2KForkTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ForkTest_S2KexcludeContracts_)]
    
    syntax S2KForkTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ForkTest_S2KexcludeSenders_)]
    
    syntax S2KForkTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ForkTest_S2Kfailed_)]
    
    syntax S2KForkTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ForkTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KForkTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ForkTest_S2KtargetArtifacts_)]
    
    syntax S2KForkTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ForkTest_S2KtargetContracts_)]
    
    syntax S2KForkTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ForkTest_S2KtargetSelectors_)]
    
    syntax S2KForkTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ForkTest_S2KtargetSenders_)]
    
    syntax S2KForkTestMethod ::= "S2KtestActiveFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestActiveFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestAllRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestAllRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateForkBlock_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateSelectFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateSelectFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateSelectForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateSelectForkBlock_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRPCUrlRevert" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRPCUrlRevert_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRollFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRollFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRollForkId" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRollForkId_)]
    
    rule  ( S2KForkTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestActiveFork ( ) => #abiCallData ( "testActiveFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestAllRPCUrl ( ) => #abiCallData ( "testAllRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateFork ( ) => #abiCallData ( "testCreateFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateForkBlock ( ) => #abiCallData ( "testCreateForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateSelectFork ( ) => #abiCallData ( "testCreateSelectFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateSelectForkBlock ( ) => #abiCallData ( "testCreateSelectForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRPCUrl ( ) => #abiCallData ( "testRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRPCUrlRevert ( ) => #abiCallData ( "testRPCUrlRevert" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRollFork ( ) => #abiCallData ( "testRollFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRollForkId ( ) => #abiCallData ( "testRollForkId" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testActiveFork()" ) => 2981024546 )
      
    
    rule  ( selector ( "testAllRPCUrl()" ) => 707490019 )
      
    
    rule  ( selector ( "testCreateFork()" ) => 9848133 )
      
    
    rule  ( selector ( "testCreateForkBlock()" ) => 2820856803 )
      
    
    rule  ( selector ( "testCreateSelectFork()" ) => 2307095206 )
      
    
    rule  ( selector ( "testCreateSelectForkBlock()" ) => 269695700 )
      
    
    rule  ( selector ( "testRPCUrl()" ) => 3938449696 )
      
    
    rule  ( selector ( "testRPCUrlRevert()" ) => 470834373 )
      
    
    rule  ( selector ( "testRollFork()" ) => 3222356361 )
      
    
    rule  ( selector ( "testRollForkId()" ) => 3215996813 )
      

endmodule

module S2KFreshIntTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFreshIntTestContract
    
    syntax S2KFreshIntTestContract ::= "S2KFreshIntTest" [symbol(), klabel(contract_FreshIntTest)]
    
      
    
    rule  ( #initBytecode ( S2KFreshIntTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061118c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063916a17c611610097578063c8e6026a11610066578063c8e6026a14610194578063d6a2ec761461019c578063e20c9f71146101db578063fa7626d4146101e357600080fd5b8063916a17c614610164578063b3b3134a1461016c578063b5508aa914610174578063ba414fa61461017c57600080fd5b806347d80146116100d357806347d801461461012857806366d9a9a01461013257806373b8fc311461014757806385226c811461014f57600080fd5b80631ed7831c146100fa5780633e5e3c23146101185780633f7286f414610120575b600080fd5b6101026101f0565b60405161010f9190610e63565b60405180910390f35b610102610252565b6101026102b2565b610130610312565b005b61013a6103b6565b60405161010f9190610eb0565b6101306104a5565b610157610545565b60405161010f9190610f93565b61013a610615565b6101306106fb565b6101576107aa565b61018461087a565b604051901515815260200161010f565b6101306109a7565b6101c37f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161010f565b610102610a37565b6007546101849060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561024857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161022a575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610248576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022a575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610248576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022a575050505050905090565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663aefb89696040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b919061100d565b90506103a8816000610a97565b6103b3816001610b79565b50565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561049c5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561048457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104465790505b505050505081525050815260200190600101906103da565b50505050905090565b604051630951275960e21b815260206004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906325449d64906024016020604051808303816000875af11580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e919061100d565b905061052b816000610a97565b6103b3816fffffffffffffffffffffffffffffffff610b79565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561049c57838290600052602060002001805461058890611026565b80601f01602080910402602001604051908101604052809291908181526020018280546105b490611026565b80156106015780601f106105d657610100808354040283529160200191610601565b820191906000526020600020905b8154815290600101906020018083116105e457829003601f168201915b505050505081526020019060010190610569565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561049c5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106e357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106a55790505b50505050508152505081526020019060010190610639565b604051630951275960e21b815260106004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906325449d64906024016020604051808303816000875af1158015610750573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610774919061100d565b9050610795600f82900b6f7fffffffffffffffffffffffffffffff19610bd9565b6103b3600f82900b60016001607f1b03610ca6565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561049c5783829060005260206000200180546107ed90611026565b80601f016020809104026020016040519081016040528092919081815260200182805461081990611026565b80156108665780601f1061083b57610100808354040283529160200191610866565b820191906000526020600020905b81548152906001019060200180831161084957829003601f168201915b5050505050815260200190600101906107ce565b600754600090610100900460ff161561089c5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109a25760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161092a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611060565b60408051601f198184030181529082905261094491611091565b6000604051808303816000865af19150503d8060008114610981576040519150601f19603f3d011682016040523d82523d6000602084013e610986565b606091505b509150508080602001905181019061099e91906110ad565b9150505b919050565b604051630951275960e21b815260106004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906325449d64906024016020604051808303816000875af11580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a20919061100d565b90506103b3600f82900b60016001607f1b03610d05565b60606013805480602002602001604051908101604052809291908181526020018280548015610248576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022a575050505050905090565b80821015610b7557600080516020611137833981519152604051610af79060208082526022908201527f4572726f723a2061203e3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610b2e91906110d6565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610b65919061110d565b60405180910390a1610b75610d57565b5050565b80821115610b7557600080516020611137833981519152604051610af79060208082526022908201527f4572726f723a2061203c3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b80821215610b7557600080516020611137833981519152604051610c389060208082526021908201527f4572726f723a2061203e3d2062206e6f7420736174697366696564205b696e746040820152605d60f81b606082015260800190565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16882604051610c6f91906110d6565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16881604051610b65919061110d565b80821315610b7557600080516020611137833981519152604051610c389060208082526021908201527f4572726f723a2061203c3d2062206e6f7420736174697366696564205b696e746040820152605d60f81b606082015260800190565b808213610b7557600080516020611137833981519152604051610c38906020808252818101527f4572726f723a2061203e2062206e6f7420736174697366696564205b696e745d604082015260600190565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e525760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610df19291602001611060565b60408051601f1981840301815290829052610e0b91611091565b6000604051808303816000865af19150503d8060008114610e48576040519150601f19603f3d011682016040523d82523d6000602084013e610e4d565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610ea45783516001600160a01b031683529284019291840191600101610e7f565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610f5457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610f3f5783516001600160e01b0319168252928b019260019290920191908b0190610f15565b50978a01979550505091870191600101610ed8565b50919998505050505050505050565b60005b83811015610f7e578181015183820152602001610f66565b83811115610f8d576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561100057878503603f1901845281518051808752610fe1818989018a8501610f63565b601f01601f191695909501860194509285019290850190600101610fba565b5092979650505050505050565b60006020828403121561101f57600080fd5b5051919050565b600181811c9082168061103a57607f821691505b60208210810361105a57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090611083816004850160208701610f63565b919091016004019392505050565b600082516110a3818460208701610f63565b9190910192915050565b6000602082840312156110bf57600080fd5b815180151581146110cf57600080fd5b9392505050565b6040815260006110ff604083016009815268202056616c7565206160b81b602082015260400190565b905082602083015292915050565b6040815260006110ff60408301600981526810102b30b63ab2903160b91b60208201526040019056fe41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50a2646970667358221220630cec4b7b9aa3ab3016cfba7a727bc5cdbc478f13f074f536dcb8781650b20e64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KFreshIntTestField
    
    syntax S2KFreshIntTestField ::= "stdstore" [symbol(), klabel(field_FreshIntTest_stdstore)]
    
    syntax S2KFreshIntTestField ::= "IS_TEST" [symbol(), klabel(field_FreshIntTest_IS_TEST)]
    
    syntax S2KFreshIntTestField ::= "_failed" [symbol(), klabel(field_FreshIntTest__failed)]
    
    syntax S2KFreshIntTestField ::= "stdChainsInitialized" [symbol(), klabel(field_FreshIntTest_stdChainsInitialized)]
    
    syntax S2KFreshIntTestField ::= "chains" [symbol(), klabel(field_FreshIntTest_chains)]
    
    syntax S2KFreshIntTestField ::= "defaultRpcUrls" [symbol(), klabel(field_FreshIntTest_defaultRpcUrls)]
    
    syntax S2KFreshIntTestField ::= "idToAlias" [symbol(), klabel(field_FreshIntTest_idToAlias)]
    
    syntax S2KFreshIntTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_FreshIntTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KFreshIntTestField ::= "gasMeteringOff" [symbol(), klabel(field_FreshIntTest_gasMeteringOff)]
    
    syntax S2KFreshIntTestField ::= "_excludedContracts" [symbol(), klabel(field_FreshIntTest__excludedContracts)]
    
    syntax S2KFreshIntTestField ::= "_excludedSenders" [symbol(), klabel(field_FreshIntTest__excludedSenders)]
    
    syntax S2KFreshIntTestField ::= "_targetedContracts" [symbol(), klabel(field_FreshIntTest__targetedContracts)]
    
    syntax S2KFreshIntTestField ::= "_targetedSenders" [symbol(), klabel(field_FreshIntTest__targetedSenders)]
    
    syntax S2KFreshIntTestField ::= "_excludedArtifacts" [symbol(), klabel(field_FreshIntTest__excludedArtifacts)]
    
    syntax S2KFreshIntTestField ::= "_targetedArtifacts" [symbol(), klabel(field_FreshIntTest__targetedArtifacts)]
    
    syntax S2KFreshIntTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_FreshIntTest__targetedArtifactSelectors)]
    
    syntax S2KFreshIntTestField ::= "_targetedSelectors" [symbol(), klabel(field_FreshIntTest__targetedSelectors)]
    
    rule  ( #loc ( S2KFreshIntTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KFreshIntTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KFreshIntTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KFreshIntTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KFreshIntTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KFreshIntTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KFreshIntTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KFreshIntTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KFreshIntTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KFreshIntTestContract "." S2KFreshIntTestMethod [function(), symbol(), klabel(method_FreshIntTest)]
    
    syntax S2KFreshIntTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KISZUndTEST_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KexcludeArtifacts_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KexcludeContracts_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KexcludeSenders_)]
    
    syntax S2KFreshIntTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FreshIntTest_S2Kfailed_)]
    
    syntax S2KFreshIntTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_FreshIntTest_S2Kkevm_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtargetArtifacts_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtargetContracts_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtargetSelectors_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtargetSenders_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtestFailZUndint128" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtestFailZUndint128_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtestZUndbool" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtestZUndbool_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtestZUndint128" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtestZUndint128_)]
    
    syntax S2KFreshIntTestMethod ::= "S2KtestZUnduint128" "(" ")" [symbol(), klabel(method_FreshIntTest_S2KtestZUnduint128_)]
    
    rule  ( S2KFreshIntTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtestFailZUndint128 ( ) => #abiCallData ( "testFail_int128" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtestZUndbool ( ) => #abiCallData ( "test_bool" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtestZUndint128 ( ) => #abiCallData ( "test_int128" , .TypedArgs ) )
      
    
    rule  ( S2KFreshIntTest . S2KtestZUnduint128 ( ) => #abiCallData ( "test_uint128" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_int128()" ) => 3370517098 )
      
    
    rule  ( selector ( "test_bool()" ) => 1205338438 )
      
    
    rule  ( selector ( "test_int128()" ) => 3014857546 )
      
    
    rule  ( selector ( "test_uint128()" ) => 1941503025 )
      

endmodule

module S2KGasTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGasTestContract
    
    syntax S2KGasTestContract ::= "S2KGasTest" [symbol(), klabel(contract_GasTest)]
    
      
    
    rule  ( #initBytecode ( S2KGasTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610b718061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063898c61331161008c578063ba414fa611610066578063ba414fa61461014e578063d6a2ec7614610166578063e20c9f71146101a5578063fa7626d4146101ad57600080fd5b8063898c613314610136578063916a17c61461013e578063b5508aa91461014657600080fd5b80631ed7831c146100d45780633e5e3c23146100f25780633f7286f4146100fa57806363fec3361461010257806366d9a9a01461010c57806385226c8114610121575b600080fd5b6100dc6101ba565b6040516100e991906108a6565b60405180910390f35b6100dc61021c565b6100dc61027c565b61010a6102dc565b005b610114610321565b6040516100e991906108f3565b610129610410565b6040516100e991906109d6565b61010a6104e0565b610114610563565b610129610649565b610156610719565b60405190151581526020016100e9565b61018d7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100e9565b6100dc610846565b6007546101569060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561021257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f4575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610212576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f4575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610212576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f4575050505050905090565b60005a90506101596103a060006102f38383610a50565b905060005a90508085111561030a5761030a610a75565b8481111561031a5761031a610a75565b5050505050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104075760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103ef57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103b15790505b50505050508152505081526020019060010190610345565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561040757838290600052602060002001805461045390610a8b565b80601f016020809104026020016040519081016040528092919081815260200182805461047f90610a8b565b80156104cc5780601f106104a1576101008083540402835291602001916104cc565b820191906000526020600020905b8154815290600101906020018083116104af57829003601f168201915b505050505081526020019060010190610434565b604051636ea8fd5160e11b81526180e86004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063dd51faa290602401600060405180830381600087803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b5050505060005a905060005a905080821161055f5761055f610a75565b5050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104075760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561063157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105f35790505b50505050508152505081526020019060010190610587565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561040757838290600052602060002001805461068c90610a8b565b80601f01602080910402602001604051908101604052809291908181526020018280546106b890610a8b565b80156107055780601f106106da57610100808354040283529160200191610705565b820191906000526020600020905b8154815290600101906020018083116106e857829003601f168201915b50505050508152602001906001019061066d565b600754600090610100900460ff161561073b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108415760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107c9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ac5565b60408051601f19818403018152908290526107e391610af6565b6000604051808303816000865af19150503d8060008114610820576040519150601f19603f3d011682016040523d82523d6000602084013e610825565b606091505b509150508080602001905181019061083d9190610b12565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610212576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f4575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156108e75783516001600160a01b0316835292840192918401916001016108c2565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561099757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156109825783516001600160e01b0319168252928b019260019290920191908b0190610958565b50978a0197955050509187019160010161091b565b50919998505050505050505050565b60005b838110156109c15781810151838201526020016109a9565b838111156109d0576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610a4357878503603f1901845281518051808752610a24818989018a85016109a6565b601f01601f1916959095018601945092850192908501906001016109fd565b5092979650505050505050565b600082821015610a7057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b600181811c90821680610a9f57607f821691505b602082108103610abf57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610ae88160048501602087016109a6565b919091016004019392505050565b60008251610b088184602087016109a6565b9190910192915050565b600060208284031215610b2457600080fd5b81518015158114610b3457600080fd5b939250505056fea26469706673582212203b601621ff300c0acdad6c2e9b8ace1ad088d7db343995a3552b4b3398deb5ad64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KGasTestField
    
    syntax S2KGasTestField ::= "stdstore" [symbol(), klabel(field_GasTest_stdstore)]
    
    syntax S2KGasTestField ::= "IS_TEST" [symbol(), klabel(field_GasTest_IS_TEST)]
    
    syntax S2KGasTestField ::= "_failed" [symbol(), klabel(field_GasTest__failed)]
    
    syntax S2KGasTestField ::= "stdChainsInitialized" [symbol(), klabel(field_GasTest_stdChainsInitialized)]
    
    syntax S2KGasTestField ::= "chains" [symbol(), klabel(field_GasTest_chains)]
    
    syntax S2KGasTestField ::= "defaultRpcUrls" [symbol(), klabel(field_GasTest_defaultRpcUrls)]
    
    syntax S2KGasTestField ::= "idToAlias" [symbol(), klabel(field_GasTest_idToAlias)]
    
    syntax S2KGasTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_GasTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KGasTestField ::= "gasMeteringOff" [symbol(), klabel(field_GasTest_gasMeteringOff)]
    
    syntax S2KGasTestField ::= "_excludedContracts" [symbol(), klabel(field_GasTest__excludedContracts)]
    
    syntax S2KGasTestField ::= "_excludedSenders" [symbol(), klabel(field_GasTest__excludedSenders)]
    
    syntax S2KGasTestField ::= "_targetedContracts" [symbol(), klabel(field_GasTest__targetedContracts)]
    
    syntax S2KGasTestField ::= "_targetedSenders" [symbol(), klabel(field_GasTest__targetedSenders)]
    
    syntax S2KGasTestField ::= "_excludedArtifacts" [symbol(), klabel(field_GasTest__excludedArtifacts)]
    
    syntax S2KGasTestField ::= "_targetedArtifacts" [symbol(), klabel(field_GasTest__targetedArtifacts)]
    
    syntax S2KGasTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_GasTest__targetedArtifactSelectors)]
    
    syntax S2KGasTestField ::= "_targetedSelectors" [symbol(), klabel(field_GasTest__targetedSelectors)]
    
    rule  ( #loc ( S2KGasTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KGasTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KGasTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KGasTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KGasTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KGasTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KGasTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KGasTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KGasTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KGasTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KGasTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KGasTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KGasTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KGasTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KGasTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KGasTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KGasTestContract "." S2KGasTestMethod [function(), symbol(), klabel(method_GasTest)]
    
    syntax S2KGasTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_GasTest_S2KISZUndTEST_)]
    
    syntax S2KGasTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_GasTest_S2KexcludeArtifacts_)]
    
    syntax S2KGasTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_GasTest_S2KexcludeContracts_)]
    
    syntax S2KGasTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_GasTest_S2KexcludeSenders_)]
    
    syntax S2KGasTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_GasTest_S2Kfailed_)]
    
    syntax S2KGasTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_GasTest_S2Kkevm_)]
    
    syntax S2KGasTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_GasTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KGasTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_GasTest_S2KtargetArtifacts_)]
    
    syntax S2KGasTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_GasTest_S2KtargetContracts_)]
    
    syntax S2KGasTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_GasTest_S2KtargetSelectors_)]
    
    syntax S2KGasTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_GasTest_S2KtargetSenders_)]
    
    syntax S2KGasTestMethod ::= "S2KtestInfiniteGas" "(" ")" [symbol(), klabel(method_GasTest_S2KtestInfiniteGas_)]
    
    syntax S2KGasTestMethod ::= "S2KtestSetGas" "(" ")" [symbol(), klabel(method_GasTest_S2KtestSetGas_)]
    
    rule  ( S2KGasTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtestInfiniteGas ( ) => #abiCallData ( "testInfiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtestSetGas ( ) => #abiCallData ( "testSetGas" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testInfiniteGas()" ) => 1677640502 )
      
    
    rule  ( selector ( "testSetGas()" ) => 2307678515 )
      

endmodule

module S2KGetCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGetCodeTestContract
    
    syntax S2KGetCodeTestContract ::= "S2KGetCodeTest" [symbol(), klabel(contract_GetCodeTest)]
    
      
    
    rule  ( #initBytecode ( S2KGetCodeTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KGetCodeTestField
    
    syntax S2KGetCodeTestField ::= "stdstore" [symbol(), klabel(field_GetCodeTest_stdstore)]
    
    syntax S2KGetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_GetCodeTest_IS_TEST)]
    
    syntax S2KGetCodeTestField ::= "_failed" [symbol(), klabel(field_GetCodeTest__failed)]
    
    syntax S2KGetCodeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_GetCodeTest_stdChainsInitialized)]
    
    syntax S2KGetCodeTestField ::= "chains" [symbol(), klabel(field_GetCodeTest_chains)]
    
    syntax S2KGetCodeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_GetCodeTest_defaultRpcUrls)]
    
    syntax S2KGetCodeTestField ::= "idToAlias" [symbol(), klabel(field_GetCodeTest_idToAlias)]
    
    syntax S2KGetCodeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_GetCodeTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KGetCodeTestField ::= "gasMeteringOff" [symbol(), klabel(field_GetCodeTest_gasMeteringOff)]
    
    syntax S2KGetCodeTestField ::= "_excludedContracts" [symbol(), klabel(field_GetCodeTest__excludedContracts)]
    
    syntax S2KGetCodeTestField ::= "_excludedSenders" [symbol(), klabel(field_GetCodeTest__excludedSenders)]
    
    syntax S2KGetCodeTestField ::= "_targetedContracts" [symbol(), klabel(field_GetCodeTest__targetedContracts)]
    
    syntax S2KGetCodeTestField ::= "_targetedSenders" [symbol(), klabel(field_GetCodeTest__targetedSenders)]
    
    syntax S2KGetCodeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_GetCodeTest__excludedArtifacts)]
    
    syntax S2KGetCodeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_GetCodeTest__targetedArtifacts)]
    
    syntax S2KGetCodeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_GetCodeTest__targetedArtifactSelectors)]
    
    syntax S2KGetCodeTestField ::= "_targetedSelectors" [symbol(), klabel(field_GetCodeTest__targetedSelectors)]
    
    syntax S2KGetCodeTestField ::= "myToken" [symbol(), klabel(field_GetCodeTest_myToken)]
    
    rule  ( #loc ( S2KGetCodeTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KGetCodeTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KGetCodeTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KGetCodeTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KGetCodeTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KGetCodeTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KGetCodeTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KGetCodeTest . myToken ) => 27 )
      
    
    syntax Bytes ::= S2KGetCodeTestContract "." S2KGetCodeTestMethod [function(), symbol(), klabel(method_GetCodeTest)]
    
    syntax S2KGetCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KISZUndTEST_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KexcludeArtifacts_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KexcludeContracts_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KexcludeSenders_)]
    
    syntax S2KGetCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_GetCodeTest_S2Kfailed_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KsetUp_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtargetArtifacts_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtargetContracts_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtargetSelectors_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtargetSenders_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtestGetCode" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtestGetCode_)]
    
    rule  ( S2KGetCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtestGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testGetCode()" ) => 3906163359 )
      

endmodule

module S2KIMulticall3-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KIMulticall3Contract
    
    syntax S2KIMulticall3Contract ::= "S2KIMulticall3" [symbol(), klabel(contract_IMulticall3)]
    
      
    
    rule  ( #initBytecode ( S2KIMulticall3 ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KIMulticall3Contract "." S2KIMulticall3Method [function(), symbol(), klabel(method_IMulticall3)]
    
    syntax S2KIMulticall3Method ::= "S2Kaggregate" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2Kaggregate_tuple[])]
    
    syntax S2KIMulticall3Method ::= "S2Kaggregate3" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2Kaggregate3_tuple[])]
    
    syntax S2KIMulticall3Method ::= "S2Kaggregate3Value" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2Kaggregate3Value_tuple[])]
    
    syntax S2KIMulticall3Method ::= "S2KblockAndAggregate" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2KblockAndAggregate_tuple[])]
    
    syntax S2KIMulticall3Method ::= "S2KgetBasefee" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetBasefee_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetBlockHash" "(" Int ":" "uint256" ")" [symbol(), klabel(method_IMulticall3_S2KgetBlockHash_uint256)]
    
    syntax S2KIMulticall3Method ::= "S2KgetBlockNumber" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetBlockNumber_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetChainId" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetChainId_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetCurrentBlockCoinbase" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockCoinbase_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetCurrentBlockDifficulty" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockDifficulty_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetCurrentBlockGasLimit" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockGasLimit_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetCurrentBlockTimestamp" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockTimestamp_)]
    
    syntax S2KIMulticall3Method ::= "S2KgetEthBalance" "(" Int ":" "address" ")" [symbol(), klabel(method_IMulticall3_S2KgetEthBalance_address)]
    
    syntax S2KIMulticall3Method ::= "S2KgetLastBlockHash" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetLastBlockHash_)]
    
    syntax S2KIMulticall3Method ::= "S2KtryAggregate" "(" Int ":" "bool" "," K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2KtryAggregate_bool_tuple[])]
    
    syntax S2KIMulticall3Method ::= "S2KtryBlockAndAggregate" "(" Int ":" "bool" "," K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2KtryBlockAndAggregate_bool_tuple[])]
    
    rule  ( S2KIMulticall3 . S2KgetBasefee ( ) => #abiCallData ( "getBasefee" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetBlockHash ( V0_blockNumber : uint256 ) => #abiCallData ( "getBlockHash" , #uint256 ( V0_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )
      
    
    rule  ( S2KIMulticall3 . S2KgetBlockNumber ( ) => #abiCallData ( "getBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetChainId ( ) => #abiCallData ( "getChainId" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetCurrentBlockCoinbase ( ) => #abiCallData ( "getCurrentBlockCoinbase" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetCurrentBlockDifficulty ( ) => #abiCallData ( "getCurrentBlockDifficulty" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetCurrentBlockGasLimit ( ) => #abiCallData ( "getCurrentBlockGasLimit" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetCurrentBlockTimestamp ( ) => #abiCallData ( "getCurrentBlockTimestamp" , .TypedArgs ) )
      
    
    rule  ( S2KIMulticall3 . S2KgetEthBalance ( V0_addr : address ) => #abiCallData ( "getEthBalance" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KIMulticall3 . S2KgetLastBlockHash ( ) => #abiCallData ( "getLastBlockHash" , .TypedArgs ) )
      
    
    rule  ( selector ( "aggregate((address,bytes)[])" ) => 623753794 )
      
    
    rule  ( selector ( "aggregate3((address,bool,bytes)[])" ) => 2192398027 )
      
    
    rule  ( selector ( "aggregate3Value((address,bool,uint256,bytes)[])" ) => 390982257 )
      
    
    rule  ( selector ( "blockAndAggregate((address,bytes)[])" ) => 3272048553 )
      
    
    rule  ( selector ( "getBasefee()" ) => 1046783638 )
      
    
    rule  ( selector ( "getBlockHash(uint256)" ) => 4001541214 )
      
    
    rule  ( selector ( "getBlockNumber()" ) => 1120645468 )
      
    
    rule  ( selector ( "getChainId()" ) => 872998000 )
      
    
    rule  ( selector ( "getCurrentBlockCoinbase()" ) => 2830128974 )
      
    
    rule  ( selector ( "getCurrentBlockDifficulty()" ) => 1916951965 )
      
    
    rule  ( selector ( "getCurrentBlockGasLimit()" ) => 2262111976 )
      
    
    rule  ( selector ( "getCurrentBlockTimestamp()" ) => 254331261 )
      
    
    rule  ( selector ( "getEthBalance(address)" ) => 1294139852 )
      
    
    rule  ( selector ( "getLastBlockHash()" ) => 669543790 )
      
    
    rule  ( selector ( "tryAggregate(bool,(address,bytes)[])" ) => 3169029079 )
      
    
    rule  ( selector ( "tryBlockAndAggregate(bool,(address,bytes)[])" ) => 966083305 )
      

endmodule

module S2KInitCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KInitCodeTestContract
    
    syntax S2KInitCodeTestContract ::= "S2KInitCodeTest" [symbol(), klabel(contract_InitCodeTest)]
    
      
    
    rule  ( #initBytecode ( S2KInitCodeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b805490911690911790556004601b556002601c5560c8601d55610ce68061003f6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063b5508aa911610066578063b5508aa914610150578063ba414fa614610158578063e20c9f7114610170578063fa7626d41461017857600080fd5b8063916a17c614610138578063964fb96d14610140578063b403d7e61461014857600080fd5b80630a9254e4146100d45780631ed7831c146100e05780633e5e3c23146100fe5780633f7286f41461010657806366d9a9a01461010e57806385226c8114610123575b600080fd5b6100de6001601d55565b005b6100e8610185565b6040516100f59190610a30565b60405180910390f35b6100e86101e7565b6100e8610247565b6101166102a7565b6040516100f59190610a7d565b61012b610396565b6040516100f59190610b60565b610116610466565b6100de61054c565b6100de610575565b61012b61059c565b61016061066c565b60405190151581526020016100f5565b6100e8610799565b6007546101609060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101dd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101bf575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101dd576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bf575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101dd576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bf575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561038d5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561037557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103375790505b505050505081525050815260200190600101906102cb565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038d5783829060005260206000200180546103d990610bda565b80601f016020809104026020016040519081016040528092919081815260200182805461040590610bda565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b5050505050815260200190600101906103ba565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561038d5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104f65790505b5050505050815250508152602001906001019061048a565b610573601d54601c54601b546105629190610c14565b61056c9190610c14565b60076107f9565b565b610573601d54601c54601b5461058b9190610c14565b6105959190610c14565b60086107f9565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038d5783829060005260206000200180546105df90610bda565b80601f016020809104026020016040519081016040528092919081815260200182805461060b90610bda565b80156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b5050505050815260200190600101906105c0565b600754600090610100900460ff161561068e5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107945760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161071c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3a565b60408051601f198184030181529082905261073691610c6b565b6000604051808303816000865af19150503d8060008114610773576040519150601f19603f3d011682016040523d82523d6000602084013e610778565b606091505b50915050808060200190518101906107909190610c87565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101dd576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bf575050505050905090565b808214610920577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161086a9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610920610924565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a1f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109be9291602001610c3a565b60408051601f19818403018152908290526109d891610c6b565b6000604051808303816000865af19150503d8060008114610a15576040519150601f19603f3d011682016040523d82523d6000602084013e610a1a565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610a715783516001600160a01b031683529284019291840191600101610a4c565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b2157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b0c5783516001600160e01b0319168252928b019260019290920191908b0190610ae2565b50978a01979550505091870191600101610aa5565b50919998505050505050505050565b60005b83811015610b4b578181015183820152602001610b33565b83811115610b5a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bcd57878503603f1901845281518051808752610bae818989018a8501610b30565b601f01601f191695909501860194509285019290850190600101610b87565b5092979650505050505050565b600181811c90821680610bee57607f821691505b602082108103610c0e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610c3557634e487b7160e01b600052601160045260246000fd5b500190565b6001600160e01b0319831681528151600090610c5d816004850160208701610b30565b919091016004019392505050565b60008251610c7d818460208701610b30565b9190910192915050565b600060208284031215610c9957600080fd5b81518015158114610ca957600080fd5b939250505056fea264697066735822122073be98f0c1fba4d875ce8e2bfad6011035ef787fc8add72ea2069dbc2e89fcc464736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KInitCodeTestField
    
    syntax S2KInitCodeTestField ::= "stdstore" [symbol(), klabel(field_InitCodeTest_stdstore)]
    
    syntax S2KInitCodeTestField ::= "IS_TEST" [symbol(), klabel(field_InitCodeTest_IS_TEST)]
    
    syntax S2KInitCodeTestField ::= "_failed" [symbol(), klabel(field_InitCodeTest__failed)]
    
    syntax S2KInitCodeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_InitCodeTest_stdChainsInitialized)]
    
    syntax S2KInitCodeTestField ::= "chains" [symbol(), klabel(field_InitCodeTest_chains)]
    
    syntax S2KInitCodeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_InitCodeTest_defaultRpcUrls)]
    
    syntax S2KInitCodeTestField ::= "idToAlias" [symbol(), klabel(field_InitCodeTest_idToAlias)]
    
    syntax S2KInitCodeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_InitCodeTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KInitCodeTestField ::= "gasMeteringOff" [symbol(), klabel(field_InitCodeTest_gasMeteringOff)]
    
    syntax S2KInitCodeTestField ::= "_excludedContracts" [symbol(), klabel(field_InitCodeTest__excludedContracts)]
    
    syntax S2KInitCodeTestField ::= "_excludedSenders" [symbol(), klabel(field_InitCodeTest__excludedSenders)]
    
    syntax S2KInitCodeTestField ::= "_targetedContracts" [symbol(), klabel(field_InitCodeTest__targetedContracts)]
    
    syntax S2KInitCodeTestField ::= "_targetedSenders" [symbol(), klabel(field_InitCodeTest__targetedSenders)]
    
    syntax S2KInitCodeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_InitCodeTest__excludedArtifacts)]
    
    syntax S2KInitCodeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_InitCodeTest__targetedArtifacts)]
    
    syntax S2KInitCodeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_InitCodeTest__targetedArtifactSelectors)]
    
    syntax S2KInitCodeTestField ::= "_targetedSelectors" [symbol(), klabel(field_InitCodeTest__targetedSelectors)]
    
    syntax S2KInitCodeTestField ::= "a" [symbol(), klabel(field_InitCodeTest_a)]
    
    syntax S2KInitCodeTestField ::= "b" [symbol(), klabel(field_InitCodeTest_b)]
    
    syntax S2KInitCodeTestField ::= "c" [symbol(), klabel(field_InitCodeTest_c)]
    
    rule  ( #loc ( S2KInitCodeTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KInitCodeTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KInitCodeTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KInitCodeTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KInitCodeTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KInitCodeTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KInitCodeTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KInitCodeTest . a ) => 27 )
      
    
    rule  ( #loc ( S2KInitCodeTest . b ) => 28 )
      
    
    rule  ( #loc ( S2KInitCodeTest . c ) => 29 )
      
    
    syntax Bytes ::= S2KInitCodeTestContract "." S2KInitCodeTestMethod [function(), symbol(), klabel(method_InitCodeTest)]
    
    syntax S2KInitCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KISZUndTEST_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KexcludeArtifacts_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KexcludeContracts_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KexcludeSenders_)]
    
    syntax S2KInitCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_InitCodeTest_S2Kfailed_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KsetUp_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtargetArtifacts_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtargetContracts_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtargetSelectors_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtargetSenders_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtestFailZUndinit" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtestFailZUndinit_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtestZUndinit" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtestZUndinit_)]
    
    rule  ( S2KInitCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtestFailZUndinit ( ) => #abiCallData ( "testFail_init" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtestZUndinit ( ) => #abiCallData ( "test_init" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_init()" ) => 3020150758 )
      
    
    rule  ( selector ( "test_init()" ) => 2521807213 )
      

endmodule

module S2KInitCodeBranchTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KInitCodeBranchTestContract
    
    syntax S2KInitCodeBranchTestContract ::= "S2KInitCodeBranchTest" [symbol(), klabel(contract_InitCodeBranchTest)]
    
      
    
    rule  ( #initBytecode ( S2KInitCodeBranchTest ) => #parseByteStack ( "0x6080604081905260078054600160ff199182168117909255600b805490911690911790556316f02cd760e11b905230608452737109709ecfa91a80626ff3989d68f67f5b1dd12d632de059ae60a4600060405180830381600087803b15801561006757600080fd5b505af115801561007b573d6000803e3d6000fd5b50505050600a601b5411610093576001601c55610099565b6002601c555b610c91806100a86000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063916a17c611610071578063916a17c61461011b578063b5508aa914610123578063ba414fa61461012b578063d6a2ec7614610143578063e20c9f7114610182578063fa7626d41461018a57600080fd5b80631197d48c146100b95780631ed7831c146100c35780633e5e3c23146100e15780633f7286f4146100e957806366d9a9a0146100f157806385226c8114610106575b600080fd5b6100c1610197565b005b6100cb6101a6565b6040516100d89190610a01565b60405180910390f35b6100cb610208565b6100cb610268565b6100f96102c8565b6040516100d89190610a4e565b61010e6103b7565b6040516100d89190610b31565b6100f9610487565b61010e61056d565b61013361063d565b60405190151581526020016100d8565b61016a7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100d8565b6100cb61076a565b6007546101339060ff1681565b6101a4601c5460016107ca565b565b606060148054806020026020016040519081016040528092919081815260200182805480156101fe57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101e0575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101fe576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e0575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101fe576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e0575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103ae5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561039657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103585790505b505050505081525050815260200190600101906102ec565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103ae5783829060005260206000200180546103fa90610bab565b80601f016020809104026020016040519081016040528092919081815260200182805461042690610bab565b80156104735780601f1061044857610100808354040283529160200191610473565b820191906000526020600020905b81548152906001019060200180831161045657829003601f168201915b5050505050815260200190600101906103db565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103ae5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561055557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105175790505b505050505081525050815260200190600101906104ab565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103ae5783829060005260206000200180546105b090610bab565b80601f01602080910402602001604051908101604052809291908181526020018280546105dc90610bab565b80156106295780601f106105fe57610100808354040283529160200191610629565b820191906000526020600020905b81548152906001019060200180831161060c57829003601f168201915b505050505081526020019060010190610591565b600754600090610100900460ff161561065f5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107655760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916106ed917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610be5565b60408051601f198184030181529082905261070791610c16565b6000604051808303816000865af19150503d8060008114610744576040519150601f19603f3d011682016040523d82523d6000602084013e610749565b606091505b50915050808060200190518101906107619190610c32565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101fe576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101e0575050505050905090565b8082146108f1577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161083b9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16108f16108f5565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109f05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261098f9291602001610be5565b60408051601f19818403018152908290526109a991610c16565b6000604051808303816000865af19150503d80600081146109e6576040519150601f19603f3d011682016040523d82523d6000602084013e6109eb565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610a425783516001600160a01b031683529284019291840191600101610a1d565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610af257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610add5783516001600160e01b0319168252928b019260019290920191908b0190610ab3565b50978a01979550505091870191600101610a76565b50919998505050505050505050565b60005b83811015610b1c578181015183820152602001610b04565b83811115610b2b576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b9e57878503603f1901845281518051808752610b7f818989018a8501610b01565b601f01601f191695909501860194509285019290850190600101610b58565b5092979650505050505050565b600181811c90821680610bbf57607f821691505b602082108103610bdf57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c08816004850160208701610b01565b919091016004019392505050565b60008251610c28818460208701610b01565b9190910192915050565b600060208284031215610c4457600080fd5b81518015158114610c5457600080fd5b939250505056fea26469706673582212207349d16cca05c1e0ac08db7742d78d63e1dad1775a005e724c23237dd05adc4464736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KInitCodeBranchTestField
    
    syntax S2KInitCodeBranchTestField ::= "stdstore" [symbol(), klabel(field_InitCodeBranchTest_stdstore)]
    
    syntax S2KInitCodeBranchTestField ::= "IS_TEST" [symbol(), klabel(field_InitCodeBranchTest_IS_TEST)]
    
    syntax S2KInitCodeBranchTestField ::= "_failed" [symbol(), klabel(field_InitCodeBranchTest__failed)]
    
    syntax S2KInitCodeBranchTestField ::= "stdChainsInitialized" [symbol(), klabel(field_InitCodeBranchTest_stdChainsInitialized)]
    
    syntax S2KInitCodeBranchTestField ::= "chains" [symbol(), klabel(field_InitCodeBranchTest_chains)]
    
    syntax S2KInitCodeBranchTestField ::= "defaultRpcUrls" [symbol(), klabel(field_InitCodeBranchTest_defaultRpcUrls)]
    
    syntax S2KInitCodeBranchTestField ::= "idToAlias" [symbol(), klabel(field_InitCodeBranchTest_idToAlias)]
    
    syntax S2KInitCodeBranchTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_InitCodeBranchTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KInitCodeBranchTestField ::= "gasMeteringOff" [symbol(), klabel(field_InitCodeBranchTest_gasMeteringOff)]
    
    syntax S2KInitCodeBranchTestField ::= "_excludedContracts" [symbol(), klabel(field_InitCodeBranchTest__excludedContracts)]
    
    syntax S2KInitCodeBranchTestField ::= "_excludedSenders" [symbol(), klabel(field_InitCodeBranchTest__excludedSenders)]
    
    syntax S2KInitCodeBranchTestField ::= "_targetedContracts" [symbol(), klabel(field_InitCodeBranchTest__targetedContracts)]
    
    syntax S2KInitCodeBranchTestField ::= "_targetedSenders" [symbol(), klabel(field_InitCodeBranchTest__targetedSenders)]
    
    syntax S2KInitCodeBranchTestField ::= "_excludedArtifacts" [symbol(), klabel(field_InitCodeBranchTest__excludedArtifacts)]
    
    syntax S2KInitCodeBranchTestField ::= "_targetedArtifacts" [symbol(), klabel(field_InitCodeBranchTest__targetedArtifacts)]
    
    syntax S2KInitCodeBranchTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_InitCodeBranchTest__targetedArtifactSelectors)]
    
    syntax S2KInitCodeBranchTestField ::= "_targetedSelectors" [symbol(), klabel(field_InitCodeBranchTest__targetedSelectors)]
    
    syntax S2KInitCodeBranchTestField ::= "a" [symbol(), klabel(field_InitCodeBranchTest_a)]
    
    syntax S2KInitCodeBranchTestField ::= "b" [symbol(), klabel(field_InitCodeBranchTest_b)]
    
    rule  ( #loc ( S2KInitCodeBranchTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . a ) => 27 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . b ) => 28 )
      
    
    syntax Bytes ::= S2KInitCodeBranchTestContract "." S2KInitCodeBranchTestMethod [function(), symbol(), klabel(method_InitCodeBranchTest)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KISZUndTEST_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KexcludeArtifacts_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KexcludeContracts_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KexcludeSenders_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2Kfailed_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2Kkevm_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtargetArtifacts_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtargetContracts_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtargetSelectors_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtargetSenders_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtestZUndbranch" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtestZUndbranch_)]
    
    rule  ( S2KInitCodeBranchTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtestZUndbranch ( ) => #abiCallData ( "test_branch" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_branch()" ) => 295163020 )
      

endmodule

module S2KKEVMCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsContract
    
    syntax S2KKEVMCheatsContract ::= "S2KKEVMCheats" [symbol(), klabel(contract_KEVMCheats)]
    
      
    
    rule  ( #initBytecode ( S2KKEVMCheats ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KKEVMCheatsContract "." S2KKEVMCheatsMethod [function(), symbol(), klabel(method_KEVMCheats)]
    
    syntax S2KKEVMCheatsMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_KEVMCheats_S2Kkevm_)]
    
    rule  ( S2KKEVMCheats . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      

endmodule

module S2KKEVMCheatsBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsBaseContract
    
    syntax S2KKEVMCheatsBaseContract ::= "S2KKEVMCheatsBase" [symbol(), klabel(contract_KEVMCheatsBase)]
    
      
    
    rule  ( #initBytecode ( S2KKEVMCheatsBase ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KKEVMCheatsBaseContract "." S2KKEVMCheatsBaseMethod [function(), symbol(), klabel(method_KEVMCheatsBase)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KallowCallsToAddress" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KallowCallsToAddress_address)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KallowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KallowChangesToStorage_address_uint256)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectCreate_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectCreate2_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectDelegateCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectNoCall" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectNoCall_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectRegularCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectRegularCall_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectStaticCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KfreshBool" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KfreshBool_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KfreshUInt" "(" Int ":" "uint8" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KfreshUInt_uint8)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KinfiniteGas" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KinfiniteGas_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KsetGas" "(" Int ":" "uint256" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KsetGas_uint256)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KsymbolicStorage" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KsymbolicStorage_address)]
    
    rule  ( S2KKEVMCheatsBase . S2KallowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KKEVMCheatsBase . S2KallowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KfreshBool ( ) => #abiCallData ( "freshBool" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KfreshUInt ( V0_ : uint8 ) => #abiCallData ( "freshUInt" , #uint8 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_ )
      
    
    rule  ( S2KKEVMCheatsBase . S2KinfiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KsetGas ( V0_ : uint256 ) => #abiCallData ( "setGas" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KKEVMCheatsBase . S2KsymbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )
      
    
    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )
      
    
    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )
      
    
    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )
      
    
    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )
      
    
    rule  ( selector ( "expectNoCall()" ) => 3861374088 )
      
    
    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )
      
    
    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )
      
    
    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )
      
    
    rule  ( selector ( "freshBool()" ) => 2935720297 )
      
    
    rule  ( selector ( "freshUInt(uint8)" ) => 625253732 )
      
    
    rule  ( selector ( "infiniteGas()" ) => 3986649939 )
      
    
    rule  ( selector ( "setGas(uint256)" ) => 3713137314 )
      
    
    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )
      

endmodule

module S2KLabelTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLabelTestContract
    
    syntax S2KLabelTestContract ::= "S2KLabelTest" [symbol(), klabel(contract_LabelTest)]
    
      
    
    rule  ( #initBytecode ( S2KLabelTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610ab18061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806385226c811161007157806385226c81146100fb578063916a17c614610110578063b5508aa914610118578063ba414fa614610120578063e20c9f7114610138578063fa7626d41461014057600080fd5b80631ed7831c146100ae5780632fa150bd146100cc5780633e5e3c23146100d65780633f7286f4146100de57806366d9a9a0146100e6575b600080fd5b6100b661014d565b6040516100c3919061080b565b60405180910390f35b6100d46101af565b005b6100b6610249565b6100b66102a9565b6100ee610309565b6040516100c39190610858565b6101036103f8565b6040516100c3919061093b565b6100ee6104c8565b6101036105ae565b61012861067e565b60405190151581526020016100c3565b6100b66107ab565b6007546101289060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610187575b5050505050905090565b604080516318caf8e360e31b8152600060048201526024810191909152600c60448201526b5a65726f204164647265737360a01b6064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561022157600080fd5b505af1158015610235573d6000803e3d6000fd5b505050506001610247576102476109b5565b565b606060168054806020026020016040519081016040528092919081815260200182805480156101a5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610187575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101a5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610187575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103ef5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103d757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103995790505b5050505050815250508152602001906001019061032d565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103ef57838290600052602060002001805461043b906109cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610467906109cb565b80156104b45780601f10610489576101008083540402835291602001916104b4565b820191906000526020600020905b81548152906001019060200180831161049757829003601f168201915b50505050508152602001906001019061041c565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103ef5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561059657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105585790505b505050505081525050815260200190600101906104ec565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103ef5783829060005260206000200180546105f1906109cb565b80601f016020809104026020016040519081016040528092919081815260200182805461061d906109cb565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b5050505050815260200190600101906105d2565b600754600090610100900460ff16156106a05750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107a65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161072e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a05565b60408051601f198184030181529082905261074891610a36565b6000604051808303816000865af19150503d8060008114610785576040519150601f19603f3d011682016040523d82523d6000602084013e61078a565b606091505b50915050808060200190518101906107a29190610a52565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101a5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610187575050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101561084c5783516001600160a01b031683529284019291840191600101610827565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156108fc57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156108e75783516001600160e01b0319168252928b019260019290920191908b01906108bd565b50978a01979550505091870191600101610880565b50919998505050505050505050565b60005b8381101561092657818101518382015260200161090e565b83811115610935576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156109a857878503603f1901845281518051808752610989818989018a850161090b565b601f01601f191695909501860194509285019290850190600101610962565b5092979650505050505050565b634e487b7160e01b600052600160045260246000fd5b600181811c908216806109df57607f821691505b6020821081036109ff57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610a2881600485016020870161090b565b919091016004019392505050565b60008251610a4881846020870161090b565b9190910192915050565b600060208284031215610a6457600080fd5b81518015158114610a7457600080fd5b939250505056fea26469706673582212203a7aea418edcca50234463b79aa25edd8e96650bcf3e6ac0f7b90ebcd7b1931364736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KLabelTestField
    
    syntax S2KLabelTestField ::= "stdstore" [symbol(), klabel(field_LabelTest_stdstore)]
    
    syntax S2KLabelTestField ::= "IS_TEST" [symbol(), klabel(field_LabelTest_IS_TEST)]
    
    syntax S2KLabelTestField ::= "_failed" [symbol(), klabel(field_LabelTest__failed)]
    
    syntax S2KLabelTestField ::= "stdChainsInitialized" [symbol(), klabel(field_LabelTest_stdChainsInitialized)]
    
    syntax S2KLabelTestField ::= "chains" [symbol(), klabel(field_LabelTest_chains)]
    
    syntax S2KLabelTestField ::= "defaultRpcUrls" [symbol(), klabel(field_LabelTest_defaultRpcUrls)]
    
    syntax S2KLabelTestField ::= "idToAlias" [symbol(), klabel(field_LabelTest_idToAlias)]
    
    syntax S2KLabelTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_LabelTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KLabelTestField ::= "gasMeteringOff" [symbol(), klabel(field_LabelTest_gasMeteringOff)]
    
    syntax S2KLabelTestField ::= "_excludedContracts" [symbol(), klabel(field_LabelTest__excludedContracts)]
    
    syntax S2KLabelTestField ::= "_excludedSenders" [symbol(), klabel(field_LabelTest__excludedSenders)]
    
    syntax S2KLabelTestField ::= "_targetedContracts" [symbol(), klabel(field_LabelTest__targetedContracts)]
    
    syntax S2KLabelTestField ::= "_targetedSenders" [symbol(), klabel(field_LabelTest__targetedSenders)]
    
    syntax S2KLabelTestField ::= "_excludedArtifacts" [symbol(), klabel(field_LabelTest__excludedArtifacts)]
    
    syntax S2KLabelTestField ::= "_targetedArtifacts" [symbol(), klabel(field_LabelTest__targetedArtifacts)]
    
    syntax S2KLabelTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_LabelTest__targetedArtifactSelectors)]
    
    syntax S2KLabelTestField ::= "_targetedSelectors" [symbol(), klabel(field_LabelTest__targetedSelectors)]
    
    rule  ( #loc ( S2KLabelTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KLabelTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KLabelTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KLabelTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KLabelTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KLabelTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KLabelTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KLabelTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KLabelTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KLabelTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KLabelTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KLabelTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KLabelTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KLabelTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KLabelTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KLabelTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KLabelTestContract "." S2KLabelTestMethod [function(), symbol(), klabel(method_LabelTest)]
    
    syntax S2KLabelTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_LabelTest_S2KISZUndTEST_)]
    
    syntax S2KLabelTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_LabelTest_S2KexcludeArtifacts_)]
    
    syntax S2KLabelTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_LabelTest_S2KexcludeContracts_)]
    
    syntax S2KLabelTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_LabelTest_S2KexcludeSenders_)]
    
    syntax S2KLabelTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_LabelTest_S2Kfailed_)]
    
    syntax S2KLabelTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_LabelTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KLabelTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_LabelTest_S2KtargetArtifacts_)]
    
    syntax S2KLabelTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_LabelTest_S2KtargetContracts_)]
    
    syntax S2KLabelTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_LabelTest_S2KtargetSelectors_)]
    
    syntax S2KLabelTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_LabelTest_S2KtargetSenders_)]
    
    syntax S2KLabelTestMethod ::= "S2KtestLabel" "(" ")" [symbol(), klabel(method_LabelTest_S2KtestLabel_)]
    
    rule  ( S2KLabelTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtestLabel ( ) => #abiCallData ( "testLabel" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testLabel()" ) => 799101117 )
      

endmodule

module S2KLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLoopsTestContract
    
    syntax S2KLoopsTestContract ::= "S2KLoopsTest" [symbol(), klabel(contract_LoopsTest)]
    
      
    
    rule  ( #initBytecode ( S2KLoopsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611d688061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806366d9a9a0116100f9578063a118e10211610097578063d313940d11610071578063d313940d14610336578063d6a2ec7614610349578063e20c9f7114610388578063fa7626d41461039057600080fd5b8063a118e10214610303578063b5508aa914610316578063ba414fa61461031e57600080fd5b806385226c81116100d357806385226c81146102c0578063887e4fdb146102d55780638fe34aed146102e8578063916a17c6146102fb57600080fd5b806366d9a9a0146102855780636d5d39df1461029a5780637e8e23d0146102ad57600080fd5b80633e5e3c23116101665780634e94ce57116101405780634e94ce571461024457806351cdc192146102575780635a98a5c01461026a5780635de22f071461027257600080fd5b80633e5e3c231461022c5780633f7286f41461023457806340ca711a1461023c57600080fd5b806306ac1530146101ae5780630d472879146101c35780630de4eb16146101de578063181f88ec146101f15780631ed7831c1461020457806330476e2714610219575b600080fd5b6101c16101bc36600461180e565b61039d565b005b6101cb6103f6565b6040519081526020015b60405180910390f35b6101c16101ec366004611830565b610408565b6101c16101ff366004611830565b610466565b61020c610483565b6040516101d59190611849565b6101c1610227366004611830565b6104e5565b61020c610549565b61020c6105a9565b6101cb610609565b6101c1610252366004611830565b610615565b6101c16102653660046118ac565b6106b9565b6101cb610719565b6101c16102803660046118ac565b610725565b61028d61077b565b6040516101d5919061196a565b6101c16102a836600461180e565b61086a565b6101cb6102bb366004611830565b610875565b6102c861097d565b6040516101d59190611a75565b6101c16102e3366004611830565b610a4d565b6101c16102f63660046118ac565b610ae5565b61028d610b5f565b6101c161031136600461180e565b610c45565b6102c8610caf565b610326610d7f565b60405190151581526020016101d5565b6101c16103443660046118ac565b610eac565b6103707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016101d5565b61020c610f26565b6007546103269060ff1681565b60006103a883610f86565b90506103bf8115806103ba5750600184115b610fd7565b6103f160028310806103d15750838310155b806103da575081155b806103ba57506103ea8385611aed565b1515610fd7565b505050565b60006104036103e8610875565b905090565b60006104138261104b565b905060006104218283611093565b905060008382111561043e576104378483611b17565b905061044b565b6104488383611b17565b90505b610460610459606486611b2e565b8210610fd7565b50505050565b61048061047282610f86565b61047b836110ce565b61111f565b50565b606060148054806020026020016040519081016040528092919081815260200182805480156104db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104bd575b5050505050905090565b60006104f082610f86565b905080806104fe5750600282105b15610507575050565b60025b8281101561053a5761051c8184611aed565b60000361052857505050565b8061053281611b42565b91505061050a565b506105456000610fd7565b5050565b606060168054806020026020016040519081016040528092919081815260200182805480156104db576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104bd575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156104db576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104bd575050505050905090565b6000610403600a610875565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506000600282600161068c9190611b5b565b6106969084611b73565b6106a09190611b2e565b905060006106ad8361129c565b90506103f182826112ce565b60006106c4826113ad565b9050600160005b8351811080156106d85750815b1561070f578381815181106106ef576106ef611b92565b60200260200101518310159150808061070790611b42565b9150506106cb565b506103f181610fd7565b60006104036064610875565b60006107308261140c565b9050600160005b8351811080156107445750815b1561070f5783818151811061075b5761075b611b92565b60200260200101518310159150808061077390611b42565b915050610737565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156108615760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561084957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161080b5790505b5050505050815250508152602001906001019061079f565b50505050905090565b60006103a88361146a565b604051632631f2b160e11b815266b81702e05c0b6f8211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b5050604051636ea8fd5160e11b8152677ffffffffffff3d56004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063dd51faa29150602401600060405180830381600087803b15801561093857600080fd5b505af115801561094c573d6000803e3d6000fd5b5050505060005b8215610977576109638382611b5b565b9050610970600184611b17565b9250610953565b92915050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156108615783829060005260206000200180546109c090611ba8565b80601f01602080910402602001604051908101604052809291908181526020018280546109ec90611ba8565b8015610a395780601f10610a0e57610100808354040283529160200191610a39565b820191906000526020600020905b815481529060010190602001808311610a1c57829003601f168201915b5050505050815260200190600101906109a1565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b5050505060006002826001610ac49190611b5b565b610ace9084611b73565b610ad89190611b2e565b905060006106ad836114a1565b6000610af0826114cb565b90506001805b825181108015610b035750815b1561070f57838181518110610b1a57610b1a611b92565b602002602001015184600183610b309190611b17565b81518110610b4057610b40611b92565b6020026020010151111591508080610b5790611b42565b915050610af6565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156108615760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c2d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610bef5790505b50505050508152505081526020019060010190610b83565b6000610c50836114f7565b905082600003610c65576103f18160006112ce565b610c716103ba82610f86565b6000610c86610c81600186611b17565b6114f7565b90506104608184111580610c9a5750828410155b806103ba5750610ca984610f86565b15610fd7565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610861578382906000526020600020018054610cf290611ba8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1e90611ba8565b8015610d6b5780601f10610d4057610100808354040283529160200191610d6b565b820191906000526020600020905b815481529060010190602001808311610d4e57829003601f168201915b505050505081526020019060010190610cd3565b600754600090610100900460ff1615610da15750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ea75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e2f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611bdc565b60408051601f1981840301815290829052610e4991611c0d565b6000604051808303816000865af19150503d8060008114610e86576040519150601f19603f3d011682016040523d82523d6000602084013e610e8b565b606091505b5091505080806020019051810190610ea39190611c29565b9150505b919050565b6000610eb782611531565b90506001805b825181108015610eca5750815b1561070f57838181518110610ee157610ee1611b92565b602002602001015184600183610ef79190611b17565b81518110610f0757610f07611b92565b6020026020010151111591508080610f1e90611b42565b915050610ebd565b606060138054806020026020016040519081016040528092919081815260200182805480156104db576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104bd575050505050905090565b60006002821015610f9957506000919050565b60025b82811015610fce57610fae8184611aed565b15610fbc5750600092915050565b80610fc681611b42565b915050610f9c565b50600192915050565b80610480577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161103b9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610480611553565b60008160000361105d57506000919050565b815b80915060028161106f858461165f565b6110799190611b5b565b6110839190611b2e565b905081810361105f575b50919050565b6000670de0b6b3a76400006110a9600282611b2e565b6110b38486611b73565b6110bd9190611b5b565b6110c79190611b2e565b9392505050565b600060028210156110e157506000919050565b60025b6110ef600284611b2e565b8111610fce576110ff8184611aed565b1561110d5750600092915050565b8061111781611b42565b9150506110e4565b80151582151514610545577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516111949060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826111e5576040518060400160405280600581526020016466616c736560d81b815250611203565b604051806040016040528060048152602001637472756560e01b8152505b6040516112109190611c4b565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381611261576040518060400160405280600581526020016466616c736560d81b81525061127f565b604051806040016040528060048152602001637472756560e01b8152505b60405161128c9190611c8f565b60405180910390a1610545611553565b600080805b838110156112c7576112b38183611b5b565b9150806112bf81611b42565b9150506112a1565b5092915050565b808214610545577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161133f9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516113769190611cb9565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405161128c9190611cf1565b60008060015b83518110156112c757818482815181106113cf576113cf611b92565b602002602001015111156113fa578381815181106113ef576113ef611b92565b602002602001015191505b8061140481611b42565b9150506113b3565b600080805b83518110156112c7578184828151811061142d5761142d611b92565b602002602001015111156114585783818151811061144d5761144d611b92565b602002602001015191505b8061146281611b42565b915050611411565b600060025b82811015610fce576114818184611aed565b1561148f5750600092915050565b8061149981611b42565b91505061146f565b600080805b8381116112c7576114b78183611b5b565b9150806114c381611b42565b9150506114a6565b606060018251116114da575090565b6114f3826000600185516114ee9190611b17565b61167f565b5090565b6000805b8281101561108d578161150d81611b42565b92505061151982610f86565b1561152c578061152881611b42565b9150505b6114fb565b60606001825111611540575090565b6114f38260018085516114ee9190611b17565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561164e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526115ed9291602001611bdc565b60408051601f198184030181529082905261160791611c0d565b6000604051808303816000865af19150503d8060008114611644576040519150601f19603f3d011682016040523d82523d6000602084013e611649565b606091505b505050505b6007805461ff001916610100179055565b60008161166d600282611b2e565b6110b3670de0b6b3a764000086611b73565b80821061168b57505050565b8181600085600261169c8585611b17565b6116a69190611b2e565b6116b09087611b5b565b815181106116c0576116c0611b92565b602002602001015190505b8183116117e0575b808684815181106116e6576116e6611b92565b6020026020010151101561170657826116fe81611b42565b9350506116d3565b85828151811061171857611718611b92565b60200260200101518110801561172e5750600082115b15611745578161173d81611d1b565b925050611706565b8183116117db5785828151811061175e5761175e611b92565b602002602001015186848151811061177857611778611b92565b602002602001015187858151811061179257611792611b92565b602002602001018885815181106117ab576117ab611b92565b602090810291909101019190915252826117c481611b42565b93505081156117db57816117d781611d1b565b9250505b6116cb565b818510156117f3576117f386868461167f565b838310156118065761180686848661167f565b505050505050565b6000806040838503121561182157600080fd5b50508035926020909101359150565b60006020828403121561184257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561188a5783516001600160a01b031683529284019291840191600101611865565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156118bf57600080fd5b823567ffffffffffffffff808211156118d757600080fd5b818501915085601f8301126118eb57600080fd5b8135818111156118fd576118fd611896565b8060051b604051601f19603f8301168101818110858211171561192257611922611896565b60405291825284820192508381018501918883111561194057600080fd5b938501935b8285101561195e57843584529385019392850192611945565b98975050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611a0e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156119f95783516001600160e01b0319168252928b019260019290920191908b01906119cf565b50978a01979550505091870191600101611992565b50919998505050505050505050565b60005b83811015611a38578181015183820152602001611a20565b838111156104605750506000910152565b60008151808452611a61816020860160208601611a1d565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611aca57603f19888603018452611ab8858351611a49565b94509285019290850190600101611a9c565b5092979650505050505050565b634e487b7160e01b600052601260045260246000fd5b600082611afc57611afc611ad7565b500690565b634e487b7160e01b600052601160045260246000fd5b600082821015611b2957611b29611b01565b500390565b600082611b3d57611b3d611ad7565b500490565b600060018201611b5457611b54611b01565b5060010190565b60008219821115611b6e57611b6e611b01565b500190565b6000816000190483118215151615611b8d57611b8d611b01565b500290565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611bbc57607f821691505b60208210810361108d57634e487b7160e01b600052602260045260246000fd5b6001600160e01b0319831681528151600090611bff816004850160208701611a1d565b919091016004019392505050565b60008251611c1f818460208701611a1d565b9190910192915050565b600060208284031215611c3b57600080fd5b815180151581146110c757600080fd5b604081526000611c7560408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611c878185611a49565b949350505050565b604081526000611c7560408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611ce360408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611ce360408301600a8152690808080808149a59da1d60b21b602082015260400190565b600081611d2a57611d2a611b01565b50600019019056fea2646970667358221220871a58d0b7bb9cbfa78a56fe6ebb9b5b098250c3da196e464c4e3db22d34caec64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KLoopsTestField
    
    syntax S2KLoopsTestField ::= "stdstore" [symbol(), klabel(field_LoopsTest_stdstore)]
    
    syntax S2KLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_LoopsTest_IS_TEST)]
    
    syntax S2KLoopsTestField ::= "_failed" [symbol(), klabel(field_LoopsTest__failed)]
    
    syntax S2KLoopsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_LoopsTest_stdChainsInitialized)]
    
    syntax S2KLoopsTestField ::= "chains" [symbol(), klabel(field_LoopsTest_chains)]
    
    syntax S2KLoopsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_LoopsTest_defaultRpcUrls)]
    
    syntax S2KLoopsTestField ::= "idToAlias" [symbol(), klabel(field_LoopsTest_idToAlias)]
    
    syntax S2KLoopsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_LoopsTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KLoopsTestField ::= "gasMeteringOff" [symbol(), klabel(field_LoopsTest_gasMeteringOff)]
    
    syntax S2KLoopsTestField ::= "_excludedContracts" [symbol(), klabel(field_LoopsTest__excludedContracts)]
    
    syntax S2KLoopsTestField ::= "_excludedSenders" [symbol(), klabel(field_LoopsTest__excludedSenders)]
    
    syntax S2KLoopsTestField ::= "_targetedContracts" [symbol(), klabel(field_LoopsTest__targetedContracts)]
    
    syntax S2KLoopsTestField ::= "_targetedSenders" [symbol(), klabel(field_LoopsTest__targetedSenders)]
    
    syntax S2KLoopsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_LoopsTest__excludedArtifacts)]
    
    syntax S2KLoopsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_LoopsTest__targetedArtifacts)]
    
    syntax S2KLoopsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_LoopsTest__targetedArtifactSelectors)]
    
    syntax S2KLoopsTestField ::= "_targetedSelectors" [symbol(), klabel(field_LoopsTest__targetedSelectors)]
    
    rule  ( #loc ( S2KLoopsTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KLoopsTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KLoopsTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KLoopsTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KLoopsTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KLoopsTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KLoopsTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KLoopsTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KLoopsTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KLoopsTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KLoopsTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KLoopsTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KLoopsTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KLoopsTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KLoopsTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KLoopsTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KLoopsTestContract "." S2KLoopsTestMethod [function(), symbol(), klabel(method_LoopsTest)]
    
    syntax S2KLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_LoopsTest_S2KISZUndTEST_)]
    
    syntax S2KLoopsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_LoopsTest_S2KexcludeArtifacts_)]
    
    syntax S2KLoopsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_LoopsTest_S2KexcludeContracts_)]
    
    syntax S2KLoopsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_LoopsTest_S2KexcludeSenders_)]
    
    syntax S2KLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_LoopsTest_S2Kfailed_)]
    
    syntax S2KLoopsTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_LoopsTest_S2Kkevm_)]
    
    syntax S2KLoopsTestMethod ::= "S2KsumZUndN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KsumZUndN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtargetArtifacts_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtargetContracts_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtargetSelectors_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtargetSenders_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsNotPrime" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsNotPrime_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrimeBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrimeBroken_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrimeOpt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrimeOpt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestMax" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestMax_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestMaxBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestMaxBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestNthPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestNthPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSort" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestSort_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSortBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestSortBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSqrt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSqrt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSumToN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSumToN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSumToNBroken" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSumToNBroken_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd10" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd10_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd100" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd100_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd1000" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd1000_)]
    
    rule  ( S2KLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KsumZUndN ( V0_n : uint256 ) => #abiCallData ( "sum_N" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestIsNotPrime ( V0_n : uint256 ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrimeBroken ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrimeOpt ( V0_n : uint256 ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestNthPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestSqrt ( V0_x : uint256 ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KLoopsTest . S2KtestSumToN ( V0_n : uint256 ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestSumToNBroken ( V0_n : uint256 ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd10 ( ) => #abiCallData ( "test_sum_10" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd100 ( ) => #abiCallData ( "test_sum_100" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd1000 ( ) => #abiCallData ( "test_sum_1000" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "sum_N(uint256)" ) => 2123244496 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testIsNotPrime(uint256)" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime(uint256,uint256)" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken(uint256,uint256)" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt(uint256)" ) => 404719852 )
      
    
    rule  ( selector ( "testMax(uint256[])" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken(uint256[])" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime(uint256,uint256)" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort(uint256[])" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken(uint256[])" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt(uint256)" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN(uint256)" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken(uint256)" ) => 1318374999 )
      
    
    rule  ( selector ( "test_sum_10()" ) => 1087009050 )
      
    
    rule  ( selector ( "test_sum_100()" ) => 1519953344 )
      
    
    rule  ( selector ( "test_sum_1000()" ) => 222767225 )
      

endmodule

module S2KMergeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMergeTestContract
    
    syntax S2KMergeTestContract ::= "S2KMergeTest" [symbol(), klabel(contract_MergeTest)]
    
      
    
    rule  ( #initBytecode ( S2KMergeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610ab38061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063916a17c611610071578063916a17c614610126578063b5508aa91461012e578063ba414fa614610136578063d6a2ec761461014e578063e20c9f711461018d578063fa7626d41461019557600080fd5b80631ed7831c146100b95780633ba4d90c146100d75780633e5e3c23146100ec5780633f7286f4146100f457806366d9a9a0146100fc57806385226c8114610111575b600080fd5b6100c16101a2565b6040516100ce91906107f4565b60405180910390f35b6100ea6100e5366004610841565b610204565b005b6100c1610232565b6100c1610292565b6101046102f2565b6040516100ce919061085a565b6101196103e1565b6040516100ce919061093d565b6101046104b1565b610119610597565b61013e610667565b60405190151581526020016100ce565b6101757f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100ce565b6100c1610794565b60075461013e9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101fa57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101dc575b5050505050905090565b600a811015610217576000601b5561021d565b6001601b555b6002601b541061022f5761022f6109b7565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156101fa576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101dc575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101fa576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101dc575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103d85760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103c057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103825790505b50505050508152505081526020019060010190610316565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103d8578382906000526020600020018054610424906109cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610450906109cd565b801561049d5780601f106104725761010080835404028352916020019161049d565b820191906000526020600020905b81548152906001019060200180831161048057829003601f168201915b505050505081526020019060010190610405565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103d85760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561057f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105415790505b505050505081525050815260200190600101906104d5565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103d85783829060005260206000200180546105da906109cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610606906109cd565b80156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b5050505050815260200190600101906105bb565b600754600090610100900460ff16156106895750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561078f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610717917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a07565b60408051601f198184030181529082905261073191610a38565b6000604051808303816000865af19150503d806000811461076e576040519150601f19603f3d011682016040523d82523d6000602084013e610773565b606091505b509150508080602001905181019061078b9190610a54565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101fa576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101dc575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156108355783516001600160a01b031683529284019291840191600101610810565b50909695505050505050565b60006020828403121561085357600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156108fe57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156108e95783516001600160e01b0319168252928b019260019290920191908b01906108bf565b50978a01979550505091870191600101610882565b50919998505050505050505050565b60005b83811015610928578181015183820152602001610910565b83811115610937576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156109aa57878503603f190184528151805180875261098b818989018a850161090d565b601f01601f191695909501860194509285019290850190600101610964565b5092979650505050505050565b634e487b7160e01b600052600160045260246000fd5b600181811c908216806109e157607f821691505b602082108103610a0157634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610a2a81600485016020870161090d565b919091016004019392505050565b60008251610a4a81846020870161090d565b9190910192915050565b600060208284031215610a6657600080fd5b81518015158114610a7657600080fd5b939250505056fea26469706673582212204b243e18de9ccff438c184a847b9f6684cdabe6a2c629e91abe1412ccca63d4a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KMergeTestField
    
    syntax S2KMergeTestField ::= "stdstore" [symbol(), klabel(field_MergeTest_stdstore)]
    
    syntax S2KMergeTestField ::= "IS_TEST" [symbol(), klabel(field_MergeTest_IS_TEST)]
    
    syntax S2KMergeTestField ::= "_failed" [symbol(), klabel(field_MergeTest__failed)]
    
    syntax S2KMergeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_MergeTest_stdChainsInitialized)]
    
    syntax S2KMergeTestField ::= "chains" [symbol(), klabel(field_MergeTest_chains)]
    
    syntax S2KMergeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_MergeTest_defaultRpcUrls)]
    
    syntax S2KMergeTestField ::= "idToAlias" [symbol(), klabel(field_MergeTest_idToAlias)]
    
    syntax S2KMergeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_MergeTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KMergeTestField ::= "gasMeteringOff" [symbol(), klabel(field_MergeTest_gasMeteringOff)]
    
    syntax S2KMergeTestField ::= "_excludedContracts" [symbol(), klabel(field_MergeTest__excludedContracts)]
    
    syntax S2KMergeTestField ::= "_excludedSenders" [symbol(), klabel(field_MergeTest__excludedSenders)]
    
    syntax S2KMergeTestField ::= "_targetedContracts" [symbol(), klabel(field_MergeTest__targetedContracts)]
    
    syntax S2KMergeTestField ::= "_targetedSenders" [symbol(), klabel(field_MergeTest__targetedSenders)]
    
    syntax S2KMergeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_MergeTest__excludedArtifacts)]
    
    syntax S2KMergeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_MergeTest__targetedArtifacts)]
    
    syntax S2KMergeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_MergeTest__targetedArtifactSelectors)]
    
    syntax S2KMergeTestField ::= "_targetedSelectors" [symbol(), klabel(field_MergeTest__targetedSelectors)]
    
    syntax S2KMergeTestField ::= "y" [symbol(), klabel(field_MergeTest_y)]
    
    rule  ( #loc ( S2KMergeTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KMergeTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KMergeTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KMergeTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KMergeTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KMergeTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KMergeTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KMergeTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KMergeTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KMergeTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KMergeTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KMergeTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KMergeTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KMergeTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KMergeTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KMergeTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KMergeTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KMergeTest . y ) => 27 )
      
    
    syntax Bytes ::= S2KMergeTestContract "." S2KMergeTestMethod [function(), symbol(), klabel(method_MergeTest)]
    
    syntax S2KMergeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MergeTest_S2KISZUndTEST_)]
    
    syntax S2KMergeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_MergeTest_S2KexcludeArtifacts_)]
    
    syntax S2KMergeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_MergeTest_S2KexcludeContracts_)]
    
    syntax S2KMergeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_MergeTest_S2KexcludeSenders_)]
    
    syntax S2KMergeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MergeTest_S2Kfailed_)]
    
    syntax S2KMergeTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_MergeTest_S2Kkevm_)]
    
    syntax S2KMergeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_MergeTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KMergeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_MergeTest_S2KtargetArtifacts_)]
    
    syntax S2KMergeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_MergeTest_S2KtargetContracts_)]
    
    syntax S2KMergeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_MergeTest_S2KtargetSelectors_)]
    
    syntax S2KMergeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_MergeTest_S2KtargetSenders_)]
    
    syntax S2KMergeTestMethod ::= "S2KtestZUndbranchZUndmerge" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MergeTest_S2KtestZUndbranchZUndmerge_uint256)]
    
    rule  ( S2KMergeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KMergeTest . S2KtestZUndbranchZUndmerge ( V0_x : uint256 ) => #abiCallData ( "test_branch_merge" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_branch_merge(uint256)" ) => 1000659212 )
      

endmodule

module S2KMethodDisambiguateTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMethodDisambiguateTestContract
    
    syntax S2KMethodDisambiguateTestContract ::= "S2KMethodDisambiguateTest" [symbol(), klabel(contract_MethodDisambiguateTest)]
    
      
    
    rule  ( #initBytecode ( S2KMethodDisambiguateTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610d138061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610163578063e20c9f711461017b578063fa7626d414610183578063fc5636581461019057600080fd5b806385226c811461013e578063916a17c614610153578063b5508aa91461015b57600080fd5b8063089791d6146100d45780631ed7831c146100fa5780633e5e3c231461010f5780633f7286f41461011757806366d9a9a01461011f5780636b8153b014610134575b600080fd5b6100e76100e2366004610a44565b6101a3565b6040519081526020015b60405180910390f35b6101026101bd565b6040516100f19190610a71565b61010261021f565b61010261027f565b6101276102df565b6040516100f19190610abe565b61013c6103ce565b005b6101466103e6565b6040516100f19190610ba1565b6101276104b6565b61014661059c565b61016b61066c565b60405190151581526020016100f1565b610102610799565b60075461016b9060ff1681565b6100e761019e366004610c1b565b6107f9565b60006101b563ffffffff83168061080d565b506002919050565b6060601480548060200260200160405190810160405280929190818152602001828054801561021557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f7575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610215576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f7575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610215576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103c55760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103ad57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161036f5790505b50505050508152505081526020019060010190610303565b50505050905090565b60006103e360016103de836107f9565b61080d565b50565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103c557838290600052602060002001805461042990610c34565b80601f016020809104026020016040519081016040528092919081815260200182805461045590610c34565b80156104a25780601f10610477576101008083540402835291602001916104a2565b820191906000526020600020905b81548152906001019060200180831161048557829003601f168201915b50505050508152602001906001019061040a565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103c55760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561058457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105465790505b505050505081525050815260200190600101906104da565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103c55783829060005260206000200180546105df90610c34565b80601f016020809104026020016040519081016040528092919081815260200182805461060b90610c34565b80156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b5050505050815260200190600101906105c0565b600754600090610100900460ff161561068e5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107945760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161071c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c6e565b60408051601f198184030181529082905261073691610c9f565b6000604051808303816000865af19150503d8060008114610773576040519150601f19603f3d011682016040523d82523d6000602084013e610778565b606091505b50915050808060200190518101906107909190610cbb565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610215576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f7575050505050905090565b6000610805828361080d565b506001919050565b808214610934577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161087e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610934610938565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a335760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109d29291602001610c6e565b60408051601f19818403018152908290526109ec91610c9f565b6000604051808303816000865af19150503d8060008114610a29576040519150601f19603f3d011682016040523d82523d6000602084013e610a2e565b606091505b505050505b6007805461ff001916610100179055565b600060208284031215610a5657600080fd5b813563ffffffff81168114610a6a57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610ab25783516001600160a01b031683529284019291840191600101610a8d565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4d5783516001600160e01b0319168252928b019260019290920191908b0190610b23565b50978a01979550505091870191600101610ae6565b50919998505050505050505050565b60005b83811015610b8c578181015183820152602001610b74565b83811115610b9b576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c0e57878503603f1901845281518051808752610bef818989018a8501610b71565b601f01601f191695909501860194509285019290850190600101610bc8565b5092979650505050505050565b600060208284031215610c2d57600080fd5b5035919050565b600181811c90821680610c4857607f821691505b602082108103610c6857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c91816004850160208701610b71565b919091016004019392505050565b60008251610cb1818460208701610b71565b9190910192915050565b600060208284031215610ccd57600080fd5b81518015158114610a6a57600080fdfea2646970667358221220f39c860e337f1d596d2681eae133d2fc102d102556ee001b9c5ba1452c34aa8064736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KMethodDisambiguateTestField
    
    syntax S2KMethodDisambiguateTestField ::= "stdstore" [symbol(), klabel(field_MethodDisambiguateTest_stdstore)]
    
    syntax S2KMethodDisambiguateTestField ::= "IS_TEST" [symbol(), klabel(field_MethodDisambiguateTest_IS_TEST)]
    
    syntax S2KMethodDisambiguateTestField ::= "_failed" [symbol(), klabel(field_MethodDisambiguateTest__failed)]
    
    syntax S2KMethodDisambiguateTestField ::= "stdChainsInitialized" [symbol(), klabel(field_MethodDisambiguateTest_stdChainsInitialized)]
    
    syntax S2KMethodDisambiguateTestField ::= "chains" [symbol(), klabel(field_MethodDisambiguateTest_chains)]
    
    syntax S2KMethodDisambiguateTestField ::= "defaultRpcUrls" [symbol(), klabel(field_MethodDisambiguateTest_defaultRpcUrls)]
    
    syntax S2KMethodDisambiguateTestField ::= "idToAlias" [symbol(), klabel(field_MethodDisambiguateTest_idToAlias)]
    
    syntax S2KMethodDisambiguateTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_MethodDisambiguateTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KMethodDisambiguateTestField ::= "gasMeteringOff" [symbol(), klabel(field_MethodDisambiguateTest_gasMeteringOff)]
    
    syntax S2KMethodDisambiguateTestField ::= "_excludedContracts" [symbol(), klabel(field_MethodDisambiguateTest__excludedContracts)]
    
    syntax S2KMethodDisambiguateTestField ::= "_excludedSenders" [symbol(), klabel(field_MethodDisambiguateTest__excludedSenders)]
    
    syntax S2KMethodDisambiguateTestField ::= "_targetedContracts" [symbol(), klabel(field_MethodDisambiguateTest__targetedContracts)]
    
    syntax S2KMethodDisambiguateTestField ::= "_targetedSenders" [symbol(), klabel(field_MethodDisambiguateTest__targetedSenders)]
    
    syntax S2KMethodDisambiguateTestField ::= "_excludedArtifacts" [symbol(), klabel(field_MethodDisambiguateTest__excludedArtifacts)]
    
    syntax S2KMethodDisambiguateTestField ::= "_targetedArtifacts" [symbol(), klabel(field_MethodDisambiguateTest__targetedArtifacts)]
    
    syntax S2KMethodDisambiguateTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_MethodDisambiguateTest__targetedArtifactSelectors)]
    
    syntax S2KMethodDisambiguateTestField ::= "_targetedSelectors" [symbol(), klabel(field_MethodDisambiguateTest__targetedSelectors)]
    
    rule  ( #loc ( S2KMethodDisambiguateTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KMethodDisambiguateTestContract "." S2KMethodDisambiguateTestMethod [function(), symbol(), klabel(method_MethodDisambiguateTest)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KISZUndTEST_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KexcludeArtifacts_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KexcludeContracts_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KexcludeSenders_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2Kfailed_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KgetNumber_uint256)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint32" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KgetNumber_uint32)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtargetArtifacts_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtargetContracts_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtargetSelectors_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtargetSenders_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtestZUndmethodZUndcall" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtestZUndmethodZUndcall_)]
    
    rule  ( S2KMethodDisambiguateTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KgetNumber ( V0_x : uint256 ) => #abiCallData ( "getNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KgetNumber ( V0_x : uint32 ) => #abiCallData ( "getNumber" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtestZUndmethodZUndcall ( ) => #abiCallData ( "test_method_call" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "getNumber(uint256)" ) => 4233508440 )
      
    
    rule  ( selector ( "getNumber(uint32)" ) => 144150998 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_method_call()" ) => 1803637680 )
      

endmodule

module S2KMockCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMockCallTestContract
    
    syntax S2KMockCallTestContract ::= "S2KMockCallTest" [symbol(), klabel(contract_MockCallTest)]
    
      
    
    rule  ( #initBytecode ( S2KMockCallTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KMockCallTestField
    
    syntax S2KMockCallTestField ::= "stdstore" [symbol(), klabel(field_MockCallTest_stdstore)]
    
    syntax S2KMockCallTestField ::= "IS_TEST" [symbol(), klabel(field_MockCallTest_IS_TEST)]
    
    syntax S2KMockCallTestField ::= "_failed" [symbol(), klabel(field_MockCallTest__failed)]
    
    syntax S2KMockCallTestField ::= "stdChainsInitialized" [symbol(), klabel(field_MockCallTest_stdChainsInitialized)]
    
    syntax S2KMockCallTestField ::= "chains" [symbol(), klabel(field_MockCallTest_chains)]
    
    syntax S2KMockCallTestField ::= "defaultRpcUrls" [symbol(), klabel(field_MockCallTest_defaultRpcUrls)]
    
    syntax S2KMockCallTestField ::= "idToAlias" [symbol(), klabel(field_MockCallTest_idToAlias)]
    
    syntax S2KMockCallTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_MockCallTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KMockCallTestField ::= "gasMeteringOff" [symbol(), klabel(field_MockCallTest_gasMeteringOff)]
    
    syntax S2KMockCallTestField ::= "_excludedContracts" [symbol(), klabel(field_MockCallTest__excludedContracts)]
    
    syntax S2KMockCallTestField ::= "_excludedSenders" [symbol(), klabel(field_MockCallTest__excludedSenders)]
    
    syntax S2KMockCallTestField ::= "_targetedContracts" [symbol(), klabel(field_MockCallTest__targetedContracts)]
    
    syntax S2KMockCallTestField ::= "_targetedSenders" [symbol(), klabel(field_MockCallTest__targetedSenders)]
    
    syntax S2KMockCallTestField ::= "_excludedArtifacts" [symbol(), klabel(field_MockCallTest__excludedArtifacts)]
    
    syntax S2KMockCallTestField ::= "_targetedArtifacts" [symbol(), klabel(field_MockCallTest__targetedArtifacts)]
    
    syntax S2KMockCallTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_MockCallTest__targetedArtifactSelectors)]
    
    syntax S2KMockCallTestField ::= "_targetedSelectors" [symbol(), klabel(field_MockCallTest__targetedSelectors)]
    
    rule  ( #loc ( S2KMockCallTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KMockCallTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KMockCallTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KMockCallTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KMockCallTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KMockCallTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KMockCallTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KMockCallTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KMockCallTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KMockCallTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KMockCallTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KMockCallTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KMockCallTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KMockCallTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KMockCallTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KMockCallTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KMockCallTestContract "." S2KMockCallTestMethod [function(), symbol(), klabel(method_MockCallTest)]
    
    syntax S2KMockCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MockCallTest_S2KISZUndTEST_)]
    
    syntax S2KMockCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_MockCallTest_S2KexcludeArtifacts_)]
    
    syntax S2KMockCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_MockCallTest_S2KexcludeContracts_)]
    
    syntax S2KMockCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_MockCallTest_S2KexcludeSenders_)]
    
    syntax S2KMockCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MockCallTest_S2Kfailed_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtargetArtifacts_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtargetContracts_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtargetSelectors_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtargetSenders_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCall" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCall_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCallValue" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCallValue_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCalls" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCalls_)]
    
    rule  ( S2KMockCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCall ( ) => #abiCallData ( "testMockCall" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testMockCall()" ) => 3143830108 )
      
    
    rule  ( selector ( "testMockCallValue()" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls()" ) => 957910350 )
      

endmodule

module S2KMyIERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyIERC20Contract
    
    syntax S2KMyIERC20Contract ::= "S2KMyIERC20" [symbol(), klabel(contract_MyIERC20)]
    
      
    
    rule  ( #initBytecode ( S2KMyIERC20 ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KMyIERC20Contract "." S2KMyIERC20Method [function(), symbol(), klabel(method_MyIERC20)]
    
    syntax S2KMyIERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2Kapprove_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyIERC20_S2KbalanceOf_address)]
    
    syntax S2KMyIERC20Method ::= "S2Kdecimals" "(" ")" [symbol(), klabel(method_MyIERC20_S2Kdecimals_)]
    
    syntax S2KMyIERC20Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_MyIERC20_S2Ksymbol_)]
    
    syntax S2KMyIERC20Method ::= "S2KtotalSupply" "(" ")" [symbol(), klabel(method_MyIERC20_S2KtotalSupply_)]
    
    syntax S2KMyIERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2Ktransfer_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2KtransferFrom_address_address_uint256)]
    
    rule  ( S2KMyIERC20 . S2Kapprove ( V0_spender : address , V1_value : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))
      
    
    rule  ( S2KMyIERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyIERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2Ktransfer ( V0_recipient : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_recipient ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_recipient )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KMyIERC20 . S2KtransferFrom ( V0_sender : address , V1_recipient : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_sender ) , #address ( V1_recipient ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_sender )
       andBool ( #rangeAddress ( V1_recipient )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module S2KMyToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyTokenContract
    
    syntax S2KMyTokenContract ::= "S2KMyToken" [symbol(), klabel(contract_MyToken)]
    
      
    
    rule  ( #initBytecode ( S2KMyToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KMyTokenField
    
    syntax S2KMyTokenField ::= "token" [symbol(), klabel(field_MyToken_token)]
    
    syntax S2KMyTokenField ::= "balances" [symbol(), klabel(field_MyToken_balances)]
    
    rule  ( #loc ( S2KMyToken . token ) => 0 )
      
    
    rule  ( #loc ( S2KMyToken . balances ) => 1 )
      
    
    syntax Bytes ::= S2KMyTokenContract "." S2KMyTokenMethod [function(), symbol(), klabel(method_MyToken)]
    
    syntax S2KMyTokenMethod ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2KbalanceOf_address)]
    
    syntax S2KMyTokenMethod ::= "S2Kbalances" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2Kbalances_address)]
    
    syntax S2KMyTokenMethod ::= "S2Kpay" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2Kpay_address)]
    
    syntax S2KMyTokenMethod ::= "S2Ktoken" "(" ")" [symbol(), klabel(method_MyToken_S2Ktoken_)]
    
    rule  ( S2KMyToken . S2KbalanceOf ( V0_user : address ) => #abiCallData ( "balanceOf" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . S2Kbalances ( V0_ : address ) => #abiCallData ( "balances" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyToken . S2Kpay ( V0_user : address ) => #abiCallData ( "pay" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . S2Ktoken ( ) => #abiCallData ( "token" , .TypedArgs ) )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "balances(address)" ) => 669136355 )
      
    
    rule  ( selector ( "pay(address)" ) => 202497757 )
      
    
    rule  ( selector ( "token()" ) => 4228666474 )
      

endmodule

module S2KNoImport-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KNoImportContract
    
    syntax S2KNoImportContract ::= "S2KNoImport" [symbol(), klabel(contract_NoImport)]
    
      
    
    rule  ( #initBytecode ( S2KNoImport ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061011c806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d466a81314602d575b600080fd5b60336045565b60405190815260200160405180910390f35b60008060016002826055838260a1565b905060006061848460b6565b90506000606d828460ca565b9050806078838560a1565b6080919060a1565b965050505050505090565b634e487b7160e01b600052601160045260246000fd5b6000821982111560b15760b1608b565b500190565b60008282101560c55760c5608b565b500390565b600081600019048311821515161560e15760e1608b565b50029056fea2646970667358221220396cae21e2199c8413fc2c4c525eadb7fe48408a10d853a1a13a708b199d51bd64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KNoImportContract "." S2KNoImportMethod [function(), symbol(), klabel(method_NoImport)]
    
    syntax S2KNoImportMethod ::= "S2KtestZUndsourceZUndmap" "(" ")" [symbol(), klabel(method_NoImport_S2KtestZUndsourceZUndmap_)]
    
    rule  ( S2KNoImport . S2KtestZUndsourceZUndmap ( ) => #abiCallData ( "test_source_map" , .TypedArgs ) )
      
    
    rule  ( selector ( "test_source_map()" ) => 3563497491 )
      

endmodule

module S2KOwnerUpOnly-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyContract
    
    syntax S2KOwnerUpOnlyContract ::= "S2KOwnerUpOnly" [symbol(), klabel(contract_OwnerUpOnly)]
    
      
    
    rule  ( #initBytecode ( S2KOwnerUpOnly ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KOwnerUpOnlyField
    
    syntax S2KOwnerUpOnlyField ::= "count" [symbol(), klabel(field_OwnerUpOnly_count)]
    
    rule  ( #loc ( S2KOwnerUpOnly . count ) => 0 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyContract "." S2KOwnerUpOnlyMethod [function(), symbol(), klabel(method_OwnerUpOnly)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kcount_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kincrement_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kowner_)]
    
    rule  ( S2KOwnerUpOnly . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module S2KOwnerUpOnlyTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyTestContract
    
    syntax S2KOwnerUpOnlyTestContract ::= "S2KOwnerUpOnlyTest" [symbol(), klabel(contract_OwnerUpOnlyTest)]
    
      
    
    rule  ( #initBytecode ( S2KOwnerUpOnlyTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061116c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610171578063e20c9f7114610189578063fa7626d414610191578063fd50a0811461019e57600080fd5b806385226c811461014c578063916a17c614610161578063b5508aa91461016957600080fd5b80633f7286f4116100c85780633f7286f41461011f5780634d9feb351461012757806366d9a9a01461012f578063760c01a71461014457600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780633e5e3c2314610117575b600080fd5b6100f76101a6565b005b6101016101f1565b60405161010e9190610d2c565b60405180910390f35b610101610253565b6101016102b3565b6100f7610313565b61013761044d565b60405161010e9190610d79565b6100f761053c565b61015461069d565b60405161010e9190610e58565b61013761076d565b610154610853565b610179610923565b604051901515815260200161010e565b610101610a50565b6007546101799060ff1681565b6100f7610ab0565b6040516101b290610d1f565b604051809103906000f0801580156101ce573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561024957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161022b575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610249576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022b575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610249576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022b575050505050905090565b604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561036557600080fd5b505af1158015610379573d6000803e3d6000fd5b505060405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015b600060405180830381600087803b1580156103cb57600080fd5b505af11580156103df573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b50505050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156105335760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104dd5790505b50505050508152505081526020019060010190610471565b50505050905090565b601b54604080516306661abd60e01b815290516105b2926001600160a01b0316916306661abd9160048083019260209291908290030181865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610ed2565b6000610ae8565b601b60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060257600080fd5b505af1158015610616573d6000803e3d6000fd5b5050505061069b601b60009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190610ed2565b6001610ae8565b565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156105335783829060005260206000200180546106e090610eeb565b80601f016020809104026020016040519081016040528092919081815260200182805461070c90610eeb565b80156107595780601f1061072e57610100808354040283529160200191610759565b820191906000526020600020905b81548152906001019060200180831161073c57829003601f168201915b5050505050815260200190600101906106c1565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156105335760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561083b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107fd5790505b50505050508152505081526020019060010190610791565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561053357838290600052602060002001805461089690610eeb565b80601f01602080910402602001604051908101604052809291908181526020018280546108c290610eeb565b801561090f5780601f106108e45761010080835404028352916020019161090f565b820191906000526020600020905b8154815290600101906020018083116108f257829003601f168201915b505050505081526020019060010190610877565b600754600090610100900460ff16156109455750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a4b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916109d3917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610f25565b60408051601f19818403018152908290526109ed91610f56565b6000604051808303816000865af19150503d8060008114610a2a576040519150601f19603f3d011682016040523d82523d6000602084013e610a2f565b606091505b5091505080806020019051810190610a479190610f72565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610249576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161022b575050505050905090565b60405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024016103b1565b808214610c0f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b599060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610c0f610c13565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610d0e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610cad9291602001610f25565b60408051601f1981840301815290829052610cc791610f56565b6000604051808303816000865af19150503d8060008114610d04576040519150601f19603f3d011682016040523d82523d6000602084013e610d09565b606091505b505050505b6007805461ff001916610100179055565b61019b80610f9c83390190565b6020808252825182820181905260009190848201906040850190845b81811015610d6d5783516001600160a01b031683529284019291840191600101610d48565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610e1d57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610e085783516001600160e01b0319168252928b019260019290920191908b0190610dde565b50978a01979550505091870191600101610da1565b50919998505050505050505050565b60005b83811015610e47578181015183820152602001610e2f565b838111156104475750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ec557878503603f1901845281518051808752610ea6818989018a8501610e2c565b601f01601f191695909501860194509285019290850190600101610e7f565b5092979650505050505050565b600060208284031215610ee457600080fd5b5051919050565b600181811c90821680610eff57607f821691505b602082108103610f1f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610f48816004850160208701610e2c565b919091016004019392505050565b60008251610f68818460208701610e2c565b9190910192915050565b600060208284031215610f8457600080fd5b81518015158114610f9457600080fd5b939250505056fe60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033a26469706673582212207724cafe6858d312afe47db0d187649fb59f72fec5a91e5893cd9cce267e1a2064736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KOwnerUpOnlyTestField
    
    syntax S2KOwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_OwnerUpOnlyTest_stdstore)]
    
    syntax S2KOwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_OwnerUpOnlyTest_IS_TEST)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_failed" [symbol(), klabel(field_OwnerUpOnlyTest__failed)]
    
    syntax S2KOwnerUpOnlyTestField ::= "stdChainsInitialized" [symbol(), klabel(field_OwnerUpOnlyTest_stdChainsInitialized)]
    
    syntax S2KOwnerUpOnlyTestField ::= "chains" [symbol(), klabel(field_OwnerUpOnlyTest_chains)]
    
    syntax S2KOwnerUpOnlyTestField ::= "defaultRpcUrls" [symbol(), klabel(field_OwnerUpOnlyTest_defaultRpcUrls)]
    
    syntax S2KOwnerUpOnlyTestField ::= "idToAlias" [symbol(), klabel(field_OwnerUpOnlyTest_idToAlias)]
    
    syntax S2KOwnerUpOnlyTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_OwnerUpOnlyTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KOwnerUpOnlyTestField ::= "gasMeteringOff" [symbol(), klabel(field_OwnerUpOnlyTest_gasMeteringOff)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_excludedContracts" [symbol(), klabel(field_OwnerUpOnlyTest__excludedContracts)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_excludedSenders" [symbol(), klabel(field_OwnerUpOnlyTest__excludedSenders)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_targetedContracts" [symbol(), klabel(field_OwnerUpOnlyTest__targetedContracts)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_targetedSenders" [symbol(), klabel(field_OwnerUpOnlyTest__targetedSenders)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_excludedArtifacts" [symbol(), klabel(field_OwnerUpOnlyTest__excludedArtifacts)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_targetedArtifacts" [symbol(), klabel(field_OwnerUpOnlyTest__targetedArtifacts)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_OwnerUpOnlyTest__targetedArtifactSelectors)]
    
    syntax S2KOwnerUpOnlyTestField ::= "_targetedSelectors" [symbol(), klabel(field_OwnerUpOnlyTest__targetedSelectors)]
    
    syntax S2KOwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_OwnerUpOnlyTest_upOnly)]
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . upOnly ) => 27 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyTestContract "." S2KOwnerUpOnlyTestMethod [function(), symbol(), klabel(method_OwnerUpOnlyTest)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KISZUndTEST_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KexcludeArtifacts_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KexcludeContracts_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KexcludeSenders_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2Kfailed_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KsetUp_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtargetArtifacts_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtargetContracts_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtargetSelectors_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtargetSenders_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestFailIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestFailIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestIncrementAsOwner_)]
    
    rule  ( S2KOwnerUpOnlyTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner()" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner()" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner()" ) => 1980498343 )
      

endmodule

module S2KAdditionalToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAdditionalTokenContract
    
    syntax S2KAdditionalTokenContract ::= "S2KAdditionalToken" [symbol(), klabel(contract_AdditionalToken)]
    
      
    
    rule  ( #initBytecode ( S2KAdditionalToken ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b50336080526000805560805161014b610039600039600081816067015260b6015261014b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063e5071b8e146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100ed576000546100e99060016100ef565b6000555b565b6000821982111561011057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f9c105c03ee84dc7c92ebbb460ec2fe69bb516b7f42ae54aa13532439c06f54f64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KAdditionalTokenField
    
    syntax S2KAdditionalTokenField ::= "count" [symbol(), klabel(field_AdditionalToken_count)]
    
    rule  ( #loc ( S2KAdditionalToken . count ) => 0 )
      
    
    syntax Bytes ::= S2KAdditionalTokenContract "." S2KAdditionalTokenMethod [function(), symbol(), klabel(method_AdditionalToken)]
    
    syntax S2KAdditionalTokenMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_AdditionalToken_S2Kcount_)]
    
    syntax S2KAdditionalTokenMethod ::= "S2KincrementCount" "(" ")" [symbol(), klabel(method_AdditionalToken_S2KincrementCount_)]
    
    syntax S2KAdditionalTokenMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_AdditionalToken_S2Kowner_)]
    
    rule  ( S2KAdditionalToken . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . S2KincrementCount ( ) => #abiCallData ( "incrementCount" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "incrementCount()" ) => 3842448270 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module S2KMyErc20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyErc20Contract
    
    syntax S2KMyErc20Contract ::= "S2KMyErc20" [symbol(), klabel(contract_MyErc20)]
    
      
    
    rule  ( #initBytecode ( S2KMyErc20 ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b503363deadbeef14601f57600080fd5b603f80602c6000396000f3fe6080604052600080fdfea26469706673582212204517f6bad58a2b928959de74303a31d5d1c7843d35e496707b5c838963be925064736f6c634300080d0033" ) )
      

endmodule

module S2KPlainPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPlainPrankTestContract
    
    syntax S2KPlainPrankTestContract ::= "S2KPlainPrankTest" [symbol(), klabel(contract_PlainPrankTest)]
    
      
    
    rule  ( #initBytecode ( S2KPlainPrankTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061165f8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806389eafa00116100ad578063ba414fa611610071578063ba414fa6146101e8578063e20c9f71146101f0578063e22315a4146101f8578063ea8a430114610200578063fa7626d41461020857600080fd5b806389eafa00146101b3578063916a17c6146101bb578063a036536a146101c3578063b5508aa9146101d8578063b753193d146101e057600080fd5b80633f7286f4116100f45780633f7286f4146101715780635cf61e5b1461017957806366d9a9a01461018157806385226c811461019657806386d77e85146101ab57600080fd5b80630e83f10b1461013157806310a13dbb1461013b5780631ed7831c14610143578063332d7c4d146101615780633e5e3c2314610169575b600080fd5b610139610215565b005b6101396103dc565b61014b610450565b6040516101589190611195565b60405180910390f35b6101396104b2565b61014b610518565b61014b610578565b6101396105d8565b61018961064d565b60405161015891906111e2565b61019e61073c565b60405161015891906112c1565b61013961080c565b6101396109a0565b610189610aeb565b600f33145b6040519015158152602001610158565b61019e610bd1565b610139610ca1565b6101c8610d82565b61014b610eaf565b610139610f0f565b610139611030565b6007546101c89060ff1681565b60006040516102239061117c565b604051809103906000f08015801561023f573d6000803e3d6000fd5b506040516303223eab60e11b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015b600060405180830381600087803b15801561029957600080fd5b505af11580156102ad573d6000803e3d6000fd5b50505050806001600160a01b031663e5071b8e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102ec57600080fd5b505af1158015610300573d6000803e3d6000fd5b5050505060008051602061160a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561035057600080fd5b505af1158015610364573d6000803e3d6000fd5b50505050806001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca919061133b565b6001146103d9576103d9611354565b50565b60008051602061160a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561042857600080fd5b505af115801561043c573d6000803e3d6000fd5b50505050600161044e5761044e611354565b565b606060148054806020026020016040519081016040528092919081815260200182805480156104a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161048a575b5050505050905090565b60006040516104c09061117c565b604051809103906000f0801580156104dc573d6000803e3d6000fd5b506040516303223eab60e11b815260006004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d569060240161027f565b606060168054806020026020016040519081016040528092919081815260200182805480156104a8576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161048a575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156104a8576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161048a575050505050905090565b60006040516105e69061117c565b604051809103906000f080158015610602573d6000803e3d6000fd5b506040516308b6ac0f60e31b81526001600160a01b038216600482018190526024820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906345b560789060440161027f565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156107335760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561071b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106dd5790505b50505050508152505081526020019060010190610671565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561073357838290600052602060002001805461077f9061136a565b80601f01602080910402602001604051908101604052809291908181526020018280546107ab9061136a565b80156107f85780601f106107cd576101008083540402835291602001916107f8565b820191906000526020600020905b8154815290600101906020018083116107db57829003601f168201915b505050505081526020019060010190610760565b6040516303223eab60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b50506040516303223eab60e11b815260016004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d569150602401600060405180830381600087803b1580156108be57600080fd5b505af11580156108d2573d6000803e3d6000fd5b5050505060008051602061160a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b5050505060008051602061160a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561098657600080fd5b505af115801561099a573d6000803e3d6000fd5b50505050565b6040516303223eab60e11b815263deadbeef6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b50505050604051610a1490611189565b604051809103906000f080158015610a30573d6000803e3d6000fd5b50601b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008051602061160a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b5050601b546001600160a01b031673e8279be14e9fe2ad2d8e52e42ca96fb33a813bbe14915061044e90505761044e611354565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156107335760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610bb957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610b7b5790505b50505050508152505081526020019060010190610b0f565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610733578382906000526020600020018054610c149061136a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c409061136a565b8015610c8d5780601f10610c6257610100808354040283529160200191610c8d565b820191906000526020600020905b815481529060010190602001808311610c7057829003601f168201915b505050505081526020019060010190610bf5565b604051632631f2b160e11b8152600f3314156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b50506040516303223eab60e11b8152600f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d569150602401600060405180830381600087803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b50505050610d7633600f1490565b61044e5761044e611354565b600754600090610100900460ff1615610da45750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610eaa5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e32917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113a4565b60408051601f1981840301815290829052610e4c916113d5565b6000604051808303816000865af19150503d8060008114610e89576040519150601f19603f3d011682016040523d82523d6000602084013e610e8e565b606091505b5091505080806020019051810190610ea691906113f1565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156104a8576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161048a575050505050905090565b6000604051610f1d9061117c565b604051809103906000f080158015610f39573d6000803e3d6000fd5b5060405163ca669fa760e01b815260006004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610f8a57600080fd5b505af1158015610f9e573d6000803e3d6000fd5b50505050806001600160a01b031663e5071b8e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fdd57600080fd5b505af1158015610ff1573d6000803e3d6000fd5b50505050806001600160a01b031663e5071b8e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561035057600080fd5b6040516303223eab60e11b815263deadbeef6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505050506040516110a490611189565b604051809103906000f0801580156110c0573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b03929092169190911790556040516110ed90611189565b604051809103906000f080158015611109573d6000803e3d6000fd5b50601c60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008051602061160a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561098657600080fd5b6101848061141b83390190565b606b8061159f83390190565b6020808252825182820181905260009190848201906040850190845b818110156111d65783516001600160a01b0316835292840192918401916001016111b1565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561128657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112715783516001600160e01b0319168252928b019260019290920191908b0190611247565b50978a0197955050509187019160010161120a565b50919998505050505050505050565b60005b838110156112b0578181015183820152602001611298565b8381111561099a5750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561132e57878503603f190184528151805180875261130f818989018a8501611295565b601f01601f1916959095018601945092850192908501906001016112e8565b5092979650505050505050565b60006020828403121561134d57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b600181811c9082168061137e57607f821691505b60208210810361139e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906113c7816004850160208701611295565b919091016004019392505050565b600082516113e7818460208701611295565b9190910192915050565b60006020828403121561140357600080fd5b8151801515811461141357600080fd5b939250505056fe60a060405234801561001057600080fd5b50336080526000805560805161014b610039600039600081816067015260b6015261014b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063e5071b8e146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100ed576000546100e99060016100ef565b6000555b565b6000821982111561011057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f9c105c03ee84dc7c92ebbb460ec2fe69bb516b7f42ae54aa13532439c06f54f64736f6c634300080d00336080604052348015600f57600080fd5b503363deadbeef14601f57600080fd5b603f80602c6000396000f3fe6080604052600080fdfea26469706673582212204517f6bad58a2b928959de74303a31d5d1c7843d35e496707b5c838963be925064736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212207530615ab1427838cee8b4a45fecbaea0056dd59827cb286cc7cf0f75e41304564736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KPlainPrankTestField
    
    syntax S2KPlainPrankTestField ::= "stdstore" [symbol(), klabel(field_PlainPrankTest_stdstore)]
    
    syntax S2KPlainPrankTestField ::= "IS_TEST" [symbol(), klabel(field_PlainPrankTest_IS_TEST)]
    
    syntax S2KPlainPrankTestField ::= "_failed" [symbol(), klabel(field_PlainPrankTest__failed)]
    
    syntax S2KPlainPrankTestField ::= "stdChainsInitialized" [symbol(), klabel(field_PlainPrankTest_stdChainsInitialized)]
    
    syntax S2KPlainPrankTestField ::= "chains" [symbol(), klabel(field_PlainPrankTest_chains)]
    
    syntax S2KPlainPrankTestField ::= "defaultRpcUrls" [symbol(), klabel(field_PlainPrankTest_defaultRpcUrls)]
    
    syntax S2KPlainPrankTestField ::= "idToAlias" [symbol(), klabel(field_PlainPrankTest_idToAlias)]
    
    syntax S2KPlainPrankTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_PlainPrankTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KPlainPrankTestField ::= "gasMeteringOff" [symbol(), klabel(field_PlainPrankTest_gasMeteringOff)]
    
    syntax S2KPlainPrankTestField ::= "_excludedContracts" [symbol(), klabel(field_PlainPrankTest__excludedContracts)]
    
    syntax S2KPlainPrankTestField ::= "_excludedSenders" [symbol(), klabel(field_PlainPrankTest__excludedSenders)]
    
    syntax S2KPlainPrankTestField ::= "_targetedContracts" [symbol(), klabel(field_PlainPrankTest__targetedContracts)]
    
    syntax S2KPlainPrankTestField ::= "_targetedSenders" [symbol(), klabel(field_PlainPrankTest__targetedSenders)]
    
    syntax S2KPlainPrankTestField ::= "_excludedArtifacts" [symbol(), klabel(field_PlainPrankTest__excludedArtifacts)]
    
    syntax S2KPlainPrankTestField ::= "_targetedArtifacts" [symbol(), klabel(field_PlainPrankTest__targetedArtifacts)]
    
    syntax S2KPlainPrankTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_PlainPrankTest__targetedArtifactSelectors)]
    
    syntax S2KPlainPrankTestField ::= "_targetedSelectors" [symbol(), klabel(field_PlainPrankTest__targetedSelectors)]
    
    syntax S2KPlainPrankTestField ::= "erc20a" [symbol(), klabel(field_PlainPrankTest_erc20a)]
    
    syntax S2KPlainPrankTestField ::= "erc20b" [symbol(), klabel(field_PlainPrankTest_erc20b)]
    
    rule  ( #loc ( S2KPlainPrankTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . erc20a ) => 27 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . erc20b ) => 28 )
      
    
    syntax Bytes ::= S2KPlainPrankTestContract "." S2KPlainPrankTestMethod [function(), symbol(), klabel(method_PlainPrankTest)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KISZUndTEST_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KexcludeArtifacts_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KexcludeContracts_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KexcludeSenders_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2Kfailed_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KinternalCounter" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KinternalCounter_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtargetArtifacts_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtargetContracts_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtargetSelectors_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtargetSenders_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndexistingAlready" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestFailZUndstartPrankZUndexistingAlready_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndinternalCall" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestFailZUndstartPrankZUndinternalCall_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestPrankCreate" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestPrankCreate_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestPrankCreateAddress" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestPrankCreateAddress_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndprankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndprankZUndzeroAddressZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankWithOriginZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankWithOriginZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankZUndzeroAddressZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstopPrankZUndnotExistent" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstopPrankZUndnotExistent_)]
    
    rule  ( S2KPlainPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KinternalCounter ( ) => #abiCallData ( "internalCounter" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestFailZUndstartPrankZUndexistingAlready ( ) => #abiCallData ( "testFail_startPrank_existingAlready" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestFailZUndstartPrankZUndinternalCall ( ) => #abiCallData ( "testFail_startPrank_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestPrankCreate ( ) => #abiCallData ( "testPrankCreate" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestPrankCreateAddress ( ) => #abiCallData ( "testPrankCreateAddress" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndprankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_prank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankWithOriginZUndtrue ( ) => #abiCallData ( "test_startPrankWithOrigin_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankZUndtrue ( ) => #abiCallData ( "test_startPrank_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_startPrank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstopPrankZUndnotExistent ( ) => #abiCallData ( "test_stopPrank_notExistent" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "internalCounter()" ) => 2687914858 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_startPrank_existingAlready()" ) => 2262269573 )
      
    
    rule  ( selector ( "testFail_startPrank_internalCall()" ) => 3075676477 )
      
    
    rule  ( selector ( "testPrankCreate()" ) => 3934929665 )
      
    
    rule  ( selector ( "testPrankCreateAddress()" ) => 2313878016 )
      
    
    rule  ( selector ( "test_prank_zeroAddress_true()" ) => 3793950116 )
      
    
    rule  ( selector ( "test_startPrankWithOrigin_true()" ) => 1559633499 )
      
    
    rule  ( selector ( "test_startPrank_true()" ) => 243527947 )
      
    
    rule  ( selector ( "test_startPrank_zeroAddress_true()" ) => 858618957 )
      
    
    rule  ( selector ( "test_stopPrank_notExistent()" ) => 279002555 )
      

endmodule

module S2KPrank-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankContract
    
    syntax S2KPrankContract ::= "S2KPrank" [symbol(), klabel(contract_Prank)]
    
      
    
    rule  ( #initBytecode ( S2KPrank ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b503360805260805161021561003560003960008181609a015260df01526102156000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780631003e2d21461006d5780631dc05f17146100825780638da5cb5b14610095575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b61008061007b366004610181565b6100d4565b005b610080610090366004610181565b610156565b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610064565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461013d5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461014e91906101b0565b909155505050565b321561016157600080fd5b80600054101561017057600080fd5b8060008082825461014e91906101c8565b60006020828403121561019357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101c3576101c361019a565b500190565b6000828210156101da576101da61019a565b50039056fea2646970667358221220576c66ed00ea73f0e268ced3370e2f9eb32d0943dd3d09852caf3160c1aa619764736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KPrankField
    
    syntax S2KPrankField ::= "count" [symbol(), klabel(field_Prank_count)]
    
    rule  ( #loc ( S2KPrank . count ) => 0 )
      
    
    syntax Bytes ::= S2KPrankContract "." S2KPrankMethod [function(), symbol(), klabel(method_Prank)]
    
    syntax S2KPrankMethod ::= "S2Kadd" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_S2Kadd_uint256)]
    
    syntax S2KPrankMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_Prank_S2Kcount_)]
    
    syntax S2KPrankMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_Prank_S2Kowner_)]
    
    syntax S2KPrankMethod ::= "S2Ksubtract" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_S2Ksubtract_uint256)]
    
    rule  ( S2KPrank . S2Kadd ( V0_value : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KPrank . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . S2Ksubtract ( V0_value : uint256 ) => #abiCallData ( "subtract" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( selector ( "add(uint256)" ) => 268690130 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      
    
    rule  ( selector ( "subtract(uint256)" ) => 499146519 )
      

endmodule

module S2KPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankTestContract
    
    syntax S2KPrankTestContract ::= "S2KPrankTest" [symbol(), klabel(contract_PrankTest)]
    
      
    
    rule  ( #initBytecode ( S2KPrankTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611a018061003d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635f63e631116100a2578063b5508aa911610071578063b5508aa9146101d9578063ba414fa6146101e1578063e20c9f71146101f9578063e26f697f14610201578063fa7626d41461021457600080fd5b80635f63e6311461019457806366d9a9a0146101a757806385226c81146101bc578063916a17c6146101d157600080fd5b80633e5e3c23116100de5780633e5e3c231461015e5780633f7286f4146101665780634f7f8fd31461016e578063556fcf591461018157600080fd5b80630a9254e4146101105780630fab23fe1461011a5780631ed7831c1461012d5780633881b1461461014b575b600080fd5b610118610221565b005b610118610128366004611487565b61026c565b6101356104fc565b60405161014291906114a9565b60405180910390f35b6101186101593660046114f6565b61055e565b610135610624565b610135610684565b61011861017c3660046114f6565b6106e4565b61011861018f3660046114f6565b61090d565b6101186101a23660046114f6565b610a3a565b6101af610b63565b604051610142919061150f565b6101c4610c52565b604051610142919061161e565b6101af610d22565b6101c4610e08565b6101e9610ed8565b6040519015158152602001610142565b610135611005565b61011861020f366004611487565b611065565b6007546101e99060ff1681565b60405161022d9061147a565b604051809103906000f080158015610249573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b601b54604051630801f16960e11b8152600481018490526001600160a01b0390911690631003e2d290602401600060405180830381600087803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526000600482018190526024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506345b560789150604401600060405180830381600087803b15801561031e57600080fd5b505af1158015610332573d6000803e3d6000fd5b5050604051632631f2b160e11b8152848411156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e562915060240160006040518083038186803b15801561038357600080fd5b505afa158015610397573d6000803e3d6000fd5b5050601b54604051631dc05f1760e01b8152600481018590526001600160a01b039091169250631dc05f179150602401600060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b50505050610482601b60009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190611680565b61047d8385611699565b61124c565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104e057600080fd5b505af11580156104f4573d6000803e3d6000fd5b505050505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561055457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610536575b5050505050905090565b60405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156105ab57600080fd5b505af11580156105bf573d6000803e3d6000fd5b5050601b54604051630801f16960e11b8152600481018590526001600160a01b039091169250631003e2d29150602401600060405180830381600087803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b5050505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610554576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610536575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610554576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610536575050505050905090565b604080518082018252600a81526927b7363c9037bbb732b960b11b6020820152905163f28dceb360e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d9163f28dceb39161073991906004016116be565b600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b50506040516303223eab60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d569150602401600060405180830381600087803b1580156107b857600080fd5b505af11580156107cc573d6000803e3d6000fd5b5050601b54604051630801f16960e11b8152600481018590526001600160a01b039091169250631003e2d29150602401600060405180830381600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505050506108af601b60009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190611680565b600061124c565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060957600080fd5b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050601b54604051631dc05f1760e01b8152600481018590526001600160a01b039091169250631dc05f179150602401600060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b50505050610a37601b60009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610884573d6000803e3d6000fd5b50565b601b54604080516306661abd60e01b81529051610a85926001600160a01b0316916306661abd9160048083019260209291908290030181865afa158015610884573d6000803e3d6000fd5b601b54604051630801f16960e11b8152600481018390526001600160a01b0390911690631003e2d290602401600060405180830381600087803b158015610acb57600080fd5b505af1158015610adf573d6000803e3d6000fd5b50505050610a37601b60009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190611680565b8261124c565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015610c495760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c3157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610bf35790505b50505050508152505081526020019060010190610b87565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b82821015610c49578382906000526020600020018054610c95906116d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc1906116d8565b8015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b505050505081526020019060010190610c76565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015610c495760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610df057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610db25790505b50505050508152505081526020019060010190610d46565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610c49578382906000526020600020018054610e4b906116d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e77906116d8565b8015610ec45780601f10610e9957610100808354040283529160200191610ec4565b820191906000526020600020905b815481529060010190602001808311610ea757829003601f168201915b505050505081526020019060010190610e2c565b600754600090610100900460ff1615610efa5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110005760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610f88917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611712565b60408051601f1981840301815290829052610fa291611743565b6000604051808303816000865af19150503d8060008114610fdf576040519150601f19603f3d011682016040523d82523d6000602084013e610fe4565b606091505b5091505080806020019051810190610ffc919061175f565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610554576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610536575050505050905090565b601b54604051630801f16960e11b8152600481018490526001600160a01b0390911690631003e2d290602401600060405180830381600087803b1580156110ab57600080fd5b505af11580156110bf573d6000803e3d6000fd5b5050604051632631f2b160e11b8152848411156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e562915060240160006040518083038186803b15801561111057600080fd5b505afa158015611124573d6000803e3d6000fd5b50506040516323f2866760e11b81526000600482018190526024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506347e50cce9150604401600060405180830381600087803b15801561117c57600080fd5b505af1158015611190573d6000803e3d6000fd5b5050601b54604051631dc05f1760e01b8152600481018590526001600160a01b039091169250631dc05f179150602401600060405180830381600087803b1580156111da57600080fd5b505af11580156111ee573d6000803e3d6000fd5b50505050611248601b60009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b5050565b808214611248577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112bd9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1611248737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156114695760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526114089291602001611712565b60408051601f198184030181529082905261142291611743565b6000604051808303816000865af19150503d806000811461145f576040519150601f19603f3d011682016040523d82523d6000602084013e611464565b606091505b505050505b6007805461ff001916610100179055565b61024a8061178283390190565b6000806040838503121561149a57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156114ea5783516001600160a01b0316835292840192918401916001016114c5565b50909695505050505050565b60006020828403121561150857600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156115b357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561159e5783516001600160e01b0319168252928b019260019290920191908b0190611574565b50978a01979550505091870191600101611537565b50919998505050505050505050565b60005b838110156115dd5781810151838201526020016115c5565b838111156115ec576000848401525b50505050565b6000815180845261160a8160208601602086016115c2565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561167357603f198886030184526116618583516115f2565b94509285019290850190600101611645565b5092979650505050505050565b60006020828403121561169257600080fd5b5051919050565b6000828210156116b957634e487b7160e01b600052601160045260246000fd5b500390565b6020815260006116d160208301846115f2565b9392505050565b600181811c908216806116ec57607f821691505b60208210810361170c57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906117358160048501602087016115c2565b919091016004019392505050565b600082516117558184602087016115c2565b9190910192915050565b60006020828403121561177157600080fd5b815180151581146116d157600080fdfe60a060405234801561001057600080fd5b503360805260805161021561003560003960008181609a015260df01526102156000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780631003e2d21461006d5780631dc05f17146100825780638da5cb5b14610095575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b61008061007b366004610181565b6100d4565b005b610080610090366004610181565b610156565b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610064565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461013d5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461014e91906101b0565b909155505050565b321561016157600080fd5b80600054101561017057600080fd5b8060008082825461014e91906101c8565b60006020828403121561019357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101c3576101c361019a565b500190565b6000828210156101da576101da61019a565b50039056fea2646970667358221220576c66ed00ea73f0e268ced3370e2f9eb32d0943dd3d09852caf3160c1aa619764736f6c634300080d0033a264697066735822122016b1d5d3d000cef5fbd9bd1cc4f097d9334b528856b176f9753cde9a10465dae64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KPrankTestField
    
    syntax S2KPrankTestField ::= "stdstore" [symbol(), klabel(field_PrankTest_stdstore)]
    
    syntax S2KPrankTestField ::= "IS_TEST" [symbol(), klabel(field_PrankTest_IS_TEST)]
    
    syntax S2KPrankTestField ::= "_failed" [symbol(), klabel(field_PrankTest__failed)]
    
    syntax S2KPrankTestField ::= "stdChainsInitialized" [symbol(), klabel(field_PrankTest_stdChainsInitialized)]
    
    syntax S2KPrankTestField ::= "chains" [symbol(), klabel(field_PrankTest_chains)]
    
    syntax S2KPrankTestField ::= "defaultRpcUrls" [symbol(), klabel(field_PrankTest_defaultRpcUrls)]
    
    syntax S2KPrankTestField ::= "idToAlias" [symbol(), klabel(field_PrankTest_idToAlias)]
    
    syntax S2KPrankTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_PrankTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KPrankTestField ::= "gasMeteringOff" [symbol(), klabel(field_PrankTest_gasMeteringOff)]
    
    syntax S2KPrankTestField ::= "_excludedContracts" [symbol(), klabel(field_PrankTest__excludedContracts)]
    
    syntax S2KPrankTestField ::= "_excludedSenders" [symbol(), klabel(field_PrankTest__excludedSenders)]
    
    syntax S2KPrankTestField ::= "_targetedContracts" [symbol(), klabel(field_PrankTest__targetedContracts)]
    
    syntax S2KPrankTestField ::= "_targetedSenders" [symbol(), klabel(field_PrankTest__targetedSenders)]
    
    syntax S2KPrankTestField ::= "_excludedArtifacts" [symbol(), klabel(field_PrankTest__excludedArtifacts)]
    
    syntax S2KPrankTestField ::= "_targetedArtifacts" [symbol(), klabel(field_PrankTest__targetedArtifacts)]
    
    syntax S2KPrankTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_PrankTest__targetedArtifactSelectors)]
    
    syntax S2KPrankTestField ::= "_targetedSelectors" [symbol(), klabel(field_PrankTest__targetedSelectors)]
    
    syntax S2KPrankTestField ::= "prankContract" [symbol(), klabel(field_PrankTest_prankContract)]
    
    rule  ( #loc ( S2KPrankTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KPrankTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KPrankTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KPrankTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KPrankTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KPrankTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KPrankTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KPrankTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KPrankTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KPrankTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KPrankTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KPrankTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KPrankTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KPrankTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KPrankTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KPrankTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KPrankTest . prankContract ) => 27 )
      
    
    syntax Bytes ::= S2KPrankTestContract "." S2KPrankTestMethod [function(), symbol(), klabel(method_PrankTest)]
    
    syntax S2KPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PrankTest_S2KISZUndTEST_)]
    
    syntax S2KPrankTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_PrankTest_S2KexcludeArtifacts_)]
    
    syntax S2KPrankTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_PrankTest_S2KexcludeContracts_)]
    
    syntax S2KPrankTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_PrankTest_S2KexcludeSenders_)]
    
    syntax S2KPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PrankTest_S2Kfailed_)]
    
    syntax S2KPrankTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_PrankTest_S2KsetUp_)]
    
    syntax S2KPrankTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_PrankTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KPrankTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_PrankTest_S2KtargetArtifacts_)]
    
    syntax S2KPrankTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_PrankTest_S2KtargetContracts_)]
    
    syntax S2KPrankTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_PrankTest_S2KtargetSelectors_)]
    
    syntax S2KPrankTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_PrankTest_S2KtargetSenders_)]
    
    syntax S2KPrankTestMethod ::= "S2KtestAddAsOwner" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestAddAsOwner_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestAddStartPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestAddStartPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestFailAddPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestFailAddPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractAsTxOrigin" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractAsTxOrigin_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractFail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractFail_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractStartPrank" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractStartPrank_uint256_uint256)]
    
    rule  ( S2KPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtestAddAsOwner ( V0_x : uint256 ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestAddStartPrank ( V0_x : uint256 ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestFailAddPrank ( V0_x : uint256 ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestSubtractAsTxOrigin ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KPrankTest . S2KtestSubtractFail ( V0_x : uint256 ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestSubtractStartPrank ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAddAsOwner(uint256)" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank(uint256)" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank(uint256)" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin(uint256,uint256)" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail(uint256)" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank(uint256,uint256)" ) => 262874110 )
      

endmodule

module S2KPreconditionsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPreconditionsTestContract
    
    syntax S2KPreconditionsTestContract ::= "S2KPreconditionsTest" [symbol(), klabel(contract_PreconditionsTest)]
    
      
    
    rule  ( #initBytecode ( S2KPreconditionsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610d7d8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063d6a2ec7611610066578063d6a2ec761461015e578063e20c9f711461019d578063ea281abd146101a5578063fa7626d4146101ad57600080fd5b8063916a17c614610136578063b5508aa91461013e578063ba414fa61461014657600080fd5b80630a9254e4146100d45780631ed7831c146100de5780633e5e3c23146100fc5780633f7286f41461010457806366d9a9a01461010c57806385226c8114610121575b600080fd5b6100dc6101ba565b005b6100e661028a565b6040516100f39190610af1565b60405180910390f35b6100e66102ec565b6100e661034c565b6101146103ac565b6040516100f39190610b3e565b61012961049b565b6040516100f39190610c1d565b61011461056b565b610129610651565b61014e610721565b60405190151581526020016100f3565b6101857f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100f3565b6100e661084e565b6100dc6108ae565b60075461014e9060ff1681565b6040516316f02cd760e11b8152306004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae90602401600060405180830381600087803b15801561020657600080fd5b505af115801561021a573d6000803e3d6000fd5b5050601b54604051632631f2b160e11b8152600a919091116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e562915060240160006040518083038186803b15801561027057600080fd5b505afa158015610284573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c4575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104925760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561047a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161043c5790505b505050505081525050815260200190600101906103d0565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104925783829060005260206000200180546104de90610c97565b80601f016020809104026020016040519081016040528092919081815260200182805461050a90610c97565b80156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b5050505050815260200190600101906104bf565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104925760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561063957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105fb5790505b5050505050815250508152602001906001019061058f565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561049257838290600052602060002001805461069490610c97565b80601f01602080910402602001604051908101604052809291908181526020018280546106c090610c97565b801561070d5780601f106106e25761010080835404028352916020019161070d565b820191906000526020600020905b8154815290600101906020018083116106f057829003601f168201915b505050505081526020019060010190610675565b600754600090610100900460ff16156107435750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108495760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107d1917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610cd1565b60408051601f19818403018152908290526107eb91610d02565b6000604051808303816000865af19150503d8060008114610828576040519150601f19603f3d011682016040523d82523d6000602084013e61082d565b606091505b50915050808060200190518101906108459190610d1e565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b6108bb601b54600a6108bd565b565b8082106109e1577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161092d9060208082526021908201527f4572726f723a2061203c2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1604080518181526009818301526810102b30b63ab2903160b91b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16109e16109e5565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ae05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610a7f9291602001610cd1565b60408051601f1981840301815290829052610a9991610d02565b6000604051808303816000865af19150503d8060008114610ad6576040519150601f19603f3d011682016040523d82523d6000602084013e610adb565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610b325783516001600160a01b031683529284019291840191600101610b0d565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610be257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610bcd5783516001600160e01b0319168252928b019260019290920191908b0190610ba3565b50978a01979550505091870191600101610b66565b50919998505050505050505050565b60005b83811015610c0c578181015183820152602001610bf4565b838111156102845750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c8a57878503603f1901845281518051808752610c6b818989018a8501610bf1565b601f01601f191695909501860194509285019290850190600101610c44565b5092979650505050505050565b600181811c90821680610cab57607f821691505b602082108103610ccb57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610cf4816004850160208701610bf1565b919091016004019392505050565b60008251610d14818460208701610bf1565b9190910192915050565b600060208284031215610d3057600080fd5b81518015158114610d4057600080fd5b939250505056fea26469706673582212206bde3fd66069eb3fdeeb829575746004cac16d06edb5160e450bae7e1344b1c464736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KPreconditionsTestField
    
    syntax S2KPreconditionsTestField ::= "stdstore" [symbol(), klabel(field_PreconditionsTest_stdstore)]
    
    syntax S2KPreconditionsTestField ::= "IS_TEST" [symbol(), klabel(field_PreconditionsTest_IS_TEST)]
    
    syntax S2KPreconditionsTestField ::= "_failed" [symbol(), klabel(field_PreconditionsTest__failed)]
    
    syntax S2KPreconditionsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_PreconditionsTest_stdChainsInitialized)]
    
    syntax S2KPreconditionsTestField ::= "chains" [symbol(), klabel(field_PreconditionsTest_chains)]
    
    syntax S2KPreconditionsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_PreconditionsTest_defaultRpcUrls)]
    
    syntax S2KPreconditionsTestField ::= "idToAlias" [symbol(), klabel(field_PreconditionsTest_idToAlias)]
    
    syntax S2KPreconditionsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_PreconditionsTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KPreconditionsTestField ::= "gasMeteringOff" [symbol(), klabel(field_PreconditionsTest_gasMeteringOff)]
    
    syntax S2KPreconditionsTestField ::= "_excludedContracts" [symbol(), klabel(field_PreconditionsTest__excludedContracts)]
    
    syntax S2KPreconditionsTestField ::= "_excludedSenders" [symbol(), klabel(field_PreconditionsTest__excludedSenders)]
    
    syntax S2KPreconditionsTestField ::= "_targetedContracts" [symbol(), klabel(field_PreconditionsTest__targetedContracts)]
    
    syntax S2KPreconditionsTestField ::= "_targetedSenders" [symbol(), klabel(field_PreconditionsTest__targetedSenders)]
    
    syntax S2KPreconditionsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_PreconditionsTest__excludedArtifacts)]
    
    syntax S2KPreconditionsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_PreconditionsTest__targetedArtifacts)]
    
    syntax S2KPreconditionsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_PreconditionsTest__targetedArtifactSelectors)]
    
    syntax S2KPreconditionsTestField ::= "_targetedSelectors" [symbol(), klabel(field_PreconditionsTest__targetedSelectors)]
    
    syntax S2KPreconditionsTestField ::= "n" [symbol(), klabel(field_PreconditionsTest_n)]
    
    rule  ( #loc ( S2KPreconditionsTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . n ) => 27 )
      
    
    syntax Bytes ::= S2KPreconditionsTestContract "." S2KPreconditionsTestMethod [function(), symbol(), klabel(method_PreconditionsTest)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KISZUndTEST_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KexcludeArtifacts_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KexcludeContracts_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KexcludeSenders_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kfailed_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kkevm_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KsetUp_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtargetArtifacts_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtargetContracts_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtargetSelectors_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtargetSenders_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtestAssume" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtestAssume_)]
    
    rule  ( S2KPreconditionsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtestAssume ( ) => #abiCallData ( "testAssume" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAssume()" ) => 3928496829 )
      

endmodule

module S2KRecordLogsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KRecordLogsTestContract
    
    syntax S2KRecordLogsTestContract ::= "S2KRecordLogsTest" [symbol(), klabel(contract_RecordLogsTest)]
    
      
    
    rule  ( #initBytecode ( S2KRecordLogsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061134d8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063916a17c611610071578063916a17c61461011b578063b5508aa914610123578063ba414fa61461012b578063d7f8995814610143578063e20c9f711461014b578063fa7626d41461015357600080fd5b80630a9254e4146100b95780631ed7831c146100c35780633e5e3c23146100e15780633f7286f4146100e957806366d9a9a0146100f157806385226c8114610106575b600080fd5b6100c1610160565b005b6100cb610227565b6040516100d89190610cdd565b60405180910390f35b6100cb610289565b6100cb6102e9565b6100f9610349565b6040516100d89190610d2a565b61010e610438565b6040516100d89190610e09565b6100f9610508565b61010e6105ee565b6101336106be565b60405190151581526020016100d8565b6100c16107eb565b6100cb610990565b6007546101339060ff1681565b60405161016c90610cd1565b604051809103906000f080158015610188573d6000803e3d6000fd5b50601b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561020d57600080fd5b505af1158015610221573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561027f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610261575b5050505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561027f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610261575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561027f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610261575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561042f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561041757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103d95790505b5050505050815250508152602001906001019061036d565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042f57838290600052602060002001805461047b90610e83565b80601f01602080910402602001604051908101604052809291908181526020018280546104a790610e83565b80156104f45780601f106104c9576101008083540402835291602001916104f4565b820191906000526020600020905b8154815290600101906020018083116104d757829003601f168201915b50505050508152602001906001019061045c565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561042f5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105d657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105985790505b5050505050815250508152602001906001019061052c565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042f57838290600052602060002001805461063190610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461065d90610e83565b80156106aa5780601f1061067f576101008083540402835291602001916106aa565b820191906000526020600020905b81548152906001019060200180831161068d57829003601f168201915b505050505081526020019060010190610612565b600754600090610100900460ff16156106e05750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107e65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161076e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ebd565b60408051601f198184030181529082905261078891610eee565b6000604051808303816000865af19150503d80600081146107c5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ca565b606091505b50915050808060200190518101906107e29190610f0a565b9150505b919050565b601b60009054906101000a90046001600160a01b03166001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156108b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e0919081019061104a565b90506108ee815160016109f0565b61095081600081518110610904576109046111c2565b602002602001015160000151600081518110610922576109226111c2565b60200260200101517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610ae3565b61098d81600081518110610966576109666111c2565b60200260200101516020015180602001905181019061098591906111d8565b6105396109f0565b50565b6060601380548060200260200160405190810160405280929190818152602001828054801561027f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610261575050505050905090565b808214610adf577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a619060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610a9891906111f1565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610acf9190611229565b60405180910390a1610adf610bc5565b5050565b808214610adf577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b579060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9982604051610b8e91906111f1565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9981604051610acf9190611229565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610cc05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610c5f9291602001610ebd565b60408051601f1981840301815290829052610c7991610eee565b6000604051808303816000865af19150503d8060008114610cb6576040519150601f19603f3d011682016040523d82523d6000602084013e610cbb565b606091505b505050505b6007805461ff001916610100179055565b60c48061125483390190565b6020808252825182820181905260009190848201906040850190845b81811015610d1e5783516001600160a01b031683529284019291840191600101610cf9565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610dce57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610db95783516001600160e01b0319168252928b019260019290920191908b0190610d8f565b50978a01979550505091870191600101610d52565b50919998505050505050505050565b60005b83811015610df8578181015183820152602001610de0565b838111156102215750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e7657878503603f1901845281518051808752610e57818989018a8501610ddd565b601f01601f191695909501860194509285019290850190600101610e30565b5092979650505050505050565b600181811c90821680610e9757607f821691505b602082108103610eb757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610ee0816004850160208701610ddd565b919091016004019392505050565b60008251610f00818460208701610ddd565b9190910192915050565b600060208284031215610f1c57600080fd5b81518015158114610f2c57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610f6c57610f6c610f33565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f9b57610f9b610f33565b604052919050565b600067ffffffffffffffff821115610fbd57610fbd610f33565b5060051b60200190565b600082601f830112610fd857600080fd5b815167ffffffffffffffff811115610ff257610ff2610f33565b611005601f8201601f1916602001610f72565b81815284602083860101111561101a57600080fd5b61102b826020830160208701610ddd565b949350505050565b80516001600160a01b03811681146107e657600080fd5b6000602080838503121561105d57600080fd5b825167ffffffffffffffff8082111561107557600080fd5b818501915085601f83011261108957600080fd5b815161109c61109782610fa3565b610f72565b81815260059190911b830184019084810190888311156110bb57600080fd5b8585015b838110156111b5578051858111156110d657600080fd5b86016060818c03601f190112156110ed5760008081fd5b6110f5610f49565b88820151878111156111075760008081fd5b8201603f81018d136111195760008081fd5b8981015161112961109782610fa3565b81815260059190911b82018b018b01908b8101908f83111561114b5760008081fd5b6040840193505b8284101561116b5783518252928c0192908c0190611152565b8452505050604082810151888111156111845760008081fd5b6111928e8c83870101610fc7565b8b840152506111a360608401611033565b908201528452509186019186016110bf565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156111ea57600080fd5b5051919050565b60408152600061121b60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600061121b60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a2646970667358221220983d864d226fecc239edc85b19a20d547b9868becf395a81b395d13c5995327264736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KRecordLogsTestField
    
    syntax S2KRecordLogsTestField ::= "stdstore" [symbol(), klabel(field_RecordLogsTest_stdstore)]
    
    syntax S2KRecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_RecordLogsTest_IS_TEST)]
    
    syntax S2KRecordLogsTestField ::= "_failed" [symbol(), klabel(field_RecordLogsTest__failed)]
    
    syntax S2KRecordLogsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_RecordLogsTest_stdChainsInitialized)]
    
    syntax S2KRecordLogsTestField ::= "chains" [symbol(), klabel(field_RecordLogsTest_chains)]
    
    syntax S2KRecordLogsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_RecordLogsTest_defaultRpcUrls)]
    
    syntax S2KRecordLogsTestField ::= "idToAlias" [symbol(), klabel(field_RecordLogsTest_idToAlias)]
    
    syntax S2KRecordLogsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_RecordLogsTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KRecordLogsTestField ::= "gasMeteringOff" [symbol(), klabel(field_RecordLogsTest_gasMeteringOff)]
    
    syntax S2KRecordLogsTestField ::= "_excludedContracts" [symbol(), klabel(field_RecordLogsTest__excludedContracts)]
    
    syntax S2KRecordLogsTestField ::= "_excludedSenders" [symbol(), klabel(field_RecordLogsTest__excludedSenders)]
    
    syntax S2KRecordLogsTestField ::= "_targetedContracts" [symbol(), klabel(field_RecordLogsTest__targetedContracts)]
    
    syntax S2KRecordLogsTestField ::= "_targetedSenders" [symbol(), klabel(field_RecordLogsTest__targetedSenders)]
    
    syntax S2KRecordLogsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_RecordLogsTest__excludedArtifacts)]
    
    syntax S2KRecordLogsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_RecordLogsTest__targetedArtifacts)]
    
    syntax S2KRecordLogsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_RecordLogsTest__targetedArtifactSelectors)]
    
    syntax S2KRecordLogsTestField ::= "_targetedSelectors" [symbol(), klabel(field_RecordLogsTest__targetedSelectors)]
    
    syntax S2KRecordLogsTestField ::= "emitter" [symbol(), klabel(field_RecordLogsTest_emitter)]
    
    rule  ( #loc ( S2KRecordLogsTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . emitter ) => 27 )
      
    
    syntax Bytes ::= S2KRecordLogsTestContract "." S2KRecordLogsTestMethod [function(), symbol(), klabel(method_RecordLogsTest)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KISZUndTEST_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KexcludeArtifacts_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KexcludeContracts_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KexcludeSenders_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2Kfailed_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KsetUp_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtargetArtifacts_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtargetContracts_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtargetSelectors_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtargetSenders_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtestRecordLogs" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtestRecordLogs_)]
    
    rule  ( S2KRecordLogsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtestRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testRecordLogs()" ) => 3623393624 )
      

endmodule

module S2KSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeContract
    
    syntax S2KSafeContract ::= "S2KSafe" [symbol(), klabel(contract_Safe)]
    
      
    
    rule  ( #initBytecode ( S2KSafe ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KSafeContract "." S2KSafeMethod [function(), symbol(), klabel(method_Safe)]
    
    syntax S2KSafeMethod ::= "S2Kwithdraw" "(" ")" [symbol(), klabel(method_Safe_S2Kwithdraw_)]
    
    rule  ( S2KSafe . S2Kwithdraw ( ) => #abiCallData ( "withdraw" , .TypedArgs ) )
      
    
    rule  ( selector ( "withdraw()" ) => 1020253707 )
      

endmodule

module S2KSafeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeTestContract
    
    syntax S2KSafeTestContract ::= "S2KSafeTest" [symbol(), klabel(contract_SafeTest)]
    
      
    
    rule  ( #initBytecode ( S2KSafeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506110718061003d6000396000f3fe6080604052600436106100c65760003560e01c8063916a17c61161007f578063d0da5a0a11610059578063d0da5a0a146101d1578063d509b16c146101f1578063e20c9f7114610206578063fa7626d41461021b57600080fd5b8063916a17c614610182578063b5508aa914610197578063ba414fa6146101ac57600080fd5b80630a9254e4146100d25780631ed7831c146100e95780633e5e3c23146101145780633f7286f41461012957806366d9a9a01461013e57806385226c811461016057600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100e7610235565b005b3480156100f557600080fd5b506100fe610280565b60405161010b9190610cd1565b60405180910390f35b34801561012057600080fd5b506100fe6102e2565b34801561013557600080fd5b506100fe610342565b34801561014a57600080fd5b506101536103a2565b60405161010b9190610d1e565b34801561016c57600080fd5b50610175610491565b60405161010b9190610e01565b34801561018e57600080fd5b50610153610561565b3480156101a357600080fd5b50610175610647565b3480156101b857600080fd5b506101c1610717565b604051901515815260200161010b565b3480156101dd57600080fd5b506100e76101ec366004610e7b565b610844565b3480156101fd57600080fd5b506100e761097f565b34801561021257600080fd5b506100fe610a37565b34801561022757600080fd5b506007546101c19060ff1681565b60405161024190610cc5565b604051809103906000f08015801561025d573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b606060148054806020026020016040519081016040528092919081815260200182805480156102d857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102ba575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102d8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102ba575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102d8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102ba575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104885760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561047057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104325790505b505050505081525050815260200190600101906103c6565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104885783829060005260206000200180546104d490610eab565b80601f016020809104026020016040519081016040528092919081815260200182805461050090610eab565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050815260200190600101906104b5565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104885760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561062f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105f15790505b50505050508152505081526020019060010190610585565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561048857838290600052602060002001805461068a90610eab565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690610eab565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b50505050508152602001906001019061066b565b600754600090610100900460ff16156107395750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561083f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107c7917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ee5565b60408051601f19818403018152908290526107e191610f16565b6000604051808303816000865af19150503d806000811461081e576040519150601f19603f3d011682016040523d82523d6000602084013e610823565b606091505b509150508080602001905181019061083b9190610f32565b9150505b919050565b604051632631f2b160e11b815267016345785d8a00006001600160601b038316116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b5050601b546040516001600160a01b0390911692506001600160601b03841680156108fc029250906000818181858888f193505050501580156108fc573d6000803e3d6000fd5b50601b5460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b5047925061097a915061097490506001600160601b03851684610f54565b82610a97565b505050565b601b546040516001600160a01b0390911690600090670de0b6b3a76400009082818181858883f193505050501580156109bc573d6000803e3d6000fd5b50601b5460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b158015610a0257600080fd5b505af1158015610a16573d6000803e3d6000fd5b50479250610a339150610974905083670de0b6b3a7640000610f54565b5050565b606060138054806020026020016040519081016040528092919081815260200182805480156102d8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102ba575050505050905090565b808214610a33577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b089060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a33737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610cb45760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610c539291602001610ee5565b60408051601f1981840301815290829052610c6d91610f16565b6000604051808303816000865af19150503d8060008114610caa576040519150601f19603f3d011682016040523d82523d6000602084013e610caf565b606091505b505050505b6007805461ff001916610100179055565b60c180610f7b83390190565b6020808252825182820181905260009190848201906040850190845b81811015610d125783516001600160a01b031683529284019291840191600101610ced565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610dc257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610dad5783516001600160e01b0319168252928b019260019290920191908b0190610d83565b50978a01979550505091870191600101610d46565b50919998505050505050505050565b60005b83811015610dec578181015183820152602001610dd4565b83811115610dfb576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e6e57878503603f1901845281518051808752610e4f818989018a8501610dd1565b601f01601f191695909501860194509285019290850190600101610e28565b5092979650505050505050565b600060208284031215610e8d57600080fd5b81356001600160601b0381168114610ea457600080fd5b9392505050565b600181811c90821680610ebf57607f821691505b602082108103610edf57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610f08816004850160208701610dd1565b919091016004019392505050565b60008251610f28818460208701610dd1565b9190910192915050565b600060208284031215610f4457600080fd5b81518015158114610ea457600080fd5b60008219821115610f7557634e487b7160e01b600052601160045260246000fd5b50019056fe6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033a2646970667358221220ba2b6afd2fa4ffdaa9bb43f934728d15cbd480192ca807cc4e6d0a6aebee1a0c64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSafeTestField
    
    syntax S2KSafeTestField ::= "stdstore" [symbol(), klabel(field_SafeTest_stdstore)]
    
    syntax S2KSafeTestField ::= "IS_TEST" [symbol(), klabel(field_SafeTest_IS_TEST)]
    
    syntax S2KSafeTestField ::= "_failed" [symbol(), klabel(field_SafeTest__failed)]
    
    syntax S2KSafeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_SafeTest_stdChainsInitialized)]
    
    syntax S2KSafeTestField ::= "chains" [symbol(), klabel(field_SafeTest_chains)]
    
    syntax S2KSafeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_SafeTest_defaultRpcUrls)]
    
    syntax S2KSafeTestField ::= "idToAlias" [symbol(), klabel(field_SafeTest_idToAlias)]
    
    syntax S2KSafeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_SafeTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KSafeTestField ::= "gasMeteringOff" [symbol(), klabel(field_SafeTest_gasMeteringOff)]
    
    syntax S2KSafeTestField ::= "_excludedContracts" [symbol(), klabel(field_SafeTest__excludedContracts)]
    
    syntax S2KSafeTestField ::= "_excludedSenders" [symbol(), klabel(field_SafeTest__excludedSenders)]
    
    syntax S2KSafeTestField ::= "_targetedContracts" [symbol(), klabel(field_SafeTest__targetedContracts)]
    
    syntax S2KSafeTestField ::= "_targetedSenders" [symbol(), klabel(field_SafeTest__targetedSenders)]
    
    syntax S2KSafeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_SafeTest__excludedArtifacts)]
    
    syntax S2KSafeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_SafeTest__targetedArtifacts)]
    
    syntax S2KSafeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_SafeTest__targetedArtifactSelectors)]
    
    syntax S2KSafeTestField ::= "_targetedSelectors" [symbol(), klabel(field_SafeTest__targetedSelectors)]
    
    syntax S2KSafeTestField ::= "safe" [symbol(), klabel(field_SafeTest_safe)]
    
    rule  ( #loc ( S2KSafeTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSafeTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSafeTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSafeTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSafeTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSafeTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSafeTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSafeTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSafeTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSafeTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSafeTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSafeTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSafeTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSafeTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSafeTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSafeTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KSafeTest . safe ) => 27 )
      
    
    syntax Bytes ::= S2KSafeTestContract "." S2KSafeTestMethod [function(), symbol(), klabel(method_SafeTest)]
    
    syntax S2KSafeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SafeTest_S2KISZUndTEST_)]
    
    syntax S2KSafeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_SafeTest_S2KexcludeArtifacts_)]
    
    syntax S2KSafeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_SafeTest_S2KexcludeContracts_)]
    
    syntax S2KSafeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_SafeTest_S2KexcludeSenders_)]
    
    syntax S2KSafeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SafeTest_S2Kfailed_)]
    
    syntax S2KSafeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SafeTest_S2KsetUp_)]
    
    syntax S2KSafeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_SafeTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KSafeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_SafeTest_S2KtargetArtifacts_)]
    
    syntax S2KSafeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_SafeTest_S2KtargetContracts_)]
    
    syntax S2KSafeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_SafeTest_S2KtargetSelectors_)]
    
    syntax S2KSafeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_SafeTest_S2KtargetSenders_)]
    
    syntax S2KSafeTestMethod ::= "S2KtestWithdraw" "(" ")" [symbol(), klabel(method_SafeTest_S2KtestWithdraw_)]
    
    syntax S2KSafeTestMethod ::= "S2KtestWithdrawFuzz" "(" Int ":" "uint96" ")" [symbol(), klabel(method_SafeTest_S2KtestWithdrawFuzz_uint96)]
    
    rule  ( S2KSafeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtestWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtestWithdrawFuzz ( V0_amount : uint96 ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testWithdraw()" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz(uint96)" ) => 3503970826 )
      

endmodule

module S2KSetup2Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetup2TestContract
    
    syntax S2KSetup2TestContract ::= "S2KSetup2Test" [symbol(), klabel(contract_Setup2Test)]
    
      
    
    rule  ( #initBytecode ( S2KSetup2Test ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cf08061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015a578063d0b346e614610172578063e20c9f711461017a578063fa7626d41461018257600080fd5b806385226c8114610135578063916a17c61461014a578063b5508aa91461015257600080fd5b80630a9254e4146100d45780631ed7831c146100ea5780633e5e3c23146101085780633f7286f41461011057806366d9a9a01461011857806377493bf31461012d575b600080fd5b6100e86001601b556002601c556003601d55565b005b6100f261018f565b6040516100ff9190610a3a565b60405180910390f35b6100f26101f1565b6100f2610251565b6101206102b1565b6040516100ff9190610a87565b6100e86103a0565b61013d6103c9565b6040516100ff9190610b6a565b610120610499565b61013d61057f565b61016261064f565b60405190151581526020016100ff565b6100e861077c565b6100f26107a3565b6007546101629060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101c9575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101c9575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101c9575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103975760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561037f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103415790505b505050505081525050815260200190600101906102d5565b50505050905090565b6103c7601d54601c54601b546103b69190610be4565b6103c09190610be4565b6006610803565b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039757838290600052602060002001805461040c90610c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461043890610c0a565b80156104855780601f1061045a57610100808354040283529160200191610485565b820191906000526020600020905b81548152906001019060200180831161046857829003601f168201915b5050505050815260200190600101906103ed565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103975760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561056757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105295790505b505050505081525050815260200190600101906104bd565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103975783829060005260206000200180546105c290610c0a565b80601f01602080910402602001604051908101604052809291908181526020018280546105ee90610c0a565b801561063b5780601f106106105761010080835404028352916020019161063b565b820191906000526020600020905b81548152906001019060200180831161061e57829003601f168201915b5050505050815260200190600101906105a3565b600754600090610100900460ff16156106715750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107775760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916106ff917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c44565b60408051601f198184030181529082905261071991610c75565b6000604051808303816000865af19150503d8060008114610756576040519150601f19603f3d011682016040523d82523d6000602084013e61075b565b606091505b50915050808060200190518101906107739190610c91565b9150505b919050565b6103c7601d54601c54601b546107929190610be4565b61079c9190610be4565b6007610803565b606060138054806020026020016040519081016040528092919081815260200182805480156101e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101c9575050505050905090565b80821461092a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108749060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161092a61092e565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a295760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109c89291602001610c44565b60408051601f19818403018152908290526109e291610c75565b6000604051808303816000865af19150503d8060008114610a1f576040519150601f19603f3d011682016040523d82523d6000602084013e610a24565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610a7b5783516001600160a01b031683529284019291840191600101610a56565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b2b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b165783516001600160e01b0319168252928b019260019290920191908b0190610aec565b50978a01979550505091870191600101610aaf565b50919998505050505050505050565b60005b83811015610b55578181015183820152602001610b3d565b83811115610b64576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bd757878503603f1901845281518051808752610bb8818989018a8501610b3a565b601f01601f191695909501860194509285019290850190600101610b91565b5092979650505050505050565b60008219821115610c0557634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680610c1e57607f821691505b602082108103610c3e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c67816004850160208701610b3a565b919091016004019392505050565b60008251610c87818460208701610b3a565b9190910192915050565b600060208284031215610ca357600080fd5b81518015158114610cb357600080fd5b939250505056fea2646970667358221220c41f23d343c8784cb1e8ade2775b9058866b5480eb5cb5e4ca9bb93c97fe882264736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSetup2TestField
    
    syntax S2KSetup2TestField ::= "stdstore" [symbol(), klabel(field_Setup2Test_stdstore)]
    
    syntax S2KSetup2TestField ::= "IS_TEST" [symbol(), klabel(field_Setup2Test_IS_TEST)]
    
    syntax S2KSetup2TestField ::= "_failed" [symbol(), klabel(field_Setup2Test__failed)]
    
    syntax S2KSetup2TestField ::= "stdChainsInitialized" [symbol(), klabel(field_Setup2Test_stdChainsInitialized)]
    
    syntax S2KSetup2TestField ::= "chains" [symbol(), klabel(field_Setup2Test_chains)]
    
    syntax S2KSetup2TestField ::= "defaultRpcUrls" [symbol(), klabel(field_Setup2Test_defaultRpcUrls)]
    
    syntax S2KSetup2TestField ::= "idToAlias" [symbol(), klabel(field_Setup2Test_idToAlias)]
    
    syntax S2KSetup2TestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_Setup2Test_fallbackToDefaultRpcUrls)]
    
    syntax S2KSetup2TestField ::= "gasMeteringOff" [symbol(), klabel(field_Setup2Test_gasMeteringOff)]
    
    syntax S2KSetup2TestField ::= "_excludedContracts" [symbol(), klabel(field_Setup2Test__excludedContracts)]
    
    syntax S2KSetup2TestField ::= "_excludedSenders" [symbol(), klabel(field_Setup2Test__excludedSenders)]
    
    syntax S2KSetup2TestField ::= "_targetedContracts" [symbol(), klabel(field_Setup2Test__targetedContracts)]
    
    syntax S2KSetup2TestField ::= "_targetedSenders" [symbol(), klabel(field_Setup2Test__targetedSenders)]
    
    syntax S2KSetup2TestField ::= "_excludedArtifacts" [symbol(), klabel(field_Setup2Test__excludedArtifacts)]
    
    syntax S2KSetup2TestField ::= "_targetedArtifacts" [symbol(), klabel(field_Setup2Test__targetedArtifacts)]
    
    syntax S2KSetup2TestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_Setup2Test__targetedArtifactSelectors)]
    
    syntax S2KSetup2TestField ::= "_targetedSelectors" [symbol(), klabel(field_Setup2Test__targetedSelectors)]
    
    syntax S2KSetup2TestField ::= "a" [symbol(), klabel(field_Setup2Test_a)]
    
    syntax S2KSetup2TestField ::= "b" [symbol(), klabel(field_Setup2Test_b)]
    
    syntax S2KSetup2TestField ::= "c" [symbol(), klabel(field_Setup2Test_c)]
    
    rule  ( #loc ( S2KSetup2Test . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSetup2Test . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSetup2Test . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSetup2Test . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSetup2Test . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSetup2Test . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSetup2Test . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSetup2Test . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSetup2Test . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSetup2Test . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSetup2Test . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSetup2Test . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSetup2Test . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSetup2Test . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSetup2Test . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSetup2Test . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KSetup2Test . a ) => 27 )
      
    
    rule  ( #loc ( S2KSetup2Test . b ) => 28 )
      
    
    rule  ( #loc ( S2KSetup2Test . c ) => 29 )
      
    
    syntax Bytes ::= S2KSetup2TestContract "." S2KSetup2TestMethod [function(), symbol(), klabel(method_Setup2Test)]
    
    syntax S2KSetup2TestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Setup2Test_S2KISZUndTEST_)]
    
    syntax S2KSetup2TestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_Setup2Test_S2KexcludeArtifacts_)]
    
    syntax S2KSetup2TestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_Setup2Test_S2KexcludeContracts_)]
    
    syntax S2KSetup2TestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_Setup2Test_S2KexcludeSenders_)]
    
    syntax S2KSetup2TestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Setup2Test_S2Kfailed_)]
    
    syntax S2KSetup2TestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_Setup2Test_S2KsetUp_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtargetArtifactSelectors_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtargetArtifacts_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtargetContracts_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtargetSelectors_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtargetSenders_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtestFailZUndsetup" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtestFailZUndsetup_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtestZUndsetup" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtestZUndsetup_)]
    
    rule  ( S2KSetup2Test . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtestFailZUndsetup ( ) => #abiCallData ( "testFail_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtestZUndsetup ( ) => #abiCallData ( "test_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_setup()" ) => 3501410022 )
      
    
    rule  ( selector ( "test_setup()" ) => 2001288179 )
      

endmodule

module S2KSetUpDeployTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpDeployTestContract
    
    syntax S2KSetUpDeployTestContract ::= "S2KSetUpDeployTest" [symbol(), klabel(contract_SetUpDeployTest)]
    
      
    
    rule  ( #initBytecode ( S2KSetUpDeployTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610d2e8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461010e578063916a17c614610123578063b5508aa91461012b578063ba414fa614610133578063e20c9f711461014b578063fa7626d41461015357600080fd5b80630a9254e4146100b95780631ed7831c146100c35780633e5e3c23146100e15780633f7286f4146100e957806362c9eac5146100f157806366d9a9a0146100f9575b600080fd5b6100c1610160565b005b6100cb6101bd565b6040516100d8919061080e565b60405180910390f35b6100cb61021f565b6100cb61027f565b6100c16102df565b6101016102ff565b6040516100d8919061085b565b6101166103ee565b6040516100d8919061093e565b6101016104be565b6101166105a4565b61013b610674565b60405190151581526020016100d8565b6100cb6107a1565b60075461013b9060ff1681565b600060405161016e90610801565b6001600160a01b039091168152602001604051809103906000f08015801561019a573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561021557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f7575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610215576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f7575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610215576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f7575050505050905090565b601b546001600160a01b0316803b90816102fb576102fb6109b8565b5050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103e55760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156103cd57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161038f5790505b50505050508152505081526020019060010190610323565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103e5578382906000526020600020018054610431906109ce565b80601f016020809104026020016040519081016040528092919081815260200182805461045d906109ce565b80156104aa5780601f1061047f576101008083540402835291602001916104aa565b820191906000526020600020905b81548152906001019060200180831161048d57829003601f168201915b505050505081526020019060010190610412565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103e55760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561058c57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161054e5790505b505050505081525050815260200190600101906104e2565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103e55783829060005260206000200180546105e7906109ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610613906109ce565b80156106605780601f1061063557610100808354040283529160200191610660565b820191906000526020600020905b81548152906001019060200180831161064357829003601f168201915b5050505050815260200190600101906105c8565b600754600090610100900460ff16156106965750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561079c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610724917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a08565b60408051601f198184030181529082905261073e91610a39565b6000604051808303816000865af19150503d806000811461077b576040519150601f19603f3d011682016040523d82523d6000602084013e610780565b606091505b50915050808060200190518101906107989190610a55565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610215576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f7575050505050905090565b61027a80610a7f83390190565b6020808252825182820181905260009190848201906040850190845b8181101561084f5783516001600160a01b03168352928401929184019160010161082a565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156108ff57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156108ea5783516001600160e01b0319168252928b019260019290920191908b01906108c0565b50978a01979550505091870191600101610883565b50919998505050505050505050565b60005b83811015610929578181015183820152602001610911565b83811115610938576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156109ab57878503603f190184528151805180875261098c818989018a850161090e565b601f01601f191695909501860194509285019290850190600101610965565b5092979650505050505050565b634e487b7160e01b600052600160045260246000fd5b600181811c908216806109e257607f821691505b602082108103610a0257634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610a2b81600485016020870161090e565b919091016004019392505050565b60008251610a4b81846020870161090e565b9190910192915050565b600060208284031215610a6757600080fd5b81518015158114610a7757600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a2646970667358221220570da89778c6d69329f03e6d895d9a3112d69a6e884094dd72953ab301a9686864736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSetUpDeployTestField
    
    syntax S2KSetUpDeployTestField ::= "stdstore" [symbol(), klabel(field_SetUpDeployTest_stdstore)]
    
    syntax S2KSetUpDeployTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpDeployTest_IS_TEST)]
    
    syntax S2KSetUpDeployTestField ::= "_failed" [symbol(), klabel(field_SetUpDeployTest__failed)]
    
    syntax S2KSetUpDeployTestField ::= "stdChainsInitialized" [symbol(), klabel(field_SetUpDeployTest_stdChainsInitialized)]
    
    syntax S2KSetUpDeployTestField ::= "chains" [symbol(), klabel(field_SetUpDeployTest_chains)]
    
    syntax S2KSetUpDeployTestField ::= "defaultRpcUrls" [symbol(), klabel(field_SetUpDeployTest_defaultRpcUrls)]
    
    syntax S2KSetUpDeployTestField ::= "idToAlias" [symbol(), klabel(field_SetUpDeployTest_idToAlias)]
    
    syntax S2KSetUpDeployTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_SetUpDeployTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KSetUpDeployTestField ::= "gasMeteringOff" [symbol(), klabel(field_SetUpDeployTest_gasMeteringOff)]
    
    syntax S2KSetUpDeployTestField ::= "_excludedContracts" [symbol(), klabel(field_SetUpDeployTest__excludedContracts)]
    
    syntax S2KSetUpDeployTestField ::= "_excludedSenders" [symbol(), klabel(field_SetUpDeployTest__excludedSenders)]
    
    syntax S2KSetUpDeployTestField ::= "_targetedContracts" [symbol(), klabel(field_SetUpDeployTest__targetedContracts)]
    
    syntax S2KSetUpDeployTestField ::= "_targetedSenders" [symbol(), klabel(field_SetUpDeployTest__targetedSenders)]
    
    syntax S2KSetUpDeployTestField ::= "_excludedArtifacts" [symbol(), klabel(field_SetUpDeployTest__excludedArtifacts)]
    
    syntax S2KSetUpDeployTestField ::= "_targetedArtifacts" [symbol(), klabel(field_SetUpDeployTest__targetedArtifacts)]
    
    syntax S2KSetUpDeployTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_SetUpDeployTest__targetedArtifactSelectors)]
    
    syntax S2KSetUpDeployTestField ::= "_targetedSelectors" [symbol(), klabel(field_SetUpDeployTest__targetedSelectors)]
    
    syntax S2KSetUpDeployTestField ::= "token" [symbol(), klabel(field_SetUpDeployTest_token)]
    
    rule  ( #loc ( S2KSetUpDeployTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . token ) => 27 )
      
    
    syntax Bytes ::= S2KSetUpDeployTestContract "." S2KSetUpDeployTestMethod [function(), symbol(), klabel(method_SetUpDeployTest)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KISZUndTEST_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KexcludeArtifacts_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KexcludeContracts_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KexcludeSenders_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2Kfailed_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KsetUp_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtargetArtifacts_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtargetContracts_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtargetSelectors_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtargetSenders_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtestZUndextcodesize" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtestZUndextcodesize_)]
    
    rule  ( S2KSetUpDeployTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtestZUndextcodesize ( ) => #abiCallData ( "test_extcodesize" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_extcodesize()" ) => 1657400005 )
      

endmodule

module S2KSetUpTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpTestContract
    
    syntax S2KSetUpTestContract ::= "S2KSetUpTest" [symbol(), klabel(contract_SetUpTest)]
    
      
    
    rule  ( #initBytecode ( S2KSetUpTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b805490911690911790556000601b5534801561003257600080fd5b506064601b55610cf9806100476000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063c6a19dd211610066578063c6a19dd21461015e578063e20c9f7114610171578063ec7fe47114610179578063fa7626d41461018157600080fd5b8063916a17c614610136578063b5508aa91461013e578063ba414fa61461014657600080fd5b80630a9254e4146100d45780631ed7831c146100de5780633e5e3c23146100fc5780633f7286f41461010457806366d9a9a01461010c57806385226c8114610121575b600080fd5b6100dc61018e565b005b6100e66101a5565b6040516100f39190610a29565b60405180910390f35b6100e6610207565b6100e6610267565b6101146102c7565b6040516100f39190610a76565b6101296103b6565b6040516100f39190610b59565b610114610486565b61012961056c565b61014e61063c565b60405190151581526020016100f3565b6100dc61016c366004610bd3565b610769565b6100e6610783565b6100dc6107e3565b60075461014e9060ff1681565b601b805490600061019e83610bec565b9190505550565b606060148054806020026020016040519081016040528092919081815260200182805480156101fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101df575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101fd576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101df575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101fd576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101df575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103ad5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561039557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103575790505b505050505081525050815260200190600101906102eb565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103ad5783829060005260206000200180546103f990610c13565b80601f016020809104026020016040519081016040528092919081815260200182805461042590610c13565b80156104725780601f1061044757610100808354040283529160200191610472565b820191906000526020600020905b81548152906001019060200180831161045557829003601f168201915b5050505050815260200190600101906103da565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103ad5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561055457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105165790505b505050505081525050815260200190600101906104aa565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103ad5783829060005260206000200180546105af90610c13565b80601f01602080910402602001604051908101604052809291908181526020018280546105db90610c13565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b505050505081526020019060010190610590565b600754600090610100900460ff161561065e5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107645760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916106ec917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c4d565b60408051601f198184030181529082905261070691610c7e565b6000604051808303816000865af19150503d8060008114610743576040519150601f19603f3d011682016040523d82523d6000602084013e610748565b606091505b50915050808060200190518101906107609190610c9a565b9150505b919050565b610776601b5460656107f2565b61078081826107f2565b50565b606060138054806020026020016040519081016040528092919081815260200182805480156101fd576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101df575050505050905090565b6107f0601b5460656107f2565b565b808214610919577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108639060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161091961091d565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a185760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109b79291602001610c4d565b60408051601f19818403018152908290526109d191610c7e565b6000604051808303816000865af19150503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610a6a5783516001600160a01b031683529284019291840191600101610a45565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b1a57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b055783516001600160e01b0319168252928b019260019290920191908b0190610adb565b50978a01979550505091870191600101610a9e565b50919998505050505050505050565b60005b83811015610b44578181015183820152602001610b2c565b83811115610b53576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc657878503603f1901845281518051808752610ba7818989018a8501610b29565b601f01601f191695909501860194509285019290850190600101610b80565b5092979650505050505050565b600060208284031215610be557600080fd5b5035919050565b600060018201610c0c57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610c2757607f821691505b602082108103610c4757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c70816004850160208701610b29565b919091016004019392505050565b60008251610c90818460208701610b29565b9190910192915050565b600060208284031215610cac57600080fd5b81518015158114610cbc57600080fd5b939250505056fea264697066735822122006c3389ef485bf4103b2e3751358117027005deddc37a176222338e99d7df57564736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSetUpTestField
    
    syntax S2KSetUpTestField ::= "stdstore" [symbol(), klabel(field_SetUpTest_stdstore)]
    
    syntax S2KSetUpTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpTest_IS_TEST)]
    
    syntax S2KSetUpTestField ::= "_failed" [symbol(), klabel(field_SetUpTest__failed)]
    
    syntax S2KSetUpTestField ::= "stdChainsInitialized" [symbol(), klabel(field_SetUpTest_stdChainsInitialized)]
    
    syntax S2KSetUpTestField ::= "chains" [symbol(), klabel(field_SetUpTest_chains)]
    
    syntax S2KSetUpTestField ::= "defaultRpcUrls" [symbol(), klabel(field_SetUpTest_defaultRpcUrls)]
    
    syntax S2KSetUpTestField ::= "idToAlias" [symbol(), klabel(field_SetUpTest_idToAlias)]
    
    syntax S2KSetUpTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_SetUpTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KSetUpTestField ::= "gasMeteringOff" [symbol(), klabel(field_SetUpTest_gasMeteringOff)]
    
    syntax S2KSetUpTestField ::= "_excludedContracts" [symbol(), klabel(field_SetUpTest__excludedContracts)]
    
    syntax S2KSetUpTestField ::= "_excludedSenders" [symbol(), klabel(field_SetUpTest__excludedSenders)]
    
    syntax S2KSetUpTestField ::= "_targetedContracts" [symbol(), klabel(field_SetUpTest__targetedContracts)]
    
    syntax S2KSetUpTestField ::= "_targetedSenders" [symbol(), klabel(field_SetUpTest__targetedSenders)]
    
    syntax S2KSetUpTestField ::= "_excludedArtifacts" [symbol(), klabel(field_SetUpTest__excludedArtifacts)]
    
    syntax S2KSetUpTestField ::= "_targetedArtifacts" [symbol(), klabel(field_SetUpTest__targetedArtifacts)]
    
    syntax S2KSetUpTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_SetUpTest__targetedArtifactSelectors)]
    
    syntax S2KSetUpTestField ::= "_targetedSelectors" [symbol(), klabel(field_SetUpTest__targetedSelectors)]
    
    syntax S2KSetUpTestField ::= "counter" [symbol(), klabel(field_SetUpTest_counter)]
    
    rule  ( #loc ( S2KSetUpTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSetUpTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSetUpTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSetUpTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSetUpTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSetUpTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSetUpTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSetUpTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSetUpTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSetUpTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSetUpTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSetUpTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSetUpTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSetUpTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSetUpTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSetUpTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KSetUpTest . counter ) => 27 )
      
    
    syntax Bytes ::= S2KSetUpTestContract "." S2KSetUpTestMethod [function(), symbol(), klabel(method_SetUpTest)]
    
    syntax S2KSetUpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SetUpTest_S2KISZUndTEST_)]
    
    syntax S2KSetUpTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_SetUpTest_S2KexcludeArtifacts_)]
    
    syntax S2KSetUpTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_SetUpTest_S2KexcludeContracts_)]
    
    syntax S2KSetUpTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_SetUpTest_S2KexcludeSenders_)]
    
    syntax S2KSetUpTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SetUpTest_S2Kfailed_)]
    
    syntax S2KSetUpTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SetUpTest_S2KsetUp_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtargetArtifacts_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtargetContracts_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtargetSelectors_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtargetSenders_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtestSetUpCalled" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtestSetUpCalled_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtestSetUpCalledSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SetUpTest_S2KtestSetUpCalledSymbolic_uint256)]
    
    rule  ( S2KSetUpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtestSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtestSetUpCalledSymbolic ( V0_x : uint256 ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testSetUpCalled()" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic(uint256)" ) => 3332480466 )
      

endmodule

module S2KSignTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSignTestContract
    
    syntax S2KSignTestContract ::= "S2KSignTest" [symbol(), klabel(contract_SignTest)]
    
      
    
    rule  ( #initBytecode ( S2KSignTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061111d8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063af5bc10d11610071578063af5bc10d14610119578063b5508aa91461012e578063ba414fa614610136578063e20c9f711461014e578063ed8f10df14610156578063fa7626d41461015e57600080fd5b80631ed7831c146100b95780633e5e3c23146100d75780633f7286f4146100df57806366d9a9a0146100e757806385226c81146100fc578063916a17c614610111575b600080fd5b6100c161016b565b6040516100ce9190610e0e565b60405180910390f35b6100c16101cd565b6100c161022d565b6100ef61028d565b6040516100ce9190610e5b565b61010461037c565b6040516100ce9190610f3e565b6100ef61044c565b61012c610127366004610fb8565b610532565b005b6101046107b1565b61013e610881565b60405190151581526020016100ce565b6100c16109ae565b61012c610a0e565b60075461013e9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101c357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a5575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101c3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a5575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101c3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a5575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103735760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561035b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161031d5790505b505050505081525050815260200190600101906102b1565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103735783829060005260206000200180546103bf90610fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb90610fd1565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b5050505050815260200190600101906103a0565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103735760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104dc5790505b50505050508152505081526020019060010190610470565b604051632631f2b160e11b81528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b5050604051632631f2b160e11b815270014551231950b75fc4402da1732fc9bebe1984106004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e562915060240160006040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b50506040516001625e79b760e01b031981526004810184905260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ffa1864990602401602060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610686919061100b565b6040516338d07aa960e21b8152600481018490527fcec7901caf5725c08993c6c23be407884cf770cbb2394af38ff5d00d0e11ad426024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa490604401606060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c919061103b565b925092509250600060018585858560405160008152602001604052604051610770949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610792573d6000803e3d6000fd5b5050506020604051035190506107a88682610bb2565b50505050505050565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103735783829060005260206000200180546107f490610fd1565b80601f016020809104026020016040519081016040528092919081815260200182805461082090610fd1565b801561086d5780601f106108425761010080835404028352916020019161086d565b820191906000526020600020905b81548152906001019060200180831161085057829003601f168201915b5050505050815260200190600101906107d5565b600754600090610100900460ff16156108a35750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109a95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610931917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611078565b60408051601f198184030181529082905261094b916110a9565b6000604051808303816000865af19150503d8060008114610988576040519150601f19603f3d011682016040523d82523d6000602084013e61098d565b606091505b50915050808060200190518101906109a591906110c5565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101c3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a5575050505050905090565b6040516001625e79b760e01b0319815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a88919061100b565b6040516338d07aa960e21b8152600160048201527f385967023fb9520b497ee37da9c1e3d5faac1385800ce4ed07ca32d7893c7bb56024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa490604401606060405180830381865afa158015610b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2e919061103b565b925092509250600060018585858560405160008152602001604052604051610b72949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610b94573d6000803e3d6000fd5b505050602060405103519050610baa8682610bb2565b505050505050565b806001600160a01b0316826001600160a01b031614610cfe577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c389060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a1610cfe610d02565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610dfd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d9c9291602001611078565b60408051601f1981840301815290829052610db6916110a9565b6000604051808303816000865af19150503d8060008114610df3576040519150601f19603f3d011682016040523d82523d6000602084013e610df8565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610e4f5783516001600160a01b031683529284019291840191600101610e2a565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610eff57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610eea5783516001600160e01b0319168252928b019260019290920191908b0190610ec0565b50978a01979550505091870191600101610e83565b50919998505050505050505050565b60005b83811015610f29578181015183820152602001610f11565b83811115610f38576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610fab57878503603f1901845281518051808752610f8c818989018a8501610f0e565b601f01601f191695909501860194509285019290850190600101610f65565b5092979650505050505050565b600060208284031215610fca57600080fd5b5035919050565b600181811c90821680610fe557607f821691505b60208210810361100557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561101d57600080fd5b81516001600160a01b038116811461103457600080fd5b9392505050565b60008060006060848603121561105057600080fd5b835160ff8116811461106157600080fd5b602085015160409095015190969495509392505050565b6001600160e01b031983168152815160009061109b816004850160208701610f0e565b919091016004019392505050565b600082516110bb818460208701610f0e565b9190910192915050565b6000602082840312156110d757600080fd5b8151801515811461103457600080fdfea26469706673582212206cc454224747da8823d46a4c9af8a2d7f1b39dd28a5031eb08c6227d518b914664736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSignTestField
    
    syntax S2KSignTestField ::= "stdstore" [symbol(), klabel(field_SignTest_stdstore)]
    
    syntax S2KSignTestField ::= "IS_TEST" [symbol(), klabel(field_SignTest_IS_TEST)]
    
    syntax S2KSignTestField ::= "_failed" [symbol(), klabel(field_SignTest__failed)]
    
    syntax S2KSignTestField ::= "stdChainsInitialized" [symbol(), klabel(field_SignTest_stdChainsInitialized)]
    
    syntax S2KSignTestField ::= "chains" [symbol(), klabel(field_SignTest_chains)]
    
    syntax S2KSignTestField ::= "defaultRpcUrls" [symbol(), klabel(field_SignTest_defaultRpcUrls)]
    
    syntax S2KSignTestField ::= "idToAlias" [symbol(), klabel(field_SignTest_idToAlias)]
    
    syntax S2KSignTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_SignTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KSignTestField ::= "gasMeteringOff" [symbol(), klabel(field_SignTest_gasMeteringOff)]
    
    syntax S2KSignTestField ::= "_excludedContracts" [symbol(), klabel(field_SignTest__excludedContracts)]
    
    syntax S2KSignTestField ::= "_excludedSenders" [symbol(), klabel(field_SignTest__excludedSenders)]
    
    syntax S2KSignTestField ::= "_targetedContracts" [symbol(), klabel(field_SignTest__targetedContracts)]
    
    syntax S2KSignTestField ::= "_targetedSenders" [symbol(), klabel(field_SignTest__targetedSenders)]
    
    syntax S2KSignTestField ::= "_excludedArtifacts" [symbol(), klabel(field_SignTest__excludedArtifacts)]
    
    syntax S2KSignTestField ::= "_targetedArtifacts" [symbol(), klabel(field_SignTest__targetedArtifacts)]
    
    syntax S2KSignTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_SignTest__targetedArtifactSelectors)]
    
    syntax S2KSignTestField ::= "_targetedSelectors" [symbol(), klabel(field_SignTest__targetedSelectors)]
    
    rule  ( #loc ( S2KSignTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSignTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSignTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSignTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSignTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSignTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSignTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSignTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSignTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSignTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSignTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSignTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSignTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSignTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSignTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSignTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KSignTestContract "." S2KSignTestMethod [function(), symbol(), klabel(method_SignTest)]
    
    syntax S2KSignTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SignTest_S2KISZUndTEST_)]
    
    syntax S2KSignTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_SignTest_S2KexcludeArtifacts_)]
    
    syntax S2KSignTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_SignTest_S2KexcludeContracts_)]
    
    syntax S2KSignTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_SignTest_S2KexcludeSenders_)]
    
    syntax S2KSignTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SignTest_S2Kfailed_)]
    
    syntax S2KSignTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_SignTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KSignTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_SignTest_S2KtargetArtifacts_)]
    
    syntax S2KSignTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_SignTest_S2KtargetContracts_)]
    
    syntax S2KSignTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_SignTest_S2KtargetSelectors_)]
    
    syntax S2KSignTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_SignTest_S2KtargetSenders_)]
    
    syntax S2KSignTestMethod ::= "S2KtestSign" "(" ")" [symbol(), klabel(method_SignTest_S2KtestSign_)]
    
    syntax S2KSignTestMethod ::= "S2KtestSignZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SignTest_S2KtestSignZUndsymbolic_uint256)]
    
    rule  ( S2KSignTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtestSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtestSignZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "testSign_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testSign()" ) => 3985576159 )
      
    
    rule  ( selector ( "testSign_symbolic(uint256)" ) => 2942025997 )
      

endmodule

module S2KAssertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssertTestContract
    
    syntax S2KAssertTestContract ::= "S2KAssertTest" [symbol(), klabel(contract_AssertTest)]
    
      
    
    rule  ( #initBytecode ( S2KAssertTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cb48061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637aa9ccae116100b8578063ba414fa61161007c578063ba414fa6146101dc578063c2c0bcc7146101f4578063d6a2ec7614610207578063e20c9f7114610246578063f3ad302314610187578063fa7626d41461024e57600080fd5b80637aa9ccae1461018757806385226c81146101a45780638c0edd8b146101b9578063916a17c6146101cc578063b5508aa9146101d457600080fd5b80633e5e3c23116100ff5780633e5e3c23146101645780633f7286f41461016c5780634622b155146101745780635ddecbfd1461018757806366d9a9a01461018f57600080fd5b80630a9254e41461013c57806318675d421461013c5780631ed7831c1461013e5780632a4de1a11461015c578063360da4d21461013c575b600080fd5b005b61014661025d565b60405161015391906109b2565b60405180910390f35b61013c6102bf565b610146610388565b6101466103e8565b61013c6101823660046109ff565b610448565b61013c61045c565b610197610464565b6040516101539190610a18565b6101ac610553565b6040516101539190610af7565b61013c6101c7366004610b71565b610623565b61019761063b565b6101ac610721565b6101e46107f1565b6040519015158152602001610153565b61013c6102023660046109ff565b61091e565b61022e7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610153565b610146610952565b6007546101e49060ff1681565b565b606060148054806020026020016040519081016040528092919081815260200182805480156102b557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610297575b5050505050905090565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b50505050306001600160a01b031663f3ad30236040518163ffffffff1660e01b815260040160006040518083038186803b15801561036e57600080fd5b505afa158015610382573d6000803e3d6000fd5b50505050565b606060168054806020026020016040519081016040528092919081815260200182805480156102b5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610297575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102b5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610297575050505050905090565b606481101561045957610459610b93565b50565b61025b610b93565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561054a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104f45790505b50505050508152505081526020019060010190610488565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561054a57838290600052602060002001805461059690610ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290610ba9565b801561060f5780601f106105e45761010080835404028352916020019161060f565b820191906000526020600020905b8154815290600101906020018083116105f257829003601f168201915b505050505081526020019060010190610577565b8082101561062f575050565b610637610b93565b5050565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561054a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561070957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106cb5790505b5050505050815250508152602001906001019061065f565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561054a57838290600052602060002001805461076490610ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461079090610ba9565b80156107dd5780601f106107b2576101008083540402835291602001916107dd565b820191906000526020600020905b8154815290600101906020018083116107c057829003601f168201915b505050505081526020019060010190610745565b600754600090610100900460ff16156108135750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109195760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108a1917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610be3565b60408051601f19818403018152908290526108bb91610c14565b6000604051808303816000865af19150503d80600081146108f8576040519150601f19603f3d011682016040523d82523d6000602084013e6108fd565b606091505b50915050808060200190518101906109159190610c30565b9150505b919050565b600381101561093157601b819055610940565b61093c600182610c59565b601b555b80601b54111561045957610459610b93565b606060138054806020026020016040519081016040528092919081815260200182805480156102b5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610297575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109f35783516001600160a01b0316835292840192918401916001016109ce565b50909695505050505050565b600060208284031215610a1157600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610abc57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610aa75783516001600160e01b0319168252928b019260019290920191908b0190610a7d565b50978a01979550505091870191600101610a40565b50919998505050505050505050565b60005b83811015610ae6578181015183820152602001610ace565b838111156103825750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b6457878503603f1901845281518051808752610b45818989018a8501610acb565b601f01601f191695909501860194509285019290850190600101610b1e565b5092979650505050505050565b60008060408385031215610b8457600080fd5b50508035926020909101359150565b634e487b7160e01b600052600160045260246000fd5b600181811c90821680610bbd57607f821691505b602082108103610bdd57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c06816004850160208701610acb565b919091016004019392505050565b60008251610c26818460208701610acb565b9190910192915050565b600060208284031215610c4257600080fd5b81518015158114610c5257600080fd5b9392505050565b600082821015610c7957634e487b7160e01b600052601160045260246000fd5b50039056fea264697066735822122042e2c2a1779fd000db8ea65d56ebe531f6537e7da0518f3f2ce67d721f57060164736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KAssertTestField
    
    syntax S2KAssertTestField ::= "stdstore" [symbol(), klabel(field_AssertTest_stdstore)]
    
    syntax S2KAssertTestField ::= "IS_TEST" [symbol(), klabel(field_AssertTest_IS_TEST)]
    
    syntax S2KAssertTestField ::= "_failed" [symbol(), klabel(field_AssertTest__failed)]
    
    syntax S2KAssertTestField ::= "stdChainsInitialized" [symbol(), klabel(field_AssertTest_stdChainsInitialized)]
    
    syntax S2KAssertTestField ::= "chains" [symbol(), klabel(field_AssertTest_chains)]
    
    syntax S2KAssertTestField ::= "defaultRpcUrls" [symbol(), klabel(field_AssertTest_defaultRpcUrls)]
    
    syntax S2KAssertTestField ::= "idToAlias" [symbol(), klabel(field_AssertTest_idToAlias)]
    
    syntax S2KAssertTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_AssertTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KAssertTestField ::= "gasMeteringOff" [symbol(), klabel(field_AssertTest_gasMeteringOff)]
    
    syntax S2KAssertTestField ::= "_excludedContracts" [symbol(), klabel(field_AssertTest__excludedContracts)]
    
    syntax S2KAssertTestField ::= "_excludedSenders" [symbol(), klabel(field_AssertTest__excludedSenders)]
    
    syntax S2KAssertTestField ::= "_targetedContracts" [symbol(), klabel(field_AssertTest__targetedContracts)]
    
    syntax S2KAssertTestField ::= "_targetedSenders" [symbol(), klabel(field_AssertTest__targetedSenders)]
    
    syntax S2KAssertTestField ::= "_excludedArtifacts" [symbol(), klabel(field_AssertTest__excludedArtifacts)]
    
    syntax S2KAssertTestField ::= "_targetedArtifacts" [symbol(), klabel(field_AssertTest__targetedArtifacts)]
    
    syntax S2KAssertTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_AssertTest__targetedArtifactSelectors)]
    
    syntax S2KAssertTestField ::= "_targetedSelectors" [symbol(), klabel(field_AssertTest__targetedSelectors)]
    
    syntax S2KAssertTestField ::= "y" [symbol(), klabel(field_AssertTest_y)]
    
    rule  ( #loc ( S2KAssertTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KAssertTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KAssertTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KAssertTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KAssertTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KAssertTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KAssertTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KAssertTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KAssertTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KAssertTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KAssertTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KAssertTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KAssertTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KAssertTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KAssertTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KAssertTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KAssertTest . y ) => 27 )
      
    
    syntax Bytes ::= S2KAssertTestContract "." S2KAssertTestMethod [function(), symbol(), klabel(method_AssertTest)]
    
    syntax S2KAssertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AssertTest_S2KISZUndTEST_)]
    
    syntax S2KAssertTestMethod ::= "S2KcallZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KcallZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_AssertTest_S2KexcludeArtifacts_)]
    
    syntax S2KAssertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_AssertTest_S2KexcludeContracts_)]
    
    syntax S2KAssertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_AssertTest_S2KexcludeSenders_)]
    
    syntax S2KAssertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AssertTest_S2Kfailed_)]
    
    syntax S2KAssertTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AssertTest_S2Kkevm_)]
    
    syntax S2KAssertTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_AssertTest_S2KsetUp_)]
    
    syntax S2KAssertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_AssertTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KAssertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_AssertTest_S2KtargetArtifacts_)]
    
    syntax S2KAssertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_AssertTest_S2KtargetContracts_)]
    
    syntax S2KAssertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_AssertTest_S2KtargetSelectors_)]
    
    syntax S2KAssertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_AssertTest_S2KtargetSenders_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndassertZUndtrue_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndexpectZUndrevert" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndexpectZUndrevert_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndtrue_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndtrueZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndtrueZUndbranch_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndfailingZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndfailingZUndbranch_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndrevertZUndbranch" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndrevertZUndbranch_uint256_uint256)]
    
    rule  ( S2KAssertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KcallZUndassertZUndfalse ( ) => #abiCallData ( "call_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndassertZUndfalse ( ) => #abiCallData ( "testFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndassertZUndtrue ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndexpectZUndrevert ( ) => #abiCallData ( "testFail_expect_revert" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndfalse ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndtrueZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_assert_true_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndfailingZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_failing_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndrevertZUndbranch ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_revert_branch" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "call_assert_false()" ) => 4088213539 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_assert_false()" ) => 2057948334 )
      
    
    rule  ( selector ( "testFail_assert_true()" ) => 409427266 )
      
    
    rule  ( selector ( "testFail_expect_revert()" ) => 709747105 )
      
    
    rule  ( selector ( "test_assert_false()" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true_branch(uint256)" ) => 3267411143 )
      
    
    rule  ( selector ( "test_failing_branch(uint256)" ) => 1176678741 )
      
    
    rule  ( selector ( "test_revert_branch(uint256,uint256)" ) => 2349784459 )
      

endmodule

module S2KSnapshotTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSnapshotTestContract
    
    syntax S2KSnapshotTestContract ::= "S2KSnapshotTest" [symbol(), klabel(contract_SnapshotTest)]
    
      
    
    rule  ( #initBytecode ( S2KSnapshotTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610ec88061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063916a17c611610071578063916a17c614610122578063b5508aa91461012a578063ba414fa614610132578063befb3b8a1461014a578063e20c9f7114610152578063fa7626d41461015a57600080fd5b80630a9254e4146100b95780631ed7831c146100ca5780633e5e3c23146100e85780633f7286f4146100f057806366d9a9a0146100f857806385226c811461010d575b600080fd5b6100c8600a601b556014601c55565b005b6100d2610167565b6040516100df9190610b8e565b60405180910390f35b6100d26101c9565b6100d2610229565b610100610289565b6040516100df9190610bdb565b610115610378565b6040516100df9190610cea565b610100610448565b61011561052e565b61013a6105fe565b60405190151581526020016100df565b6100c861072b565b6100d26108aa565b60075461013a9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101bf57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a1575b5050505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a1575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a1575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561036f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561035757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103195790505b505050505081525050815260200190600101906102ad565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036f5783829060005260206000200180546103bb90610d4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103e790610d4c565b80156104345780601f1061040957610100808354040283529160200191610434565b820191906000526020600020905b81548152906001019060200180831161041757829003601f168201915b50505050508152602001906001019061039c565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561036f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104d85790505b5050505050815250508152602001906001019061046c565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036f57838290600052602060002001805461057190610d4c565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90610d4c565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b505050505081526020019060010190610552565b600754600090610100900460ff16156106205750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107265760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916106ae917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d86565b60408051601f19818403018152908290526106c891610db7565b6000604051808303816000865af19150503d8060008114610705576040519150601f19603f3d011682016040523d82523d6000602084013e61070a565b606091505b50915050808060200190518101906107229190610dd3565b9150505b919050565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190610dfc565b61012c601b819055610190601c559091506107cf908061090a565b601c546107de9061019061090a565b604051631135fc2960e21b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906344d7f0a4906024016020604051808303816000875af1158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108549190610dd3565b5061087e601b60000154600a604051806060016040528060278152602001610e6c60279139610a35565b6108a7601b600101546014604051806060016040528060278152602001610e4560279139610a35565b50565b606060138054806020026020016040519081016040528092919081815260200182805480156101bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a1575050505050905090565b808214610a31577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161097b9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a31610a82565b5050565b818314610a7d577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610a6b9190610e15565b60405180910390a1610a7d838361090a565b505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b7d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b1c9291602001610d86565b60408051601f1981840301815290829052610b3691610db7565b6000604051808303816000865af19150503d8060008114610b73576040519150601f19603f3d011682016040523d82523d6000602084013e610b78565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bcf5783516001600160a01b031683529284019291840191600101610baa565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c7f57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c6a5783516001600160e01b0319168252928b019260019290920191908b0190610c40565b50978a01979550505091870191600101610c03565b50919998505050505050505050565b60005b83811015610ca9578181015183820152602001610c91565b83811115610cb8576000848401525b50505050565b60008151808452610cd6816020860160208601610c8e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d3f57603f19888603018452610d2d858351610cbe565b94509285019290850190600101610d11565b5092979650505050505050565b600181811c90821680610d6057607f821691505b602082108103610d8057634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610da9816004850160208701610c8e565b919091016004019392505050565b60008251610dc9818460208701610c8e565b9190910192915050565b600060208284031215610de557600080fd5b81518015158114610df557600080fd5b9392505050565b600060208284031215610e0e57600080fd5b5051919050565b60408152600560408201526422b93937b960d91b6060820152608060208201526000610df56080830184610cbe56fe736e617073686f742072657665727420666f7220736c6f74203120756e7375636365737366756c736e617073686f742072657665727420666f7220736c6f74203020756e7375636365737366756ca264697066735822122081ff0fab7c356f8788b1091011dab84837392547895b1a557e1dff010477e69d64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSnapshotTestField
    
    syntax S2KSnapshotTestField ::= "stdstore" [symbol(), klabel(field_SnapshotTest_stdstore)]
    
    syntax S2KSnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_SnapshotTest_IS_TEST)]
    
    syntax S2KSnapshotTestField ::= "_failed" [symbol(), klabel(field_SnapshotTest__failed)]
    
    syntax S2KSnapshotTestField ::= "stdChainsInitialized" [symbol(), klabel(field_SnapshotTest_stdChainsInitialized)]
    
    syntax S2KSnapshotTestField ::= "chains" [symbol(), klabel(field_SnapshotTest_chains)]
    
    syntax S2KSnapshotTestField ::= "defaultRpcUrls" [symbol(), klabel(field_SnapshotTest_defaultRpcUrls)]
    
    syntax S2KSnapshotTestField ::= "idToAlias" [symbol(), klabel(field_SnapshotTest_idToAlias)]
    
    syntax S2KSnapshotTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_SnapshotTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KSnapshotTestField ::= "gasMeteringOff" [symbol(), klabel(field_SnapshotTest_gasMeteringOff)]
    
    syntax S2KSnapshotTestField ::= "_excludedContracts" [symbol(), klabel(field_SnapshotTest__excludedContracts)]
    
    syntax S2KSnapshotTestField ::= "_excludedSenders" [symbol(), klabel(field_SnapshotTest__excludedSenders)]
    
    syntax S2KSnapshotTestField ::= "_targetedContracts" [symbol(), klabel(field_SnapshotTest__targetedContracts)]
    
    syntax S2KSnapshotTestField ::= "_targetedSenders" [symbol(), klabel(field_SnapshotTest__targetedSenders)]
    
    syntax S2KSnapshotTestField ::= "_excludedArtifacts" [symbol(), klabel(field_SnapshotTest__excludedArtifacts)]
    
    syntax S2KSnapshotTestField ::= "_targetedArtifacts" [symbol(), klabel(field_SnapshotTest__targetedArtifacts)]
    
    syntax S2KSnapshotTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_SnapshotTest__targetedArtifactSelectors)]
    
    syntax S2KSnapshotTestField ::= "_targetedSelectors" [symbol(), klabel(field_SnapshotTest__targetedSelectors)]
    
    syntax S2KSnapshotTestField ::= "store" [symbol(), klabel(field_SnapshotTest_store)]
    
    rule  ( #loc ( S2KSnapshotTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSnapshotTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSnapshotTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSnapshotTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSnapshotTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSnapshotTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSnapshotTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _targetedSelectors ) => 26 )
      
    
    rule  ( #loc ( S2KSnapshotTest . store ) => 27 )
      
    
    syntax Bytes ::= S2KSnapshotTestContract "." S2KSnapshotTestMethod [function(), symbol(), klabel(method_SnapshotTest)]
    
    syntax S2KSnapshotTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KISZUndTEST_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KexcludeArtifacts_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KexcludeContracts_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KexcludeSenders_)]
    
    syntax S2KSnapshotTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SnapshotTest_S2Kfailed_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KsetUp_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtargetArtifacts_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtargetContracts_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtargetSelectors_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtargetSenders_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtestSnapshot" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtestSnapshot_)]
    
    rule  ( S2KSnapshotTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtestSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testSnapshot()" ) => 3204135818 )
      

endmodule

module S2KStdAssertions-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdAssertionsContract
    
    syntax S2KStdAssertionsContract ::= "S2KStdAssertions" [symbol(), klabel(contract_StdAssertions)]
    
      
    
    rule  ( #initBytecode ( S2KStdAssertions ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KStdAssertionsField
    
    syntax S2KStdAssertionsField ::= "IS_TEST" [symbol(), klabel(field_StdAssertions_IS_TEST)]
    
    syntax S2KStdAssertionsField ::= "_failed" [symbol(), klabel(field_StdAssertions__failed)]
    
    rule  ( #loc ( S2KStdAssertions . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KStdAssertions . _failed ) => 0 )
      
    
    syntax Bytes ::= S2KStdAssertionsContract "." S2KStdAssertionsMethod [function(), symbol(), klabel(method_StdAssertions)]
    
    syntax S2KStdAssertionsMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_StdAssertions_S2KISZUndTEST_)]
    
    syntax S2KStdAssertionsMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_StdAssertions_S2Kfailed_)]
    
    rule  ( S2KStdAssertions . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KStdAssertions . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule

module S2KStdChains-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdChainsContract
    
    syntax S2KStdChainsContract ::= "S2KStdChains" [symbol(), klabel(contract_StdChains)]
    
      
    
    rule  ( #initBytecode ( S2KStdChains ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KStdChainsField
    
    syntax S2KStdChainsField ::= "stdChainsInitialized" [symbol(), klabel(field_StdChains_stdChainsInitialized)]
    
    syntax S2KStdChainsField ::= "chains" [symbol(), klabel(field_StdChains_chains)]
    
    syntax S2KStdChainsField ::= "defaultRpcUrls" [symbol(), klabel(field_StdChains_defaultRpcUrls)]
    
    syntax S2KStdChainsField ::= "idToAlias" [symbol(), klabel(field_StdChains_idToAlias)]
    
    syntax S2KStdChainsField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_StdChains_fallbackToDefaultRpcUrls)]
    
    rule  ( #loc ( S2KStdChains . stdChainsInitialized ) => 0 )
      
    
    rule  ( #loc ( S2KStdChains . chains ) => 1 )
      
    
    rule  ( #loc ( S2KStdChains . defaultRpcUrls ) => 2 )
      
    
    rule  ( #loc ( S2KStdChains . idToAlias ) => 3 )
      
    
    rule  ( #loc ( S2KStdChains . fallbackToDefaultRpcUrls ) => 4 )
      

endmodule

module S2KStdCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdCheatsContract
    
    syntax S2KStdCheatsContract ::= "S2KStdCheats" [symbol(), klabel(contract_StdCheats)]
    
      
    
    rule  ( #initBytecode ( S2KStdCheats ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KStdCheatsField
    
    syntax S2KStdCheatsField ::= "gasMeteringOff" [symbol(), klabel(field_StdCheats_gasMeteringOff)]
    
    syntax S2KStdCheatsField ::= "stdstore" [symbol(), klabel(field_StdCheats_stdstore)]
    
    rule  ( #loc ( S2KStdCheats . gasMeteringOff ) => 0 )
      
    
    rule  ( #loc ( S2KStdCheats . stdstore ) => 1 )
      

endmodule

module S2KStdCheatsSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdCheatsSafeContract
    
    syntax S2KStdCheatsSafeContract ::= "S2KStdCheatsSafe" [symbol(), klabel(contract_StdCheatsSafe)]
    
      
    
    rule  ( #initBytecode ( S2KStdCheatsSafe ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KStdCheatsSafeField
    
    syntax S2KStdCheatsSafeField ::= "gasMeteringOff" [symbol(), klabel(field_StdCheatsSafe_gasMeteringOff)]
    
    rule  ( #loc ( S2KStdCheatsSafe . gasMeteringOff ) => 0 )
      

endmodule

module S2KstdError-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdErrorContract
    
    syntax S2KstdErrorContract ::= "S2KstdError" [symbol(), klabel(contract_stdError)]
    
      
    
    rule  ( #initBytecode ( S2KstdError ) => #parseByteStack ( "0x61025661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063986c5f6811610070578063986c5f68146100d8578063b22dc54d146100e0578063b67689da146100e8578063d160e4de146100f0578063fa784a44146100f857600080fd5b806305ee8612146100a257806310332977146100c05780631de45560146100c85780638995290f146100d0575b600080fd5b6100aa610100565b6040516100b791906101cb565b60405180910390f35b6100aa61013b565b6100aa61014d565b6100aa61015f565b6100aa610171565b6100aa610183565b6100aa610195565b6100aa6101a7565b6100aa6101b9565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161010e565b6040516021602482015260440161010e565b6040516011602482015260440161010e565b6040516041602482015260440161010e565b6040516031602482015260440161010e565b6040516051602482015260440161010e565b6040516022602482015260440161010e565b6040516012602482015260440161010e565b600060208083528351808285015260005b818110156101f8578581018301518582016040015282016101dc565b8181111561020a576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220b50568a01aeb365651845e1555ca92e15fc0bf558cbecc588728960215d1a59c64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KstdErrorContract "." S2KstdErrorMethod [function(), symbol(), klabel(method_stdError)]
    
    syntax S2KstdErrorMethod ::= "S2KarithmeticError" "(" ")" [symbol(), klabel(method_stdError_S2KarithmeticError_)]
    
    syntax S2KstdErrorMethod ::= "S2KassertionError" "(" ")" [symbol(), klabel(method_stdError_S2KassertionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KdivisionError" "(" ")" [symbol(), klabel(method_stdError_S2KdivisionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KencodeStorageError" "(" ")" [symbol(), klabel(method_stdError_S2KencodeStorageError_)]
    
    syntax S2KstdErrorMethod ::= "S2KenumConversionError" "(" ")" [symbol(), klabel(method_stdError_S2KenumConversionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KindexOOBError" "(" ")" [symbol(), klabel(method_stdError_S2KindexOOBError_)]
    
    syntax S2KstdErrorMethod ::= "S2KmemOverflowError" "(" ")" [symbol(), klabel(method_stdError_S2KmemOverflowError_)]
    
    syntax S2KstdErrorMethod ::= "S2KpopError" "(" ")" [symbol(), klabel(method_stdError_S2KpopError_)]
    
    syntax S2KstdErrorMethod ::= "S2KzeroVarError" "(" ")" [symbol(), klabel(method_stdError_S2KzeroVarError_)]
    
    rule  ( S2KstdError . S2KarithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KassertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KdivisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KencodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KenumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KindexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KmemOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KpopError ( ) => #abiCallData ( "popError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KzeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )
      
    
    rule  ( selector ( "arithmeticError()" ) => 2308253967 )
      
    
    rule  ( selector ( "assertionError()" ) => 271788407 )
      
    
    rule  ( selector ( "divisionError()" ) => 4202187332 )
      
    
    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )
      
    
    rule  ( selector ( "enumConversionError()" ) => 501503328 )
      
    
    rule  ( selector ( "indexOOBError()" ) => 99517970 )
      
    
    rule  ( selector ( "memOverflowError()" ) => 2557239144 )
      
    
    rule  ( selector ( "popError()" ) => 2989344077 )
      
    
    rule  ( selector ( "zeroVarError()" ) => 3061221850 )
      

endmodule

module S2KStdInvariant-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdInvariantContract
    
    syntax S2KStdInvariantContract ::= "S2KStdInvariant" [symbol(), klabel(contract_StdInvariant)]
    
      
    
    rule  ( #initBytecode ( S2KStdInvariant ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KStdInvariantField
    
    syntax S2KStdInvariantField ::= "_excludedContracts" [symbol(), klabel(field_StdInvariant__excludedContracts)]
    
    syntax S2KStdInvariantField ::= "_excludedSenders" [symbol(), klabel(field_StdInvariant__excludedSenders)]
    
    syntax S2KStdInvariantField ::= "_targetedContracts" [symbol(), klabel(field_StdInvariant__targetedContracts)]
    
    syntax S2KStdInvariantField ::= "_targetedSenders" [symbol(), klabel(field_StdInvariant__targetedSenders)]
    
    syntax S2KStdInvariantField ::= "_excludedArtifacts" [symbol(), klabel(field_StdInvariant__excludedArtifacts)]
    
    syntax S2KStdInvariantField ::= "_targetedArtifacts" [symbol(), klabel(field_StdInvariant__targetedArtifacts)]
    
    syntax S2KStdInvariantField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_StdInvariant__targetedArtifactSelectors)]
    
    syntax S2KStdInvariantField ::= "_targetedSelectors" [symbol(), klabel(field_StdInvariant__targetedSelectors)]
    
    rule  ( #loc ( S2KStdInvariant . _excludedContracts ) => 0 )
      
    
    rule  ( #loc ( S2KStdInvariant . _excludedSenders ) => 1 )
      
    
    rule  ( #loc ( S2KStdInvariant . _targetedContracts ) => 2 )
      
    
    rule  ( #loc ( S2KStdInvariant . _targetedSenders ) => 3 )
      
    
    rule  ( #loc ( S2KStdInvariant . _excludedArtifacts ) => 4 )
      
    
    rule  ( #loc ( S2KStdInvariant . _targetedArtifacts ) => 5 )
      
    
    rule  ( #loc ( S2KStdInvariant . _targetedArtifactSelectors ) => 6 )
      
    
    rule  ( #loc ( S2KStdInvariant . _targetedSelectors ) => 7 )
      
    
    syntax Bytes ::= S2KStdInvariantContract "." S2KStdInvariantMethod [function(), symbol(), klabel(method_StdInvariant)]
    
    syntax S2KStdInvariantMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KexcludeArtifacts_)]
    
    syntax S2KStdInvariantMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KexcludeContracts_)]
    
    syntax S2KStdInvariantMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_StdInvariant_S2KexcludeSenders_)]
    
    syntax S2KStdInvariantMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetArtifactSelectors_)]
    
    syntax S2KStdInvariantMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetArtifacts_)]
    
    syntax S2KStdInvariantMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetContracts_)]
    
    syntax S2KStdInvariantMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetSelectors_)]
    
    syntax S2KStdInvariantMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetSenders_)]
    
    rule  ( S2KStdInvariant . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KStdInvariant . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KstdJson-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdJsonContract
    
    syntax S2KstdJsonContract ::= "S2KstdJson" [symbol(), klabel(contract_stdJson)]
    
      
    
    rule  ( #initBytecode ( S2KstdJson ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df7dc4d1800c459459a191c6e9a04ff356828c02156636c0da70d8b85d1d6da464736f6c634300080d0033" ) )
      

endmodule

module S2KstdMath-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdMathContract
    
    syntax S2KstdMathContract ::= "S2KstdMath" [symbol(), klabel(contract_stdMath)]
    
      
    
    rule  ( #initBytecode ( S2KstdMath ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d5896cecc074b7a125dff1c77ff303e9e188764651777cf455720d281a08f2864736f6c634300080d0033" ) )
      

endmodule

module S2KstdStorage-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdStorageContract
    
    syntax S2KstdStorageContract ::= "S2KstdStorage" [symbol(), klabel(contract_stdStorage)]
    
      
    
    rule  ( #initBytecode ( S2KstdStorage ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205783f6e832bfb40b5a129ed00392cc4ddc0ee1b8814a44b32ec6685fd62b970064736f6c634300080d0033" ) )
      

endmodule

module S2KstdStorageSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdStorageSafeContract
    
    syntax S2KstdStorageSafeContract ::= "S2KstdStorageSafe" [symbol(), klabel(contract_stdStorageSafe)]
    
      
    
    rule  ( #initBytecode ( S2KstdStorageSafe ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220759f01e635a02e37e6673da50d4bf039c7767b2dfa5940553e131b798527412664736f6c634300080d0033" ) )
      

endmodule

module S2KStdStyle-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdStyleContract
    
    syntax S2KStdStyleContract ::= "S2KStdStyle" [symbol(), klabel(contract_StdStyle)]
    
      
    
    rule  ( #initBytecode ( S2KStdStyle ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220013d1ea7f60ab0d57dc3e5d2001cc7935e44b07882c1aea9436566207923d48364736f6c634300080d0033" ) )
      

endmodule

module S2KStdUtils-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStdUtilsContract
    
    syntax S2KStdUtilsContract ::= "S2KStdUtils" [symbol(), klabel(contract_StdUtils)]
    
      
    
    rule  ( #initBytecode ( S2KStdUtils ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreContract
    
    syntax S2KStoreContract ::= "S2KStore" [symbol(), klabel(contract_Store)]
    
      
    
    rule  ( #initBytecode ( S2KStore ) => #parseByteStack ( "0x6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea264697066735822122016040e8ab316c294adf74b3b8d9dd45cd06dc0d3911a4c781eb1918c6e06d93764736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KStoreField
    
    syntax S2KStoreField ::= "testNumber" [symbol(), klabel(field_Store_testNumber)]
    
    rule  ( #loc ( S2KStore . testNumber ) => 0 )
      

endmodule

module S2KStoreTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreTestContract
    
    syntax S2KStoreTestContract ::= "S2KStoreTest" [symbol(), klabel(contract_StoreTest)]
    
      
    
    rule  ( #initBytecode ( S2KStoreTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KStoreTestField
    
    syntax S2KStoreTestField ::= "stdstore" [symbol(), klabel(field_StoreTest_stdstore)]
    
    syntax S2KStoreTestField ::= "IS_TEST" [symbol(), klabel(field_StoreTest_IS_TEST)]
    
    syntax S2KStoreTestField ::= "_failed" [symbol(), klabel(field_StoreTest__failed)]
    
    syntax S2KStoreTestField ::= "stdChainsInitialized" [symbol(), klabel(field_StoreTest_stdChainsInitialized)]
    
    syntax S2KStoreTestField ::= "chains" [symbol(), klabel(field_StoreTest_chains)]
    
    syntax S2KStoreTestField ::= "defaultRpcUrls" [symbol(), klabel(field_StoreTest_defaultRpcUrls)]
    
    syntax S2KStoreTestField ::= "idToAlias" [symbol(), klabel(field_StoreTest_idToAlias)]
    
    syntax S2KStoreTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_StoreTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KStoreTestField ::= "gasMeteringOff" [symbol(), klabel(field_StoreTest_gasMeteringOff)]
    
    syntax S2KStoreTestField ::= "_excludedContracts" [symbol(), klabel(field_StoreTest__excludedContracts)]
    
    syntax S2KStoreTestField ::= "_excludedSenders" [symbol(), klabel(field_StoreTest__excludedSenders)]
    
    syntax S2KStoreTestField ::= "_targetedContracts" [symbol(), klabel(field_StoreTest__targetedContracts)]
    
    syntax S2KStoreTestField ::= "_targetedSenders" [symbol(), klabel(field_StoreTest__targetedSenders)]
    
    syntax S2KStoreTestField ::= "_excludedArtifacts" [symbol(), klabel(field_StoreTest__excludedArtifacts)]
    
    syntax S2KStoreTestField ::= "_targetedArtifacts" [symbol(), klabel(field_StoreTest__targetedArtifacts)]
    
    syntax S2KStoreTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_StoreTest__targetedArtifactSelectors)]
    
    syntax S2KStoreTestField ::= "_targetedSelectors" [symbol(), klabel(field_StoreTest__targetedSelectors)]
    
    rule  ( #loc ( S2KStoreTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KStoreTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KStoreTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KStoreTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KStoreTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KStoreTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KStoreTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KStoreTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KStoreTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KStoreTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KStoreTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KStoreTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KStoreTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KStoreTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KStoreTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KStoreTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KStoreTestContract "." S2KStoreTestMethod [function(), symbol(), klabel(method_StoreTest)]
    
    syntax S2KStoreTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_StoreTest_S2KISZUndTEST_)]
    
    syntax S2KStoreTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_StoreTest_S2KexcludeArtifacts_)]
    
    syntax S2KStoreTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_StoreTest_S2KexcludeContracts_)]
    
    syntax S2KStoreTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_StoreTest_S2KexcludeSenders_)]
    
    syntax S2KStoreTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_StoreTest_S2Kfailed_)]
    
    syntax S2KStoreTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_StoreTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KStoreTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_StoreTest_S2KtargetArtifacts_)]
    
    syntax S2KStoreTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_StoreTest_S2KtargetContracts_)]
    
    syntax S2KStoreTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_StoreTest_S2KtargetSelectors_)]
    
    syntax S2KStoreTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_StoreTest_S2KtargetSenders_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestAccesses" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestAccesses_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadColdVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadColdVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreColdVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreColdVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestStoreLoad" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestStoreLoad_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestStoreLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestStoreLoadNonExistent_)]
    
    rule  ( S2KStoreTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadColdVM ( ) => #abiCallData ( "testGasLoadColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadWarmUp ( ) => #abiCallData ( "testGasLoadWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadWarmVM ( ) => #abiCallData ( "testGasLoadWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreColdVM ( ) => #abiCallData ( "testGasStoreColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreWarmUp ( ) => #abiCallData ( "testGasStoreWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreWarmVM ( ) => #abiCallData ( "testGasStoreWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestLoadNonExistent ( ) => #abiCallData ( "testLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestStoreLoadNonExistent ( ) => #abiCallData ( "testStoreLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAccesses()" ) => 159648693 )
      
    
    rule  ( selector ( "testGasLoadColdVM()" ) => 3801282741 )
      
    
    rule  ( selector ( "testGasLoadWarmUp()" ) => 604011046 )
      
    
    rule  ( selector ( "testGasLoadWarmVM()" ) => 2607902342 )
      
    
    rule  ( selector ( "testGasStoreColdVM()" ) => 2309593716 )
      
    
    rule  ( selector ( "testGasStoreWarmUp()" ) => 1546465326 )
      
    
    rule  ( selector ( "testGasStoreWarmVM()" ) => 100073271 )
      
    
    rule  ( selector ( "testLoadNonExistent()" ) => 2275977243 )
      
    
    rule  ( selector ( "testStoreLoad()" ) => 1208516723 )
      
    
    rule  ( selector ( "testStoreLoadNonExistent()" ) => 3912017339 )
      

endmodule

module S2KSymbolicStorageTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStorageTestContract
    
    syntax S2KSymbolicStorageTestContract ::= "S2KSymbolicStorageTest" [symbol(), klabel(contract_SymbolicStorageTest)]
    
      
    
    rule  ( #initBytecode ( S2KSymbolicStorageTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KSymbolicStorageTestField
    
    syntax S2KSymbolicStorageTestField ::= "stdstore" [symbol(), klabel(field_SymbolicStorageTest_stdstore)]
    
    syntax S2KSymbolicStorageTestField ::= "IS_TEST" [symbol(), klabel(field_SymbolicStorageTest_IS_TEST)]
    
    syntax S2KSymbolicStorageTestField ::= "_failed" [symbol(), klabel(field_SymbolicStorageTest__failed)]
    
    syntax S2KSymbolicStorageTestField ::= "stdChainsInitialized" [symbol(), klabel(field_SymbolicStorageTest_stdChainsInitialized)]
    
    syntax S2KSymbolicStorageTestField ::= "chains" [symbol(), klabel(field_SymbolicStorageTest_chains)]
    
    syntax S2KSymbolicStorageTestField ::= "defaultRpcUrls" [symbol(), klabel(field_SymbolicStorageTest_defaultRpcUrls)]
    
    syntax S2KSymbolicStorageTestField ::= "idToAlias" [symbol(), klabel(field_SymbolicStorageTest_idToAlias)]
    
    syntax S2KSymbolicStorageTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_SymbolicStorageTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KSymbolicStorageTestField ::= "gasMeteringOff" [symbol(), klabel(field_SymbolicStorageTest_gasMeteringOff)]
    
    syntax S2KSymbolicStorageTestField ::= "_excludedContracts" [symbol(), klabel(field_SymbolicStorageTest__excludedContracts)]
    
    syntax S2KSymbolicStorageTestField ::= "_excludedSenders" [symbol(), klabel(field_SymbolicStorageTest__excludedSenders)]
    
    syntax S2KSymbolicStorageTestField ::= "_targetedContracts" [symbol(), klabel(field_SymbolicStorageTest__targetedContracts)]
    
    syntax S2KSymbolicStorageTestField ::= "_targetedSenders" [symbol(), klabel(field_SymbolicStorageTest__targetedSenders)]
    
    syntax S2KSymbolicStorageTestField ::= "_excludedArtifacts" [symbol(), klabel(field_SymbolicStorageTest__excludedArtifacts)]
    
    syntax S2KSymbolicStorageTestField ::= "_targetedArtifacts" [symbol(), klabel(field_SymbolicStorageTest__targetedArtifacts)]
    
    syntax S2KSymbolicStorageTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_SymbolicStorageTest__targetedArtifactSelectors)]
    
    syntax S2KSymbolicStorageTestField ::= "_targetedSelectors" [symbol(), klabel(field_SymbolicStorageTest__targetedSelectors)]
    
    rule  ( #loc ( S2KSymbolicStorageTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KSymbolicStorageTestContract "." S2KSymbolicStorageTestMethod [function(), symbol(), klabel(method_SymbolicStorageTest)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KISZUndTEST_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KexcludeArtifacts_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KexcludeContracts_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KexcludeSenders_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kfailed_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kkevm_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtargetArtifacts_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtargetContracts_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtargetSelectors_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtargetSenders_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestEmptyInitialStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestEmptyInitialStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestFailZUndSymbolicStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestFailZUndSymbolicStorage1_uint256)]
    
    rule  ( S2KSymbolicStorageTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestEmptyInitialStorage ( V0_slot : uint256 ) => #abiCallData ( "testEmptyInitialStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestFailZUndSymbolicStorage ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestFailZUndSymbolicStorage1 ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage1" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testEmptyInitialStorage(uint256)" ) => 2517793094 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage(uint256)" ) => 821477045 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage1(uint256)" ) => 2899744320 )
      

endmodule

module S2KSymbolicStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStoreContract
    
    syntax S2KSymbolicStoreContract ::= "S2KSymbolicStore" [symbol(), klabel(contract_SymbolicStore)]
    
      
    
    rule  ( #initBytecode ( S2KSymbolicStore ) => #parseByteStack ( "0x6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea2646970667358221220b3e0ad9d3b49c7320ae854a3fd1d7e3c211862de406be8c571f7c86da903cbab64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KSymbolicStoreField
    
    syntax S2KSymbolicStoreField ::= "testNumber" [symbol(), klabel(field_SymbolicStore_testNumber)]
    
    rule  ( #loc ( S2KSymbolicStore . testNumber ) => 0 )
      

endmodule

module S2KTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestContract
    
    syntax S2KTestContract ::= "S2KTest" [symbol(), klabel(contract_Test)]
    
      
    
    rule  ( #initBytecode ( S2KTest ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= S2KTestField
    
    syntax S2KTestField ::= "stdstore" [symbol(), klabel(field_Test_stdstore)]
    
    syntax S2KTestField ::= "IS_TEST" [symbol(), klabel(field_Test_IS_TEST)]
    
    syntax S2KTestField ::= "_failed" [symbol(), klabel(field_Test__failed)]
    
    syntax S2KTestField ::= "stdChainsInitialized" [symbol(), klabel(field_Test_stdChainsInitialized)]
    
    syntax S2KTestField ::= "chains" [symbol(), klabel(field_Test_chains)]
    
    syntax S2KTestField ::= "defaultRpcUrls" [symbol(), klabel(field_Test_defaultRpcUrls)]
    
    syntax S2KTestField ::= "idToAlias" [symbol(), klabel(field_Test_idToAlias)]
    
    syntax S2KTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_Test_fallbackToDefaultRpcUrls)]
    
    syntax S2KTestField ::= "gasMeteringOff" [symbol(), klabel(field_Test_gasMeteringOff)]
    
    syntax S2KTestField ::= "_excludedContracts" [symbol(), klabel(field_Test__excludedContracts)]
    
    syntax S2KTestField ::= "_excludedSenders" [symbol(), klabel(field_Test__excludedSenders)]
    
    syntax S2KTestField ::= "_targetedContracts" [symbol(), klabel(field_Test__targetedContracts)]
    
    syntax S2KTestField ::= "_targetedSenders" [symbol(), klabel(field_Test__targetedSenders)]
    
    syntax S2KTestField ::= "_excludedArtifacts" [symbol(), klabel(field_Test__excludedArtifacts)]
    
    syntax S2KTestField ::= "_targetedArtifacts" [symbol(), klabel(field_Test__targetedArtifacts)]
    
    syntax S2KTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_Test__targetedArtifactSelectors)]
    
    syntax S2KTestField ::= "_targetedSelectors" [symbol(), klabel(field_Test__targetedSelectors)]
    
    rule  ( #loc ( S2KTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KTestContract "." S2KTestMethod [function(), symbol(), klabel(method_Test)]
    
    syntax S2KTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Test_S2KISZUndTEST_)]
    
    syntax S2KTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_Test_S2KexcludeArtifacts_)]
    
    syntax S2KTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_Test_S2KexcludeContracts_)]
    
    syntax S2KTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_Test_S2KexcludeSenders_)]
    
    syntax S2KTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Test_S2Kfailed_)]
    
    syntax S2KTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_Test_S2KtargetArtifactSelectors_)]
    
    syntax S2KTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_Test_S2KtargetArtifacts_)]
    
    syntax S2KTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_Test_S2KtargetContracts_)]
    
    syntax S2KTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_Test_S2KtargetSelectors_)]
    
    syntax S2KTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_Test_S2KtargetSenders_)]
    
    rule  ( S2KTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KTestNumber-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestNumberContract
    
    syntax S2KTestNumberContract ::= "S2KTestNumber" [symbol(), klabel(contract_TestNumber)]
    
      
    
    rule  ( #initBytecode ( S2KTestNumber ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KTestNumberField
    
    syntax S2KTestNumberField ::= "IS_TEST" [symbol(), klabel(field_TestNumber_IS_TEST)]
    
    syntax S2KTestNumberField ::= "_failed" [symbol(), klabel(field_TestNumber__failed)]
    
    syntax S2KTestNumberField ::= "testNumber" [symbol(), klabel(field_TestNumber_testNumber)]
    
    rule  ( #loc ( S2KTestNumber . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . testNumber ) => 1 )
      
    
    syntax Bytes ::= S2KTestNumberContract "." S2KTestNumberMethod [function(), symbol(), klabel(method_TestNumber)]
    
    syntax S2KTestNumberMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_TestNumber_S2KISZUndTEST_)]
    
    syntax S2KTestNumberMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_TestNumber_S2Kfailed_)]
    
    syntax S2KTestNumberMethod ::= "S2Kt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_TestNumber_S2Kt_uint256)]
    
    syntax S2KTestNumberMethod ::= "S2KtestNumber" "(" ")" [symbol(), klabel(method_TestNumber_S2KtestNumber_)]
    
    rule  ( S2KTestNumber . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . S2Kt ( V0_a : uint256 ) => #abiCallData ( "t" , #uint256 ( V0_a ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_a )
      
    
    rule  ( S2KTestNumber . S2KtestNumber ( ) => #abiCallData ( "testNumber" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "t(uint256)" ) => 2950864753 )
      
    
    rule  ( selector ( "testNumber()" ) => 219771635 )
      

endmodule

module S2KToStringTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KToStringTestContract
    
    syntax S2KToStringTestContract ::= "S2KToStringTest" [symbol(), klabel(contract_ToStringTest)]
    
      
    
    rule  ( #initBytecode ( S2KToStringTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= S2KToStringTestField
    
    syntax S2KToStringTestField ::= "stdstore" [symbol(), klabel(field_ToStringTest_stdstore)]
    
    syntax S2KToStringTestField ::= "IS_TEST" [symbol(), klabel(field_ToStringTest_IS_TEST)]
    
    syntax S2KToStringTestField ::= "_failed" [symbol(), klabel(field_ToStringTest__failed)]
    
    syntax S2KToStringTestField ::= "stdChainsInitialized" [symbol(), klabel(field_ToStringTest_stdChainsInitialized)]
    
    syntax S2KToStringTestField ::= "chains" [symbol(), klabel(field_ToStringTest_chains)]
    
    syntax S2KToStringTestField ::= "defaultRpcUrls" [symbol(), klabel(field_ToStringTest_defaultRpcUrls)]
    
    syntax S2KToStringTestField ::= "idToAlias" [symbol(), klabel(field_ToStringTest_idToAlias)]
    
    syntax S2KToStringTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_ToStringTest_fallbackToDefaultRpcUrls)]
    
    syntax S2KToStringTestField ::= "gasMeteringOff" [symbol(), klabel(field_ToStringTest_gasMeteringOff)]
    
    syntax S2KToStringTestField ::= "_excludedContracts" [symbol(), klabel(field_ToStringTest__excludedContracts)]
    
    syntax S2KToStringTestField ::= "_excludedSenders" [symbol(), klabel(field_ToStringTest__excludedSenders)]
    
    syntax S2KToStringTestField ::= "_targetedContracts" [symbol(), klabel(field_ToStringTest__targetedContracts)]
    
    syntax S2KToStringTestField ::= "_targetedSenders" [symbol(), klabel(field_ToStringTest__targetedSenders)]
    
    syntax S2KToStringTestField ::= "_excludedArtifacts" [symbol(), klabel(field_ToStringTest__excludedArtifacts)]
    
    syntax S2KToStringTestField ::= "_targetedArtifacts" [symbol(), klabel(field_ToStringTest__targetedArtifacts)]
    
    syntax S2KToStringTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_ToStringTest__targetedArtifactSelectors)]
    
    syntax S2KToStringTestField ::= "_targetedSelectors" [symbol(), klabel(field_ToStringTest__targetedSelectors)]
    
    rule  ( #loc ( S2KToStringTest . stdstore ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . IS_TEST ) => 7 )
      
    
    rule  ( #loc ( S2KToStringTest . _failed ) => 7 )
      
    
    rule  ( #loc ( S2KToStringTest . stdChainsInitialized ) => 7 )
      
    
    rule  ( #loc ( S2KToStringTest . chains ) => 8 )
      
    
    rule  ( #loc ( S2KToStringTest . defaultRpcUrls ) => 9 )
      
    
    rule  ( #loc ( S2KToStringTest . idToAlias ) => 10 )
      
    
    rule  ( #loc ( S2KToStringTest . fallbackToDefaultRpcUrls ) => 11 )
      
    
    rule  ( #loc ( S2KToStringTest . gasMeteringOff ) => 11 )
      
    
    rule  ( #loc ( S2KToStringTest . _excludedContracts ) => 19 )
      
    
    rule  ( #loc ( S2KToStringTest . _excludedSenders ) => 20 )
      
    
    rule  ( #loc ( S2KToStringTest . _targetedContracts ) => 21 )
      
    
    rule  ( #loc ( S2KToStringTest . _targetedSenders ) => 22 )
      
    
    rule  ( #loc ( S2KToStringTest . _excludedArtifacts ) => 23 )
      
    
    rule  ( #loc ( S2KToStringTest . _targetedArtifacts ) => 24 )
      
    
    rule  ( #loc ( S2KToStringTest . _targetedArtifactSelectors ) => 25 )
      
    
    rule  ( #loc ( S2KToStringTest . _targetedSelectors ) => 26 )
      
    
    syntax Bytes ::= S2KToStringTestContract "." S2KToStringTestMethod [function(), symbol(), klabel(method_ToStringTest)]
    
    syntax S2KToStringTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ToStringTest_S2KISZUndTEST_)]
    
    syntax S2KToStringTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_ToStringTest_S2KexcludeArtifacts_)]
    
    syntax S2KToStringTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_ToStringTest_S2KexcludeContracts_)]
    
    syntax S2KToStringTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_ToStringTest_S2KexcludeSenders_)]
    
    syntax S2KToStringTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ToStringTest_S2Kfailed_)]
    
    syntax S2KToStringTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KToStringTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtargetArtifacts_)]
    
    syntax S2KToStringTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtargetContracts_)]
    
    syntax S2KToStringTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtargetSelectors_)]
    
    syntax S2KToStringTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtargetSenders_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestAddressToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestAddressToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBoolToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBoolToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBytes32ToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBytes32ToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBytesToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBytesToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestIntToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestIntToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestUint256ToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestUint256ToString_)]
    
    rule  ( S2KToStringTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAddressToString()" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString()" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString()" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString()" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString()" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString()" ) => 98980210 )
      

endmodule

module S2KToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTokenContract
    
    syntax S2KTokenContract ::= "S2KToken" [symbol(), klabel(contract_Token)]
    
      
    
    rule  ( #initBytecode ( S2KToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004361003e3660046100c9565b610045565b005b610050338383610054565b5050565b6001600160a01b038316600090815260016020526040902054610078908290610117565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546100a890829061012e565b6001600160a01b039092166000908152600160205260409020919091555050565b600080604083850312156100dc57600080fd5b82356001600160a01b03811681146100f357600080fd5b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561012957610129610101565b500390565b6000821982111561014157610141610101565b50019056fea2646970667358221220e48b937e7c9104a0808e115af1ee42e958a0c671314391ceab78b4d1e9009fe964736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KTokenField
    
    syntax S2KTokenField ::= "x" [symbol(), klabel(field_Token_x)]
    
    syntax S2KTokenField ::= "balances" [symbol(), klabel(field_Token_balances)]
    
    syntax S2KTokenField ::= "allowances" [symbol(), klabel(field_Token_allowances)]
    
    syntax S2KTokenField ::= "name" [symbol(), klabel(field_Token_name)]
    
    syntax S2KTokenField ::= "y" [symbol(), klabel(field_Token_y)]
    
    syntax S2KTokenField ::= "z" [symbol(), klabel(field_Token_z)]
    
    syntax S2KTokenField ::= "a" [symbol(), klabel(field_Token_a)]
    
    syntax S2KTokenField ::= "foos" [symbol(), klabel(field_Token_foos)]
    
    rule  ( #loc ( S2KToken . x ) => 0 )
      
    
    rule  ( #loc ( S2KToken . balances ) => 1 )
      
    
    rule  ( #loc ( S2KToken . allowances ) => 2 )
      
    
    rule  ( #loc ( S2KToken . name ) => 3 )
      
    
    rule  ( #loc ( S2KToken . y ) => 4 )
      
    
    rule  ( #loc ( S2KToken . z ) => 4 )
      
    
    rule  ( #loc ( S2KToken . a ) => 4 )
      
    
    rule  ( #loc ( S2KToken . foos ) => 5 )
      
    
    syntax Bytes ::= S2KTokenContract "." S2KTokenMethod [function(), symbol(), klabel(method_Token)]
    
    syntax S2KTokenMethod ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Token_S2Ktransfer_address_uint256)]
    
    rule  ( S2KToken . S2Ktransfer ( V0_dst : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_dst ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      

endmodule

module S2KBytesTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBytesTypeTestContract
    
    syntax S2KBytesTypeTestContract ::= "S2KBytesTypeTest" [symbol(), klabel(contract_BytesTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KBytesTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610189806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063176854031461006757806395a933ba1461007c578063a7c088351461008f578063ccdc3f4d146100a2578063d6bf2ada1461007c578063ffa9fc7114610067575b600080fd5b61007a6100753660046100f3565b6100b3565b005b61007a61008a36600461010c565b6100c4565b61007a61009d36600461010c565b6100db565b61007a6100b03660046100f3565b50565b60001981106100b0576100b061013d565b60e081901c63ffffffff116100b0576100b061013d565b60e081901c63ffffffff10156100b0576100b061013d565b60006020828403121561010557600080fd5b5035919050565b60006020828403121561011e57600080fd5b81356001600160e01b03198116811461013657600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220a2cda4fd602855aae073a2c5a1e77ca0cd9feae50b64c59bc764b68626628db164736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KBytesTypeTestContract "." S2KBytesTypeTestMethod [function(), symbol(), klabel(method_BytesTypeTest)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestFailZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestFailZUndbytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestFailZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestFailZUndbytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes32ZUndfail" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes32ZUndfail_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes4ZUndfail" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes4ZUndfail_bytes4)]
    
    rule  ( S2KBytesTypeTest . S2KtestFailZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "testFail_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestFailZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "testFail_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes32ZUndfail ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32_fail" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes4ZUndfail ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4_fail" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( selector ( "testFail_bytes32(bytes32)" ) => 4289330289 )
      
    
    rule  ( selector ( "testFail_bytes4(bytes4)" ) => 3602852570 )
      
    
    rule  ( selector ( "test_bytes32(bytes32)" ) => 3436986189 )
      
    
    rule  ( selector ( "test_bytes32_fail(bytes32)" ) => 392713219 )
      
    
    rule  ( selector ( "test_bytes4(bytes4)" ) => 2814412853 )
      
    
    rule  ( selector ( "test_bytes4_fail(bytes4)" ) => 2510894010 )
      

endmodule

module S2KIntTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KIntTypeTestContract
    
    syntax S2KIntTypeTestContract ::= "S2KIntTypeTest" [symbol(), klabel(contract_IntTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KIntTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061025a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636ad45b2e116100665780636ad45b2e146100e65780636fe1d822146100ad5780637686b9d9146100c0578063a38fa320146100d3578063e3a003ce146100f957600080fd5b80633b5bed8d1461009857806346a322e3146100ad57806349f45c19146100c057806368593cf1146100d3575b600080fd5b6100ab6100a63660046101a8565b61010c565b005b6100ab6100bb3660046101d2565b61012a565b6100ab6100ce3660046101a8565b610140565b6100ab6100e13660046101eb565b61015a565b6100ab6100f43660046101eb565b610175565b6100ab6101073660046101d2565b610191565b600f81900b60016001607f1b0312156101275761012761020e565b50565b806001600160ff1b03136101275761012761020e565b600f81900b60016001607f1b03136101275761012761020e565b600781900b677fffffffffffffff136101275761012761020e565b600781900b677fffffffffffffff12156101275761012761020e565b806001600160ff1b0312156101275761012761020e565b6000602082840312156101ba57600080fd5b813580600f0b81146101cb57600080fd5b9392505050565b6000602082840312156101e457600080fd5b5035919050565b6000602082840312156101fd57600080fd5b81358060070b81146101cb57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212200d1fac94ebfd75e4d9346ed382b003aba92c93cb9e9bb2353031c80894ad28ca64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KIntTypeTestContract "." S2KIntTypeTestMethod [function(), symbol(), klabel(method_IntTypeTest)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint128_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint256_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint64_int64)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint128_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint128ZUndfail" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint128ZUndfail_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint256_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint256ZUndfail" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint256ZUndfail_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint64_int64)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint64ZUndfail" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint64ZUndfail_int64)]
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint128 ( V0_x : int128 ) => #abiCallData ( "testFail_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint256 ( V0_x : int256 ) => #abiCallData ( "testFail_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint64 ( V0_x : int64 ) => #abiCallData ( "testFail_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint128 ( V0_x : int128 ) => #abiCallData ( "test_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint128ZUndfail ( V0_x : int128 ) => #abiCallData ( "test_int128_fail" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint256 ( V0_x : int256 ) => #abiCallData ( "test_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint256ZUndfail ( V0_x : int256 ) => #abiCallData ( "test_int256_fail" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint64 ( V0_x : int64 ) => #abiCallData ( "test_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint64ZUndfail ( V0_x : int64 ) => #abiCallData ( "test_int64_fail" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( selector ( "testFail_int128(int128)" ) => 1988540889 )
      
    
    rule  ( selector ( "testFail_int256(int256)" ) => 1185096419 )
      
    
    rule  ( selector ( "testFail_int64(int64)" ) => 1750678769 )
      
    
    rule  ( selector ( "test_int128(int128)" ) => 995880333 )
      
    
    rule  ( selector ( "test_int128_fail(int128)" ) => 1240751129 )
      
    
    rule  ( selector ( "test_int256(int256)" ) => 3818914766 )
      
    
    rule  ( selector ( "test_int256_fail(int256)" ) => 1877071906 )
      
    
    rule  ( selector ( "test_int64(int64)" ) => 1792301870 )
      
    
    rule  ( selector ( "test_int64_fail(int64)" ) => 2744099616 )
      

endmodule

module S2KStructTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStructTypeTestContract
    
    syntax S2KStructTypeTestContract ::= "S2KStructTypeTest" [symbol(), klabel(contract_StructTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KStructTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610133806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f312018014602d575b600080fd5b603c60383660046084565b603e565b005b60496020820182609b565b60ff1660ff80161015605b57605b60c3565b6069604082016020830160d9565b63ffffffff1663ffffffff80161015608157608160c3565b50565b600060608284031215609557600080fd5b50919050565b60006020828403121560ac57600080fd5b813560ff8116811460bc57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121560ea57600080fd5b813563ffffffff8116811460bc57600080fdfea26469706673582212208d4b71859ea8c5558f2224643cd5d8007e3a774b31fd448aff3d7becdb4ff45a64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KStructTypeTestContract "." S2KStructTypeTestMethod [function(), symbol(), klabel(method_StructTypeTest)]
    
    syntax S2KStructTypeTestMethod ::= "S2KtestZUndvars" "(" Int ":" "uint8" "," Int ":" "uint32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_StructTypeTest_S2KtestZUndvars_uint8_uint32_bytes32)]
    
    rule  ( S2KStructTypeTest . S2KtestZUndvars ( V0_a : uint8 , V1_timestamp : uint32 , V2_b : bytes32 ) => #abiCallData ( "test_vars" , #tuple ( #uint8 ( V0_a ) , #uint32 ( V1_timestamp ) , #bytes32 ( V2_b ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 8 , V0_a )
       andBool ( #rangeUInt ( 32 , V1_timestamp )
       andBool ( #rangeBytes ( 32 , V2_b )
               )))
      
    
    rule  ( selector ( "test_vars((uint8,uint32,bytes32))" ) => 4078043520 )
      

endmodule

module S2KUintTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KUintTypeTestContract
    
    syntax S2KUintTypeTestContract ::= "S2KUintTypeTest" [symbol(), klabel(contract_UintTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KUintTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50611537806100206000396000f3fe608060405234801561001057600080fd5b50600436106105305760003560e01c80639034111c116102af578063c32ac8df11610172578063dc3a57f0116100d9578063f12bce4c11610092578063f12bce4c14610924578063f2f9691c1461089f578063f4566ec31461068d578063f7c0d17c146109bc578063f9126fa1146105f5578063f930f01c1461099657600080fd5b8063dc3a57f0146109a9578063e4d5122b146109bc578063e4f24a3f146109cf578063e920ae5914610853578063eb92aaa9146107e1578063ef35afd1146109e257600080fd5b8063d316d6851161012b578063d316d68514610583578063d3d8df2314610710578063d56555a814610911578063d606851214610983578063d822867414610996578063db522592146108eb57600080fd5b8063c32ac8df14610970578063c3aea4171461067a578063c415e5d5146107ce578063c7ce39e11461094a578063ccd4bffe1461081a578063d2b7065b146105cf57600080fd5b8063aac485ac11610216578063b9f3c162116101cf578063b9f3c16214610937578063bc8ed9a61461094a578063bde61bde146106ea578063bf6062251461095d578063bf94b1d31461076f578063bfd448f71461065457600080fd5b8063aac485ac146108eb578063aacd089d146108fe578063ae698c7c146107f4578063b09b241f146107a8578063b6fc8d8c14610911578063b82d23b31461092457600080fd5b8063a308298f11610268578063a308298f1461088c578063a315fd391461089f578063a5d0028d146108b2578063a63fc1df146108c5578063a66657e8146108d8578063aa5cd64b146106d757600080fd5b80639034111c146108405780639169462d1461085357806391d4c9ed14610866578063935fc9ff1461080757806395aca5b7146108795780639d24f4be146105bc57600080fd5b80633a5aacb8116103f757806365914c181161035e57806370fd922e1161031757806370fd922e1461081a578063774319e7146106a0578063790714c21461082d5780637abd93aa146106c45780637eaa7a22146107365780638acb32de1461062e57600080fd5b806365914c18146107bb57806365dfa08c146107ce57806367b70aa3146107e15780636cf6fd10146107f45780636d232e6d146106085780636f3d57cc1461080757600080fd5b80634b3cfeb1116103b05780634b3cfeb11461075c5780634cdd512b1461076f5780634d69982e146107825780634e6e74f914610795578063617db4a3146107a8578063647c8823146105a957600080fd5b80633a5aacb8146106ea5780633a8b8b96146106fd57806340639d891461071057806348fa8be7146107235780634a27f445146107365780634a5ad1a61461074957600080fd5b80631eb6018f1161049b5780632f300e61116104545780632f300e611461067a578063304660441461068d57806330dfd541146106a057806332beb385146106b3578063342fae45146106c45780633991d7d4146106d757600080fd5b80631eb6018f14610608578063227ccddb1461061b5780632618b7101461062e57806327a2a08c146106415780632dd4c189146106545780632ec723c91461066757600080fd5b806314673504116104ed578063146735041461059657806314bbddc9146105a957806318a442de146105bc57806319148a5d146105cf5780631b1620f9146105e25780631d4c35a4146105f557600080fd5b80630289569714610535578063037f147d1461054a57806305f6eb211461055d578063078f9137146105705780630bd5c5d21461058357806312ffa78914610535575b600080fd5b610548610543366004610fdf565b6109f5565b005b610548610558366004611013565b610a11565b61054861056b366004610fdf565b610a2a565b61054861057e36600461103c565b610a47565b610548610591366004611065565b610a60565b6105486105a436600461108e565b610a78565b6105486105b73660046110b7565b610a91565b6105486105ca3660046110de565b610aa7565b6105486105dd366004611107565b610abf565b6105486105f0366004611130565b610ad7565b610548610603366004611130565b610aef565b610548610616366004611158565b610b06565b610548610629366004611181565b610b1e565b61054861063c3660046111aa565b610b37565b61054861064f366004611158565b610b4b565b6105486106623660046111cf565b610b64565b6105486106753660046111f5565b610b79565b6105486106883660046111f5565b610b92565b61054861069b36600461121e565b610baa565b6105486106ae366004611247565b610bc2565b6105486106c1366004611271565b50565b6105486106d236600461128a565b610bdb565b6105486106e536600461103c565b610bf5565b6105486106f8366004611013565b610c0d565b61054861070b3660046111cf565b610c25565b61054861071e36600461108e565b610c3b565b6105486107313660046112b5565b610c53565b6105486107443660046112de565b610c6c565b610548610757366004611065565b610c84565b61054861076a366004611307565b610c9d565b61054861077d36600461132b565b610cb1565b6105486107903660046110b7565b610cc9565b6105486107a3366004611354565b610ce0565b6105486107b6366004611354565b610cf9565b6105486107c936600461137d565b610d11565b6105486107dc3660046113a0565b610d24565b6105486107ef3660046113c9565b610d3c565b6105486108023660046113f2565b610d54565b61054861081536600461141b565b610d6c565b610548610828366004611271565b610d84565b61054861083b3660046113a0565b610d95565b61054861084e36600461121e565b610dae565b6105486108613660046112b5565b610dc7565b61054861087436600461132b565b610ddf565b610548610887366004611247565b610df8565b61054861089a3660046112de565b610e12565b6105486108ad366004611307565b610e2b565b6105486108c0366004611444565b610e3e565b6105486108d33660046110de565b610e57565b6105486108e6366004611107565b610e70565b6105486108f936600461137d565b610e89565b61054861090c3660046111aa565b610e9b565b61054861091f366004611181565b610eb0565b61054861093236600461146d565b610ec8565b6105486109453660046113f2565b610ee0565b610548610958366004611444565b610ef9565b61054861096b36600461141b565b610f11565b61054861097e36600461146d565b610f2a565b6105486109913660046113c9565b610f43565b6105486109a4366004611496565b610f5c565b6105486109b736600461128a565b610f77565b6105486109ca3660046114c2565b610f92565b6105486109dd366004611496565b610faa565b6105486109f03660046114c2565b610fc6565b6affffffffffffffffffffff808216106106c1576106c16114eb565b66ffffffffffffff80821611156106c1576106c16114eb565b6affffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160c01b0380821611156106c1576106c16114eb565b6001600160701b03808216106106c1576106c16114eb565b6001600160c81b0380821611156106c1576106c16114eb565b64ffffffffff808216106106c1576106c16114eb565b6001600160a81b03808216106106c1576106c16114eb565b6001600160e01b03808216106106c1576106c16114eb565b65ffffffffffff80821611156106c1576106c16114eb565b65ffffffffffff808216106106c1576106c16114eb565b6001600160d01b03808216106106c1576106c16114eb565b6001600160f81b0380821611156106c1576106c16114eb565b62ffffff808216106106c1576106c16114eb565b6001600160d01b0380821611156106c1576106c16114eb565b63ffffffff808216106106c1576106c16114eb565b6001600160801b0380821611156106c1576106c16114eb565b6001600160801b03808216106106c1576106c16114eb565b6001600160b81b03808216106106c1576106c16114eb565b67ffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff808216106106c1576106c16114eb565b6001600160c01b03808216106106c1576106c16114eb565b66ffffffffffffff808216106106c1576106c16114eb565b63ffffffff80821611156106c1576106c16114eb565b6001600160c81b03808216106106c1576106c16114eb565b6001600160901b0380821611156106c1576106c16114eb565b6001600160d81b03808216106106c1576106c16114eb565b6001600160701b0380821611156106c1576106c16114eb565b61ffff80821611156106c1576106c16114eb565b6001600160a01b03808216106106c1576106c16114eb565b64ffffffffff80821611156106c1576106c16114eb565b6001600160601b0380821611156106c1576106c16114eb565b6001600160601b03808216106106c1576106c16114eb565b60ff80821611156106c1576106c16114eb565b6001600160681b03808216106106c1576106c16114eb565b6001600160881b03808216106106c1576106c16114eb565b6001600160b01b03808216106106c1576106c16114eb565b6001600160981b03808216106106c1576106c16114eb565b80600019116106c1576106c16114eb565b6001600160681b0380821611156106c1576106c16114eb565b6001600160b81b0380821611156106c1576106c16114eb565b6001600160901b03808216106106c1576106c16114eb565b6001600160a01b0380821611156106c1576106c16114eb565b67ffffffffffffffff80821611156106c1576106c16114eb565b6001600160d81b0380821611156106c1576106c16114eb565b61ffff808216106106c1576106c16114eb565b6001600160e81b0380821611156106c1576106c16114eb565b6001600160a81b0380821611156106c1576106c16114eb565b6001600160e01b0380821611156106c1576106c16114eb565b60ff808216106106c1576106c16114eb565b62ffffff80821611156106c1576106c16114eb565b6001600160f81b03808216106106c1576106c16114eb565b6001600160f01b03808216106106c1576106c16114eb565b6001600160b01b0380821611156106c1576106c16114eb565b6001600160e81b03808216106106c1576106c16114eb565b6001600160981b0380821611156106c1576106c16114eb565b6001600160f01b0380821611156106c1576106c16114eb565b6001600160881b0380821611156106c1576106c16114eb565b69ffffffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b03808216106106c1576106c16114eb565b69ffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b0380821611156106c1576106c16114eb565b600060208284031215610ff157600080fd5b81356affffffffffffffffffffff8116811461100c57600080fd5b9392505050565b60006020828403121561102557600080fd5b813566ffffffffffffff8116811461100c57600080fd5b60006020828403121561104e57600080fd5b81356001600160c01b038116811461100c57600080fd5b60006020828403121561107757600080fd5b81356001600160701b038116811461100c57600080fd5b6000602082840312156110a057600080fd5b81356001600160c81b038116811461100c57600080fd5b6000602082840312156110c957600080fd5b813564ffffffffff8116811461100c57600080fd5b6000602082840312156110f057600080fd5b81356001600160a81b038116811461100c57600080fd5b60006020828403121561111957600080fd5b81356001600160e01b038116811461100c57600080fd5b60006020828403121561114257600080fd5b813565ffffffffffff8116811461100c57600080fd5b60006020828403121561116a57600080fd5b81356001600160d01b038116811461100c57600080fd5b60006020828403121561119357600080fd5b81356001600160f81b038116811461100c57600080fd5b6000602082840312156111bc57600080fd5b813562ffffff8116811461100c57600080fd5b6000602082840312156111e157600080fd5b813563ffffffff8116811461100c57600080fd5b60006020828403121561120757600080fd5b81356001600160801b038116811461100c57600080fd5b60006020828403121561123057600080fd5b81356001600160b81b038116811461100c57600080fd5b60006020828403121561125957600080fd5b813567ffffffffffffffff8116811461100c57600080fd5b60006020828403121561128357600080fd5b5035919050565b60006020828403121561129c57600080fd5b813568ffffffffffffffffff8116811461100c57600080fd5b6000602082840312156112c757600080fd5b81356001600160901b038116811461100c57600080fd5b6000602082840312156112f057600080fd5b81356001600160d81b038116811461100c57600080fd5b60006020828403121561131957600080fd5b813561ffff8116811461100c57600080fd5b60006020828403121561133d57600080fd5b81356001600160a01b038116811461100c57600080fd5b60006020828403121561136657600080fd5b81356001600160601b038116811461100c57600080fd5b60006020828403121561138f57600080fd5b813560ff8116811461100c57600080fd5b6000602082840312156113b257600080fd5b81356001600160681b038116811461100c57600080fd5b6000602082840312156113db57600080fd5b81356001600160881b038116811461100c57600080fd5b60006020828403121561140457600080fd5b81356001600160b01b038116811461100c57600080fd5b60006020828403121561142d57600080fd5b81356001600160981b038116811461100c57600080fd5b60006020828403121561145657600080fd5b81356001600160e81b038116811461100c57600080fd5b60006020828403121561147f57600080fd5b81356001600160f01b038116811461100c57600080fd5b6000602082840312156114a857600080fd5b813569ffffffffffffffffffff8116811461100c57600080fd5b6000602082840312156114d457600080fd5b81356001600160781b038116811461100c57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212203da055bbaa68b3025e693e7ab649d1579d995cf78a041869379189a098a00f7864736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KUintTypeTestContract "." S2KUintTypeTestMethod [function(), symbol(), klabel(method_UintTypeTest)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint104ZUndfail" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint104ZUndfail_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint112ZUndfail" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint112ZUndfail_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint120ZUndfail" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint120ZUndfail_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint128ZUndfail" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint128ZUndfail_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint136ZUndfail" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint136ZUndfail_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint144ZUndfail" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint144ZUndfail_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint152ZUndfail" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint152ZUndfail_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint160ZUndfail" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint160ZUndfail_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint168ZUndfail" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint168ZUndfail_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint16ZUndfail" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint16ZUndfail_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint176ZUndfail" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint176ZUndfail_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint184ZUndfail" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint184ZUndfail_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint192ZUndfail" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint192ZUndfail_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint200ZUndfail" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint200ZUndfail_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint208ZUndfail" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint208ZUndfail_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint216ZUndfail" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint216ZUndfail_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint224ZUndfail" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint224ZUndfail_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint232ZUndfail" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint232ZUndfail_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint240ZUndfail" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint240ZUndfail_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint248ZUndfail" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint248ZUndfail_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint24ZUndfail" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint24ZUndfail_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint256ZUndfail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint256ZUndfail_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint32ZUndfail" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint32ZUndfail_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint40ZUndfail" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint40ZUndfail_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint48ZUndfail" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint48ZUndfail_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint56ZUndfail" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint56ZUndfail_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint64ZUndfail" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint64ZUndfail_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint72ZUndfail" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint72ZUndfail_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint80ZUndfail" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint80ZUndfail_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint88ZUndfail" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint88ZUndfail_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint8ZUndfail" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint8ZUndfail_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint96ZUndfail" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint96ZUndfail_uint96)]
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "testFail_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "testFail_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "testFail_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "testFail_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "testFail_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "testFail_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "testFail_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "testFail_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "testFail_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "testFail_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "testFail_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "testFail_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "testFail_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "testFail_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "testFail_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "testFail_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "testFail_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "testFail_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "testFail_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "testFail_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "testFail_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "testFail_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "testFail_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "testFail_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "testFail_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "testFail_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "testFail_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "testFail_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "testFail_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "testFail_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "testFail_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "testFail_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "test_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint104ZUndfail ( V0_x : uint104 ) => #abiCallData ( "test_uint104_fail" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "test_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint112ZUndfail ( V0_x : uint112 ) => #abiCallData ( "test_uint112_fail" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "test_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint120ZUndfail ( V0_x : uint120 ) => #abiCallData ( "test_uint120_fail" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "test_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint128ZUndfail ( V0_x : uint128 ) => #abiCallData ( "test_uint128_fail" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "test_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint136ZUndfail ( V0_x : uint136 ) => #abiCallData ( "test_uint136_fail" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "test_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint144ZUndfail ( V0_x : uint144 ) => #abiCallData ( "test_uint144_fail" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "test_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint152ZUndfail ( V0_x : uint152 ) => #abiCallData ( "test_uint152_fail" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "test_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "test_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint160ZUndfail ( V0_x : uint160 ) => #abiCallData ( "test_uint160_fail" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "test_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint168ZUndfail ( V0_x : uint168 ) => #abiCallData ( "test_uint168_fail" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint16ZUndfail ( V0_x : uint16 ) => #abiCallData ( "test_uint16_fail" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "test_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint176ZUndfail ( V0_x : uint176 ) => #abiCallData ( "test_uint176_fail" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "test_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint184ZUndfail ( V0_x : uint184 ) => #abiCallData ( "test_uint184_fail" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "test_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint192ZUndfail ( V0_x : uint192 ) => #abiCallData ( "test_uint192_fail" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "test_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint200ZUndfail ( V0_x : uint200 ) => #abiCallData ( "test_uint200_fail" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "test_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint208ZUndfail ( V0_x : uint208 ) => #abiCallData ( "test_uint208_fail" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "test_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint216ZUndfail ( V0_x : uint216 ) => #abiCallData ( "test_uint216_fail" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "test_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint224ZUndfail ( V0_x : uint224 ) => #abiCallData ( "test_uint224_fail" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "test_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint232ZUndfail ( V0_x : uint232 ) => #abiCallData ( "test_uint232_fail" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "test_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "test_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint240ZUndfail ( V0_x : uint240 ) => #abiCallData ( "test_uint240_fail" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "test_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint248ZUndfail ( V0_x : uint248 ) => #abiCallData ( "test_uint248_fail" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint24ZUndfail ( V0_x : uint24 ) => #abiCallData ( "test_uint24_fail" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "test_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint256ZUndfail ( V0_x : uint256 ) => #abiCallData ( "test_uint256_fail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "test_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint32ZUndfail ( V0_x : uint32 ) => #abiCallData ( "test_uint32_fail" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "test_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint40ZUndfail ( V0_x : uint40 ) => #abiCallData ( "test_uint40_fail" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "test_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint48ZUndfail ( V0_x : uint48 ) => #abiCallData ( "test_uint48_fail" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "test_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint56ZUndfail ( V0_x : uint56 ) => #abiCallData ( "test_uint56_fail" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "test_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint64ZUndfail ( V0_x : uint64 ) => #abiCallData ( "test_uint64_fail" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "test_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint72ZUndfail ( V0_x : uint72 ) => #abiCallData ( "test_uint72_fail" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "test_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "test_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint80ZUndfail ( V0_x : uint80 ) => #abiCallData ( "test_uint80_fail" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "test_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint88ZUndfail ( V0_x : uint88 ) => #abiCallData ( "test_uint88_fail" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint8ZUndfail ( V0_x : uint8 ) => #abiCallData ( "test_uint8_fail" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "test_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint96ZUndfail ( V0_x : uint96 ) => #abiCallData ( "test_uint96_fail" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( selector ( "testFail_uint104(uint104)" ) => 1709154444 )
      
    
    rule  ( selector ( "testFail_uint112(uint112)" ) => 3541489285 )
      
    
    rule  ( selector ( "testFail_uint120(uint120)" ) => 3839169067 )
      
    
    rule  ( selector ( "testFail_uint128(uint128)" ) => 791678561 )
      
    
    rule  ( selector ( "testFail_uint136(uint136)" ) => 3952257705 )
      
    
    rule  ( selector ( "testFail_uint144(uint144)" ) => 2439595565 )
      
    
    rule  ( selector ( "testFail_uint152(uint152)" ) => 1866291148 )
      
    
    rule  ( selector ( "testFail_uint16(uint16)" ) => 4076431644 )
      
    
    rule  ( selector ( "testFail_uint160(uint160)" ) => 3214193107 )
      
    
    rule  ( selector ( "testFail_uint168(uint168)" ) => 2636444862 )
      
    
    rule  ( selector ( "testFail_uint176(uint176)" ) => 1828125968 )
      
    
    rule  ( selector ( "testFail_uint184(uint184)" ) => 4099305155 )
      
    
    rule  ( selector ( "testFail_uint192(uint192)" ) => 2858210891 )
      
    
    rule  ( selector ( "testFail_uint200(uint200)" ) => 1080270217 )
      
    
    rule  ( selector ( "testFail_uint208(uint208)" ) => 1831022189 )
      
    
    rule  ( selector ( "testFail_uint216(uint216)" ) => 2125101602 )
      
    
    rule  ( selector ( "testFail_uint224(uint224)" ) => 420776541 )
      
    
    rule  ( selector ( "testFail_uint232(uint232)" ) => 3163478438 )
      
    
    rule  ( selector ( "testFail_uint24(uint24)" ) => 639153936 )
      
    
    rule  ( selector ( "testFail_uint240(uint240)" ) => 3089966003 )
      
    
    rule  ( selector ( "testFail_uint248(uint248)" ) => 3070004620 )
      
    
    rule  ( selector ( "testFail_uint256(uint256)" ) => 3436494846 )
      
    
    rule  ( selector ( "testFail_uint32(uint32)" ) => 3218360567 )
      
    
    rule  ( selector ( "testFail_uint40(uint40)" ) => 347856329 )
      
    
    rule  ( selector ( "testFail_uint48(uint48)" ) => 4178735009 )
      
    
    rule  ( selector ( "testFail_uint56(uint56)" ) => 979020984 )
      
    
    rule  ( selector ( "testFail_uint64(uint64)" ) => 819975489 )
      
    
    rule  ( selector ( "testFail_uint72(uint72)" ) => 2059244458 )
      
    
    rule  ( selector ( "testFail_uint8(uint8)" ) => 3679593874 )
      
    
    rule  ( selector ( "testFail_uint80(uint80)" ) => 4180733980 )
      
    
    rule  ( selector ( "testFail_uint88(uint88)" ) => 42555031 )
      
    
    rule  ( selector ( "testFail_uint96(uint96)" ) => 2962957343 )
      
    
    rule  ( selector ( "test_uint104(uint104)" ) => 2030507202 )
      
    
    rule  ( selector ( "test_uint104_fail(uint104)" ) => 3289769429 )
      
    
    rule  ( selector ( "test_uint112(uint112)" ) => 1247465894 )
      
    
    rule  ( selector ( "test_uint112_fail(uint112)" ) => 198559186 )
      
    
    rule  ( selector ( "test_uint120(uint120)" ) => 4013273041 )
      
    
    rule  ( selector ( "test_uint120_fail(uint120)" ) => 4156608892 )
      
    
    rule  ( selector ( "test_uint128(uint128)" ) => 784802761 )
      
    
    rule  ( selector ( "test_uint128_fail(uint128)" ) => 3283002391 )
      
    
    rule  ( selector ( "test_uint136(uint136)" ) => 3590751506 )
      
    
    rule  ( selector ( "test_uint136_fail(uint136)" ) => 1740049059 )
      
    
    rule  ( selector ( "test_uint144(uint144)" ) => 1224379367 )
      
    
    rule  ( selector ( "test_uint144_fail(uint144)" ) => 3911233113 )
      
    
    rule  ( selector ( "test_uint152(uint152)" ) => 3210764837 )
      
    
    rule  ( selector ( "test_uint152_fail(uint152)" ) => 2472528383 )
      
    
    rule  ( selector ( "test_uint16(uint16)" ) => 1262288561 )
      
    
    rule  ( selector ( "test_uint160(uint160)" ) => 2446641645 )
      
    
    rule  ( selector ( "test_uint160_fail(uint160)" ) => 1289572651 )
      
    
    rule  ( selector ( "test_uint168(uint168)" ) => 2789196255 )
      
    
    rule  ( selector ( "test_uint168_fail(uint168)" ) => 413418206 )
      
    
    rule  ( selector ( "test_uint16_fail(uint16)" ) => 2736127289 )
      
    
    rule  ( selector ( "test_uint176(uint176)" ) => 3119759714 )
      
    
    rule  ( selector ( "test_uint176_fail(uint176)" ) => 2926152828 )
      
    
    rule  ( selector ( "test_uint184(uint184)" ) => 2419331356 )
      
    
    rule  ( selector ( "test_uint184_fail(uint184)" ) => 809918532 )
      
    
    rule  ( selector ( "test_uint192(uint192)" ) => 126849335 )
      
    
    rule  ( selector ( "test_uint192_fail(uint192)" ) => 965859284 )
      
    
    rule  ( selector ( "test_uint200(uint200)" ) => 342308100 )
      
    
    rule  ( selector ( "test_uint200_fail(uint200)" ) => 3554205475 )
      
    
    rule  ( selector ( "test_uint208(uint208)" ) => 664969356 )
      
    
    rule  ( selector ( "test_uint208_fail(uint208)" ) => 515244431 )
      
    
    rule  ( selector ( "test_uint216(uint216)" ) => 2735221135 )
      
    
    rule  ( selector ( "test_uint216_fail(uint216)" ) => 1244132421 )
      
    
    rule  ( selector ( "test_uint224(uint224)" ) => 2791725032 )
      
    
    rule  ( selector ( "test_uint224_fail(uint224)" ) => 3535210075 )
      
    
    rule  ( selector ( "test_uint232(uint232)" ) => 2781872781 )
      
    
    rule  ( selector ( "test_uint232_fail(uint232)" ) => 3352181217 )
      
    
    rule  ( selector ( "test_uint24(uint24)" ) => 2865563805 )
      
    
    rule  ( selector ( "test_uint240(uint240)" ) => 3274361055 )
      
    
    rule  ( selector ( "test_uint240_fail(uint240)" ) => 4046179916 )
      
    
    rule  ( selector ( "test_uint248(uint248)" ) => 578604507 )
      
    
    rule  ( selector ( "test_uint248_fail(uint248)" ) => 3580188072 )
      
    
    rule  ( selector ( "test_uint24_fail(uint24)" ) => 2328572638 )
      
    
    rule  ( selector ( "test_uint256(uint256)" ) => 851358597 )
      
    
    rule  ( selector ( "test_uint256_fail(uint256)" ) => 1895666222 )
      
    
    rule  ( selector ( "test_uint32(uint32)" ) => 982223766 )
      
    
    rule  ( selector ( "test_uint32_fail(uint32)" ) => 768917897 )
      
    
    rule  ( selector ( "test_uint40(uint40)" ) => 1298765870 )
      
    
    rule  ( selector ( "test_uint40_fail(uint40)" ) => 1685882915 )
      
    
    rule  ( selector ( "test_uint48(uint48)" ) => 454435065 )
      
    
    rule  ( selector ( "test_uint48_fail(uint48)" ) => 491533732 )
      
    
    rule  ( selector ( "test_uint56(uint56)" ) => 58659965 )
      
    
    rule  ( selector ( "test_uint56_fail(uint56)" ) => 3185974238 )
      
    
    rule  ( selector ( "test_uint64(uint64)" ) => 2511119799 )
      
    
    rule  ( selector ( "test_uint64_fail(uint64)" ) => 2000886247 )
      
    
    rule  ( selector ( "test_uint72(uint72)" ) => 3694811120 )
      
    
    rule  ( selector ( "test_uint72_fail(uint72)" ) => 875540037 )
      
    
    rule  ( selector ( "test_uint8(uint8)" ) => 1704021016 )
      
    
    rule  ( selector ( "test_uint80(uint80)" ) => 3841083967 )
      
    
    rule  ( selector ( "test_uint80_fail(uint80)" ) => 3626141300 )
      
    
    rule  ( selector ( "test_uint88(uint88)" ) => 100068129 )
      
    
    rule  ( selector ( "test_uint88_fail(uint88)" ) => 318744457 )
      
    
    rule  ( selector ( "test_uint8_fail(uint8)" ) => 2865005996 )
      
    
    rule  ( selector ( "test_uint96(uint96)" ) => 1315861753 )
      
    
    rule  ( selector ( "test_uint96_fail(uint96)" ) => 1635628195 )
      

endmodule

module S2KVm-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KVmContract
    
    syntax S2KVmContract ::= "S2KVm" [symbol(), klabel(contract_Vm)]
    
      
    
    rule  ( #initBytecode ( S2KVm ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KVmContract "." S2KVmMethod [function(), symbol(), klabel(method_Vm)]
    
    syntax S2KVmMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kaccesses_address)]
    
    syntax S2KVmMethod ::= "S2KactiveFork" "(" ")" [symbol(), klabel(method_Vm_S2KactiveFork_)]
    
    syntax S2KVmMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kaddr_uint256)]
    
    syntax S2KVmMethod ::= "S2KallowCheatcodes" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KallowCheatcodes_address)]
    
    syntax S2KVmMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kassume_bool)]
    
    syntax S2KVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2Kbreakpoint_string)]
    
    syntax S2KVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kbreakpoint_string_bool)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_address)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_uint256)]
    
    syntax S2KVmMethod ::= "S2KchainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KchainId_uint256)]
    
    syntax S2KVmMethod ::= "S2KclearMockedCalls" "(" ")" [symbol(), klabel(method_Vm_S2KclearMockedCalls_)]
    
    syntax S2KVmMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcloseFile_string)]
    
    syntax S2KVmMethod ::= "S2Kcoinbase" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kcoinbase_address)]
    
    syntax S2KVmMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KcreateDir_string_bool)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string_bytes32)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string_uint256)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string_bytes32)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string_uint256)]
    
    syntax S2KVmMethod ::= "S2Kdeal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kdeal_address_uint256)]
    
    syntax S2KVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_string_uint32)]
    
    syntax S2KVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_uint32)]
    
    syntax S2KVmMethod ::= "S2Kdifficulty" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kdifficulty_uint256)]
    
    syntax S2KVmMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string)]
    
    syntax S2KVmMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string)]
    
    syntax S2KVmMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string)]
    
    syntax S2KVmMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_address)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_bool)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_bytes)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_bytes32)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_int256)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_address[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_bool[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_bytes32[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_bytes[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_int256[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_string[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_uint256[])]
    
    syntax S2KVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_uint256)]
    
    syntax S2KVmMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string)]
    
    syntax S2KVmMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string)]
    
    syntax S2KVmMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string_string)]
    
    syntax S2KVmMethod ::= "S2Ketch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2Ketch_address_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_bytes_uint64)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_bytes_uint64)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_uint64_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_uint64_bytes_uint64)]
    
    syntax S2KVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes_uint64)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_address)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool_address)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes4)]
    
    syntax S2KVmMethod ::= "S2KexpectSafeMemory" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectSafeMemory_uint64_uint64)]
    
    syntax S2KVmMethod ::= "S2KexpectSafeMemoryCall" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectSafeMemoryCall_uint64_uint64)]
    
    syntax S2KVmMethod ::= "S2Kfee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kfee_uint256)]
    
    syntax S2KVmMethod ::= "S2Kffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2Kffi_string[])]
    
    syntax S2KVmMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KfsMetadata_string)]
    
    syntax S2KVmMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KgetCode_string)]
    
    syntax S2KVmMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KgetDeployedCode_string)]
    
    syntax S2KVmMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KgetLabel_address)]
    
    syntax S2KVmMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KgetNonce_address)]
    
    syntax S2KVmMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_Vm_S2KgetRecordedLogs_)]
    
    syntax S2KVmMethod ::= "S2KisPersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KisPersistent_address)]
    
    syntax S2KVmMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2Klabel_address_string)]
    
    syntax S2KVmMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kload_address_bytes32)]
    
    syntax S2KVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address)]
    
    syntax S2KVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address_address)]
    
    syntax S2KVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address_address_address)]
    
    syntax S2KVmMethod ::= "S2KmakePersistent" "(" K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address[])]
    
    syntax S2KVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_uint256_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCallRevert_address_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCallRevert_address_uint256_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseAddress_string)]
    
    syntax S2KVmMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseBool_string)]
    
    syntax S2KVmMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseBytes_string)]
    
    syntax S2KVmMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseBytes32_string)]
    
    syntax S2KVmMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseInt_string)]
    
    syntax S2KVmMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJson_string)]
    
    syntax S2KVmMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJson_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonAddress_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonAddressArray_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBool_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBoolArray_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytes_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytes32_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytes32Array_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytesArray_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonInt_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonIntArray_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonString_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonStringArray_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonUint_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonUintArray_string_string)]
    
    syntax S2KVmMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseUint_string)]
    
    syntax S2KVmMethod ::= "S2KpauseGasMetering" "(" ")" [symbol(), klabel(method_Vm_S2KpauseGasMetering_)]
    
    syntax S2KVmMethod ::= "S2Kprank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address)]
    
    syntax S2KVmMethod ::= "S2Kprank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address_address)]
    
    syntax S2KVmMethod ::= "S2Kprevrandao" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kprevrandao_bytes32)]
    
    syntax S2KVmMethod ::= "S2KprojectRoot" "(" ")" [symbol(), klabel(method_Vm_S2KprojectRoot_)]
    
    syntax S2KVmMethod ::= "S2KreadCallers" "(" ")" [symbol(), klabel(method_Vm_S2KreadCallers_)]
    
    syntax S2KVmMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadDir_string)]
    
    syntax S2KVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KreadDir_string_uint64)]
    
    syntax S2KVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KreadDir_string_uint64_bool)]
    
    syntax S2KVmMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadFile_string)]
    
    syntax S2KVmMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadFileBinary_string)]
    
    syntax S2KVmMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadLine_string)]
    
    syntax S2KVmMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadLink_string)]
    
    syntax S2KVmMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_Vm_S2Krecord_)]
    
    syntax S2KVmMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_Vm_S2KrecordLogs_)]
    
    syntax S2KVmMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrememberKey_uint256)]
    
    syntax S2KVmMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KremoveDir_string_bool)]
    
    syntax S2KVmMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KremoveFile_string)]
    
    syntax S2KVmMethod ::= "S2KresetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KresetNonce_address)]
    
    syntax S2KVmMethod ::= "S2KresumeGasMetering" "(" ")" [symbol(), klabel(method_Vm_S2KresumeGasMetering_)]
    
    syntax S2KVmMethod ::= "S2KrevertTo" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrevertTo_uint256)]
    
    syntax S2KVmMethod ::= "S2KrevokePersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KrevokePersistent_address)]
    
    syntax S2KVmMethod ::= "S2KrevokePersistent" "(" K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KrevokePersistent_address[])]
    
    syntax S2KVmMethod ::= "S2Kroll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kroll_uint256)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KrollFork_bytes32)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256_bytes32)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256_uint256)]
    
    syntax S2KVmMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KrpcUrl_string)]
    
    syntax S2KVmMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol(), klabel(method_Vm_S2KrpcUrlStructs_)]
    
    syntax S2KVmMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_Vm_S2KrpcUrls_)]
    
    syntax S2KVmMethod ::= "S2KselectFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KselectFork_uint256)]
    
    syntax S2KVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KserializeAddress_string_string_address)]
    
    syntax S2KVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KserializeAddress_string_string_address[])]
    
    syntax S2KVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KserializeBool_string_string_bool)]
    
    syntax S2KVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_Vm_S2KserializeBool_string_string_bool[])]
    
    syntax S2KVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KserializeBytes_string_string_bytes)]
    
    syntax S2KVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_Vm_S2KserializeBytes_string_string_bytes[])]
    
    syntax S2KVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KserializeBytes32_string_string_bytes32)]
    
    syntax S2KVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_Vm_S2KserializeBytes32_string_string_bytes32[])]
    
    syntax S2KVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KserializeInt_string_string_int256)]
    
    syntax S2KVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_Vm_S2KserializeInt_string_string_int256[])]
    
    syntax S2KVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KserializeString_string_string_string)]
    
    syntax S2KVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2KserializeString_string_string_string[])]
    
    syntax S2KVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KserializeUint_string_string_uint256)]
    
    syntax S2KVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_Vm_S2KserializeUint_string_string_uint256[])]
    
    syntax S2KVmMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KsetEnv_string_string)]
    
    syntax S2KVmMethod ::= "S2KsetNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KsetNonce_address_uint64)]
    
    syntax S2KVmMethod ::= "S2KsetNonceUnsafe" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KsetNonceUnsafe_address_uint64)]
    
    syntax S2KVmMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ksign_uint256_bytes32)]
    
    syntax S2KVmMethod ::= "S2Kskip" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kskip_bool)]
    
    syntax S2KVmMethod ::= "S2Ksnapshot" "(" ")" [symbol(), klabel(method_Vm_S2Ksnapshot_)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_address)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_uint256)]
    
    syntax S2KVmMethod ::= "S2KstartPrank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address)]
    
    syntax S2KVmMethod ::= "S2KstartPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address_address)]
    
    syntax S2KVmMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstopBroadcast_)]
    
    syntax S2KVmMethod ::= "S2KstopPrank" "(" ")" [symbol(), klabel(method_Vm_S2KstopPrank_)]
    
    syntax S2KVmMethod ::= "S2Kstore" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kstore_address_bytes32_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KtoString_address)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KtoString_bool)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KtoString_int256)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KtoString_uint256)]
    
    syntax S2KVmMethod ::= "S2Ktransact" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ktransact_bytes32)]
    
    syntax S2KVmMethod ::= "S2Ktransact" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ktransact_uint256_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtxGasPrice" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KtxGasPrice_uint256)]
    
    syntax S2KVmMethod ::= "S2Kwarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kwarp_uint256)]
    
    syntax S2KVmMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteFile_string_string)]
    
    syntax S2KVmMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KwriteFileBinary_string_bytes)]
    
    syntax S2KVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteJson_string_string)]
    
    syntax S2KVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteJson_string_string_string)]
    
    syntax S2KVmMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteLine_string_string)]
    
    rule  ( S2KVm . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , #address ( V0_target ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_target )
      
    
    rule  ( S2KVm . S2KactiveFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVm . S2KallowCheatcodes ( V0_account : address ) => #abiCallData ( "allowCheatcodes" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , #bool ( V0_condition ) , .TypedArgs ) )
       ensures #rangeBool ( V0_condition )
      
    
    rule  ( S2KVm . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , #bool ( V1_value ) , .TypedArgs ) )
       ensures #rangeBool ( V1_value )
      
    
    rule  ( S2KVm . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KVm . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVm . S2KchainId ( V0_newChainId : uint256 ) => #abiCallData ( "chainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KVm . S2KclearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kcoinbase ( V0_newCoinbase : address ) => #abiCallData ( "coinbase" , #address ( V0_newCoinbase ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_newCoinbase )
      
    
    rule  ( S2KVm . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_urlOrAlias : string ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_txHash )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_urlOrAlias : string ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_txHash )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )
      
    
    rule  ( S2KVm . S2Kdeal ( V0_account : address , V1_newBalance : uint256 ) => #abiCallData ( "deal" , #address ( V0_account ) , #uint256 ( V1_newBalance ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 256 , V1_newBalance )
               ))
      
    
    rule  ( S2KVm . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )
      
    
    rule  ( S2KVm . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )
      
    
    rule  ( S2KVm . S2Kdifficulty ( V0_newDifficulty : uint256 ) => #abiCallData ( "difficulty" , #uint256 ( V0_newDifficulty ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newDifficulty )
      
    
    rule  ( S2KVm . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #address ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeAddress ( V1_defaultValue )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bool ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBool ( V1_defaultValue )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_defaultValue ) )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes32 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #int256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_defaultValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #uint256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KVm . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Ketch ( V0_target : address , V1_newRuntimeBytecode : bytes ) => #abiCallData ( "etch" , #address ( V0_target ) , #bytes ( V1_newRuntimeBytecode ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_newRuntimeBytecode ) )
               ))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_callee : address , V1_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
               ))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_callee : address , V1_data : bytes , V2_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #bytes ( V1_data ) , #uint64 ( V2_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , V2_count )
               )))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
               )))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #uint64 ( V3_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , V3_count )
               ))))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_gas ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_gas ) , #bytes ( V3_data ) , #uint64 ( V4_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))
      
    
    rule  ( S2KVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCallMinGas" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_minGas ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCallMinGas" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_minGas ) , #bytes ( V3_data ) , #uint64 ( V4_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))
      
    
    rule  ( S2KVm . S2KexpectEmit ( ) => #abiCallData ( "expectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_emitter : address ) => #abiCallData ( "expectEmit" , #address ( V0_emitter ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_emitter )
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool ) => #abiCallData ( "expectEmit" , #bool ( V0_checkTopic1 ) , #bool ( V1_checkTopic2 ) , #bool ( V2_checkTopic3 ) , #bool ( V3_checkData ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
               ))))
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool , V4_emitter : address ) => #abiCallData ( "expectEmit" , #bool ( V0_checkTopic1 ) , #bool ( V1_checkTopic2 ) , #bool ( V2_checkTopic3 ) , #bool ( V3_checkData ) , #address ( V4_emitter ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
       andBool ( #rangeAddress ( V4_emitter )
               )))))
      
    
    rule  ( S2KVm . S2KexpectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KexpectRevert ( V0_revertData : bytes ) => #abiCallData ( "expectRevert" , #bytes ( V0_revertData ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_revertData ) )
      
    
    rule  ( S2KVm . S2KexpectRevert ( V0_revertData : bytes4 ) => #abiCallData ( "expectRevert" , #bytes4 ( V0_revertData ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_revertData )
      
    
    rule  ( S2KVm . S2KexpectSafeMemory ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemory" , #uint64 ( V0_min ) , #uint64 ( V1_max ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))
      
    
    rule  ( S2KVm . S2KexpectSafeMemoryCall ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemoryCall" , #uint64 ( V0_min ) , #uint64 ( V1_max ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))
      
    
    rule  ( S2KVm . S2Kfee ( V0_newBasefee : uint256 ) => #abiCallData ( "fee" , #uint256 ( V0_newBasefee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newBasefee )
      
    
    rule  ( S2KVm . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KisPersistent ( V0_account : address ) => #abiCallData ( "isPersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , #address ( V0_account ) , #string ( V1_newLabel ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , #address ( V0_target ) , #bytes32 ( V1_slot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))
      
    
    rule  ( S2KVm . S2KmakePersistent ( V0_account : address ) => #abiCallData ( "makePersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address ) => #abiCallData ( "makePersistent" , #address ( V0_account0 ) , #address ( V1_account1 ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
               ))
      
    
    rule  ( S2KVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address , V2_account2 : address ) => #abiCallData ( "makePersistent" , #address ( V0_account0 ) , #address ( V1_account1 ) , #address ( V2_account2 ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
       andBool ( #rangeAddress ( V2_account2 )
               )))
      
    
    rule  ( S2KVm . S2KmockCall ( V0_callee : address , V1_data : bytes , V2_returnData : bytes ) => #abiCallData ( "mockCall" , #address ( V0_callee ) , #bytes ( V1_data ) , #bytes ( V2_returnData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_returnData ) )
               )))
      
    
    rule  ( S2KVm . S2KmockCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_returnData : bytes ) => #abiCallData ( "mockCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #bytes ( V3_returnData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_returnData ) )
               ))))
      
    
    rule  ( S2KVm . S2KmockCallRevert ( V0_callee : address , V1_data : bytes , V2_revertData : bytes ) => #abiCallData ( "mockCallRevert" , #address ( V0_callee ) , #bytes ( V1_data ) , #bytes ( V2_revertData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_revertData ) )
               )))
      
    
    rule  ( S2KVm . S2KmockCallRevert ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_revertData : bytes ) => #abiCallData ( "mockCallRevert" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #bytes ( V3_revertData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_revertData ) )
               ))))
      
    
    rule  ( S2KVm . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddress" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonAddressArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddressArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonBool ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBool" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonBoolArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBoolArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonBytes32Array ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32Array" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonBytesArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytesArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonInt ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonInt" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonIntArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonIntArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonString ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonString" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonStringArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonStringArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonUint ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUint" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseJsonUintArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUintArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kprank ( V0_msgSender : address ) => #abiCallData ( "prank" , #address ( V0_msgSender ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_msgSender )
      
    
    rule  ( S2KVm . S2Kprank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "prank" , #address ( V0_msgSender ) , #address ( V1_txOrigin ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))
      
    
    rule  ( S2KVm . S2Kprevrandao ( V0_newPrevrandao : bytes32 ) => #abiCallData ( "prevrandao" , #bytes32 ( V0_newPrevrandao ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_newPrevrandao )
      
    
    rule  ( S2KVm . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadCallers ( ) => #abiCallData ( "readCallers" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )
      
    
    rule  ( S2KVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , #bool ( V2_followLinks ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))
      
    
    rule  ( S2KVm . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , #string ( V0_linkPath ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVm . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KVm . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KresetNonce ( V0_account : address ) => #abiCallData ( "resetNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrevertTo ( V0_snapshotId : uint256 ) => #abiCallData ( "revertTo" , #uint256 ( V0_snapshotId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_snapshotId )
      
    
    rule  ( S2KVm . S2KrevokePersistent ( V0_account : address ) => #abiCallData ( "revokePersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVm . S2Kroll ( V0_newHeight : uint256 ) => #abiCallData ( "roll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_txHash : bytes32 ) => #abiCallData ( "rollFork" , #bytes32 ( V0_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_txHash )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))
      
    
    rule  ( S2KVm . S2KrollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))
      
    
    rule  ( S2KVm . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , #string ( V0_rpcAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KselectFork ( V0_forkId : uint256 ) => #abiCallData ( "selectFork" , #uint256 ( V0_forkId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_forkId )
      
    
    rule  ( S2KVm . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #address ( V2_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V2_value )
      
    
    rule  ( S2KVm . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bool ( V2_value ) , .TypedArgs ) )
       ensures #rangeBool ( V2_value )
      
    
    rule  ( S2KVm . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V2_value ) )
      
    
    rule  ( S2KVm . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V2_value )
      
    
    rule  ( S2KVm . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #int256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V2_value )
      
    
    rule  ( S2KVm . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #string ( V2_value ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #uint256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V2_value )
      
    
    rule  ( S2KVm . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , #string ( V0_name ) , #string ( V1_value ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KsetNonce ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonce" , #address ( V0_account ) , #uint64 ( V1_newNonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))
      
    
    rule  ( S2KVm . S2KsetNonceUnsafe ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonceUnsafe" , #address ( V0_account ) , #uint64 ( V1_newNonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))
      
    
    rule  ( S2KVm . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))
      
    
    rule  ( S2KVm . S2Kskip ( V0_skipTest : bool ) => #abiCallData ( "skip" , #bool ( V0_skipTest ) , .TypedArgs ) )
       ensures #rangeBool ( V0_skipTest )
      
    
    rule  ( S2KVm . S2Ksnapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVm . S2KstartPrank ( V0_msgSender : address ) => #abiCallData ( "startPrank" , #address ( V0_msgSender ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_msgSender )
      
    
    rule  ( S2KVm . S2KstartPrank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "startPrank" , #address ( V0_msgSender ) , #address ( V1_txOrigin ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))
      
    
    rule  ( S2KVm . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kstore ( V0_target : address , V1_slot : bytes32 , V2_value : bytes32 ) => #abiCallData ( "store" , #address ( V0_target ) , #bytes32 ( V1_slot ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
       andBool ( #rangeBytes ( 32 , V2_value )
               )))
      
    
    rule  ( S2KVm . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , #address ( V0_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_value )
      
    
    rule  ( S2KVm . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , #bool ( V0_value ) , .TypedArgs ) )
       ensures #rangeBool ( V0_value )
      
    
    rule  ( S2KVm . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , #bytes ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_value ) )
      
    
    rule  ( S2KVm . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_value )
      
    
    rule  ( S2KVm . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , #int256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_value )
      
    
    rule  ( S2KVm . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KVm . S2Ktransact ( V0_txHash : bytes32 ) => #abiCallData ( "transact" , #bytes32 ( V0_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_txHash )
      
    
    rule  ( S2KVm . S2Ktransact ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "transact" , #uint256 ( V0_forkId ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))
      
    
    rule  ( S2KVm . S2KtxGasPrice ( V0_newGasPrice : uint256 ) => #abiCallData ( "txGasPrice" , #uint256 ( V0_newGasPrice ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newGasPrice )
      
    
    rule  ( S2KVm . S2Kwarp ( V0_newTimestamp : uint256 ) => #abiCallData ( "warp" , #uint256 ( V0_newTimestamp ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newTimestamp )
      
    
    rule  ( S2KVm . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , #string ( V0_path ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_data ) )
      
    
    rule  ( S2KVm . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , #string ( V2_valueKey ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "activeFork()" ) => 789593890 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "allowCheatcodes(address)" ) => 3926262417 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )
      
    
    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )
      
    
    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )
      
    
    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "coinbase(address)" ) => 4282924116 )
      
    
    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )
      
    
    rule  ( selector ( "createFork(string)" ) => 834286744 )
      
    
    rule  ( selector ( "createFork(string,bytes32)" ) => 2091030146 )
      
    
    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )
      
    
    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )
      
    
    rule  ( selector ( "createSelectFork(string,bytes32)" ) => 2228562810 )
      
    
    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )
      
    
    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "difficulty(uint256)" ) => 1187812057 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )
      
    
    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )
      
    
    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )
      
    
    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )
      
    
    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )
      
    
    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )
      
    
    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )
      
    
    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )
      
    
    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )
      
    
    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )
      
    
    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )
      
    
    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )
      
    
    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )
      
    
    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )
      
    
    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )
      
    
    rule  ( selector ( "expectCall(address,bytes,uint64)" ) => 3249388543 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes,uint64)" ) => 2729550254 )
      
    
    rule  ( selector ( "expectCall(address,uint256,uint64,bytes)" ) => 590746119 )
      
    
    rule  ( selector ( "expectCall(address,uint256,uint64,bytes,uint64)" ) => 1706538956 )
      
    
    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes)" ) => 149217558 )
      
    
    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes,uint64)" ) => 3778680884 )
      
    
    rule  ( selector ( "expectEmit()" ) => 1141821709 )
      
    
    rule  ( selector ( "expectEmit(address)" ) => 2260296205 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )
      
    
    rule  ( selector ( "expectRevert()" ) => 4102309908 )
      
    
    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )
      
    
    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )
      
    
    rule  ( selector ( "expectSafeMemory(uint64,uint64)" ) => 1828808328 )
      
    
    rule  ( selector ( "expectSafeMemoryCall(uint64,uint64)" ) => 92507124 )
      
    
    rule  ( selector ( "fee(uint256)" ) => 968063664 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )
      
    
    rule  ( selector ( "getLabel(address)" ) => 681724336 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "isPersistent(address)" ) => 3643641597 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "makePersistent(address)" ) => 1474440670 )
      
    
    rule  ( selector ( "makePersistent(address,address)" ) => 1081401512 )
      
    
    rule  ( selector ( "makePersistent(address,address,address)" ) => 4021779061 )
      
    
    rule  ( selector ( "makePersistent(address[])" ) => 496903838 )
      
    
    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )
      
    
    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )
      
    
    rule  ( selector ( "mockCallRevert(address,bytes,bytes)" ) => 3685404999 )
      
    
    rule  ( selector ( "mockCallRevert(address,uint256,bytes,bytes)" ) => 3527200823 )
      
    
    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )
      
    
    rule  ( selector ( "parseBool(string)" ) => 2538535204 )
      
    
    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )
      
    
    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )
      
    
    rule  ( selector ( "parseInt(string)" ) => 1110731870 )
      
    
    rule  ( selector ( "parseJson(string)" ) => 1786929162 )
      
    
    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )
      
    
    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )
      
    
    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )
      
    
    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )
      
    
    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )
      
    
    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )
      
    
    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )
      
    
    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )
      
    
    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )
      
    
    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )
      
    
    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )
      
    
    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )
      
    
    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )
      
    
    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )
      
    
    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )
      
    
    rule  ( selector ( "parseUint(string)" ) => 4203824461 )
      
    
    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )
      
    
    rule  ( selector ( "prank(address)" ) => 3395723175 )
      
    
    rule  ( selector ( "prank(address,address)" ) => 1206193358 )
      
    
    rule  ( selector ( "prevrandao(bytes32)" ) => 999445833 )
      
    
    rule  ( selector ( "projectRoot()" ) => 3643842790 )
      
    
    rule  ( selector ( "readCallers()" ) => 1255193289 )
      
    
    rule  ( selector ( "readDir(string)" ) => 3300678112 )
      
    
    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )
      
    
    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "readLink(string)" ) => 2673247394 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )
      
    
    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "resetNonce(address)" ) => 477246573 )
      
    
    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )
      
    
    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )
      
    
    rule  ( selector ( "revokePersistent(address)" ) => 2574909986 )
      
    
    rule  ( selector ( "revokePersistent(address[])" ) => 1021929958 )
      
    
    rule  ( selector ( "roll(uint256)" ) => 528174896 )
      
    
    rule  ( selector ( "rollFork(bytes32)" ) => 254375723 )
      
    
    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )
      
    
    rule  ( selector ( "rollFork(uint256,bytes32)" ) => 4068675451 )
      
    
    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )
      
    
    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )
      
    
    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )
      
    
    rule  ( selector ( "setNonceUnsafe(address,uint64)" ) => 2607264284 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "skip(bool)" ) => 3716337982 )
      
    
    rule  ( selector ( "snapshot()" ) => 2534502746 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )
      
    
    rule  ( selector ( "startPrank(address)" ) => 105151830 )
      
    
    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopPrank()" ) => 2428830011 )
      
    
    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "transact(bytes32)" ) => 3194252705 )
      
    
    rule  ( selector ( "transact(uint256,bytes32)" ) => 1300937803 )
      
    
    rule  ( selector ( "txGasPrice(uint256)" ) => 1224018959 )
      
    
    rule  ( selector ( "warp(uint256)" ) => 3856056066 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )
      
    
    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )
      
    
    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module S2KVmSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KVmSafeContract
    
    syntax S2KVmSafeContract ::= "S2KVmSafe" [symbol(), klabel(contract_VmSafe)]
    
      
    
    rule  ( #initBytecode ( S2KVmSafe ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KVmSafeContract "." S2KVmSafeMethod [function(), symbol(), klabel(method_VmSafe)]
    
    syntax S2KVmSafeMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2Kaccesses_address)]
    
    syntax S2KVmSafeMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2Kaddr_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2Kassume_bool)]
    
    syntax S2KVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2Kbreakpoint_string)]
    
    syntax S2KVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2Kbreakpoint_string_bool)]
    
    syntax S2KVmSafeMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_VmSafe_S2Kbroadcast_)]
    
    syntax S2KVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2Kbroadcast_address)]
    
    syntax S2KVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2Kbroadcast_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KcloseFile_string)]
    
    syntax S2KVmSafeMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KcreateDir_string_bool)]
    
    syntax S2KVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_VmSafe_S2KderiveKey_string_string_uint32)]
    
    syntax S2KVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_VmSafe_S2KderiveKey_string_uint32)]
    
    syntax S2KVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvAddress_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvAddress_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBool_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBool_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes32_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes32_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvInt_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvInt_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_address)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_bool)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_bytes)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_bytes32)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_int256)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_address[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_bool[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_bytes32[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_bytes[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_int256[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_string[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_uint256[])]
    
    syntax S2KVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvString_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvString_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvUint_string)]
    
    syntax S2KVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvUint_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2Kffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2Kffi_string[])]
    
    syntax S2KVmSafeMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KfsMetadata_string)]
    
    syntax S2KVmSafeMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KgetCode_string)]
    
    syntax S2KVmSafeMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KgetDeployedCode_string)]
    
    syntax S2KVmSafeMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KgetLabel_address)]
    
    syntax S2KVmSafeMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KgetNonce_address)]
    
    syntax S2KVmSafeMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_VmSafe_S2KgetRecordedLogs_)]
    
    syntax S2KVmSafeMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2Klabel_address_string)]
    
    syntax S2KVmSafeMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2Kload_address_bytes32)]
    
    syntax S2KVmSafeMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseAddress_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseBool_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseBytes_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseBytes32_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseInt_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJson_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJson_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonAddress_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonAddressArray_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBool_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBoolArray_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytes_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytes32_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytes32Array_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytesArray_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonInt_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonIntArray_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonString_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonStringArray_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonUint_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonUintArray_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseUint_string)]
    
    syntax S2KVmSafeMethod ::= "S2KpauseGasMetering" "(" ")" [symbol(), klabel(method_VmSafe_S2KpauseGasMetering_)]
    
    syntax S2KVmSafeMethod ::= "S2KprojectRoot" "(" ")" [symbol(), klabel(method_VmSafe_S2KprojectRoot_)]
    
    syntax S2KVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadDir_string)]
    
    syntax S2KVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol(), klabel(method_VmSafe_S2KreadDir_string_uint64)]
    
    syntax S2KVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KreadDir_string_uint64_bool)]
    
    syntax S2KVmSafeMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadFile_string)]
    
    syntax S2KVmSafeMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadFileBinary_string)]
    
    syntax S2KVmSafeMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadLine_string)]
    
    syntax S2KVmSafeMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadLink_string)]
    
    syntax S2KVmSafeMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_VmSafe_S2Krecord_)]
    
    syntax S2KVmSafeMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_VmSafe_S2KrecordLogs_)]
    
    syntax S2KVmSafeMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KrememberKey_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KremoveDir_string_bool)]
    
    syntax S2KVmSafeMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KremoveFile_string)]
    
    syntax S2KVmSafeMethod ::= "S2KresumeGasMetering" "(" ")" [symbol(), klabel(method_VmSafe_S2KresumeGasMetering_)]
    
    syntax S2KVmSafeMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KrpcUrl_string)]
    
    syntax S2KVmSafeMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol(), klabel(method_VmSafe_S2KrpcUrlStructs_)]
    
    syntax S2KVmSafeMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_VmSafe_S2KrpcUrls_)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KserializeAddress_string_string_address)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeAddress_string_string_address[])]
    
    syntax S2KVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KserializeBool_string_string_bool)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeBool_string_string_bool[])]
    
    syntax S2KVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes_string_string_bytes)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes_string_string_bytes[])]
    
    syntax S2KVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes32_string_string_bytes32)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes32_string_string_bytes32[])]
    
    syntax S2KVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_VmSafe_S2KserializeInt_string_string_int256)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeInt_string_string_int256[])]
    
    syntax S2KVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KserializeString_string_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeString_string_string_string[])]
    
    syntax S2KVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KserializeUint_string_string_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeUint_string_string_uint256[])]
    
    syntax S2KVmSafeMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KsetEnv_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2Ksign_uint256_bytes32)]
    
    syntax S2KVmSafeMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_VmSafe_S2KstartBroadcast_)]
    
    syntax S2KVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KstartBroadcast_address)]
    
    syntax S2KVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KstartBroadcast_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_VmSafe_S2KstopBroadcast_)]
    
    syntax S2KVmSafeMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KtoString_address)]
    
    syntax S2KVmSafeMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KtoString_bool)]
    
    syntax S2KVmSafeMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KtoString_bytes)]
    
    syntax S2KVmSafeMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KtoString_bytes32)]
    
    syntax S2KVmSafeMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_VmSafe_S2KtoString_int256)]
    
    syntax S2KVmSafeMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KtoString_uint256)]
    
    syntax S2KVmSafeMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteFile_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KwriteFileBinary_string_bytes)]
    
    syntax S2KVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteJson_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteJson_string_string_string)]
    
    syntax S2KVmSafeMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteLine_string_string)]
    
    rule  ( S2KVmSafe . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , #address ( V0_target ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_target )
      
    
    rule  ( S2KVmSafe . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVmSafe . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , #bool ( V0_condition ) , .TypedArgs ) )
       ensures #rangeBool ( V0_condition )
      
    
    rule  ( S2KVmSafe . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , #bool ( V1_value ) , .TypedArgs ) )
       ensures #rangeBool ( V1_value )
      
    
    rule  ( S2KVmSafe . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KVmSafe . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVmSafe . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )
      
    
    rule  ( S2KVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )
      
    
    rule  ( S2KVmSafe . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #address ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeAddress ( V1_defaultValue )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bool ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBool ( V1_defaultValue )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_defaultValue ) )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes32 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #int256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_defaultValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #uint256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KVmSafe . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVmSafe . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVmSafe . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , #address ( V0_account ) , #string ( V1_newLabel ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KVmSafe . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , #address ( V0_target ) , #bytes32 ( V1_slot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))
      
    
    rule  ( S2KVmSafe . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddress" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonAddressArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddressArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonBool ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBool" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonBoolArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBoolArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonBytes32Array ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32Array" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonBytesArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytesArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonInt ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonInt" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonIntArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonIntArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonString ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonString" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonStringArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonStringArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonUint ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUint" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseJsonUintArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUintArray" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )
      
    
    rule  ( S2KVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , #bool ( V2_followLinks ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))
      
    
    rule  ( S2KVmSafe . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , #string ( V0_linkPath ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVmSafe . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KVmSafe . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , #string ( V0_rpcAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #address ( V2_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V2_value )
      
    
    rule  ( S2KVmSafe . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bool ( V2_value ) , .TypedArgs ) )
       ensures #rangeBool ( V2_value )
      
    
    rule  ( S2KVmSafe . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V2_value ) )
      
    
    rule  ( S2KVmSafe . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V2_value )
      
    
    rule  ( S2KVmSafe . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #int256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V2_value )
      
    
    rule  ( S2KVmSafe . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #string ( V2_value ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #uint256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V2_value )
      
    
    rule  ( S2KVmSafe . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , #string ( V0_name ) , #string ( V1_value ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))
      
    
    rule  ( S2KVmSafe . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KVmSafe . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KVmSafe . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , #address ( V0_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_value )
      
    
    rule  ( S2KVmSafe . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , #bool ( V0_value ) , .TypedArgs ) )
       ensures #rangeBool ( V0_value )
      
    
    rule  ( S2KVmSafe . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , #bytes ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_value ) )
      
    
    rule  ( S2KVmSafe . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_value )
      
    
    rule  ( S2KVmSafe . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , #int256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_value )
      
    
    rule  ( S2KVmSafe . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KVmSafe . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , #string ( V0_path ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_data ) )
      
    
    rule  ( S2KVmSafe . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , #string ( V2_valueKey ) , .TypedArgs ) )
      
    
    rule  ( S2KVmSafe . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )
      
    
    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )
      
    
    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )
      
    
    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )
      
    
    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )
      
    
    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )
      
    
    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )
      
    
    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )
      
    
    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )
      
    
    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )
      
    
    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )
      
    
    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )
      
    
    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )
      
    
    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )
      
    
    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )
      
    
    rule  ( selector ( "getLabel(address)" ) => 681724336 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )
      
    
    rule  ( selector ( "parseBool(string)" ) => 2538535204 )
      
    
    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )
      
    
    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )
      
    
    rule  ( selector ( "parseInt(string)" ) => 1110731870 )
      
    
    rule  ( selector ( "parseJson(string)" ) => 1786929162 )
      
    
    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )
      
    
    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )
      
    
    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )
      
    
    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )
      
    
    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )
      
    
    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )
      
    
    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )
      
    
    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )
      
    
    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )
      
    
    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )
      
    
    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )
      
    
    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )
      
    
    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )
      
    
    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )
      
    
    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )
      
    
    rule  ( selector ( "parseUint(string)" ) => 4203824461 )
      
    
    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )
      
    
    rule  ( selector ( "projectRoot()" ) => 3643842790 )
      
    
    rule  ( selector ( "readDir(string)" ) => 3300678112 )
      
    
    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )
      
    
    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "readLink(string)" ) => 2673247394 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )
      
    
    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )
      
    
    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )
      
    
    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )
      
    
    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )
      
    
    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module S2Kconsole-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KconsoleContract
    
    syntax S2KconsoleContract ::= "S2Kconsole" [symbol(), klabel(contract_console)]
    
      
    
    rule  ( #initBytecode ( S2Kconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055cb7f21d69d5a68626bed666b69adc58fdc46d700fc111b3a1cc03e01c56ffd64736f6c634300080d0033" ) )
      

endmodule

module S2Kconsole2-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2Kconsole2Contract
    
    syntax S2Kconsole2Contract ::= "S2Kconsole2" [symbol(), klabel(contract_console2)]
    
      
    
    rule  ( #initBytecode ( S2Kconsole2 ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220960f8d81933cd5ebe21cd13b3acc336b566f7139bfa3f0613418e5412003e06164736f6c634300080d0033" ) )
      

endmodule

module S2Ksafeconsole-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsafeconsoleContract
    
    syntax S2KsafeconsoleContract ::= "S2Ksafeconsole" [symbol(), klabel(contract_safeconsole)]
    
      
    
    rule  ( #initBytecode ( S2Ksafeconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a2d4663758ab2478722148cf51761578af92021d18dfb13347d86a29c38717f64736f6c634300080d0033" ) )
      

endmodule

module S2KDSTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDSTestContract
    
    syntax S2KDSTestContract ::= "S2KDSTest" [symbol(), klabel(contract_DSTest)]
    
      
    
    rule  ( #initBytecode ( S2KDSTest ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b506102598061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ba414fa61461003b578063fa7626d414610057575b600080fd5b610043610064565b604051901515815260200160405180910390f35b6000546100439060ff1681565b60008054610100900460ff16156100845750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561018a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610112917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016101ca565b60408051601f198184030181529082905261012c916101ee565b6000604051808303816000865af19150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b50915050808060200190518101906101869190610201565b9150505b919050565b6000815160005b818110156101b05760208185018101518683015201610196565b818111156101bf576000828601525b509290920192915050565b6001600160e01b03198316815260006101e6600483018461018f565b949350505050565b60006101fa828461018f565b9392505050565b60006020828403121561021357600080fd5b815180151581146101fa57600080fdfea2646970667358221220acd34c7900a0f78b52ca6e76525777d2bb4ff172d44682161ada1b655e2ff2cb64736f6c634300080d0033" ) )
      
    
    syntax Field ::= S2KDSTestField
    
    syntax S2KDSTestField ::= "IS_TEST" [symbol(), klabel(field_DSTest_IS_TEST)]
    
    syntax S2KDSTestField ::= "_failed" [symbol(), klabel(field_DSTest__failed)]
    
    rule  ( #loc ( S2KDSTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDSTest . _failed ) => 0 )
      
    
    syntax Bytes ::= S2KDSTestContract "." S2KDSTestMethod [function(), symbol(), klabel(method_DSTest)]
    
    syntax S2KDSTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DSTest_S2KISZUndTEST_)]
    
    syntax S2KDSTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DSTest_S2Kfailed_)]
    
    rule  ( S2KDSTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDSTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule
