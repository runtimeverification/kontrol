requires "foundry.md"

module AccountParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAccountParamsTestContract
    
    syntax S2KAccountParamsTestContract ::= "S2KAccountParamsTest" [symbol(), klabel(contract_AccountParamsTest)]
    
      
    
    rule  ( #initBytecode ( S2KAccountParamsTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50611485806100316000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639a13b46011610097578063eaef3d1411610066578063eaef3d14146101c2578063ec846da6146101d5578063f8ccbf47146101dd578063fa7626d4146101f057600080fd5b80639a13b46014610187578063b1ec79811461019a578063ba414fa6146101a2578063d350206f146101ba57600080fd5b80634e18fd0b116100d35780634e18fd0b146101515780635f45761c146101645780637dbb0fbf1461016c5780638eafad631461017f57600080fd5b80631f9894c2146101055780633021887c1461010f5780633a768463146101175780633fa6f85014610149575b600080fd5b61010d6101fd565b005b61010d61027f565b61012c60008051602061143083398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b61010d61034a565b61010d61015f3660046110e8565b6103d5565b61010d6105bb565b61010d61017a36600461110c565b6106af565b61010d61077d565b61010d61019536600461117e565b610806565b61010d610883565b6101aa61091e565b6040519015158152602001610140565b61010d610a3d565b61010d6101d0366004611197565b610a72565b61010d610cd7565b6000546101aa9062010000900460ff1681565b6000546101aa9060ff1681565b60405163c88a5e6d60e01b81526101f9600482015261010060248201526000805160206114308339815191529063c88a5e6d90604401600060405180830381600087803b15801561024d57600080fd5b505af1158015610261573d6000803e3d6000fd5b5050505061027d6101f96001600160a01b031631610100610d65565b565b604080518082018252601b81527f746869732073686f756c642062652045564d2062797465636f6465000000000060208201529051635a6b63c160e11b81526000805160206114308339815191529063b4d6c782906102e590607c90859060040161121c565b600060405180830381600087803b1580156102ff57600080fd5b505af1158015610313573d6000803e3d6000fd5b50505050610347607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c82610e54565b50565b604051632d0335ab60e01b81526000600482018190529060008051602061143083398151915290632d0335ab906024015b6020604051808303816000875af115801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be9190611248565b90506103478167ffffffffffffffff16600a610d65565b604051632d0335ab60e01b815230600482015260009060008051602061143083398151915290632d0335ab906024016020604051808303816000875af1158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190611248565b604051632631f2b160e11b815267ffffffffffffffff80831690851611600482015290915060008051602061143083398151915290634c63e56290602401600060405180830381600087803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b505060405163f8e18b5760e01b815230600482015267ffffffffffffffff85166024820152600080516020611430833981519152925063f8e18b579150604401600060405180830381600087803b15801561050d57600080fd5b505af1158015610521573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015267ffffffffffffffff851692506000805160206114308339815191529150632d0335ab906024016020604051808303816000875af115801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190611248565b67ffffffffffffffff16146105b7576105b7611265565b5050565b60405163f8e18b5760e01b8152306004820152606460248201526000805160206114308339815191529063f8e18b5790604401600060405180830381600087803b15801561060857600080fd5b505af115801561061c573d6000803e3d6000fd5b5050604051632d0335ab60e01b8152306004820152600092506000805160206114308339815191529150632d0335ab906024015b6020604051808303816000875af115801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190611248565b90508067ffffffffffffffff1660641461034757610347611265565b604051635a6b63c160e11b81526000805160206114308339815191529063b4d6c782906106e590607c908690869060040161127b565b600060405180830381600087803b1580156106ff57600080fd5b505af1158015610713573d6000803e3d6000fd5b505050506105b7607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e5492505050565b604051632d0335ab60e01b815230600482015260009060008051602061143083398151915290632d0335ab906024016020604051808303816000875af11580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190611248565b90506103478167ffffffffffffffff166001610d65565b60405163c88a5e6d60e01b81526101486004820152602481018290526000805160206114308339815191529063c88a5e6d90604401600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b505050506103476101486001600160a01b03163182610d65565b60405163f8e18b5760e01b815260646004820181905260248201526000805160206114308339815191529063f8e18b5790604401600060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b5050604051632d0335ab60e01b815260646004820152600092506000805160206114308339815191529150632d0335ab90602401610650565b60008054610100900460ff161561093e5750600054610100900460ff1690565b60006000805160206114308339815191523b15610a385760408051600080516020611430833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916109c0917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016112bb565b60408051601f19818403018152908290526109da916112ec565b6000604051808303816000865af19150503d8060008114610a17576040519150601f19603f3d011682016040523d82523d6000602084013e610a1c565b606091505b5091505080806020019051810190610a349190611308565b9150505b919050565b604051632d0335ab60e01b81526064600482015260009060008051602061143083398151915290632d0335ab9060240161037b565b604051632631f2b160e11b81526000805160206114308339815191526001600160a01b038316811415600483015290634c63e56290602401600060405180830381600087803b158015610ac457600080fd5b505af1158015610ad8573d6000803e3d6000fd5b5050604051632631f2b160e11b8152306001600160a01b038516141560048201526000805160206114308339815191529250634c63e5629150602401600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b5050604051632631f2b160e11b8152733fab184622dc19b6109349b94811493bf2a453626001600160a01b038516141560048201526000805160206114308339815191529250634c63e5629150602401600060405180830381600087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b5050604051632631f2b160e11b8152734e59b44847b379578588920ca78fbf26c0b4956c6001600160a01b038516141560048201526000805160206114308339815191529250634c63e5629150602401600060405180830381600087803b158015610c2a57600080fd5b505af1158015610c3e573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526001600160a01b0384166004820152600092506000805160206114308339815191529150632d0335ab906024016020604051808303816000875af1158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190611248565b905067ffffffffffffffff8116156105b7576105b7611265565b604051632d0335ab60e01b815230600482015260009060008051602061143083398151915290632d0335ab906024016020604051808303816000875af1158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190611248565b90508067ffffffffffffffff1660011461034757610347611265565b8082146105b7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610dd69060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610e0d919061132a565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610e449190611362565b60405180910390a16105b7610e5e565b6105b78282610f5e565b6000805160206114308339815191523b15610f4d5760408051600080516020611430833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610eec92916020016112bb565b60408051601f1981840301815290829052610f06916112ec565b6000604051808303816000865af19150503d8060008114610f43576040519150601f19603f3d011682016040523d82523d6000602084013e610f48565b606091505b505050505b6000805461ff001916610100179055565b610f688282611045565b6105b7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fd79060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161100e919061138c565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051610e4491906113c8565b8051825160019190036110c85760005b83518110156110c257828181518110611070576110706113f2565b602001015160f81c60f81b6001600160f81b031916848281518110611097576110976113f2565b01602001516001600160f81b031916146110b057600091505b806110ba81611408565b915050611055565b506110cc565b5060005b92915050565b67ffffffffffffffff8116811461034757600080fd5b6000602082840312156110fa57600080fd5b8135611105816110d2565b9392505050565b6000806020838503121561111f57600080fd5b823567ffffffffffffffff8082111561113757600080fd5b818501915085601f83011261114b57600080fd5b81358181111561115a57600080fd5b86602082850101111561116c57600080fd5b60209290920196919550909350505050565b60006020828403121561119057600080fd5b5035919050565b6000602082840312156111a957600080fd5b81356001600160a01b038116811461110557600080fd5b60005b838110156111db5781810151838201526020016111c3565b838111156111ea576000848401525b50505050565b600081518084526112088160208601602086016111c0565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090611240908301846111f0565b949350505050565b60006020828403121561125a57600080fd5b8151611105816110d2565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6001600160e01b03198316815281516000906112de8160048501602087016111c0565b919091016004019392505050565b600082516112fe8184602087016111c0565b9190910192915050565b60006020828403121561131a57600080fd5b8151801515811461110557600080fd5b60408152600061135460408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600061135460408301600a8152690808080808149a59da1d60b21b602082015260400190565b6040815260006113b660408301600a8152690808080808081319599d60b21b602082015260400190565b828103602084015261124081856111f0565b6040815260006113b660408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006001820161142857634e487b7160e01b600052601160045260246000fd5b506001019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212203addb909c5303624343f6fd12deb6eef66aaa91af748d89782ddbd3e85c7316b64736f6c634300080d0033" ) )
      
    
    syntax Field ::= AccountParamsTestField
    
    syntax AccountParamsTestField ::= "IS_TEST" [symbol(), klabel(field_AccountParamsTest_IS_TEST)]
    
    syntax AccountParamsTestField ::= "_failed" [symbol(), klabel(field_AccountParamsTest__failed)]
    
    syntax AccountParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AccountParamsTest_IS_SCRIPT)]
    
    syntax AccountParamsTestField ::= "stdstore" [symbol(), klabel(field_AccountParamsTest_stdstore)]
    
    rule  ( #loc ( S2KAccountParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAccountParamsTestContract "." S2KAccountParamsTestMethod [function(), symbol(), klabel(method_AccountParamsTest)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KISZUndTEST_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2Kfailed_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestDealConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestDealConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestDealSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestDealSymbolic_uint256)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestEtchConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestEtchConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestEtchSymbolic" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestEtchSymbolic_bytes)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestFailZUndGetNonceZUndfalse_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestFailZUndGetNonceZUndtrue_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestNonceSymbolic" "(" Int ":" "uint64" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestNonceSymbolic_uint64)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndGetNonceZUndfalse_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndGetNonceZUndtrue_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndNonceZUndExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndNonceZUndExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndNonceZUndNonExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndNonceZUndNonExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "S2KtestZUndgetNonceZUndunknownSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AccountParamsTest_S2KtestZUndgetNonceZUndunknownSymbolic_address)]
    
    syntax S2KAccountParamsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AccountParamsTest_S2Kvm_)]
    
    rule  ( S2KAccountParamsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestDealConcrete ( ) => #abiCallData ( "testDealConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestDealSymbolic ( V0_value : uint256 ) => #abiCallData ( "testDealSymbolic" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KAccountParamsTest . S2KtestEtchConcrete ( ) => #abiCallData ( "testEtchConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestEtchSymbolic ( V0_code : bytes ) => #abiCallData ( "testEtchSymbolic" , #bytes ( V0_code ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_code ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestFailZUndGetNonceZUndfalse ( ) => #abiCallData ( "testFail_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestFailZUndGetNonceZUndtrue ( ) => #abiCallData ( "testFail_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestNonceSymbolic ( V0_newNonce : uint64 ) => #abiCallData ( "testNonceSymbolic" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndGetNonceZUndfalse ( ) => #abiCallData ( "test_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndGetNonceZUndtrue ( ) => #abiCallData ( "test_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndNonceZUndExistentAddress ( ) => #abiCallData ( "test_Nonce_ExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndNonceZUndNonExistentAddress ( ) => #abiCallData ( "test_Nonce_NonExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . S2KtestZUndgetNonceZUndunknownSymbolic ( V0_addr : address ) => #abiCallData ( "test_getNonce_unknownSymbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KAccountParamsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testDealConcrete()" ) => 530093250 )
      
    
    rule  ( selector ( "testDealSymbolic(uint256)" ) => 2584982624 )
      
    
    rule  ( selector ( "testEtchConcrete()" ) => 807503996 )
      
    
    rule  ( selector ( "testEtchSymbolic(bytes)" ) => 2109411263 )
      
    
    rule  ( selector ( "testFail_GetNonce_false()" ) => 2393877859 )
      
    
    rule  ( selector ( "testFail_GetNonce_true()" ) => 1067907152 )
      
    
    rule  ( selector ( "testNonceSymbolic(uint64)" ) => 1310260491 )
      
    
    rule  ( selector ( "test_GetNonce_false()" ) => 3545243759 )
      
    
    rule  ( selector ( "test_GetNonce_true()" ) => 3968101798 )
      
    
    rule  ( selector ( "test_Nonce_ExistentAddress()" ) => 1598387740 )
      
    
    rule  ( selector ( "test_Nonce_NonExistentAddress()" ) => 2985064833 )
      
    
    rule  ( selector ( "test_getNonce_unknownSymbolic(address)" ) => 3941547284 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AddrTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAddrTestContract
    
    syntax S2KAddrTestContract ::= "S2KAddrTest" [symbol(), klabel(contract_AddrTest)]
    
      
    
    rule  ( #initBytecode ( S2KAddrTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610b16806100316000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063ba414fa61161008c578063d6a2ec7611610066578063d6a2ec7614610166578063f5d3bbdd1461018d578063f8ccbf4714610195578063fa7626d4146101a857600080fd5b8063ba414fa614610146578063bff1c1001461015e578063c4ddbed3146100d457600080fd5b806330391edb146100d45780633a768463146100de57806380c8c4b3146101105780638f9999a714610123578063942d6ecd1461012b578063b70f1ccb14610133575b600080fd5b6100dc6101b5565b005b6100f3600080516020610ac183398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dc61011e3660046109d9565b61024e565b6100dc610347565b6100dc610356565b6100dc6101413660046109fd565b6103e2565b61014e61052f565b6040519015158152602001610107565b6100dc61064e565b6100f37f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6100dc610684565b60005461014e9062010000900460ff1681565b60005461014e9060ff1681565b6040516001625e79b760e01b0319815260016004820152600090600080516020610ac18339815191529063ffa18649906024016020604051808303816000875af1158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b9190610a16565b905061024b81737e5f4552091a69125d5dfcb7b8c2659029395bdf6106bc565b50565b604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b03831614156004820152600080516020610ac183398151915290634c63e56290602401600060405180830381600087803b1580156102b457600080fd5b505af11580156102c8573d6000803e3d6000fd5b5050604051632631f2b160e11b8152600080516020610ac18339815191526001600160a01b03851681141560048301529250634c63e5629150602401600060405180830381600087803b15801561031e57600080fd5b505af1158015610332573d6000803e3d6000fd5b5050505061024b61034282610808565b610854565b610354610342606e610808565b565b6040516001625e79b760e01b0319815270014551231950b75fc4402da1732fc9bebe196004820152600090600080516020610ac18339815191529063ffa18649906024015b6020604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610a16565b5050565b604051632631f2b160e11b81528115156004820152600080516020610ac183398151915290634c63e56290602401600060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b5050604051632631f2b160e11b815270014551231950b75fc4402da1732fc9bebe1984106004820152600080516020610ac18339815191529250634c63e5629150602401600060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b50506040516001625e79b760e01b031981526004810184905260009250600080516020610ac1833981519152915063ffa18649906024016020604051808303816000875af1158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190610a16565b505050565b60008054610100900460ff161561054f5750600054610100900460ff1690565b6000600080516020610ac18339815191523b156106495760408051600080516020610ac1833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916105d1917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a6e565b60408051601f19818403018152908290526105eb91610a92565b6000604051808303816000865af19150503d8060008114610628576040519150601f19603f3d011682016040523d82523d6000602084013e61062d565b606091505b50915050808060200190518101906106459190610a9e565b9150505b919050565b61066c30737fa9385be102ac3eac297483dd6233d62b3e14966106bc565b610354600080516020610ac1833981519152806106bc565b6040516001625e79b760e01b0319815260006004820181905290600080516020610ac18339815191529063ffa186499060240161039b565b806001600160a01b0316826001600160a01b0316146103de577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107429060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a16103de6108c4565b60006001600160a01b038216600080516020610ac18339815191521480159061084e57506001600160a01b038216737fa9385be102ac3eac297483dd6233d62b3e149614155b92915050565b8061024b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108b89060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a161024b5b600080516020610ac18339815191523b156109b35760408051600080516020610ac1833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109529291602001610a6e565b60408051601f198184030181529082905261096c91610a92565b6000604051808303816000865af19150503d80600081146109a9576040519150601f19603f3d011682016040523d82523d6000602084013e6109ae565b606091505b505050505b6000805461ff001916610100179055565b6001600160a01b038116811461024b57600080fd5b6000602082840312156109eb57600080fd5b81356109f6816109c4565b9392505050565b600060208284031215610a0f57600080fd5b5035919050565b600060208284031215610a2857600080fd5b81516109f6816109c4565b6000815160005b81811015610a545760208185018101518683015201610a3a565b81811115610a63576000828601525b509290920192915050565b6001600160e01b0319831681526000610a8a6004830184610a33565b949350505050565b60006109f68284610a33565b600060208284031215610ab057600080fd5b815180151581146109f657600080fdfe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220cabf0920263916c979125519e269ffc204c9439c791f93c4901d09a21192151a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= AddrTestField
    
    syntax AddrTestField ::= "IS_TEST" [symbol(), klabel(field_AddrTest_IS_TEST)]
    
    syntax AddrTestField ::= "_failed" [symbol(), klabel(field_AddrTest__failed)]
    
    syntax AddrTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AddrTest_IS_SCRIPT)]
    
    syntax AddrTestField ::= "stdstore" [symbol(), klabel(field_AddrTest_stdstore)]
    
    rule  ( #loc ( S2KAddrTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAddrTestContract "." S2KAddrTestMethod [function(), symbol(), klabel(method_AddrTest)]
    
    syntax S2KAddrTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AddrTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAddrTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AddrTest_S2KISZUndTEST_)]
    
    syntax S2KAddrTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AddrTest_S2Kfailed_)]
    
    syntax S2KAddrTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AddrTest_S2Kkevm_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestFailZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestFailZUndaddrZUndfalse_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestFailZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestFailZUndaddrZUndtrue_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndfalse_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndsymbolic_uint256)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndaddrZUndtrue_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndbuiltInAddresses" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndbuiltInAddresses_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndconcrete" "(" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndnotBuiltinAddressZUndconcrete_)]
    
    syntax S2KAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndsymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AddrTest_S2KtestZUndnotBuiltinAddressZUndsymbolic_address)]
    
    syntax S2KAddrTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AddrTest_S2Kvm_)]
    
    rule  ( S2KAddrTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestFailZUndaddrZUndfalse ( ) => #abiCallData ( "testFail_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestFailZUndaddrZUndtrue ( ) => #abiCallData ( "testFail_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndfalse ( ) => #abiCallData ( "test_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "test_addr_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KAddrTest . S2KtestZUndaddrZUndtrue ( ) => #abiCallData ( "test_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndbuiltInAddresses ( ) => #abiCallData ( "test_builtInAddresses" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndnotBuiltinAddressZUndconcrete ( ) => #abiCallData ( "test_notBuiltinAddress_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . S2KtestZUndnotBuiltinAddressZUndsymbolic ( V0_addr : address ) => #abiCallData ( "test_notBuiltinAddress_symbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KAddrTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testFail_addr_false()" ) => 3302866643 )
      
    
    rule  ( selector ( "testFail_addr_true()" ) => 2486005453 )
      
    
    rule  ( selector ( "test_addr_false()" ) => 4124294109 )
      
    
    rule  ( selector ( "test_addr_symbolic(uint256)" ) => 3071220939 )
      
    
    rule  ( selector ( "test_addr_true()" ) => 809049819 )
      
    
    rule  ( selector ( "test_builtInAddresses()" ) => 3220291840 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_concrete()" ) => 2409208231 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_symbolic(address)" ) => 2160641203 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AllowChangesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAllowChangesTestContract
    
    syntax S2KAllowChangesTestContract ::= "S2KAllowChangesTest" [symbol(), klabel(contract_AllowChangesTest)]
    
      
    
    rule  ( #initBytecode ( S2KAllowChangesTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610b9c806100316000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063dc20bc5b11610066578063dc20bc5b14610126578063f6243db11461012e578063f8a8fd6d14610136578063f8ccbf471461013e578063fa7626d41461015157600080fd5b80633a768463146100a35780634b453a59146100d55780635b31d527146100df578063ba414fa6146100e7578063d6a2ec76146100ff575b600080fd5b6100b8600080516020610b4783398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dd61015e565b005b6100dd6102ee565b6100ef61044c565b60405190151581526020016100cc565b6100b87f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6100dd61056b565b6100dd6106c8565b6100dd610827565b6000546100ef9062010000900460ff1681565b6000546100ef9060ff1681565b600060405161016c906109aa565b604051809103906000f080158015610188573d6000803e3d6000fd5b5090506000604051610199906109aa565b604051809103906000f0801580156101b5573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150600080516020610b4783398151915290636e50e63490602401600060405180830381600087803b15801561020857600080fd5b505af115801561021c573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152600080516020610b47833981519152925063fac8170c9150604401600060405180830381600087803b15801561027657600080fd5b505af115801561028a573d6000803e3d6000fd5b505060405163616b8d0560e01b815261280560048201526001600160a01b038416925063616b8d0591506024015b600060405180830381600087803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b505050505050565b60006040516102fc906109aa565b604051809103906000f080158015610318573d6000803e3d6000fd5b5090506000604051610329906109aa565b604051809103906000f080158015610345573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150600080516020610b4783398151915290636e50e63490602401600060405180830381600087803b15801561039857600080fd5b505af11580156103ac573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152600080516020610b47833981519152925063fac8170c9150604401600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b5050604051630af33d5360e11b8152615b9c60048201526001600160a01b03851692506315e67aa691506024016102b8565b60008054610100900460ff161561046c5750600054610100900460ff1690565b6000600080516020610b478339815191523b156105665760408051600080516020610b47833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104ee917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016109f1565b60408051601f198184030181529082905261050891610a15565b6000604051808303816000865af19150503d8060008114610545576040519150601f19603f3d011682016040523d82523d6000602084013e61054a565b606091505b50915050808060200190518101906105629190610a28565b9150505b919050565b6000604051610579906109aa565b604051809103906000f080158015610595573d6000803e3d6000fd5b50905060006040516105a6906109aa565b604051809103906000f0801580156105c2573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150600080516020610b4783398151915290636e50e63490602401600060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152600080516020610b47833981519152925063fac8170c9150604401600060405180830381600087803b15801561068357600080fd5b505af1158015610697573d6000803e3d6000fd5b505060405163616b8d0560e01b8152605560048201526001600160a01b038516925063616b8d0591506024016102b8565b60006040516106d6906109aa565b604051809103906000f0801580156106f2573d6000803e3d6000fd5b5090506000604051610703906109aa565b604051809103906000f08015801561071f573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150600080516020610b4783398151915290636e50e63490602401600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152600080516020610b47833981519152925063fac8170c9150604401600060405180830381600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b5050604051630af33d5360e11b81526203941960048201526001600160a01b03851692506315e67aa691506024016102b8565b6108316001610833565b565b806108a7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108979060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16108a76108aa565b50565b600080516020610b478339815191523b156109995760408051600080516020610b47833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261093892916020016109f1565b60408051601f198184030181529082905261095291610a15565b6000604051808303816000865af19150503d806000811461098f576040519150601f19603f3d011682016040523d82523d6000602084013e610994565b606091505b505050505b6000805461ff001916610100179055565b60fc80610a4b83390190565b6000815160005b818110156109d757602081850181015186830152016109bd565b818111156109e6576000828601525b509290920192915050565b6001600160e01b0319831681526000610a0d60048301846109b6565b949350505050565b6000610a2182846109b6565b9392505050565b600060208284031215610a3a57600080fd5b81518015158114610a2157600080fdfe608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea26469706673582212203174f448be04e387578023b6d52cd636b48c8b946ee4917fd6c14d1f60c2983064736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da264697066735822122000b93f48713d6063fa26fcedb2b9b49b8a1f267c60f7909408475042796bfd4664736f6c634300080d0033" ) )
      
    
    syntax Field ::= AllowChangesTestField
    
    syntax AllowChangesTestField ::= "IS_TEST" [symbol(), klabel(field_AllowChangesTest_IS_TEST)]
    
    syntax AllowChangesTestField ::= "_failed" [symbol(), klabel(field_AllowChangesTest__failed)]
    
    syntax AllowChangesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AllowChangesTest_IS_SCRIPT)]
    
    syntax AllowChangesTestField ::= "stdstore" [symbol(), klabel(field_AllowChangesTest_stdstore)]
    
    rule  ( #loc ( S2KAllowChangesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAllowChangesTestContract "." S2KAllowChangesTestMethod [function(), symbol(), klabel(method_AllowChangesTest)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KISZUndTEST_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kfailed_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kkevm_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Ktest" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Ktest_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestAllow" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestAllow_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestAllowZUndfail" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestAllowZUndfail_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestFailAllowCallsToAddress" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestFailAllowCallsToAddress_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2KtestFailAllowChangesToStorage" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2KtestFailAllowChangesToStorage_)]
    
    syntax S2KAllowChangesTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AllowChangesTest_S2Kvm_)]
    
    rule  ( S2KAllowChangesTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Ktest ( ) => #abiCallData ( "test" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestAllow ( ) => #abiCallData ( "testAllow" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestAllowZUndfail ( ) => #abiCallData ( "testAllow_fail" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestFailAllowCallsToAddress ( ) => #abiCallData ( "testFailAllowCallsToAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2KtestFailAllowChangesToStorage ( ) => #abiCallData ( "testFailAllowChangesToStorage" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "test()" ) => 4171824493 )
      
    
    rule  ( selector ( "testAllow()" ) => 3693132891 )
      
    
    rule  ( selector ( "testAllow_fail()" ) => 4129570225 )
      
    
    rule  ( selector ( "testFailAllowCallsToAddress()" ) => 1262828121 )
      
    
    rule  ( selector ( "testFailAllowChangesToStorage()" ) => 1529992487 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ValueStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KValueStoreContract
    
    syntax S2KValueStoreContract ::= "S2KValueStore" [symbol(), klabel(contract_ValueStore)]
    
      
    
    rule  ( #initBytecode ( S2KValueStore ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea26469706673582212203174f448be04e387578023b6d52cd636b48c8b946ee4917fd6c14d1f60c2983064736f6c634300080d0033" ) )
      
    
    syntax Field ::= ValueStoreField
    
    syntax ValueStoreField ::= "value1" [symbol(), klabel(field_ValueStore_value1)]
    
    syntax ValueStoreField ::= "value2" [symbol(), klabel(field_ValueStore_value2)]
    
    rule  ( #loc ( S2KValueStore . value1 ) => 0 )
      
    
    rule  ( #loc ( S2KValueStore . value2 ) => 1 )
      
    
    syntax Bytes ::= S2KValueStoreContract "." S2KValueStoreMethod [function(), symbol(), klabel(method_ValueStore)]
    
    syntax S2KValueStoreMethod ::= "S2KchangeValue1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_S2KchangeValue1_uint256)]
    
    syntax S2KValueStoreMethod ::= "S2KchangeValue2" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_S2KchangeValue2_uint256)]
    
    syntax S2KValueStoreMethod ::= "S2Kvalue1" "(" ")" [symbol(), klabel(method_ValueStore_S2Kvalue1_)]
    
    syntax S2KValueStoreMethod ::= "S2Kvalue2" "(" ")" [symbol(), klabel(method_ValueStore_S2Kvalue2_)]
    
    rule  ( S2KValueStore . S2KchangeValue1 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue1" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . S2KchangeValue2 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue2" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . S2Kvalue1 ( ) => #abiCallData ( "value1" , .TypedArgs ) )
      
    
    rule  ( S2KValueStore . S2Kvalue2 ( ) => #abiCallData ( "value2" , .TypedArgs ) )
      
    
    rule  ( selector ( "changeValue1(uint256)" ) => 1634438405 )
      
    
    rule  ( selector ( "changeValue2(uint256)" ) => 367426214 )
      
    
    rule  ( selector ( "value1()" ) => 808665403 )
      
    
    rule  ( selector ( "value2()" ) => 1563665023 )
      

endmodule

module ArithmeticTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KArithmeticTestContract
    
    syntax S2KArithmeticTestContract ::= "S2KArithmeticTest" [symbol(), klabel(contract_ArithmeticTest)]
    
      
    
    rule  ( #initBytecode ( S2KArithmeticTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610b60806100316000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806360e734ec116100a2578063ba414fa611610071578063ba414fa61461021b578063ddb4cc4414610233578063f8ccbf4714610246578063fa7626d414610259578063fdfbd8591461026657600080fd5b806360e734ec146101cf578063a314a14b146101e2578063a5fab325146101f5578063a76f927c1461020857600080fd5b80633a768463116100de5780633a7684631461015e5780633c4a8f4a1461019657806342f043e8146101a957806354bca017146101bc57600080fd5b80631490583f1461011057806319e9b44b146101255780631d3663f8146101385780633595ff671461014b575b600080fd5b61012361011e366004610a0c565b610279565b005b610123610133366004610a0c565b6102a7565b610123610146366004610a0c565b6102d2565b610123610159366004610a0c565b610320565b610179737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101236101a4366004610a0c565b61034e565b6101236101b7366004610a0c565b6103a0565b6101236101ca366004610a0c565b6103ac565b6101236101dd366004610a0c565b6103f8565b6101236101f0366004610a0c565b610477565b610123610203366004610a0c565b6104bf565b610123610216366004610a0c565b6104cb565b610223610554565b604051901515815260200161018d565b610123610241366004610a0c565b61067f565b6000546102239062010000900460ff1681565b6000546102239060ff1681565b610123610274366004610a0c565b6106ad565b600061028583836106c7565b905060006102938484610702565b90506102a182821115610717565b50505050565b60006102b3838361078e565b90506102cd8382101580156102c85750828210155b610717565b505050565b8160001080156102e25750806000105b1561031c576102f382600019610a44565b811161031c57600061030583836107a8565b90506102cd81841080156102c85750818310610717565b5050565b81670de0b6b3a76400001080156102e2575080670de0b6b3a7640000101561031c576102f382600019610a44565b600061036361035d84846106c7565b836107bd565b9050600061037a6103748585610702565b846107a8565b905061038884831115610717565b61039484821115610717565b6102a182821115610717565b600061030583836107a8565b8160001080156103bc5750806000105b1561031c576103cd82600019610a44565b811161031c5760006103df83836107a8565b90506102cd8184111580156102c8575081831115610717565b604051632631f2b160e11b8152818311156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561044757600080fd5b505af115801561045b573d6000803e3d6000fd5b50505050600061046b838361078e565b90506102cd81836107dd565b8160001080156104875750806000105b1561031c5761049882600019610a44565b811161031c5760006104b36104ad84846107a8565b83610702565b90506102cd83826107dd565b6102f382600019610a44565b604051632631f2b160e11b8152818311156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b50505050600061053e838361078e565b90506102cd61054e826001610a66565b846107dd565b60008054610100900460ff16156105745750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561067a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610602917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ab9565b60408051601f198184030181529082905261061c91610add565b6000604051808303816000865af19150503d8060008114610659576040519150601f19603f3d011682016040523d82523d6000602084013e61065e565b606091505b50915050808060200190518101906106769190610ae9565b9150505b919050565b81670de0b6b3a7640000108015610487575080670de0b6b3a7640000101561031c5761049882600019610a44565b60006106b983836107bd565b9050600061029384846107a8565b6000816106d5600282610a44565b6106e7670de0b6b3a764000086610b0b565b6106f19190610a66565b6106fb9190610a44565b9392505050565b6000816106f1670de0b6b3a764000085610b0b565b8061078b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161077b9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a161078b610900565b50565b60008183101561079f5750806107a2565b50815b92915050565b6000670de0b6b3a76400006106f18385610b0b565b6000670de0b6b3a76400006107d3600282610a44565b6106e78486610b0b565b80821461031c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161084e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161031c5b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109fb5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261099a9291602001610ab9565b60408051601f19818403018152908290526109b491610add565b6000604051808303816000865af19150503d80600081146109f1576040519150601f19603f3d011682016040523d82523d6000602084013e6109f6565b606091505b505050505b6000805461ff001916610100179055565b60008060408385031215610a1f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082610a6157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610a7957610a79610a2e565b500190565b6000815160005b81811015610a9f5760208185018101518683015201610a85565b81811115610aae576000828601525b509290920192915050565b6001600160e01b0319831681526000610ad56004830184610a7e565b949350505050565b60006106fb8284610a7e565b600060208284031215610afb57600080fd5b815180151581146106fb57600080fd5b6000816000190483118215151615610b2557610b25610a2e565b50029056fea264697066735822122078785af67d77064659c2796b7ee789832d26d6c11a387ae92a6f75ffc9ee589d64736f6c634300080d0033" ) )
      
    
    syntax Field ::= ArithmeticTestField
    
    syntax ArithmeticTestField ::= "IS_TEST" [symbol(), klabel(field_ArithmeticTest_IS_TEST)]
    
    syntax ArithmeticTestField ::= "_failed" [symbol(), klabel(field_ArithmeticTest__failed)]
    
    syntax ArithmeticTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ArithmeticTest_IS_SCRIPT)]
    
    syntax ArithmeticTestField ::= "stdstore" [symbol(), klabel(field_ArithmeticTest_stdstore)]
    
    rule  ( #loc ( S2KArithmeticTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KArithmeticTestContract "." S2KArithmeticTestMethod [function(), symbol(), klabel(method_ArithmeticTest)]
    
    syntax S2KArithmeticTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KISZUndSCRIPT_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2KISZUndTEST_)]
    
    syntax S2KArithmeticTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2Kfailed_)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUnddecreasingZUnddiv" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUnddecreasingZUnddiv_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax1" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax1_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax1ZUndbroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax1ZUndbroken_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndmax2" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndmax2_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwdivZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwdivZUndrounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasing" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasing_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndgtZUndone" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndgtZUndone_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndoverflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndoverflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndpositive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndrounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverse_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ArithmeticTest_S2Kvm_)]
    
    rule  ( S2KArithmeticTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . S2KtestZUnddecreasingZUnddiv ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_decreasing_div" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax1 ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax1ZUndbroken ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1_broken" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndmax2 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_max2" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwdivZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wdiv_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasing ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndgtZUndone ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_gt_one" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndoverflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_overflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse_underflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_weakly_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_decreasing_div(uint256,uint256)" ) => 1011519306 )
      
    
    rule  ( selector ( "test_max1(uint256,uint256)" ) => 1625765100 )
      
    
    rule  ( selector ( "test_max1_broken(uint256,uint256)" ) => 2809107068 )
      
    
    rule  ( selector ( "test_max2(uint256,uint256)" ) => 434746443 )
      
    
    rule  ( selector ( "test_wdiv_rounding(uint256,uint256)" ) => 345004095 )
      
    
    rule  ( selector ( "test_wmul_increasing(uint256,uint256)" ) => 2784670501 )
      
    
    rule  ( selector ( "test_wmul_increasing_gt_one(uint256,uint256)" ) => 899022695 )
      
    
    rule  ( selector ( "test_wmul_increasing_overflow(uint256,uint256)" ) => 1123042280 )
      
    
    rule  ( selector ( "test_wmul_increasing_positive(uint256,uint256)" ) => 490103800 )
      
    
    rule  ( selector ( "test_wmul_rounding(uint256,uint256)" ) => 4261140569 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse(uint256,uint256)" ) => 3719613508 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse_underflow(uint256,uint256)" ) => 2736038219 )
      
    
    rule  ( selector ( "test_wmul_weakly_increasing_positive(uint256,uint256)" ) => 1421647895 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AssumeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssumeTestContract
    
    syntax S2KAssumeTestContract ::= "S2KAssumeTest" [symbol(), klabel(contract_AssumeTest)]
    
      
    
    rule  ( #initBytecode ( S2KAssumeTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610b31806100316000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639c7670e4116100665780639c7670e414610110578063ba414fa614610123578063e41befb4146100a3578063f8ccbf471461013b578063fa7626d41461014e57600080fd5b80630eb656da146100a35780633a768463146100b857806358313c47146100ea5780635f2e70fb146100fd5780636eef607c146100fd575b600080fd5b6100b66100b136600461099f565b61015b565b005b6100cd600080516020610adc83398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66100f83660046109cf565b6101cb565b6100b661010b36600461099f565b610271565b6100b661011e366004610a0a565b6102a4565b61012b61065e565b60405190151581526020016100e1565b60005461012b9062010000900460ff1681565b60005461012b9060ff1681565b604051632631f2b160e11b8152818314156004820152600080516020610adc83398151915290634c63e562906024015b600060405180830381600087803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b505050506101c7828261077d565b5050565b6040518115156024820152600080516020610adc8339815191529060440160408051601f198184030181529181526020820180516001600160e01b0316632631f2b160e11b1790525161021e9190610a78565b600060405180830381855afa9150503d8060008114610259576040519150601f19603f3d011682016040523d82523d6000602084013e61025e565b606091505b5050508061026e5761026e610a84565b50565b604051632631f2b160e11b81528183146004820152600080516020610adc83398151915290634c63e5629060240161018b565b604051632631f2b160e11b81526a636f6e736f6c652e6c6f676001600160a01b03841614156004820152600080516020610adc83398151915290634c63e56290602401600060405180830381600087803b15801561030157600080fd5b505af1158015610315573d6000803e3d6000fd5b5050604051632631f2b160e11b8152731804c8ab1f12e6bbf3894d4083f33e07309d1f386001600160a01b03861614156004820152600080516020610adc8339815191529250634c63e5629150602401600060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b5050604051632631f2b160e11b8152600080516020610adc8339815191526001600160a01b03861681141560048301529250634c63e5629150602401600060405180830381600087803b1580156103e957600080fd5b505af11580156103fd573d6000803e3d6000fd5b5050604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b03861614156004820152600080516020610adc8339815191529250634c63e5629150602401600060405180830381600087803b15801561046757600080fd5b505af115801561047b573d6000803e3d6000fd5b5050604051632631f2b160e11b81526a636f6e736f6c652e6c6f676001600160a01b03851614156004820152600080516020610adc8339815191529250634c63e5629150602401600060405180830381600087803b1580156104dc57600080fd5b505af11580156104f0573d6000803e3d6000fd5b5050604051632631f2b160e11b8152731804c8ab1f12e6bbf3894d4083f33e07309d1f386001600160a01b03851614156004820152600080516020610adc8339815191529250634c63e5629150602401600060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b5050604051632631f2b160e11b8152600080516020610adc8339815191526001600160a01b03851681141560048301529250634c63e5629150602401600060405180830381600087803b1580156105c457600080fd5b505af11580156105d8573d6000803e3d6000fd5b5050604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b03851614156004820152600080516020610adc8339815191529250634c63e5629150602401600060405180830381600087803b15801561064257600080fd5b505af1158015610656573d6000803e3d6000fd5b505050505050565b60008054610100900460ff161561067e5750600054610100900460ff1690565b6000600080516020610adc8339815191523b156107785760408051600080516020610adc833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610700917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a9a565b60408051601f198184030181529082905261071a91610a78565b6000604051808303816000865af19150503d8060008114610757576040519150601f19603f3d011682016040523d82523d6000602084013e61075c565b606091505b50915050808060200190518101906107749190610abe565b9150505b919050565b8082146101c7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107ee9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16101c7600080516020610adc8339815191523b1561098e5760408051600080516020610adc833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261092d9291602001610a9a565b60408051601f198184030181529082905261094791610a78565b6000604051808303816000865af19150503d8060008114610984576040519150601f19603f3d011682016040523d82523d6000602084013e610989565b606091505b505050505b6000805461ff001916610100179055565b600080604083850312156109b257600080fd5b50508035926020909101359150565b801515811461026e57600080fd5b6000602082840312156109e157600080fd5b81356109ec816109c1565b9392505050565b80356001600160a01b038116811461077857600080fd5b60008060408385031215610a1d57600080fd5b610a26836109f3565b9150610a34602084016109f3565b90509250929050565b6000815160005b81811015610a5e5760208185018101518683015201610a44565b81811115610a6d576000828601525b509290920192915050565b60006109ec8284610a3d565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681526000610ab66004830184610a3d565b949350505050565b600060208284031215610ad057600080fd5b81516109ec816109c156fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212204627f30fcf973f8a79a88b7f479490b4851e18cea31ed2e16ecea4f0f626052464736f6c634300080d0033" ) )
      
    
    syntax Field ::= AssumeTestField
    
    syntax AssumeTestField ::= "IS_TEST" [symbol(), klabel(field_AssumeTest_IS_TEST)]
    
    syntax AssumeTestField ::= "_failed" [symbol(), klabel(field_AssumeTest__failed)]
    
    syntax AssumeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssumeTest_IS_SCRIPT)]
    
    syntax AssumeTestField ::= "stdstore" [symbol(), klabel(field_AssumeTest_stdstore)]
    
    rule  ( #loc ( S2KAssumeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAssumeTestContract "." S2KAssumeTestMethod [function(), symbol(), klabel(method_AssumeTest)]
    
    syntax S2KAssumeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AssumeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAssumeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AssumeTest_S2KISZUndTEST_)]
    
    syntax S2KAssumeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AssumeTest_S2Kfailed_)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestFailZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestFailZUndassumeZUndfalse_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestFailZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestFailZUndassumeZUndtrue_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndfalse_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndstaticCall" "(" Int ":" "bool" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndstaticCall_bool)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndassumeZUndtrue_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "S2KtestZUndmultiZUndassume" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_AssumeTest_S2KtestZUndmultiZUndassume_address_address)]
    
    syntax S2KAssumeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AssumeTest_S2Kvm_)]
    
    rule  ( S2KAssumeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . S2KtestFailZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestFailZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndstaticCall ( V0_a : bool ) => #abiCallData ( "test_assume_staticCall" , #bool ( V0_a ) , .TypedArgs ) )
       ensures #rangeBool ( V0_a )
      
    
    rule  ( S2KAssumeTest . S2KtestZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . S2KtestZUndmultiZUndassume ( V0_alice : address , V1_bob : address ) => #abiCallData ( "test_multi_assume" , #address ( V0_alice ) , #address ( V1_bob ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_alice )
       andBool ( #rangeAddress ( V1_bob )
               ))
      
    
    rule  ( S2KAssumeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_assume_false(uint256,uint256)" ) => 1596879099 )
      
    
    rule  ( selector ( "testFail_assume_true(uint256,uint256)" ) => 246830810 )
      
    
    rule  ( selector ( "test_assume_false(uint256,uint256)" ) => 3827036084 )
      
    
    rule  ( selector ( "test_assume_staticCall(bool)" ) => 1479621703 )
      
    
    rule  ( selector ( "test_assume_true(uint256,uint256)" ) => 1861181564 )
      
    
    rule  ( selector ( "test_multi_assume(address,address)" ) => 2625007844 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BMCLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBMCLoopsTestContract
    
    syntax S2KBMCLoopsTestContract ::= "S2KBMCLoopsTest" [symbol(), klabel(contract_BMCLoopsTest)]
    
      
    
    rule  ( #initBytecode ( S2KBMCLoopsTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506106d9806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100e5578063bdbd8cd8146100fd578063f8ccbf4714610110578063fa7626d41461012357600080fd5b80633a7684631461008257806346e696bc146100ba57806396e03791146100d0575b600080fd5b61009d737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c2610130565b6040519081526020016100b1565b6100e36100de366004610582565b61015f565b005b6100ed610197565b60405190151581526020016100b1565b6100c261010b366004610582565b6102c2565b6000546100ed9062010000900460ff1681565b6000546100ed9060ff1681565b600060035b801561014d576101466001826105b1565b9050610135565b801561015b5761015b6105c8565b5090565b6000805b82811015610188576101766001836105de565b9150610181816105f6565b9050610163565b506101938183610354565b5050565b60008054610100900460ff16156101b75750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102bd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610245917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161064a565b60408051601f198184030181529082905261025f9161066e565b6000604051808303816000865af19150503d806000811461029c576040519150601f19603f3d011682016040523d82523d6000602084013e6102a1565b606091505b50915050808060200190518101906102b99190610681565b9150505b919050565b604051632631f2b160e11b815260038211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505050505b81156103465761033f6001836105b1565b915061032e565b81156102bd576102bd6105c8565b808214610193577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103c59060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610193737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105715760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610510929160200161064a565b60408051601f198184030181529082905261052a9161066e565b6000604051808303816000865af19150503d8060008114610567576040519150601f19603f3d011682016040523d82523d6000602084013e61056c565b606091505b505050505b6000805461ff001916610100179055565b60006020828403121561059457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156105c3576105c361059b565b500390565b634e487b7160e01b600052600160045260246000fd5b600082198211156105f1576105f161059b565b500190565b6000600182016106085761060861059b565b5060010190565b6000815160005b818110156106305760208185018101518683015201610616565b8181111561063f576000828601525b509290920192915050565b6001600160e01b0319831681526000610666600483018461060f565b949350505050565b600061067a828461060f565b9392505050565b60006020828403121561069357600080fd5b8151801515811461067a57600080fdfea264697066735822122059a719643fd3e1a8789dfaaef27f26eb3315513e887cd6a086d470c8b84c1c8c64736f6c634300080d0033" ) )
      
    
    syntax Field ::= BMCLoopsTestField
    
    syntax BMCLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_BMCLoopsTest_IS_TEST)]
    
    syntax BMCLoopsTestField ::= "_failed" [symbol(), klabel(field_BMCLoopsTest__failed)]
    
    syntax BMCLoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BMCLoopsTest_IS_SCRIPT)]
    
    syntax BMCLoopsTestField ::= "stdstore" [symbol(), klabel(field_BMCLoopsTest_stdstore)]
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KBMCLoopsTestContract "." S2KBMCLoopsTestMethod [function(), symbol(), klabel(method_BMCLoopsTest)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KISZUndTEST_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2Kfailed_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndbmc" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndbmc_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndconcrete" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndcountdownZUndconcrete_)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_S2KtestZUndcountdownZUndsymbolic_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_BMCLoopsTest_S2Kvm_)]
    
    rule  ( S2KBMCLoopsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndbmc ( V0_n : uint256 ) => #abiCallData ( "test_bmc" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndcountdownZUndconcrete ( ) => #abiCallData ( "test_countdown_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . S2KtestZUndcountdownZUndsymbolic ( V0_n : uint256 ) => #abiCallData ( "test_countdown_symbolic" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_bmc(uint256)" ) => 2531276689 )
      
    
    rule  ( selector ( "test_countdown_concrete()" ) => 1189516988 )
      
    
    rule  ( selector ( "test_countdown_symbolic(uint256)" ) => 3183316184 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BlockParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBlockParamsTestContract
    
    syntax S2KBlockParamsTestContract ::= "S2KBlockParamsTest" [symbol(), klabel(contract_BlockParamsTest)]
    
      
    
    rule  ( #initBytecode ( S2KBlockParamsTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b5061097d806100316000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ba414fa611610066578063ba414fa61461011e578063e46f59bb14610136578063e970e86d146100b6578063f8ccbf4714610149578063fa7626d41461015c57600080fd5b80631d06e436146100a357806328f82645146100b85780633a768463146100cb57806374b41d6a1461010357806385017cac14610116575b600080fd5b6100b66100b13660046107ca565b610169565b005b6100b66100c63660046107ca565b6101db565b6100e6737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66101113660046107ca565b61024a565b6100b66102b9565b610126610341565b60405190151581526020016100fa565b6100b66101443660046107ca565b61046c565b6000546101269062010000900460ff1681565b6000546101269060ff1681565b604051632024eee960e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90634049ddd290602401600060405180830381600087803b1580156101b657600080fd5b505af11580156101ca573d6000803e3d6000fd5b505050506101d846826104d7565b50565b60405163039b37ab60e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906339b37ab090602401600060405180830381600087803b15801561022857600080fd5b505af115801561023c573d6000803e3d6000fd5b505050506101d848826104d7565b6040516372eb5f8160e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e5d6bf0290602401600060405180830381600087803b15801561029757600080fd5b505af11580156102ab573d6000803e3d6000fd5b505050506101d842826104d7565b6040516001622df0eb60e21b0319815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ff483c5490602401600060405180830381600087803b15801561031f57600080fd5b505af1158015610333573d6000803e3d6000fd5b505050506101d841826105ca565b60008054610100900460ff16156103615750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104675760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916103ef917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161081e565b60408051601f198184030181529082905261040991610842565b6000604051808303816000865af19150503d8060008114610446576040519150601f19603f3d011682016040523d82523d6000602084013e61044b565b606091505b50915050808060200190518101906104639190610855565b9150505b919050565b6040516301f7b4f360e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b505050506101d843825b8082146105c6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105489060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161057f9190610877565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516105b691906108af565b60405180910390a16105c66106be565b5050565b806001600160a01b0316826001600160a01b0316146105c6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106509060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405161068791906108d9565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516105b6919061091d565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107b95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610758929160200161081e565b60408051601f198184030181529082905261077291610842565b6000604051808303816000865af19150503d80600081146107af576040519150601f19603f3d011682016040523d82523d6000602084013e6107b4565b606091505b505050505b6000805461ff001916610100179055565b6000602082840312156107dc57600080fd5b5035919050565b6000815160005b8181101561080457602081850181015186830152016107ea565b81811115610813576000828601525b509290920192915050565b6001600160e01b031983168152600061083a60048301846107e3565b949350505050565b600061084e82846107e3565b9392505050565b60006020828403121561086757600080fd5b8151801515811461084e57600080fd5b6040815260006108a160408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b6040815260006108a160408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061090360408301600a8152690808080808081319599d60b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600061090360408301600a8152690808080808149a59da1d60b21b60208201526040019056fea26469706673582212205e1d1bc5ef119d131e981cd496a3848d865165cc9059b503959c852050ac16b564736f6c634300080d0033" ) )
      
    
    syntax Field ::= BlockParamsTestField
    
    syntax BlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestField ::= "_failed" [symbol(), klabel(field_BlockParamsTest__failed)]
    
    syntax BlockParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestField ::= "stdstore" [symbol(), klabel(field_BlockParamsTest_stdstore)]
    
    rule  ( #loc ( S2KBlockParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KBlockParamsTestContract "." S2KBlockParamsTestMethod [function(), symbol(), klabel(method_BlockParamsTest)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KISZUndTEST_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2Kfailed_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestBlockNumber" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestBlockNumber_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestChainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestChainId_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestCoinBase" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestCoinBase_)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestFee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestFee_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestRoll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestRoll_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2KtestWarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_S2KtestWarp_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_BlockParamsTest_S2Kvm_)]
    
    rule  ( S2KBlockParamsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestBlockNumber ( ) => #abiCallData ( "testBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestChainId ( V0_newChainId : uint256 ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KBlockParamsTest . S2KtestCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . S2KtestFee ( V0_newFee : uint256 ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( S2KBlockParamsTest . S2KtestRoll ( V0_newHeight : uint256 ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KBlockParamsTest . S2KtestWarp ( V0_time : uint256 ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( S2KBlockParamsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testBlockNumber()" ) => 3916490861 )
      
    
    rule  ( selector ( "testChainId(uint256)" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase()" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee(uint256)" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll(uint256)" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp(uint256)" ) => 1957961066 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BroadcastTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBroadcastTestContract
    
    syntax S2KBroadcastTestContract ::= "S2KBroadcastTest" [symbol(), klabel(contract_BroadcastTest)]
    
      
    
    rule  ( #initBytecode ( S2KBroadcastTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610ef6806100316000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa614610118578063f8ccbf4714610130578063fa7626d414610143578063fd959e421461015057600080fd5b80630a9254e41461008d578063354b2735146100d65780633a768463146100de578063715f1d5c14610110575b600080fd5b6100d4600880546001600160a01b031990811673ea674fdde714fd979de3edf0f56aa9716b898ec81790915560098054909116600080516020610ea1833981519152179055565b005b6100d4610158565b6100f3600080516020610ea183398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d461034e565b6101206105b0565b6040519015158152602001610107565b6000546101209062010000900460ff1681565b6000546101209060ff1681565b6100d46106cf565b60085460405163e6962cdb60e01b81526001600160a01b039091166004820152600080516020610ea18339815191529063e6962cdb90602401600060405180830381600087803b1580156101ab57600080fd5b505af11580156101bf573d6000803e3d6000fd5b505050506000600a6040516101d390610a68565b908152602001604051809103906000f0801580156101f5573d6000803e3d6000fd5b5060405163afe29f7160e01b81526004818101529091506000906001600160a01b0383169063afe29f71906024016020604051808303816000875af1158015610242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102669190610a75565b905061027381600061083d565b60095460405163e6962cdb60e01b81526001600160a01b039091166004820152600080516020610ea18339815191529063e6962cdb90602401600060405180830381600087803b1580156102c657600080fd5b505af11580156102da573d6000803e3d6000fd5b505060405163afe29f7160e01b8152600560048201526001600160a01b038516925063afe29f7191506024016020604051808303816000875af1158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610a75565b505050565b604080516302bf260160e61b81529051600080516020610ea18339815191529163afc9804091600480830192600092919082900301818387803b15801561039457600080fd5b505af11580156103a8573d6000803e3d6000fd5b50505050600060056040516103bc90610a68565b908152602001604051809103906000f0801580156103de573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600060048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610a75565b5060408051637fb5297f60e01b81529051600080516020610ea183398151915291637fb5297f91600480830192600092919082900301818387803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b50505050600060146040516104bc90610a68565b908152602001604051809103906000f0801580156104de573d6000803e3d6000fd5b5060405163afe29f7160e01b8152601960048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610a75565b5060408051633b756e9b60e11b81529051600080516020610ea1833981519152916376eadd3691600480830192600092919082900301818387803b15801561059457600080fd5b505af11580156105a8573d6000803e3d6000fd5b505050505050565b60008054610100900460ff16156105d05750600054610100900460ff1690565b6000600080516020610ea18339815191523b156106ca5760408051600080516020610ea1833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610652917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ac9565b60408051601f198184030181529082905261066c91610aed565b6000604051808303816000865af19150503d80600081146106a9576040519150601f19603f3d011682016040523d82523d6000602084013e6106ae565b606091505b50915050808060200190518101906106c69190610b00565b9150505b919050565b600854604051637fec2a8d60e01b81526001600160a01b039091166004820152600080516020610ea183398151915290637fec2a8d90602401600060405180830381600087803b15801561072257600080fd5b505af1158015610736573d6000803e3d6000fd5b505050506000600a60405161074a90610a68565b908152602001604051809103906000f08015801561076c573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600160048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af11580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190610a75565b5060408051633b756e9b60e11b81529051600080516020610ea1833981519152916376eadd3691600480830192600092919082900301818387803b15801561082257600080fd5b505af1158015610836573d6000803e3d6000fd5b5050505050565b808214610964577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108ae9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610964610968565b5050565b600080516020610ea18339815191523b15610a575760408051600080516020610ea1833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109f69291602001610ac9565b60408051601f1981840301815290829052610a1091610aed565b6000604051808303816000865af19150503d8060008114610a4d576040519150601f19603f3d011682016040523d82523d6000602084013e610a52565b606091505b505050505b6000805461ff001916610100179055565b61037e80610b2383390190565b600060208284031215610a8757600080fd5b5051919050565b6000815160005b81811015610aaf5760208185018101518683015201610a95565b81811115610abe576000828601525b509290920192915050565b6001600160e01b0319831681526000610ae56004830184610a8e565b949350505050565b6000610af98284610a8e565b9392505050565b600060208284031215610b1257600080fd5b81518015158114610af957600080fdfe60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212208157b3e5e03df11b5650435490682d83cd855c34dc5c34673cd6acd624454b3c64736f6c634300080d0033" ) )
      
    
    syntax Field ::= BroadcastTestField
    
    syntax BroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestField ::= "_failed" [symbol(), klabel(field_BroadcastTest__failed)]
    
    syntax BroadcastTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestField ::= "stdstore" [symbol(), klabel(field_BroadcastTest_stdstore)]
    
    syntax BroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_BroadcastTest_ACCOUNT_A)]
    
    syntax BroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_BroadcastTest_ACCOUNT_B)]
    
    rule  ( #loc ( S2KBroadcastTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_A ) => 8 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_B ) => 9 )
      
    
    syntax Bytes ::= S2KBroadcastTestContract "." S2KBroadcastTestMethod [function(), symbol(), klabel(method_BroadcastTest)]
    
    syntax S2KBroadcastTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KISZUndSCRIPT_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KISZUndTEST_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KdeployNoArgs" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KdeployNoArgs_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KdeployOther" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KdeployOther_)]
    
    syntax S2KBroadcastTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_BroadcastTest_S2Kfailed_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KsetUp_)]
    
    syntax S2KBroadcastTestMethod ::= "S2KtestDeploy" "(" ")" [symbol(), klabel(method_BroadcastTest_S2KtestDeploy_)]
    
    syntax S2KBroadcastTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_BroadcastTest_S2Kvm_)]
    
    rule  ( S2KBroadcastTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KdeployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KdeployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2KtestDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs()" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther()" ) => 4254441026 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testDeploy()" ) => 894117685 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Constants-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KConstantsContract
    
    syntax S2KConstantsContract ::= "S2KConstants" [symbol(), klabel(contract_Constants)]
    
      
    
    rule  ( #initBytecode ( S2KConstants ) => #parseByteStack ( "0x" ) )
      

endmodule

module Contract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractContract
    
    syntax S2KContractContract ::= "S2KContract" [symbol(), klabel(contract_Contract)]
    
      
    
    rule  ( #initBytecode ( S2KContract ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f719aa262cc1b99b7e37851280c02555574c7f70119afa5d6c61eb2310a4d52064736f6c634300080d0033" ) )
      

endmodule

module ContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractTestContract
    
    syntax S2KContractTestContract ::= "S2KContractTest" [symbol(), klabel(contract_ContractTest)]
    
      
    
    rule  ( #initBytecode ( S2KContractTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b5061045a806100316000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633a7684631461005c5780633f5a4a2a14610094578063ba414fa61461009e578063f8ccbf47146100b6578063fa7626d4146100c9575b600080fd5b610077737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c6100d6565b005b6100a66100e2565b604051901515815260200161008b565b6000546100a69062010000900460ff1681565b6000546100a69060ff1681565b6100e0600161020d565b565b60008054610100900460ff16156101025750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102085760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610190917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016103cb565b60408051601f19818403018152908290526101aa916103ef565b6000604051808303816000865af19150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915050808060200190518101906102049190610402565b9150505b919050565b80610281577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102719060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610281610284565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561037f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261031e92916020016103cb565b60408051601f1981840301815290829052610338916103ef565b6000604051808303816000865af19150503d8060008114610375576040519150601f19603f3d011682016040523d82523d6000602084013e61037a565b606091505b505050505b6000805461ff001916610100179055565b6000815160005b818110156103b15760208185018101518683015201610397565b818111156103c0576000828601525b509290920192915050565b6001600160e01b03198316815260006103e76004830184610390565b949350505050565b60006103fb8284610390565b9392505050565b60006020828403121561041457600080fd5b815180151581146103fb57600080fdfea2646970667358221220e32c87ec409c6fcab1dc7008d1a074ff58086ad9808a346e4bfe274f6f5520a164736f6c634300080d0033" ) )
      
    
    syntax Field ::= ContractTestField
    
    syntax ContractTestField ::= "IS_TEST" [symbol(), klabel(field_ContractTest_IS_TEST)]
    
    syntax ContractTestField ::= "_failed" [symbol(), klabel(field_ContractTest__failed)]
    
    syntax ContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestField ::= "stdstore" [symbol(), klabel(field_ContractTest_stdstore)]
    
    rule  ( #loc ( S2KContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KContractTestContract "." S2KContractTestMethod [function(), symbol(), klabel(method_ContractTest)]
    
    syntax S2KContractTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ContractTest_S2KISZUndSCRIPT_)]
    
    syntax S2KContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ContractTest_S2KISZUndTEST_)]
    
    syntax S2KContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ContractTest_S2Kfailed_)]
    
    syntax S2KContractTestMethod ::= "S2KtestExample" "(" ")" [symbol(), klabel(method_ContractTest_S2KtestExample_)]
    
    syntax S2KContractTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ContractTest_S2Kvm_)]
    
    rule  ( S2KContractTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2KtestExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testExample()" ) => 1062881834 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ContractBTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractBTestContract
    
    syntax S2KContractBTestContract ::= "S2KContractBTest" [symbol(), klabel(contract_ContractBTest)]
    
      
    
    rule  ( #initBytecode ( S2KContractBTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610697806100316000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80633ce7a75c1161005b5780633ce7a75c146100e1578063ba414fa6146100e9578063f8ccbf4714610101578063fa7626d41461011457600080fd5b80630a9254e41461008d5780632f6b04ac146100995780633790444c146100a15780633a768463146100a9575b600080fd5b610097602a600855565b005b610097610121565b610097610130565b6100c4737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100976101ee565b6100f1610201565b60405190151581526020016100d8565b6000546100f19062010000900460ff1681565b6000546100f19060ff1681565b61012e600854602a61032c565b565b60405160116024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b03191681526101a29190600401610593565b600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b50505050602b600860008282546101e791906105c6565b9091555050565b602b600860008282546101e791906105c6565b60008054610100900460ff16156102215750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103275760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102af917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016105eb565b60408051601f19818403018152908290526102c99161061c565b6000604051808303816000865af19150503d8060008114610306576040519150601f19603f3d011682016040523d82523d6000602084013e61030b565b606091505b50915050808060200190518101906103239190610638565b9150505b919050565b808214610453577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161039d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610453610457565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105525760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104f192916020016105eb565b60408051601f198184030181529082905261050b9161061c565b6000604051808303816000865af19150503d8060008114610548576040519150601f19603f3d011682016040523d82523d6000602084013e61054d565b606091505b505050505b6000805461ff001916610100179055565b60005b8381101561057e578181015183820152602001610566565b8381111561058d576000848401525b50505050565b60208152600082518060208401526105b2816040850160208701610563565b601f01601f19169190910160400192915050565b6000828210156105e657634e487b7160e01b600052601160045260246000fd5b500390565b6001600160e01b031983168152815160009061060e816004850160208701610563565b919091016004019392505050565b6000825161062e818460208701610563565b9190910192915050565b60006020828403121561064a57600080fd5b8151801515811461065a57600080fd5b939250505056fea26469706673582212208ed9a04b5d26004dac6180a4f7f349fa683fbab5b171de41b2146508610193b064736f6c634300080d0033" ) )
      
    
    syntax Field ::= ContractBTestField
    
    syntax ContractBTestField ::= "IS_TEST" [symbol(), klabel(field_ContractBTest_IS_TEST)]
    
    syntax ContractBTestField ::= "_failed" [symbol(), klabel(field_ContractBTest__failed)]
    
    syntax ContractBTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestField ::= "stdstore" [symbol(), klabel(field_ContractBTest_stdstore)]
    
    syntax ContractBTestField ::= "testNumber" [symbol(), klabel(field_ContractBTest_testNumber)]
    
    rule  ( #loc ( S2KContractBTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KContractBTest . testNumber ) => 8 )
      
    
    syntax Bytes ::= S2KContractBTestContract "." S2KContractBTestMethod [function(), symbol(), klabel(method_ContractBTest)]
    
    syntax S2KContractBTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ContractBTest_S2KISZUndSCRIPT_)]
    
    syntax S2KContractBTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ContractBTest_S2KISZUndTEST_)]
    
    syntax S2KContractBTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ContractBTest_S2Kfailed_)]
    
    syntax S2KContractBTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_ContractBTest_S2KsetUp_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestCannotSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestCannotSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestFailSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestFailSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "S2KtestNumberIs42" "(" ")" [symbol(), klabel(method_ContractBTest_S2KtestNumberIs42_)]
    
    syntax S2KContractBTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ContractBTest_S2Kvm_)]
    
    rule  ( S2KContractBTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2KtestNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testCannotSubtract43()" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43()" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42()" ) => 795542700 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Counter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterContract
    
    syntax S2KCounterContract ::= "S2KCounter" [symbol(), klabel(contract_Counter)]
    
      
    
    rule  ( #initBytecode ( S2KCounter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212201150a97c7a40f4cd677309a61ce54fd4250b6d05a1561843424294a2a1a7d1e364736f6c634300080d0033" ) )
      
    
    syntax Field ::= CounterField
    
    syntax CounterField ::= "number" [symbol(), klabel(field_Counter_number)]
    
    rule  ( #loc ( S2KCounter . number ) => 0 )
      
    
    syntax Bytes ::= S2KCounterContract "." S2KCounterMethod [function(), symbol(), klabel(method_Counter)]
    
    syntax S2KCounterMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_Counter_S2Kincrement_)]
    
    syntax S2KCounterMethod ::= "S2Knumber" "(" ")" [symbol(), klabel(method_Counter_S2Knumber_)]
    
    syntax S2KCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Counter_S2KsetNumber_uint256)]
    
    rule  ( S2KCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . S2KsetNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , #uint256 ( V0_newNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newNumber )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )
      

endmodule

module CounterTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterTestContract
    
    syntax S2KCounterTestContract ::= "S2KCounterTest" [symbol(), klabel(contract_CounterTest)]
    
      
    
    rule  ( #initBytecode ( S2KCounterTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610abb806100316000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100f5578063d6a2ec761461010d578063f8ccbf4714610134578063fa7626d41461014757600080fd5b80633a7684631461008d57806361bc221a146100c557806370f985be146100d8578063b913a5ca146100ed575b600080fd5b6100a8737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6008546100a8906001600160a01b031681565b6100eb6100e63660046108a9565b610154565b005b6100eb610342565b6100fd61053a565b60405190151581526020016100bc565b6100a87f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6000546100fd9062010000900460ff1681565b6000546100fd9060ff1681565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663ed9f73536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101b257600080fd5b505af11580156101c6573d6000803e3d6000fd5b505050506040516101d69061089c565b604051809103906000f0801580156101f2573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b15801561024957600080fd5b505af115801561025d573d6000803e3d6000fd5b5050600854604051633fb5c1cb60e01b8152600481018590526001600160a01b039091169250633fb5c1cb9150602401600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b5050505061033f600860009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033991906108c2565b82610665565b50565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663ed9f73536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040516103c49061089c565b604051809103906000f0801580156103e0573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b15801561043757600080fd5b505af115801561044b573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b50505050610538600860009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053191906108c2565b6001610665565b565b60008054610100900460ff161561055a5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106605760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916105e8917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610916565b60408051601f19818403018152908290526106029161093a565b6000604051808303816000865af19150503d806000811461063f576040519150601f19603f3d011682016040523d82523d6000602084013e610644565b606091505b509150508080602001905181019061065c919061094d565b9150505b919050565b80821461078c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106d69060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161078c610790565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561088b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261082a9291602001610916565b60408051601f19818403018152908290526108449161093a565b6000604051808303816000865af19150503d8060008114610881576040519150601f19603f3d011682016040523d82523d6000602084013e610886565b606091505b505050505b6000805461ff001916610100179055565b6101168061097083390190565b6000602082840312156108bb57600080fd5b5035919050565b6000602082840312156108d457600080fd5b5051919050565b6000815160005b818110156108fc57602081850181015186830152016108e2565b8181111561090b576000828601525b509290920192915050565b6001600160e01b031983168152600061093260048301846108db565b949350505050565b600061094682846108db565b9392505050565b60006020828403121561095f57600080fd5b8151801515811461094657600080fdfe608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212201150a97c7a40f4cd677309a61ce54fd4250b6d05a1561843424294a2a1a7d1e364736f6c634300080d0033a26469706673582212202da350728740d65fb85bd21394b1d82d21711749943f02d9472583d44b2a819164736f6c634300080d0033" ) )
      
    
    syntax Field ::= CounterTestField
    
    syntax CounterTestField ::= "IS_TEST" [symbol(), klabel(field_CounterTest_IS_TEST)]
    
    syntax CounterTestField ::= "_failed" [symbol(), klabel(field_CounterTest__failed)]
    
    syntax CounterTestField ::= "IS_SCRIPT" [symbol(), klabel(field_CounterTest_IS_SCRIPT)]
    
    syntax CounterTestField ::= "stdstore" [symbol(), klabel(field_CounterTest_stdstore)]
    
    syntax CounterTestField ::= "counter" [symbol(), klabel(field_CounterTest_counter)]
    
    rule  ( #loc ( S2KCounterTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KCounterTest . counter ) => 8 )
      
    
    syntax Bytes ::= S2KCounterTestContract "." S2KCounterTestMethod [function(), symbol(), klabel(method_CounterTest)]
    
    syntax S2KCounterTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_CounterTest_S2KISZUndSCRIPT_)]
    
    syntax S2KCounterTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_CounterTest_S2KISZUndTEST_)]
    
    syntax S2KCounterTestMethod ::= "S2Kcounter" "(" ")" [symbol(), klabel(method_CounterTest_S2Kcounter_)]
    
    syntax S2KCounterTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_CounterTest_S2Kfailed_)]
    
    syntax S2KCounterTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_CounterTest_S2Kkevm_)]
    
    syntax S2KCounterTestMethod ::= "S2KtestIncrement" "(" ")" [symbol(), klabel(method_CounterTest_S2KtestIncrement_)]
    
    syntax S2KCounterTestMethod ::= "S2KtestSetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_CounterTest_S2KtestSetNumber_uint256)]
    
    syntax S2KCounterTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_CounterTest_S2Kvm_)]
    
    rule  ( S2KCounterTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kcounter ( ) => #abiCallData ( "counter" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtestIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . S2KtestSetNumber ( V0_x : uint256 ) => #abiCallData ( "testSetNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KCounterTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "counter()" ) => 1639719450 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testIncrement()" ) => 3105072586 )
      
    
    rule  ( selector ( "testSetNumber(uint256)" ) => 1895400894 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module DynamicTypes-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDynamicTypesContract
    
    syntax S2KDynamicTypesContract ::= "S2KDynamicTypes" [symbol(), klabel(contract_DynamicTypes)]
    
      
    
    rule  ( #initBytecode ( S2KDynamicTypes ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506105f2806100316000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633a7684631461005c578063ba414fa614610094578063ee9c6a0d146100ac578063f8ccbf47146100c1578063fa7626d4146100d4575b600080fd5b610077737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c6100e1565b604051901515815260200161008b565b6100bf6100ba36600461045d565b61020c565b005b60005461009c9062010000900460ff1681565b60005461009c9060ff1681565b60008054610100900460ff16156101015750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102075760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161018f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161054d565b60408051601f19818403018152908290526101a991610571565b6000604051808303816000865af19150503d80600081146101e6576040519150601f19603f3d011682016040523d82523d6000602084013e6101eb565b606091505b50915050808060200190518101906102039190610584565b9150505b919050565b6000828281518110610220576102206105a6565b0160200151604051632631f2b160e11b8152600360f89290921c9182106004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561027e57600080fd5b505af1158015610292573d6000803e3d6000fd5b505050506102bf8160ff16600214806102ae57508160ff166001145b806102ba575060ff8216155b6102c4565b505050565b80610338577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103289060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a161033861033b565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104365760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526103d5929160200161054d565b60408051601f19818403018152908290526103ef91610571565b6000604051808303816000865af19150503d806000811461042c576040519150601f19603f3d011682016040523d82523d6000602084013e610431565b606091505b505050505b6000805461ff001916610100179055565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561047057600080fd5b823567ffffffffffffffff8082111561048857600080fd5b818501915085601f83011261049c57600080fd5b8135818111156104ae576104ae610447565b604051601f8201601f19908116603f011681019083821181831017156104d6576104d6610447565b816040528281528860208487010111156104ef57600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b6000815160005b818110156105335760208185018101518683015201610519565b81811115610542576000828601525b509290920192915050565b6001600160e01b03198316815260006105696004830184610512565b949350505050565b600061057d8284610512565b9392505050565b60006020828403121561059657600080fd5b8151801515811461057d57600080fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212202c9860663a2cf2c24665d61d076dca962f3dadb6379c67cb9768419163761f8864736f6c634300080d0033" ) )
      
    
    syntax Field ::= DynamicTypesField
    
    syntax DynamicTypesField ::= "IS_TEST" [symbol(), klabel(field_DynamicTypes_IS_TEST)]
    
    syntax DynamicTypesField ::= "_failed" [symbol(), klabel(field_DynamicTypes__failed)]
    
    syntax DynamicTypesField ::= "IS_SCRIPT" [symbol(), klabel(field_DynamicTypes_IS_SCRIPT)]
    
    syntax DynamicTypesField ::= "stdstore" [symbol(), klabel(field_DynamicTypes_stdstore)]
    
    rule  ( #loc ( S2KDynamicTypes . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KDynamicTypesContract "." S2KDynamicTypesMethod [function(), symbol(), klabel(method_DynamicTypes)]
    
    syntax S2KDynamicTypesMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KISZUndSCRIPT_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DynamicTypes_S2KISZUndTEST_)]
    
    syntax S2KDynamicTypesMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DynamicTypes_S2Kfailed_)]
    
    syntax S2KDynamicTypesMethod ::= "S2KtestZUnddynamicZUndbyteZUndread" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_DynamicTypes_S2KtestZUnddynamicZUndbyteZUndread_bytes_uint256)]
    
    syntax S2KDynamicTypesMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_DynamicTypes_S2Kvm_)]
    
    rule  ( S2KDynamicTypes . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . S2KtestZUnddynamicZUndbyteZUndread ( V0_data : bytes , V1_offset : uint256 ) => #abiCallData ( "test_dynamic_byte_read" , #bytes ( V0_data ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_data ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( S2KDynamicTypes . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_dynamic_byte_read(bytes,uint256)" ) => 4003228173 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ExpectEmit-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectEmitContract
    
    syntax S2KExpectEmitContract ::= "S2KExpectEmit" [symbol(), klabel(contract_ExpectEmit)]
    
      
    
    rule  ( #initBytecode ( S2KExpectEmit ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KExpectEmitContract "." S2KExpectEmitMethod [function(), symbol(), klabel(method_ExpectEmit)]
    
    syntax S2KExpectEmitMethod ::= "S2Kt" "(" ")" [symbol(), klabel(method_ExpectEmit_S2Kt_)]
    
    rule  ( S2KExpectEmit . S2Kt ( ) => #abiCallData ( "t" , .TypedArgs ) )
      
    
    rule  ( selector ( "t()" ) => 2463158611 )
      

endmodule

module EmitContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEmitContractTestContract
    
    syntax S2KEmitContractTestContract ::= "S2KEmitContractTest" [symbol(), klabel(contract_EmitContractTest)]
    
      
    
    rule  ( #initBytecode ( S2KEmitContractTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610674806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063e3d959391161005b578063e3d95939146100dc578063f8ccbf47146100e4578063fa7626d4146100f7578063fd047e0d1461010457600080fd5b80633a768463146100825780638e30cd39146100ba578063ba414fa6146100c4575b600080fd5b61009d737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c261010c565b005b6100cc610245565b60405190151581526020016100b1565b6100c2610370565b6000546100cc9062010000900460ff1681565b6000546100cc9060ff1681565b6100c26103fa565b600060405161011a906104da565b604051809103906000f080158015610136573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201819052600060448301526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c2906084015b600060405180830381600087803b15801561019d57600080fd5b505af11580156101b1573d6000803e3d6000fd5b505060405161053980825292503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3806001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b5050505050565b60008054610100900460ff16156102655750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561036b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102f3917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610521565b60408051601f198184030181529082905261030d91610545565b6000604051808303816000865af19150503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b50915050808060200190518101906103679190610558565b9150505b919050565b600060405161037e906104da565b604051809103906000f08015801561039a573d6000803e3d6000fd5b506040516381bad6f360e01b8152600160048201819052602482018190526000604483015260648201526001600160a01b0382166084820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906381bad6f39060a401610183565b6000604051610408906104da565b604051809103906000f080158015610424573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201526000604482018190526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c290608401600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b505060405161053a815261053992503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016101e7565b60c48061057b83390190565b6000815160005b8181101561050757602081850181015186830152016104ed565b81811115610516576000828601525b509290920192915050565b6001600160e01b031983168152600061053d60048301846104e6565b949350505050565b600061055182846104e6565b9392505050565b60006020828403121561056a57600080fd5b8151801515811461055157600080fdfe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a26469706673582212206436d087a6f9f122a0143877c6d19847919d94c286c59167aab29be7a99db9f464736f6c634300080d0033" ) )
      
    
    syntax Field ::= EmitContractTestField
    
    syntax EmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestField ::= "_failed" [symbol(), klabel(field_EmitContractTest__failed)]
    
    syntax EmitContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestField ::= "stdstore" [symbol(), klabel(field_EmitContractTest_stdstore)]
    
    rule  ( #loc ( S2KEmitContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KEmitContractTestContract "." S2KEmitContractTestMethod [function(), symbol(), klabel(method_EmitContractTest)]
    
    syntax S2KEmitContractTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KISZUndSCRIPT_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KISZUndTEST_)]
    
    syntax S2KEmitContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_EmitContractTest_S2Kfailed_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmit" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmit_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmitCheckEmitter" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmitCheckEmitter_)]
    
    syntax S2KEmitContractTestMethod ::= "S2KtestExpectEmitDoNotCheckData" "(" ")" [symbol(), klabel(method_EmitContractTest_S2KtestExpectEmitDoNotCheckData_)]
    
    syntax S2KEmitContractTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_EmitContractTest_S2Kvm_)]
    
    rule  ( S2KEmitContractTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2KtestExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testExpectEmit()" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter()" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData()" ) => 4244930061 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module EnvTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEnvTestContract
    
    syntax S2KEnvTestContract ::= "S2KEnvTest" [symbol(), klabel(contract_EnvTest)]
    
      
    
    rule  ( #initBytecode ( S2KEnvTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50612523806100316000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637b290a42116100a2578063ba414fa611610071578063ba414fa6146101af578063c45db9c5146101c7578063d5d09187146101cf578063f8ccbf47146101d7578063fa7626d4146101ea57600080fd5b80637b290a421461018f5780637cebe429146101975780639a96435d1461019f578063aaa3bd3b146101a757600080fd5b80633b4996ff116100e95780633b4996ff14610167578063416c9f6a1461016f57806355151e531461017757806355c7785a1461017f5780636c6270941461018757600080fd5b80631a9ca1b61461011b57806320e3be7f14610125578063354e99c81461012d5780633a76846314610135575b600080fd5b6101236101f7565b005b610123610334565b6101236104ed565b61014a6000805160206122b983398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b610123610620565b61012361073b565b610123610896565b6101236109be565b610123610b1b565b610123610bf8565b610123610cda565b610123610e84565b610123611127565b6101b7611270565b604051901515815260200161015e565b61012361138f565b610123611521565b6000546101b79062010000900460ff1681565b6000546101b79060ff1681565b600060405180604001604052806009815260200168494e545f56414c554560b81b815250905060006040518060800160405280604e815260200161240e604e9139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee9061026e9085908590600401611b7e565b600060405180830381600087803b15801561028857600080fd5b505af115801561029c573d6000803e3d6000fd5b505060405163892a0c6160e01b8152600160ff1b9250600091506000805160206122b98339815191529063892a0c61906102da908790600401611bac565b6020604051808303816000875af11580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d9190611bc6565b905081811461032e5761032e611bdf565b50505050565b60006040518060400160405280600b81526020016a55494e545f56414c55455360a81b8152509050600060405180608001604052806044815260200161245c60449139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee906103ad9085908590600401611b7e565b600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000808252918101829052925163f3dec09960e01b81529194509192506000805160206122b98339815191529063f3dec099906104429088908790600401611b7e565b6000604051808303816000875af1158015610461573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104899190810190611c60565b90508160405160200161049c9190611cf6565b60405160208183030381529060405280519060200120816040516020016104c39190611d2a565b60405160208183030381529060405280519060200120146104e6576104e6611bdf565b5050505050565b604080518082018252600a815269424f4f4c5f56414c554560b01b602080830191909152825180840184526004808252637472756560e01b928201929092529251631eac91f760e11b81529192916000805160206122b983398151915291633d5923ee9161055f918691869101611b7e565b600060405180830381600087803b15801561057957600080fd5b505af115801561058d573d6000803e3d6000fd5b5050604051637ed1ec7d60e01b815260019250600091506000805160206122b983398151915290637ed1ec7d906105c8908790600401611bac565b6020604051808303816000875af11580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611d70565b90508115158115151461032e5761032e611bdf565b60006040518060400160405280600a815260200169494e545f56414c55455360b01b815250905060006040518060c001604052806087815260200161238760879139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee906106989085908590600401611b7e565b600060405180830381600087803b1580156106b257600080fd5b505af11580156106c6573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452600160ff1b81526001600160ff1b03918101919091529151630421811560e41b81529093509091506000906000805160206122b9833981519152906342181150906104429088908790600401611b7e565b604080518082018252600c81526b535452494e475f56414c554560a01b60208083019190915282518084018452600d81526c68656c6c6f2c20776f726c642160981b918101919091529151631eac91f760e11b81529091906000805160206122b983398151915290633d5923ee906107b99085908590600401611b7e565b600060405180830381600087803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b5050604080518082018252600d81526c68656c6c6f2c20776f726c642160981b6020820152905163f877cb1960e01b8152909250600091506000805160206122b98339815191529063f877cb1990610843908790600401611bac565b6000604051808303816000875af1158015610862573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088a9190810190611df7565b905061032e8183611767565b60006040518060400160405280600e81526020016d425954455333325f56414c55455360901b815250905060006040518060600160405280602f81526020016122d9602f9139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee906109129085908590600401611b7e565b600060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b815260009181018290529251635af231c160e01b81529194509192506000805160206122b983398151915290635af231c1906104429088908790600401611b7e565b60006040518060400160405280600b81526020016a42595445535f56414c554560a81b815250905060006040518060600160405280602a815260200161235d602a9139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee90610a379085908590600401611b7e565b600060405180830381600087803b158015610a5157600080fd5b505af1158015610a65573d6000803e3d6000fd5b505060408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516326bdd78360e11b8152909250600091506000805160206122b983398151915290634d7baf0690610ac8908790600401611bac565b6000604051808303816000875af1158015610ae7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0f9190810190611df7565b905061032e81836118a8565b604080518082018252600d81526c425954455333325f56414c554560981b602080830191909152825180840184526004808252630307830360e41b928201929092529251631eac91f760e11b81529192916000805160206122b983398151915291633d5923ee91610b90918691869101611b7e565b600060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b5050604051634bca482160e11b8152600092508291506000805160206122b9833981519152906397949042906102da908790600401611bac565b60006040518060400160405280600a81526020016955494e545f56414c554560b01b815250905060006040518060800160405280604e81526020016124a0604e9139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee90610c709085908590600401611b7e565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b505060405163c1978d1f60e01b81526000199250600091506000805160206122b98339815191529063c1978d1f906102da908790600401611bac565b604080518082018252600b81526a424f4f4c5f56414c55455360a81b602080830191909152825180840184526015815274747275652c66616c73652c747275652c66616c736560581b918101919091529151631eac91f760e11b81529091906000805160206122b983398151915290633d5923ee90610d5f9085908590600401611b7e565b600060405180830381600087803b158015610d7957600080fd5b505af1158015610d8d573d6000803e3d6000fd5b50506040805180820182526001808252600b60fa1b602080840191909152835160808101855282815260009181018290528085019290925260608201819052925163aaaddeaf60e01b815291945092506000805160206122b98339815191529063aaaddeaf90610e039088908790600401611b7e565b6000604051808303816000875af1158015610e22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e4a9190810190611e2c565b905081604051602001610e5d9190611eb9565b60405160208183030381529060405280519060200120816040516020016104c39190611eef565b60006040518060400160405280600c81526020016b42595445535f56414c55455360a01b815250905060006040518060600160405280602f81526020016122d9602f9139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee90610efe9085908590600401611b7e565b600060405180830381600087803b158015610f1857600080fd5b505af1158015610f2c573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602082015281516002808252606082019093529093506000925090816020015b6060815260200190600190039081610f60579050509050604051806040016040528060148152602001737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b81525081600081518110610fb757610fb7611f1b565b6020026020010181905250604051806040016040528060018152602001600081525081600181518110610fec57610fec611f1b565b602090810291909101015260405163ddc2651b60e01b81526000906000805160206122b98339815191529063ddc2651b9061102d9088908790600401611b7e565b6000604051808303816000875af115801561104c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110749190810190611f31565b905060005b825181101561111f5782818151811061109457611094611f1b565b60200260200101516040516020016110ac9190611fe2565b604051602081830303815290604052805190602001208282815181106110d4576110d4611f1b565b60200260200101516040516020016110ec9190611fe2565b604051602081830303815290604052805190602001201461110f5761110f611bdf565b61111881611ffe565b9050611079565b505050505050565b60006040518060400160405280600d81526020016c414444524553535f56414c554560981b815250905060006040518060600160405280602a815260200161235d602a9139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee906111a29085908590600401611b7e565b600060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505060405163350d56bf60e01b81526000805160206122b9833981519152925060009150829063350d56bf9061120a908790600401611bac565b6020604051808303816000875af1158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d919061203c565b9050816001600160a01b0316816001600160a01b03161461032e5761032e611bdf565b60008054610100900460ff16156112905750600054610100900460ff1690565b60006000805160206122b98339815191523b1561138a57604080516000805160206122b9833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611312917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001612057565b60408051601f198184030181529082905261132c91611fe2565b6000604051808303816000865af19150503d8060008114611369576040519150601f19603f3d011682016040523d82523d6000602084013e61136e565b606091505b50915050808060200190518101906113869190611d70565b9150505b919050565b60006040518060400160405280600e81526020016d414444524553535f56414c55455360901b8152509050600060405180608001604052806055815260200161230860559139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee9061140b9085908590600401611b7e565b600060405180830381600087803b15801561142557600080fd5b505af1158015611439573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000805160206122b983398151915280825260009282018390529351635698dcfd60e11b81529295509350919063ad31b9fa906114a09088908790600401611b7e565b6000604051808303816000875af11580156114bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114e79190810190612088565b9050816040516020016114fa9190612115565b60405160208183030381529060405280519060200120816040516020016104c39190612143565b60006040518060400160405280600d81526020016c535452494e475f56414c55455360981b8152509050600060405180606001604052806038815260200161228160389139604051631eac91f760e11b81529091506000805160206122b983398151915290633d5923ee9061159c9085908590600401611b7e565b600060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506000604051806040016040528060018152602001601f60fa1b8152509050600060405180604001604052806040518060400160405280600d81526020016c68656c6c6f2c20776f726c642160981b81525081526020016040518060600160405280602a815260200161235d602a913990526040516314b02bc960e01b81529091506000906000805160206122b9833981519152906314b02bc9906116789088908790600401611b7e565b6000604051808303816000875af1158015611697573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116bf9190810190612176565b905060005b600281101561111f578281600281106116df576116df611f1b565b60200201516040516020016116f49190611fe2565b6040516020818303038152906040528051906020012082828151811061171c5761171c611f1b565b60200260200101516040516020016117349190611fe2565b604051602081830303815290604052805190602001201461175757611757611bdf565b61176081611ffe565b90506116c4565b806040516020016117789190611fe2565b604051602081830303815290604052805190602001208260405160200161179f9190611fe2565b60405160208183030381529060405280519060200120146118a4577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516118269060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838260405161185d919061221a565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516118949190612256565b60405180910390a16118a46118b2565b5050565b6118a482826119b2565b6000805160206122b98339815191523b156119a157604080516000805160206122b9833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526119409291602001612057565b60408051601f198184030181529082905261195a91611fe2565b6000604051808303816000865af19150503d8060008114611997576040519150601f19603f3d011682016040523d82523d6000602084013e61199c565b606091505b505050505b6000805461ff001916610100179055565b6119bc8282611a99565b6118a4577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611a2b9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1882604051611a62919061221a565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516118949190612256565b805182516001919003611b1c5760005b8351811015611b1657828181518110611ac457611ac4611f1b565b602001015160f81c60f81b6001600160f81b031916848281518110611aeb57611aeb611f1b565b01602001516001600160f81b03191614611b0457600091505b80611b0e81611ffe565b915050611aa9565b50611b20565b5060005b92915050565b60005b83811015611b41578181015183820152602001611b29565b8381111561032e5750506000910152565b60008151808452611b6a816020860160208601611b26565b601f01601f19169290920160200192915050565b604081526000611b916040830185611b52565b8281036020840152611ba38185611b52565b95945050505050565b602081526000611bbf6020830184611b52565b9392505050565b600060208284031215611bd857600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c3457611c34611bf5565b604052919050565b600067ffffffffffffffff821115611c5657611c56611bf5565b5060051b60200190565b60006020808385031215611c7357600080fd5b825167ffffffffffffffff811115611c8a57600080fd5b8301601f81018513611c9b57600080fd5b8051611cae611ca982611c3c565b611c0b565b81815260059190911b82018301908381019087831115611ccd57600080fd5b928401925b82841015611ceb57835182529284019290840190611cd2565b979650505050505050565b60008183825b6002811015611d1b578151835260209283019290910190600101611cfc565b50505060408201905092915050565b815160009082906020808601845b83811015611d5457815185529382019390820190600101611d38565b50929695505050505050565b8051801515811461138a57600080fd5b600060208284031215611d8257600080fd5b611bbf82611d60565b600082601f830112611d9c57600080fd5b815167ffffffffffffffff811115611db657611db6611bf5565b611dc9601f8201601f1916602001611c0b565b818152846020838601011115611dde57600080fd5b611def826020830160208701611b26565b949350505050565b600060208284031215611e0957600080fd5b815167ffffffffffffffff811115611e2057600080fd5b611def84828501611d8b565b60006020808385031215611e3f57600080fd5b825167ffffffffffffffff811115611e5657600080fd5b8301601f81018513611e6757600080fd5b8051611e75611ca982611c3c565b81815260059190911b82018301908381019087831115611e9457600080fd5b928401925b82841015611ceb57611eaa84611d60565b82529284019290840190611e99565b60008183825b6004811015611ee05781511515835260209283019290910190600101611ebf565b50505060808201905092915050565b815160009082906020808601845b83811015611d54578151151585529382019390820190600101611efd565b634e487b7160e01b600052603260045260246000fd5b60006020808385031215611f4457600080fd5b825167ffffffffffffffff80821115611f5c57600080fd5b818501915085601f830112611f7057600080fd5b8151611f7e611ca982611c3c565b81815260059190911b83018401908481019088831115611f9d57600080fd5b8585015b83811015611fd557805185811115611fb95760008081fd5b611fc78b89838a0101611d8b565b845250918601918601611fa1565b5098975050505050505050565b60008251611ff4818460208701611b26565b9190910192915050565b60006001820161201e57634e487b7160e01b600052601160045260246000fd5b5060010190565b80516001600160a01b038116811461138a57600080fd5b60006020828403121561204e57600080fd5b611bbf82612025565b6001600160e01b031983168152815160009061207a816004850160208701611b26565b919091016004019392505050565b6000602080838503121561209b57600080fd5b825167ffffffffffffffff8111156120b257600080fd5b8301601f810185136120c357600080fd5b80516120d1611ca982611c3c565b81815260059190911b820183019083810190878311156120f057600080fd5b928401925b82841015611ceb5761210684612025565b825292840192908401906120f5565b60008183825b6002811015611d1b5781516001600160a01b031683526020928301929091019060010161211b565b815160009082906020808601845b83811015611d545781516001600160a01b031685529382019390820190600101612151565b6000602080838503121561218957600080fd5b825167ffffffffffffffff808211156121a157600080fd5b818501915085601f8301126121b557600080fd5b81516121c3611ca982611c3c565b81815260059190911b830184019084810190888311156121e257600080fd5b8585015b83811015611fd5578051858111156121fe5760008081fd5b61220c8b89838a0101611d8b565b8452509186019186016121e6565b60408152600061224460408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611def8185611b52565b60408152600061224460408301600a8152690808080808149a59da1d60b21b60208201526040019056fe68656c6c6f2c20776f726c64217c3078373130393730394543666139316138303632366646333938394436386636374635623144443132440000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d3078373130393730394543666139316138303632366646333938394436386636374635623144443132442c307830303078373130393730394543666139316138303632366646333938394436386636374635623144443132442c3078303030303030303030303030303030303030303030303030303030303030303030303030303030303078373130393730394543666139316138303632366646333938394436386636374635623144443132442d3078383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302c2b3078374646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646462d3537383936303434363138363538303937373131373835343932353034333433393533393236363334393932333332383230323832303139373238373932303033393536353634383139393638302c307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030313135373932303839323337333136313935343233353730393835303038363837393037383533323639393834363635363430353634303339343537353834303037393133313239363339393335a26469706673582212206d0af58512a5c896a3e72056cdd1aea2b8cffbc6b874b8ed5e0466e293420b8264736f6c634300080d0033" ) )
      
    
    syntax Field ::= EnvTestField
    
    syntax EnvTestField ::= "IS_TEST" [symbol(), klabel(field_EnvTest_IS_TEST)]
    
    syntax EnvTestField ::= "_failed" [symbol(), klabel(field_EnvTest__failed)]
    
    syntax EnvTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestField ::= "stdstore" [symbol(), klabel(field_EnvTest_stdstore)]
    
    rule  ( #loc ( S2KEnvTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KEnvTestContract "." S2KEnvTestMethod [function(), symbol(), klabel(method_EnvTest)]
    
    syntax S2KEnvTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_EnvTest_S2KISZUndSCRIPT_)]
    
    syntax S2KEnvTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_EnvTest_S2KISZUndTEST_)]
    
    syntax S2KEnvTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_EnvTest_S2Kfailed_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvAddress" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvAddress_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvAddresseArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvAddresseArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBool" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBool_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBoolArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBoolArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes32" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes32_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytes32Array" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytes32Array_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvBytesArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvBytesArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvInt" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvInt_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvIntArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvIntArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvString" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvString_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvStringArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvStringArray_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvUInt" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvUInt_)]
    
    syntax S2KEnvTestMethod ::= "S2KtestEnvUIntArray" "(" ")" [symbol(), klabel(method_EnvTest_S2KtestEnvUIntArray_)]
    
    syntax S2KEnvTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_EnvTest_S2Kvm_)]
    
    rule  ( S2KEnvTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2KtestEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testEnvAddress()" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray()" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool()" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray()" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes()" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32()" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array()" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray()" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt()" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray()" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString()" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray()" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt()" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray()" ) => 551796351 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Dummy-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDummyContract
    
    syntax S2KDummyContract ::= "S2KDummy" [symbol(), klabel(contract_Dummy)]
    
      
    
    rule  ( #initBytecode ( S2KDummy ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063994b9d5714602d575b600080fd5b60c860405190815260200160405180910390f3fea2646970667358221220e5c4ca8157deb33f557f9fb19007e950f6c09dc4dabd3620fa0741900decc57264736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KDummyContract "." S2KDummyMethod [function(), symbol(), klabel(method_Dummy)]
    
    syntax S2KDummyMethod ::= "S2KnumberA" "(" ")" [symbol(), klabel(method_Dummy_S2KnumberA_)]
    
    rule  ( S2KDummy . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )
      
    
    rule  ( selector ( "numberA()" ) => 2571869527 )
      

endmodule

module ExpectCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectCallTestContract
    
    syntax S2KExpectCallTestContract ::= "S2KExpectCallTest" [symbol(), klabel(contract_ExpectCallTest)]
    
      
    
    rule  ( #initBytecode ( S2KExpectCallTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610676806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bfe93def1161005b578063bfe93def146100dc578063d6a2ec76146100e4578063f8ccbf471461010b578063fa7626d41461011e57600080fd5b806328561be0146100825780633a7684631461008c578063ba414fa6146100c4575b600080fd5b61008a61012b565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc610236565b60405190151581526020016100bb565b61008a610361565b6100a77f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6000546100cc9062010000900460ff1681565b6000546100cc9060ff1681565b600060405161013990610460565b604051809103906000f080158015610155573d6000803e3d6000fd5b506040805160048082526024820183526020820180516001600160e01b031663994b9d5760e01b17905291516375a12b4760e01b815292935083929091600091737109709ecfa91a80626ff3989d68f67f5b1dd12d916375a12b47916101c191879186918891016104c4565b600060405180830381600087803b1580156101db57600080fd5b505af11580156101ef573d6000803e3d6000fd5b50505050600080835160208501600087613e80f16001810361021f5760203d0361021f5760206000803e60005191505b508060c814610230576102306104f4565b50505050565b60008054610100900460ff16156102565750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561035c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102e4917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161050a565b60408051601f19818403018152908290526102fe9161053b565b6000604051808303816000865af19150503d806000811461033b576040519150601f19603f3d011682016040523d82523d6000602084013e610340565b606091505b50915050808060200190518101906103589190610557565b9150505b919050565b600060405161036f90610460565b604051809103906000f08015801561038b573d6000803e3d6000fd5b506040805160048082526024820183526020820180516001600160e01b031663994b9d5760e01b179052915163214602db60e21b815292935083929091600091737109709ecfa91a80626ff3989d68f67f5b1dd12d916385180b6c916103f5918791879101610580565b600060405180830381600087803b15801561040f57600080fd5b505af1158015610423573d6000803e3d6000fd5b5050505060008083516020850186613e80fa6001810361021f5760203d0361021f5760206000803e505060005160c88114610230576102306104f4565b6094806105ad83390190565b60005b8381101561048757818101518382015260200161046f565b838111156102305750506000910152565b600081518084526104b081602086016020860161046c565b601f01601f19169290920160200192915050565b60018060a01b03841681528260208201526060604082015260006104eb6060830184610498565b95945050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b031983168152815160009061052d81600485016020870161046c565b919091016004019392505050565b6000825161054d81846020870161046c565b9190910192915050565b60006020828403121561056957600080fd5b8151801515811461057957600080fd5b9392505050565b6001600160a01b03831681526040602082018190526000906105a490830184610498565b94935050505056fe6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063994b9d5714602d575b600080fd5b60c860405190815260200160405180910390f3fea2646970667358221220e5c4ca8157deb33f557f9fb19007e950f6c09dc4dabd3620fa0741900decc57264736f6c634300080d0033a2646970667358221220014016331b767b4cccae14dd003baed95d78b41fb6351d893cd34e1187e58d1b64736f6c634300080d0033" ) )
      
    
    syntax Field ::= ExpectCallTestField
    
    syntax ExpectCallTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectCallTest_IS_TEST)]
    
    syntax ExpectCallTestField ::= "_failed" [symbol(), klabel(field_ExpectCallTest__failed)]
    
    syntax ExpectCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ExpectCallTest_IS_SCRIPT)]
    
    syntax ExpectCallTestField ::= "stdstore" [symbol(), klabel(field_ExpectCallTest_stdstore)]
    
    rule  ( #loc ( S2KExpectCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KExpectCallTestContract "." S2KExpectCallTestMethod [function(), symbol(), klabel(method_ExpectCallTest)]
    
    syntax S2KExpectCallTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KISZUndSCRIPT_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KISZUndTEST_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kfailed_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kkevm_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtestExpectRegularCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtestExpectRegularCall_)]
    
    syntax S2KExpectCallTestMethod ::= "S2KtestExpectStaticCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2KtestExpectStaticCall_)]
    
    syntax S2KExpectCallTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ExpectCallTest_S2Kvm_)]
    
    rule  ( S2KExpectCallTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtestExpectRegularCall ( ) => #abiCallData ( "testExpectRegularCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2KtestExpectStaticCall ( ) => #abiCallData ( "testExpectStaticCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testExpectRegularCall()" ) => 676731872 )
      
    
    rule  ( selector ( "testExpectStaticCall()" ) => 3219733999 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module DepthReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDepthReverterContract
    
    syntax S2KDepthReverterContract ::= "S2KDepthReverter" [symbol(), klabel(contract_DepthReverter)]
    
      
    
    rule  ( #initBytecode ( S2KDepthReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61018e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea2646970667358221220a97e5d569f78f07a5d3637ec80fb77436077805bf7b817afb0e376148dda6edd64736f6c634300080d0033608060405234801561001057600080fd5b5061016e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634167168d14610046578063b7246fc114610050578063f7a3038114610064575b600080fd5b61004e600080fd5b005b604080516001815290519081900360200190f35b61004e610072366004610097565b818160405162461bcd60e51b815260040161008e929190610109565b60405180910390fd5b600080602083850312156100aa57600080fd5b823567ffffffffffffffff808211156100c257600080fd5b818501915085601f8301126100d657600080fd5b8135818111156100e557600080fd5b8660208285010111156100f757600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea264697066735822122064c7263d751c37f0f3b5464bd99226f1bfd6df132a038e94de19f3374f5c2a7864736f6c634300080d0033" ) )
      
    
    syntax Field ::= DepthReverterField
    
    syntax DepthReverterField ::= "reverter" [symbol(), klabel(field_DepthReverter_reverter)]
    
    rule  ( #loc ( S2KDepthReverter . reverter ) => 0 )
      
    
    syntax Bytes ::= S2KDepthReverterContract "." S2KDepthReverterMethod [function(), symbol(), klabel(method_DepthReverter)]
    
    syntax S2KDepthReverterMethod ::= "S2KrevertAtNextDepth" "(" ")" [symbol(), klabel(method_DepthReverter_S2KrevertAtNextDepth_)]
    
    rule  ( S2KDepthReverter . S2KrevertAtNextDepth ( ) => #abiCallData ( "revertAtNextDepth" , .TypedArgs ) )
      
    
    rule  ( selector ( "revertAtNextDepth()" ) => 332278727 )
      

endmodule

module ExpectRevertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectRevertTestContract
    
    syntax S2KExpectRevertTestContract ::= "S2KExpectRevertTest" [symbol(), klabel(contract_ExpectRevertTest)]
    
      
    
    rule  ( #initBytecode ( S2KExpectRevertTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50611c8a806100316000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063aeb5731f11610097578063dcf0424711610066578063dcf04247146101ac578063f8ccbf47146101b4578063f9f4ca02146101c7578063fa7626d4146101cf57600080fd5b8063aeb5731f1461017c578063ba414fa614610184578063d30bccea1461019c578063dc01ae45146101a457600080fd5b8063694b3707116100d3578063694b37071461015c578063804de425146101645780638e3adec11461016c578063976363f41461017457600080fd5b806301a0747214610105578063364a91691461011a5780633a768463146101225780634d881cd514610154575b600080fd5b610118610113366004611275565b6101dc565b005b61011861030e565b610137600080516020611c1583398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6101186103f9565b6101186104e7565b61011861054f565b61011861064c565b6101186107dd565b6101186108c1565b61018c610940565b604051901515815260200161014b565b610118610a5f565b610118610b38565b610118610b98565b60005461018c9062010000900460ff1681565b610118610c9d565b60005461018c9060ff1681565b6040516303223eab60e11b81526001600160a01b0382166004820152600080516020611c15833981519152906306447d5690602401600060405180830381600087803b15801561022b57600080fd5b505af115801561023f573d6000803e3d6000fd5b5050604051600080516020611c15833981519152925063f28dceb39150631ded6b7360e11b906102739085906024016112a5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526102b89160040161133a565b600060405180830381600087803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b5050505080604051631ded6b7360e11b815260040161030591906112a5565b60405180910390fd5b600060405161031c9061124e565b604051809103906000f080158015610338573d6000803e3d6000fd5b509050600080516020611c3583398151915260001c60601b60601c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561038d57600080fd5b505af11580156103a1573d6000803e3d6000fd5b50505050806001600160a01b03166313ce2bc76040518163ffffffff1660e01b815260040160006040518083038186803b1580156103de57600080fd5b505afa1580156103f2573d6000803e3d6000fd5b5050505050565b60006040516104079061125b565b604051809103906000f080158015610423573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150600080516020611c158339815191529063c31eb0e090602401600060405180830381600087803b15801561047457600080fd5b505af1158015610488573d6000803e3d6000fd5b505060405163f7a3038160e01b81526001600160a01b038416925063f7a3038191506104cf906004016020808252600490820152631190525360e21b604082015260600190565b60006040518083038186803b1580156103de57600080fd5b60408051633d21120560e21b81529051600080516020611c158339815191529163f484481491600480830192600092919082900301818387803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b5050505061054d610ec9565b565b600060405161055d9061125b565b604051809103906000f080158015610579573d6000803e3d6000fd5b509050600080516020611c3583398151915260001c60601b60601c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610648919061134d565b5050565b600060405161065a9061125b565b604051809103906000f080158015610676573d6000803e3d6000fd5b509050600080516020611c3583398151915260001c60601b60601c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106cb57600080fd5b505af11580156106df573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610745919061134d565b5060408051633d21120560e21b81529051600080516020611c158339815191529163f484481491600480830192600092919082900301818387803b15801561078c57600080fd5b505af11580156107a0573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156103de57600080fd5b60006040516107eb9061125b565b604051809103906000f080158015610807573d6000803e3d6000fd5b509050600080516020611c3583398151915260001c60601b60601c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085c57600080fd5b505af1158015610870573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156108ad57600080fd5b505afa1580156107a0573d6000803e3d6000fd5b60006040516108cf9061125b565b604051809103906000f0801580156108eb573d6000803e3d6000fd5b509050600080516020611c3583398151915260001c60601b60601c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561078c57600080fd5b60008054610100900460ff16156109605750600054610100900460ff1690565b6000600080516020611c158339815191523b15610a5a5760408051600080516020611c15833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916109e2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161136f565b60408051601f19818403018152908290526109fc916113a0565b6000604051808303816000865af19150503d8060008114610a39576040519150601f19603f3d011682016040523d82523d6000602084013e610a3e565b606091505b5091505080806020019051810190610a56919061134d565b9150505b919050565b6000604051610a6d9061125b565b604051809103906000f080158015610a89573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150600080516020611c158339815191529063c31eb0e090602401600060405180830381600087803b158015610ada57600080fd5b505af1158015610aee573d6000803e3d6000fd5b505060405163f7a3038160e01b8152602060048201526009602482015268213aba103330b4b61760b91b60448201526001600160a01b038416925063f7a3038191506064016104cf565b60408051633d21120560e21b81529051600080516020611c158339815191529163f484481491600480830192600092919082900301818387803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b50505050565b6000604051610ba69061125b565b604051809103906000f080158015610bc2573d6000803e3d6000fd5b50604080518082018252601281527152657665727420526561736f6e204865726560701b6020820152905163f28dceb360e01b8152919250600080516020611c158339815191529163f28dceb391610c1c9160040161133a565b600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b505060405163f7a3038160e01b815260206004820152601260248201527152657665727420526561736f6e204865726560701b60448201526001600160a01b038416925063f7a3038191506064016104cf565b6000604051610cab90611268565b604051809103906000f080158015610cc7573d6000803e3d6000fd5b5060405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152909150600080516020611c158339815191529063f28dceb390606401600060405180830381600087803b158015610d2757600080fd5b505af1158015610d3b573d6000803e3d6000fd5b5050604051633452efc960e21b815260016004820152600092506001600160a01b038416915063d14bbf24906024016000604051808303816000875af1158015610d89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db191908101906113d2565b9050610dcc8160405180602001604052806000815250610eeb565b60405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152600080516020611c158339815191529063f28dceb390606401600060405180830381600087803b158015610e2857600080fd5b505af1158015610e3c573d6000803e3d6000fd5b505060405163752795a160e11b815260016004820152600092508291506001600160a01b0385169063ea4f2b429060240160408051808303816000875af1158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf919061147f565b91509150610ebe826000610fe2565b610b92816000610fe2565b60405162461bcd60e51b81526020600482015260006024820152604401610305565b610ef582826110c1565b610648577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610f649060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1882604051610f9b91906114a3565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051610fd291906114e7565b60405180910390a161064861114e565b808214610648577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516110539060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161108a9190611511565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610fd29190611549565b8051825160019190036111445760005b835181101561113e578281815181106110ec576110ec611573565b602001015160f81c60f81b6001600160f81b03191684828151811061111357611113611573565b01602001516001600160f81b0319161461112c57600091505b8061113681611589565b9150506110d1565b50611148565b5060005b92915050565b600080516020611c158339815191523b1561123d5760408051600080516020611c15833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526111dc929160200161136f565b60408051601f19818403018152908290526111f6916113a0565b6000604051808303816000865af19150503d8060008114611233576040519150601f19603f3d011682016040523d82523d6000602084013e611238565b606091505b505050505b6000805461ff001916610100179055565b6102cb806115b183390190565b61018e8061187c83390190565b61020b80611a0a83390190565b60006020828403121561128757600080fd5b81356001600160a01b038116811461129e57600080fd5b9392505050565b6001600160a01b039190911681526040602082018190526011908201527005452414e534645524f574e45525348495607c1b606082015260800190565b60005b838110156112fd5781810151838201526020016112e5565b83811115610b925750506000910152565b600081518084526113268160208601602086016112e2565b601f01601f19169290920160200192915050565b60208152600061129e602083018461130e565b60006020828403121561135f57600080fd5b8151801515811461129e57600080fd5b6001600160e01b03198316815281516000906113928160048501602087016112e2565b919091016004019392505050565b600082516113b28184602087016112e2565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156113e457600080fd5b815167ffffffffffffffff808211156113fc57600080fd5b818401915084601f83011261141057600080fd5b815181811115611422576114226113bc565b604051601f8201601f19908116603f0116810190838211818310171561144a5761144a6113bc565b8160405282815287602084870101111561146357600080fd5b6114748360208301602088016112e2565b979650505050505050565b6000806040838503121561149257600080fd5b505080516020909101519092909150565b6040815260006114cd60408301600a8152690808080808081319599d60b21b602082015260400190565b82810360208401526114df818561130e565b949350505050565b6040815260006114cd60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061153b60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600061153b60408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6000600182016115a957634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61018e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea2646970667358221220a97e5d569f78f07a5d3637ec80fb77436077805bf7b817afb0e376148dda6edd64736f6c634300080d0033608060405234801561001057600080fd5b5061016e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634167168d14610046578063b7246fc114610050578063f7a3038114610064575b600080fd5b61004e600080fd5b005b604080516001815290519081900360200190f35b61004e610072366004610097565b818160405162461bcd60e51b815260040161008e929190610109565b60405180910390fd5b600080602083850312156100aa57600080fd5b823567ffffffffffffffff808211156100c257600080fd5b818501915085601f8301126100d657600080fd5b8135818111156100e557600080fd5b8660208285010111156100f757600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea264697066735822122064c7263d751c37f0f3b5464bd99226f1bfd6df132a038e94de19f3374f5c2a7864736f6c634300080d0033608060405234801561001057600080fd5b5061016e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634167168d14610046578063b7246fc114610050578063f7a3038114610064575b600080fd5b61004e600080fd5b005b604080516001815290519081900360200190f35b61004e610072366004610097565b818160405162461bcd60e51b815260040161008e929190610109565b60405180910390fd5b600080602083850312156100aa57600080fd5b823567ffffffffffffffff808211156100c257600080fd5b818501915085601f8301126100d657600080fd5b8135818111156100e557600080fd5b8660208285010111156100f757600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea264697066735822122064c7263d751c37f0f3b5464bd99226f1bfd6df132a038e94de19f3374f5c2a7864736f6c634300080d0033608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ecc4e10b2e6f3ddc01938ba2788e8578e820d84d76b95e9322a8d47a89fe8aec64736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da264697066735822122000df38a0e98f6d562096d17fe022870443ec435f65c334d78b7ff5e664ccf3a364736f6c634300080d0033" ) )
      
    
    syntax Field ::= ExpectRevertTestField
    
    syntax ExpectRevertTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectRevertTest_IS_TEST)]
    
    syntax ExpectRevertTestField ::= "_failed" [symbol(), klabel(field_ExpectRevertTest__failed)]
    
    syntax ExpectRevertTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ExpectRevertTest_IS_SCRIPT)]
    
    syntax ExpectRevertTestField ::= "stdstore" [symbol(), klabel(field_ExpectRevertTest_stdstore)]
    
    rule  ( #loc ( S2KExpectRevertTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KExpectRevertTestContract "." S2KExpectRevertTestMethod [function(), symbol(), klabel(method_ExpectRevertTest)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KISZUndSCRIPT_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KISZUndTEST_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2Kfailed_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndExpectRevertZUndfailAndSuccess" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndExpectRevertZUndfailAndSuccess_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndbytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndempty" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndempty_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndfalse" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndfalse_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndmultipleReverts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestFailZUndexpectRevertZUndmultipleReverts_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndExpectRevertZUndincreasedDepth" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndExpectRevertZUndincreasedDepth_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndbytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndencodedSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndencodedSymbolic_address)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinternalCall" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndinternalCall_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndmessage" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndmessage_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndreturnValue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndreturnValue_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndtrue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2KtestZUndexpectRevertZUndtrue_)]
    
    syntax S2KExpectRevertTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ExpectRevertTest_S2Kvm_)]
    
    rule  ( S2KExpectRevertTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndExpectRevertZUndfailAndSuccess ( ) => #abiCallData ( "testFail_ExpectRevert_failAndSuccess" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "testFail_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndempty ( ) => #abiCallData ( "testFail_expectRevert_empty" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndfalse ( ) => #abiCallData ( "testFail_expectRevert_false" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestFailZUndexpectRevertZUndmultipleReverts ( ) => #abiCallData ( "testFail_expectRevert_multipleReverts" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndExpectRevertZUndincreasedDepth ( ) => #abiCallData ( "test_ExpectRevert_increasedDepth" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "test_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndencodedSymbolic ( V0_controller : address ) => #abiCallData ( "test_expectRevert_encodedSymbolic" , #address ( V0_controller ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndinternalCall ( ) => #abiCallData ( "test_expectRevert_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndmessage ( ) => #abiCallData ( "test_expectRevert_message" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndreturnValue ( ) => #abiCallData ( "test_expectRevert_returnValue" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2KtestZUndexpectRevertZUndtrue ( ) => #abiCallData ( "test_expectRevert_true" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_ExpectRevert_failAndSuccess()" ) => 2386222785 )
      
    
    rule  ( selector ( "testFail_expectRevert_bytes4()" ) => 3540765930 )
      
    
    rule  ( selector ( "testFail_expectRevert_empty()" ) => 3691097669 )
      
    
    rule  ( selector ( "testFail_expectRevert_false()" ) => 2152588325 )
      
    
    rule  ( selector ( "testFail_expectRevert_multipleReverts()" ) => 2539873268 )
      
    
    rule  ( selector ( "test_ExpectRevert_increasedDepth()" ) => 910856553 )
      
    
    rule  ( selector ( "test_expectRevert_bytes4()" ) => 1300765909 )
      
    
    rule  ( selector ( "test_expectRevert_encodedSymbolic(address)" ) => 27292786 )
      
    
    rule  ( selector ( "test_expectRevert_internalCall()" ) => 1766536967 )
      
    
    rule  ( selector ( "test_expectRevert_message()" ) => 3706733127 )
      
    
    rule  ( selector ( "test_expectRevert_returnValue()" ) => 4193569282 )
      
    
    rule  ( selector ( "test_expectRevert_true()" ) => 2931127071 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Reverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterContract
    
    syntax S2KReverterContract ::= "S2KReverter" [symbol(), klabel(contract_Reverter)]
    
      
    
    rule  ( #initBytecode ( S2KReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061016e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634167168d14610046578063b7246fc114610050578063f7a3038114610064575b600080fd5b61004e600080fd5b005b604080516001815290519081900360200190f35b61004e610072366004610097565b818160405162461bcd60e51b815260040161008e929190610109565b60405180910390fd5b600080602083850312156100aa57600080fd5b823567ffffffffffffffff808211156100c257600080fd5b818501915085601f8301126100d657600080fd5b8135818111156100e557600080fd5b8660208285010111156100f757600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea264697066735822122064c7263d751c37f0f3b5464bd99226f1bfd6df132a038e94de19f3374f5c2a7864736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KReverterContract "." S2KReverterMethod [function(), symbol(), klabel(method_Reverter)]
    
    syntax S2KReverterMethod ::= "S2KnoRevert" "(" ")" [symbol(), klabel(method_Reverter_S2KnoRevert_)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithReason" "(" String ":" "string" ")" [symbol(), klabel(method_Reverter_S2KrevertWithReason_string)]
    
    syntax S2KReverterMethod ::= "S2KrevertWithoutReason" "(" ")" [symbol(), klabel(method_Reverter_S2KrevertWithoutReason_)]
    
    rule  ( S2KReverter . S2KnoRevert ( ) => #abiCallData ( "noRevert" , .TypedArgs ) )
      
    
    rule  ( S2KReverter . S2KrevertWithReason ( V0__a : string ) => #abiCallData ( "revertWithReason" , #string ( V0__a ) , .TypedArgs ) )
      
    
    rule  ( S2KReverter . S2KrevertWithoutReason ( ) => #abiCallData ( "revertWithoutReason" , .TypedArgs ) )
      
    
    rule  ( selector ( "noRevert()" ) => 3072618433 )
      
    
    rule  ( selector ( "revertWithReason(string)" ) => 4154655617 )
      
    
    rule  ( selector ( "revertWithoutReason()" ) => 1097275021 )
      

endmodule

module ReverterWithReturn-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterWithReturnContract
    
    syntax S2KReverterWithReturnContract ::= "S2KReverterWithReturn" [symbol(), klabel(contract_ReverterWithReturn)]
    
      
    
    rule  ( #initBytecode ( S2KReverterWithReturn ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ecc4e10b2e6f3ddc01938ba2788e8578e820d84d76b95e9322a8d47a89fe8aec64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KReverterWithReturnContract "." S2KReverterWithReturnMethod [function(), symbol(), klabel(method_ReverterWithReturn)]
    
    syntax S2KReverterWithReturnMethod ::= "S2KreturnBytesUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_S2KreturnBytesUnless_bool)]
    
    syntax S2KReverterWithReturnMethod ::= "S2KreturnTupleUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_S2KreturnTupleUnless_bool)]
    
    rule  ( S2KReverterWithReturn . S2KreturnBytesUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnBytesUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( S2KReverterWithReturn . S2KreturnTupleUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnTupleUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( selector ( "returnBytesUnless(bool)" ) => 3511402276 )
      
    
    rule  ( selector ( "returnTupleUnless(bool)" ) => 3931056962 )
      

endmodule

module FfiTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFfiTestContract
    
    syntax S2KFfiTestContract ::= "S2KFfiTest" [symbol(), klabel(contract_FfiTest)]
    
      
    
    rule  ( #initBytecode ( S2KFfiTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610f17806100316000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c8063a2f6dab511610066578063a2f6dab5146100e9578063ba414fa6146100f1578063f5eaa12614610109578063f8ccbf4714610111578063fa7626d41461012457600080fd5b80623e1314146100975780630a9254e4146100a15780633a768463146100a9578063900127c6146100e1575b600080fd5b61009f610131565b005b61009f61036c565b6100c4737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61041a565b61009f6105c7565b6100f961066d565b60405190151581526020016100d8565b61009f610798565b6000546100f99062010000900460ff1681565b6000546100f99060ff1681565b60408051600380825260808201909252600091816020015b6060815260200190600190039081610149579050509050604051806040016040528060048152602001636563686f60e01b8152508160008151811061019057610190610b67565b60200260200101819052506040518060400160405280600281526020016116b760f11b815250816001815181106101c9576101c9610b67565b602090810291909101810191909152604051737109709ecfa91a80626ff3989d68f67f5b1dd12d916371aad10d916102189101602080825260029082015261676d60f01b604082015260600190565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016102439190610bd9565b6000604051808303816000875af1158015610262573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028a9190810190610c67565b8160028151811061029d5761029d610b67565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906389160467906102e2908590600401610cb8565b6000604051808303816000875af1158015610301573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103299190810190610c67565b90506000818060200190518101906103419190610c67565b90506103678160405180604001604052806002815260200161676d60f01b815250610904565b505050565b600060405180604001604052806003815260200162464f4f60e81b8152509050600060405180610100016040528060c28152602001610e2060c29139604051631eac91f760e11b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90633d5923ee906103e49085908590600401610d1a565b600060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050505050565b60408051600380825260808201909252600091816020015b6060815260200190600190039081610432579050509050604051806040016040528060048152602001630c4c2e6d60e31b8152508160008151811061047957610479610b67565b6020026020010181905250604051806040016040528060028152602001612d6360f01b815250816001815181106104b2576104b2610b67565b60200260200101819052506040518060400160405280600c81526020016b6563686f202d6e2024464f4f60a01b815250816002815181106104f5576104f5610b67565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063891604679061053a908590600401610cb8565b6000604051808303816000875af1158015610559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105819190810190610c67565b90506000818060200190518101906105999190610c67565b9050610367816040518060400160405280600a815260200169393ab73a34b6b2ab30b960b11b815250610904565b60408051600280825260608201909252600091816020015b60608152602001906001900390816105df579050509050604051806040016040528060048152602001630c4c2e6d60e31b8152508160008151811061062657610626610b67565b60200260200101819052506040518060400160405280601081526020016f0e8cae6e85edaf2e6c6e4d2e0e85ce6d60831b815250816001815181106104f5576104f5610b67565b60008054610100900460ff161561068d5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107935760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161071b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d48565b60408051601f198184030181529082905261073591610d79565b6000604051808303816000865af19150503d8060008114610772576040519150601f19603f3d011682016040523d82523d6000602084013e610777565b606091505b509150508080602001905181019061078f9190610d95565b9150505b919050565b60408051600280825260608201909252600091816020015b60608152602001906001900390816107b0579050509050604051806040016040528060048152602001630c4c2e6d60e31b815250816000815181106107f7576107f7610b67565b60200260200101819052506040518060400160405280600e81526020016d0e8cae6e85ee6c6e4d2e0e85ce6d60931b8152508160018151811061083c5761083c610b67565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638916046790610881908590600401610cb8565b6000604051808303816000875af11580156108a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c89190810190610c67565b90506000818060200190518101906108e09190610c67565b905061036781604051806040016040528060048152602001637472756560e01b8152505b806040516020016109159190610d79565b604051602081830303815290604052805190602001208260405160200161093c9190610d79565b6040516020818303038152906040528051906020012014610a41577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109c39060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516109fa9190610db7565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610a319190610deb565b60405180910390a1610a41610a45565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b405760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610adf9291602001610d48565b60408051601f1981840301815290829052610af991610d79565b6000604051808303816000865af19150503d8060008114610b36576040519150601f19603f3d011682016040523d82523d6000602084013e610b3b565b606091505b505050505b6000805461ff001916610100179055565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b83811015610b98578181015183820152602001610b80565b83811115610ba7576000848401525b50505050565b60008151808452610bc5816020860160208601610b7d565b601f01601f19169290920160200192915050565b602081526000610bec6020830184610bad565b9392505050565b600067ffffffffffffffff80841115610c0e57610c0e610b51565b604051601f8501601f19908116603f01168101908282118183101715610c3657610c36610b51565b81604052809350858152868686011115610c4f57600080fd5b610c5d866020830187610b7d565b5050509392505050565b600060208284031215610c7957600080fd5b815167ffffffffffffffff811115610c9057600080fd5b8201601f81018413610ca157600080fd5b610cb084825160208401610bf3565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d0d57603f19888603018452610cfb858351610bad565b94509285019290850190600101610cdf565b5092979650505050505050565b604081526000610d2d6040830185610bad565b8281036020840152610d3f8185610bad565b95945050505050565b6001600160e01b0319831681528151600090610d6b816004850160208701610b7d565b919091016004019392505050565b60008251610d8b818460208701610b7d565b9190910192915050565b600060208284031215610da757600080fd5b81518015158114610bec57600080fd5b60408152600a6040820152690808080808081319599d60b21b6060820152608060208201526000610bec6080830184610bad565b60408152600a6040820152690808080808149a59da1d60b21b6060820152608060208201526000610bec6080830184610bad56fe3078303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303032303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306137323735366537343639366436353536363137323030303030303030303030303030303030303030303030303030303030303030303030303030303030303030a2646970667358221220e525012a1a1d47432defb3e0fe32cf6ae7c22b5c2242eda2c3195c6b4eec141c64736f6c634300080d0033" ) )
      
    
    syntax Field ::= FfiTestField
    
    syntax FfiTestField ::= "IS_TEST" [symbol(), klabel(field_FfiTest_IS_TEST)]
    
    syntax FfiTestField ::= "_failed" [symbol(), klabel(field_FfiTest__failed)]
    
    syntax FfiTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestField ::= "stdstore" [symbol(), klabel(field_FfiTest_stdstore)]
    
    rule  ( #loc ( S2KFfiTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KFfiTestContract "." S2KFfiTestMethod [function(), symbol(), klabel(method_FfiTest)]
    
    syntax S2KFfiTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_FfiTest_S2KISZUndSCRIPT_)]
    
    syntax S2KFfiTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FfiTest_S2KISZUndTEST_)]
    
    syntax S2KFfiTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FfiTest_S2Kfailed_)]
    
    syntax S2KFfiTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_FfiTest_S2KsetUp_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIFOO" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIFOO_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIScript" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIScript_)]
    
    syntax S2KFfiTestMethod ::= "S2KtestFFIScript2" "(" ")" [symbol(), klabel(method_FfiTest_S2KtestFFIScript2_)]
    
    syntax S2KFfiTestMethod ::= "S2Ktestffi" "(" ")" [symbol(), klabel(method_FfiTest_S2Ktestffi_)]
    
    syntax S2KFfiTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_FfiTest_S2Kvm_)]
    
    rule  ( S2KFfiTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2KtestFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Ktestffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFFIFOO()" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript()" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2()" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi()" ) => 4068116 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module FilesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFilesTestContract
    
    syntax S2KFilesTestContract ::= "S2KFilesTest" [symbol(), klabel(contract_FilesTest)]
    
      
    
    rule  ( #initBytecode ( S2KFilesTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610dae806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100c6578063e7515e59146100de578063f8ccbf47146100e6578063fa7626d4146100f957600080fd5b80633a76846314610082578063a5be8246146100b4578063b52803ed146100be575b600080fd5b610097600080516020610d5983398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bc610106565b005b6100bc6102c0565b6100ce610550565b60405190151581526020016100ab565b6100bc61066f565b6000546100ce9062010000900460ff1681565b6000546100ce9060ff1681565b6040516360f9bb1160e01b8152600090600080516020610d59833981519152906360f9bb119061013890600401610a07565b6000604051808303816000875af1158015610157573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261017f9190810190610a76565b60405163897e0a9760e01b8152909150600080516020610d598339815191529063897e0a97906101b3908490600401610b4f565b600060405180830381600087803b1580156101cd57600080fd5b505af11580156101e1573d6000803e3d6000fd5b505060405163f1afe04d60e01b8152600080516020610d59833981519152925063f1afe04d915061021490600401610b9d565b600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b50506040516360f9bb1160e01b8152600080516020610d5983398151915292506360f9bb11915061027590600401610b9d565b6000604051808303816000875af1158015610294573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102bc9190810190610a76565b5050565b604051630e1eaae560e31b8152600090600080516020610d59833981519152906370f55728906102f290600401610a07565b6000604051808303816000875af1158015610311573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103399190810190610a76565b60405163619d897f60e01b8152909150600080516020610d598339815191529063619d897f9061036d908490600401610bd7565b600060405180830381600087803b15801561038757600080fd5b505af115801561039b573d6000803e3d6000fd5b5050604051630e1eaae560e31b8152600080516020610d5983398151915292506370f5572891506103ce90600401610a07565b6000604051808303816000875af11580156103ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104159190810190610a76565b9050610444816040518060400160405280600b81526020016a666f722074657374696e6760a81b8152506107cf565b6040516348c3241f60e01b8152600080516020610d59833981519152906348c3241f9061047390600401610a07565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b5050604051630e1eaae560e31b8152600080516020610d5983398151915292506370f5572891506104d490600401610a07565b6000604051808303816000875af11580156104f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051b9190810190610a76565b905061054d816040518060400160405280600e81526020016d5468697320697320612066696c6560901b8152506107cf565b50565b60008054610100900460ff16156105705750600054610100900460ff1690565b6000600080516020610d598339815191523b1561066a5760408051600080516020610d59833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916105f2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c1b565b60408051601f198184030181529082905261060c91610c4c565b6000604051808303816000865af19150503d8060008114610649576040519150601f19603f3d011682016040523d82523d6000602084013e61064e565b606091505b50915050808060200190518101906106669190610c68565b9150505b919050565b6040516360f9bb1160e01b8152600090600080516020610d59833981519152906360f9bb11906106a190600401610a07565b6000604051808303816000875af11580156106c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e89190810190610a76565b60405163897e0a9760e01b8152909150600080516020610d598339815191529063897e0a979061071c908490600401610c8a565b600060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b50506040516360f9bb1160e01b815260009250600080516020610d5983398151915291506360f9bb119061078090600401610cbd565b6000604051808303816000875af115801561079f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c79190810190610a76565b90506102bc82825b806040516020016107e09190610c4c565b60405160208183030381529060405280519060200120826040516020016108079190610c4c565b60405160208183030381529060405280519060200120146102bc577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161088e9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516108c59190610cf0565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516108fc9190610d24565b60405180910390a16102bc600080516020610d598339815191523b156109f65760408051600080516020610d59833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109959291602001610c1b565b60408051601f19818403018152908290526109af91610c4c565b6000604051808303816000865af19150503d80600081146109ec576040519150601f19603f3d011682016040523d82523d6000602084013e6109f1565b606091505b505050505b6000805461ff001916610100179055565b6020808252600f908201526e0b8bdd195cdd0bd99a5b194b9d1e1d608a1b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610a61578181015183820152602001610a49565b83811115610a70576000848401525b50505050565b600060208284031215610a8857600080fd5b815167ffffffffffffffff80821115610aa057600080fd5b818401915084601f830112610ab457600080fd5b815181811115610ac657610ac6610a30565b604051601f8201601f19908116603f01168101908382118183101715610aee57610aee610a30565b81604052828152876020848701011115610b0757600080fd5b610b18836020830160208801610a46565b979650505050505050565b60008151808452610b3b816020860160208601610a46565b601f01601f19169290920160200192915050565b604081526000610b836040830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b8281036020840152610b958185610b23565b949350505050565b602081526000610bd16020830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b92915050565b6040815260136040820152720b8bdd195cdd0bd99a5b195b1a5b994b9d1e1d606a1b6060820152608060208201526000610c146080830184610b23565b9392505050565b6001600160e01b0319831681528151600090610c3e816004850160208701610a46565b919091016004019392505050565b60008251610c5e818460208701610a46565b9190910192915050565b600060208284031215610c7a57600080fd5b81518015158114610c1457600080fd5b604081526000610b836040830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b602081526000610bd16020830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b60408152600a6040820152690808080808081319599d60b21b6060820152608060208201526000610c146080830184610b23565b60408152600a6040820152690808080808149a59da1d60b21b6060820152608060208201526000610c146080830184610b2356fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212206a8897e66b3c679760ec6456007714427b3383cdb2c7ec3796fb30ffe322d9c964736f6c634300080d0033" ) )
      
    
    syntax Field ::= FilesTestField
    
    syntax FilesTestField ::= "IS_TEST" [symbol(), klabel(field_FilesTest_IS_TEST)]
    
    syntax FilesTestField ::= "_failed" [symbol(), klabel(field_FilesTest__failed)]
    
    syntax FilesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestField ::= "stdstore" [symbol(), klabel(field_FilesTest_stdstore)]
    
    rule  ( #loc ( S2KFilesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KFilesTestContract "." S2KFilesTestMethod [function(), symbol(), klabel(method_FilesTest)]
    
    syntax S2KFilesTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_FilesTest_S2KISZUndSCRIPT_)]
    
    syntax S2KFilesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_FilesTest_S2KISZUndTEST_)]
    
    syntax S2KFilesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_FilesTest_S2Kfailed_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestFailRemoveFile" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestFailRemoveFile_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestReadWriteFile" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestReadWriteFile_)]
    
    syntax S2KFilesTestMethod ::= "S2KtestReadWriteLine" "(" ")" [symbol(), klabel(method_FilesTest_S2KtestReadWriteLine_)]
    
    syntax S2KFilesTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_FilesTest_S2Kvm_)]
    
    rule  ( S2KFilesTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2KtestReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFailRemoveFile()" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile()" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine()" ) => 3039298541 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ForkTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KForkTestContract
    
    syntax S2KForkTestContract ::= "S2KForkTest" [symbol(), klabel(contract_ForkTest)]
    
      
    
    rule  ( #initBytecode ( S2KForkTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50611875806100316000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c8063b1aed3221161008c578063c011418911610066578063c01141891461017a578063eabff92014610182578063f8ccbf471461018a578063fa7626d41461019d57600080fd5b8063b1aed32214610152578063ba414fa61461015a578063bfb0378d1461017257600080fd5b80632a2b70e3116100c85780632a2b70e3146101085780633a7684631461011057806389837aa614610142578063a822dbe31461014a57600080fd5b8062964545146100ee57806310133ad4146100f85780631c105cc514610100575b600080fd5b6100f66101aa565b005b6100f6610291565b6100f6610318565b6100f6610404565b6101256000805160206117db83398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f66105ca565b6100f661064a565b6100f6610733565b610162610a3f565b6040519015158152602001610139565b6100f6610b5e565b6100f6610ce5565b6100f6610e5a565b6000546101629062010000900460ff1681565b6000546101629060ff1681565b604051630637469360e31b81526000906000805160206117db833981519152906331ba3498906101dc90600401611339565b6020604051808303816000875af11580156101fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f9190611351565b604051639ebf682760e01b8152600481018290529091506000805160206117db83398151915290639ebf682790602401600060405180830381600087803b15801561026957600080fd5b505af115801561027d573d6000803e3d6000fd5b5050505061028e4362e84c2e610f0d565b50565b6040516371ee464d60e01b81526000805160206117db833981519152906371ee464d906102c59062e84c299060040161136a565b6020604051808303816000875af11580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190611351565b506103164362e84c29611012565b565b60405163f28dceb360e01b81526000805160206117db8339815191529063f28dceb3906103479060040161138a565b600060405180830381600087803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b505060405163975a6ce960e01b81526020600482015260076024820152661b585a5b9b995d60ca1b60448201526000805160206117db833981519152925063975a6ce991506064016000604051808303816000875af11580156103dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028e9190810190611503565b60405163f28dceb360e01b81526000805160206117db8339815191529063f28dceb3906104339060040161138a565b600060405180830381600087803b15801561044d57600080fd5b505af1158015610461573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b031663a85a84186040518163ffffffff1660e01b81526004016000604051808303816000875af11580156104d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f89190810190611538565b905061050681516002611012565b60008160008151811061051b5761051b611652565b602002602001015190506105658160006002811061053b5761053b611652565b6020020151604051806040016040528060078152602001661b585a5b9b995d60ca1b8152506110cd565b60008260018151811061057a5761057a611652565b602002602001015190506105c58160006002811061059a5761059a611652565b6020020151604051806040016040528060088152602001676f7074696d69736d60c01b8152506110cd565b505050565b60405163261a000d60e21b81526000805160206117db833981519152906398680034906105f990600401611339565b6020604051808303816000875af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611351565b506103164362e84c2e610f0d565b604051636ba3ba2b60e01b81526000906000805160206117db83398151915290636ba3ba2b906106819062e84c299060040161136a565b6020604051808303816000875af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190611351565b604051639ebf682760e01b8152600481018290529091506000805160206117db83398151915290639ebf682790602401600060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b5050505061028e4362e84c29611012565b604051630637469360e31b81526000906000805160206117db833981519152906331ba34989061076590600401611339565b6020604051808303816000875af1158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190611351565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b60448201529091506000906000805160206117db833981519152906331ba3498906064016020604051808303816000875af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190611351565b905080820361085157610851611668565b604051639ebf682760e01b8152600481018390526000805160206117db83398151915290639ebf682790602401600060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505050506109467f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316632f103f226040518163ffffffff1660e01b81526004016020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190611351565b83611012565b604051639ebf682760e01b8152600481018290526000805160206117db83398151915290639ebf682790602401600060405180830381600087803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b50505050610a3b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316632f103f226040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190611351565b82611012565b5050565b60008054610100900460ff1615610a5f5750600054610100900460ff1690565b60006000805160206117db8339815191523b15610b5957604080516000805160206117db833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610ae1917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161167e565b60408051601f1981840301815290829052610afb916116af565b6000604051808303816000865af19150503d8060008114610b38576040519150601f19603f3d011682016040523d82523d6000602084013e610b3d565b606091505b5091505080806020019051810190610b5591906116cb565b9150505b919050565b604051630637469360e31b815260206004820152602560248201527f68747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f604482015264432f72706360d81b60648201526000906000805160206117db833981519152906331ba3498906084016020604051808303816000875af1158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190611351565b6040516335d320e960e21b815260048101829052630110b11e60248201529091506000805160206117db8339815191529063d74c83a490604401600060405180830381600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b5050604051639ebf682760e01b8152600481018490526000805160206117db8339815191529250639ebf68279150602401600060405180830381600087803b158015610cbf57600080fd5b505af1158015610cd3573d6000803e3d6000fd5b5050505061028e43630110b11e611012565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b60448201526000906000805160206117db833981519152906331ba3498906064016020604051808303816000875af1158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a9190611351565b604051639ebf682760e01b8152600481018290529091506000805160206117db83398151915290639ebf682790602401600060405180830381600087803b158015610dc457600080fd5b505af1158015610dd8573d6000803e3d6000fd5b50505050610dea4363012ff055610f0d565b60405163d9bbf3a160e01b815263012fefb960048201526000805160206117db8339815191529063d9bbf3a190602401600060405180830381600087803b158015610e3457600080fd5b505af1158015610e48573d6000803e3d6000fd5b5050505061028e4363012fefb9611012565b60405163975a6ce960e01b81526020600482015260086024820152676f7074696d69736d60c01b60448201526000906000805160206117db8339815191529063975a6ce9906064016000604051808303816000875af1158015610ec1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ee99190810190611503565b905061028e816040518060600160405280602581526020016117fb602591396110cd565b808211610a3b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610f7d9060208082526021908201527f4572726f723a2061203e2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b60608201526020810184905290516000805160206118208339815191529181900360800190a1604080518181526009918101919091526810102b30b63ab2903160b91b606082015260208101829052600080516020611820833981519152906080015b60405180910390a1610a3b6111fa565b808214610a3b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516110839060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a1600080516020611820833981519152826040516110a891906116f4565b60405180910390a160008051602061182083398151915281604051611002919061171e565b806040516020016110de91906116af565b604051602081830303815290604052805190602001208260405160200161110591906116af565b6040516020818303038152906040528051906020012014610a3b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161118c9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516111c39190611774565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161100291906117b0565b6000805160206117db8339815191523b156112e957604080516000805160206117db833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052611288929160200161167e565b60408051601f19818403018152908290526112a2916116af565b6000604051808303816000865af19150503d80600081146112df576040519150601f19603f3d011682016040523d82523d6000602084013e6112e4565b606091505b505050505b6000805461ff001916610100179055565b602681527f68747470733a2f2f6574682d6d61696e6e65742e7075626c69632e626c6173746020820152656170692e696f60d01b604082015260600190565b60208152600061134b602083016112fa565b92915050565b60006020828403121561136357600080fd5b5051919050565b60408152600061137c604083016112fa565b905082602083015292915050565b60208082526047908201527f4661696c656420746f207265736f6c766520656e762076617220605250435f4d60408201527f41494e4e4554603a20656e7669726f6e6d656e74207661726961626c65206e6f6060820152661d08199bdd5b9960ca1b608082015260a00190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611430576114306113f7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561145f5761145f6113f7565b604052919050565b60005b8381101561148257818101518382015260200161146a565b83811115611491576000848401525b50505050565b600082601f8301126114a857600080fd5b815167ffffffffffffffff8111156114c2576114c26113f7565b6114d5601f8201601f1916602001611436565b8181528460208386010111156114ea57600080fd5b6114fb826020830160208701611467565b949350505050565b60006020828403121561151557600080fd5b815167ffffffffffffffff81111561152c57600080fd5b6114fb84828501611497565b6000602080838503121561154b57600080fd5b825167ffffffffffffffff8082111561156357600080fd5b818501915085601f83011261157757600080fd5b815181811115611589576115896113f7565b611597848260051b01611436565b81815260059190911b830184019084810190888311156115b657600080fd5b8585015b83811015611645578051858111156115d157600080fd5b8601603f81018b136115e257600080fd5b6115ea61140d565b808c6060840111156115fb57600080fd5b8983015b606084018110156116355780518981111561161957600080fd5b6116278f8d83880101611497565b845250918a01918a016115ff565b50855250509186019186016115ba565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b6001600160e01b03198316815281516000906116a1816004850160208701611467565b919091016004019392505050565b600082516116c1818460208701611467565b9190910192915050565b6000602082840312156116dd57600080fd5b815180151581146116ed57600080fd5b9392505050565b60408152600061137c60408301600a8152690808080808081319599d60b21b602082015260400190565b60408152600061137c60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60008151808452611760816020860160208601611467565b601f01601f19169290920160200192915050565b60408152600061179e60408301600a8152690808080808081319599d60b21b602082015260400190565b82810360208401526114fb8185611748565b60408152600061179e60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f6f7074696d69736d2e616c6368656d796170692e696f2f76322f2e2e2eb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8a2646970667358221220a161c1f2b95d482d3e0078727fec286c4b543602f47dc6de8e5923f0c90b1c4264736f6c634300080d0033" ) )
      
    
    syntax Field ::= ForkTestField
    
    syntax ForkTestField ::= "IS_TEST" [symbol(), klabel(field_ForkTest_IS_TEST)]
    
    syntax ForkTestField ::= "_failed" [symbol(), klabel(field_ForkTest__failed)]
    
    syntax ForkTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestField ::= "stdstore" [symbol(), klabel(field_ForkTest_stdstore)]
    
    rule  ( #loc ( S2KForkTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KForkTestContract "." S2KForkTestMethod [function(), symbol(), klabel(method_ForkTest)]
    
    syntax S2KForkTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ForkTest_S2KISZUndSCRIPT_)]
    
    syntax S2KForkTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ForkTest_S2KISZUndTEST_)]
    
    syntax S2KForkTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ForkTest_S2Kfailed_)]
    
    syntax S2KForkTestMethod ::= "S2KtestActiveFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestActiveFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestAllRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestAllRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateForkBlock_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateSelectFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateSelectFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestCreateSelectForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestCreateSelectForkBlock_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRPCUrlRevert" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRPCUrlRevert_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRollFork" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRollFork_)]
    
    syntax S2KForkTestMethod ::= "S2KtestRollForkId" "(" ")" [symbol(), klabel(method_ForkTest_S2KtestRollForkId_)]
    
    syntax S2KForkTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ForkTest_S2Kvm_)]
    
    rule  ( S2KForkTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestActiveFork ( ) => #abiCallData ( "testActiveFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestAllRPCUrl ( ) => #abiCallData ( "testAllRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateFork ( ) => #abiCallData ( "testCreateFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateForkBlock ( ) => #abiCallData ( "testCreateForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateSelectFork ( ) => #abiCallData ( "testCreateSelectFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestCreateSelectForkBlock ( ) => #abiCallData ( "testCreateSelectForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRPCUrl ( ) => #abiCallData ( "testRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRPCUrlRevert ( ) => #abiCallData ( "testRPCUrlRevert" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRollFork ( ) => #abiCallData ( "testRollFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2KtestRollForkId ( ) => #abiCallData ( "testRollForkId" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testActiveFork()" ) => 2981024546 )
      
    
    rule  ( selector ( "testAllRPCUrl()" ) => 707490019 )
      
    
    rule  ( selector ( "testCreateFork()" ) => 9848133 )
      
    
    rule  ( selector ( "testCreateForkBlock()" ) => 2820856803 )
      
    
    rule  ( selector ( "testCreateSelectFork()" ) => 2307095206 )
      
    
    rule  ( selector ( "testCreateSelectForkBlock()" ) => 269695700 )
      
    
    rule  ( selector ( "testRPCUrl()" ) => 3938449696 )
      
    
    rule  ( selector ( "testRPCUrlRevert()" ) => 470834373 )
      
    
    rule  ( selector ( "testRollFork()" ) => 3222356361 )
      
    
    rule  ( selector ( "testRollForkId()" ) => 3215996813 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module GasTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGasTestContract
    
    syntax S2KGasTestContract ::= "S2KGasTest" [symbol(), klabel(contract_GasTest)]
    
      
    
    rule  ( #initBytecode ( S2KGasTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506103f3806100316000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633a7684631461006757806363fec3361461009f578063ba414fa6146100a9578063d6a2ec76146100c1578063f8ccbf47146100e8578063fa7626d4146100fb575b600080fd5b610082737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a7610108565b005b6100b16101c3565b6040519015158152602001610096565b6100827f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663ed9f73536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b5050505060005a90506101596103a0600061019583836102ee565b905060005a9050808511156101ac576101ac610313565b848111156101bc576101bc610313565b5050505050565b60008054610100900460ff16156101e35750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102e95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610271917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610364565b60408051601f198184030181529082905261028b91610388565b6000604051808303816000865af19150503d80600081146102c8576040519150601f19603f3d011682016040523d82523d6000602084013e6102cd565b606091505b50915050808060200190518101906102e5919061039b565b9150505b919050565b60008282101561030e57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000815160005b8181101561034a5760208185018101518683015201610330565b81811115610359576000828601525b509290920192915050565b6001600160e01b03198316815260006103806004830184610329565b949350505050565b60006103948284610329565b9392505050565b6000602082840312156103ad57600080fd5b8151801515811461039457600080fdfea26469706673582212201f021b53bb014e92d600526301101422e3ee145932dd461950f33fe35d3cb2b764736f6c634300080d0033" ) )
      
    
    syntax Field ::= GasTestField
    
    syntax GasTestField ::= "IS_TEST" [symbol(), klabel(field_GasTest_IS_TEST)]
    
    syntax GasTestField ::= "_failed" [symbol(), klabel(field_GasTest__failed)]
    
    syntax GasTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GasTest_IS_SCRIPT)]
    
    syntax GasTestField ::= "stdstore" [symbol(), klabel(field_GasTest_stdstore)]
    
    rule  ( #loc ( S2KGasTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KGasTestContract "." S2KGasTestMethod [function(), symbol(), klabel(method_GasTest)]
    
    syntax S2KGasTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_GasTest_S2KISZUndSCRIPT_)]
    
    syntax S2KGasTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_GasTest_S2KISZUndTEST_)]
    
    syntax S2KGasTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_GasTest_S2Kfailed_)]
    
    syntax S2KGasTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_GasTest_S2Kkevm_)]
    
    syntax S2KGasTestMethod ::= "S2KtestInfiniteGas" "(" ")" [symbol(), klabel(method_GasTest_S2KtestInfiniteGas_)]
    
    syntax S2KGasTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_GasTest_S2Kvm_)]
    
    rule  ( S2KGasTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2KtestInfiniteGas ( ) => #abiCallData ( "testInfiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testInfiniteGas()" ) => 1677640502 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module GetCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGetCodeTestContract
    
    syntax S2KGetCodeTestContract ::= "S2KGetCodeTest" [symbol(), klabel(contract_GetCodeTest)]
    
      
    
    rule  ( #initBytecode ( S2KGetCodeTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610c07806100316000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610071578063ba414fa6146100a9578063e8d3529f146100c1578063f8ccbf47146100c9578063fa7626d4146100dc575b600080fd5b61006f6100e9565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b1610147565b60405190151581526020016100a0565b61006f610272565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b6104d26040516100f8906106e1565b6001600160a01b039091168152602001604051809103906000f080158015610124573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60008054610100900460ff16156101675750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561026d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101f5917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161071e565b60408051601f198184030181529082905261020f9161074f565b6000604051808303816000865af19150503d806000811461024c576040519150601f19603f3d011682016040523d82523d6000602084013e610251565b606091505b5091505080806020019051810190610269919061076b565b9150505b919050565b604080516104d260208201526000910160408051808303601f190181528282526318caf8e360e31b83526104d260048401526024830191909152600e60448301526d6578616d706c654164647265737360901b60648301529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561030557600080fd5b505af1158015610319573d6000803e3d6000fd5b5050604051638d1cc92560e01b815260206004820152601360248201527226bcaa37b5b2b71739b7b61d26bcaa37b5b2b760691b604482015260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150638d1cc925906064016000604051808303816000875af1158015610395573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103bd91908101906107aa565b826040516020016103cf929190610857565b604051602081830303815290604052905060008151602083016000f0600854604080516001600160a01b03909216803b83810160209081019093528084529394506104489391600091908401903c826001600160a01b0316803b806020016040519081016040528181526000908060200190933c61044d565b505050565b6104578282610548565b610544577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104c69060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516104fd91906108b2565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188160405161053491906108e6565b60405180910390a16105446105d5565b5050565b8051825160019190036105cb5760005b83518110156105c5578281815181106105735761057361091a565b602001015160f81c60f81b6001600160f81b03191684828151811061059a5761059a61091a565b01602001516001600160f81b031916146105b357600091505b806105bd81610930565b915050610558565b506105cf565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106d05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261066f929160200161071e565b60408051601f19818403018152908290526106899161074f565b6000604051808303816000865af19150503d80600081146106c6576040519150601f19603f3d011682016040523d82523d6000602084013e6106cb565b606091505b505050505b6000805461ff001916610100179055565b61027a8061095883390190565b60005b838110156107095781810151838201526020016106f1565b83811115610718576000848401525b50505050565b6001600160e01b03198316815281516000906107418160048501602087016106ee565b919091016004019392505050565b600082516107618184602087016106ee565b9190910192915050565b60006020828403121561077d57600080fd5b8151801515811461078d57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156107bc57600080fd5b815167ffffffffffffffff808211156107d457600080fd5b818401915084601f8301126107e857600080fd5b8151818111156107fa576107fa610794565b604051601f8201601f19908116603f0116810190838211818310171561082257610822610794565b8160405282815287602084870101111561083b57600080fd5b61084c8360208301602088016106ee565b979650505050505050565b600083516108698184602088016106ee565b83519083019061087d8183602088016106ee565b01949350505050565b6000815180845261089e8160208601602086016106ee565b601f01601f19169290920160200192915050565b60408152600a6040820152690808080808081319599d60b21b606082015260806020820152600061078d6080830184610886565b60408152600a6040820152690808080808149a59da1d60b21b606082015260806020820152600061078d6080830184610886565b634e487b7160e01b600052603260045260246000fd5b60006001820161095057634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a26469706673582212201104cdc703811e8263fc4217d8ad93a3cdf2dade59c36a9cafde1951bacb224264736f6c634300080d0033" ) )
      
    
    syntax Field ::= GetCodeTestField
    
    syntax GetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestField ::= "_failed" [symbol(), klabel(field_GetCodeTest__failed)]
    
    syntax GetCodeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestField ::= "stdstore" [symbol(), klabel(field_GetCodeTest_stdstore)]
    
    syntax GetCodeTestField ::= "myToken" [symbol(), klabel(field_GetCodeTest_myToken)]
    
    rule  ( #loc ( S2KGetCodeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KGetCodeTest . myToken ) => 8 )
      
    
    syntax Bytes ::= S2KGetCodeTestContract "." S2KGetCodeTestMethod [function(), symbol(), klabel(method_GetCodeTest)]
    
    syntax S2KGetCodeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KISZUndTEST_)]
    
    syntax S2KGetCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_GetCodeTest_S2Kfailed_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KsetUp_)]
    
    syntax S2KGetCodeTestMethod ::= "S2KtestGetCode" "(" ")" [symbol(), klabel(method_GetCodeTest_S2KtestGetCode_)]
    
    syntax S2KGetCodeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_GetCodeTest_S2Kvm_)]
    
    rule  ( S2KGetCodeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2KtestGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testGetCode()" ) => 3906163359 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module InitCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KInitCodeTestContract
    
    syntax S2KInitCodeTestContract ::= "S2KInitCodeTest" [symbol(), klabel(contract_InitCodeTest)]
    
      
    
    rule  ( #initBytecode ( S2KInitCodeTest ) => #parseByteStack ( "0x6080604052600080546201000162ff00ff199091161790556004600855600260095560c8600a556105b0806100356000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b403d7e61161005b578063b403d7e6146100ce578063ba414fa6146100d6578063f8ccbf47146100ee578063fa7626d41461010157600080fd5b80630a9254e4146100825780633a7684631461008e578063964fb96d146100c6575b600080fd5b61008c6001600a55565b005b6100a9737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008c61010e565b61008c610137565b6100de61015e565b60405190151581526020016100bd565b6000546100de9062010000900460ff1681565b6000546100de9060ff1681565b610135600a5460095460085461012491906104c0565b61012e91906104c0565b6007610289565b565b610135600a5460095460085461014d91906104c0565b61015791906104c0565b6008610289565b60008054610100900460ff161561017e5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102845760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161020c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610521565b60408051601f198184030181529082905261022691610545565b6000604051808303816000865af19150503d8060008114610263576040519150601f19603f3d011682016040523d82523d6000602084013e610268565b606091505b50915050808060200190518101906102809190610558565b9150505b919050565b8082146103b0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102fa9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103b06103b4565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104af5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261044e9291602001610521565b60408051601f198184030181529082905261046891610545565b6000604051808303816000865af19150503d80600081146104a5576040519150601f19603f3d011682016040523d82523d6000602084013e6104aa565b606091505b505050505b6000805461ff001916610100179055565b600082198211156104e157634e487b7160e01b600052601160045260246000fd5b500190565b6000815160005b8181101561050757602081850181015186830152016104ed565b81811115610516576000828601525b509290920192915050565b6001600160e01b031983168152600061053d60048301846104e6565b949350505050565b600061055182846104e6565b9392505050565b60006020828403121561056a57600080fd5b8151801515811461055157600080fdfea2646970667358221220cda8d4d9cc0b30efa4cd923c26e57b6ec096e286dd25d37eb60a0043afe1dad364736f6c634300080d0033" ) )
      
    
    syntax Field ::= InitCodeTestField
    
    syntax InitCodeTestField ::= "IS_TEST" [symbol(), klabel(field_InitCodeTest_IS_TEST)]
    
    syntax InitCodeTestField ::= "_failed" [symbol(), klabel(field_InitCodeTest__failed)]
    
    syntax InitCodeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_InitCodeTest_IS_SCRIPT)]
    
    syntax InitCodeTestField ::= "stdstore" [symbol(), klabel(field_InitCodeTest_stdstore)]
    
    syntax InitCodeTestField ::= "a" [symbol(), klabel(field_InitCodeTest_a)]
    
    syntax InitCodeTestField ::= "b" [symbol(), klabel(field_InitCodeTest_b)]
    
    syntax InitCodeTestField ::= "c" [symbol(), klabel(field_InitCodeTest_c)]
    
    rule  ( #loc ( S2KInitCodeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KInitCodeTest . a ) => 8 )
      
    
    rule  ( #loc ( S2KInitCodeTest . b ) => 9 )
      
    
    rule  ( #loc ( S2KInitCodeTest . c ) => 10 )
      
    
    syntax Bytes ::= S2KInitCodeTestContract "." S2KInitCodeTestMethod [function(), symbol(), klabel(method_InitCodeTest)]
    
    syntax S2KInitCodeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KISZUndTEST_)]
    
    syntax S2KInitCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_InitCodeTest_S2Kfailed_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KsetUp_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtestFailZUndinit" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtestFailZUndinit_)]
    
    syntax S2KInitCodeTestMethod ::= "S2KtestZUndinit" "(" ")" [symbol(), klabel(method_InitCodeTest_S2KtestZUndinit_)]
    
    syntax S2KInitCodeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_InitCodeTest_S2Kvm_)]
    
    rule  ( S2KInitCodeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtestFailZUndinit ( ) => #abiCallData ( "testFail_init" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2KtestZUndinit ( ) => #abiCallData ( "test_init" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_init()" ) => 3020150758 )
      
    
    rule  ( selector ( "test_init()" ) => 2521807213 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module InitCodeBranchTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KInitCodeBranchTestContract
    
    syntax S2KInitCodeBranchTestContract ::= "S2KInitCodeBranchTest" [symbol(), klabel(contract_InitCodeBranchTest)]
    
      
    
    rule  ( #initBytecode ( S2KInitCodeBranchTest ) => #parseByteStack ( "0x608060408190526000805462ff00ff1916620100011790556316f02cd760e11b905230608452737109709ecfa91a80626ff3989d68f67f5b1dd12d632de059ae60a4600060405180830381600087803b15801561005b57600080fd5b505af115801561006f573d6000803e3d6000fd5b50505050600a6008541161008757600160095561008d565b60026009555b6105438061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631197d48c146100675780633a76846314610071578063ba414fa6146100a9578063d6a2ec76146100c1578063f8ccbf47146100e8578063fa7626d4146100fb575b600080fd5b61006f610108565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b1610117565b60405190151581526020016100a0565b61008c7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b6101156009546001610242565b565b60008054610100900460ff16156101375750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561023d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101c5917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016104b4565b60408051601f19818403018152908290526101df916104d8565b6000604051808303816000865af19150503d806000811461021c576040519150601f19603f3d011682016040523d82523d6000602084013e610221565b606091505b509150508080602001905181019061023991906104eb565b9150505b919050565b808214610369577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102b39060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161036961036d565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104685760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261040792916020016104b4565b60408051601f1981840301815290829052610421916104d8565b6000604051808303816000865af19150503d806000811461045e576040519150601f19603f3d011682016040523d82523d6000602084013e610463565b606091505b505050505b6000805461ff001916610100179055565b6000815160005b8181101561049a5760208185018101518683015201610480565b818111156104a9576000828601525b509290920192915050565b6001600160e01b03198316815260006104d06004830184610479565b949350505050565b60006104e48284610479565b9392505050565b6000602082840312156104fd57600080fd5b815180151581146104e457600080fdfea2646970667358221220fddbffbe36ef8eb42235df4e709f959709f711b8b3e9a897f55701c2a2dffafa64736f6c634300080d0033" ) )
      
    
    syntax Field ::= InitCodeBranchTestField
    
    syntax InitCodeBranchTestField ::= "IS_TEST" [symbol(), klabel(field_InitCodeBranchTest_IS_TEST)]
    
    syntax InitCodeBranchTestField ::= "_failed" [symbol(), klabel(field_InitCodeBranchTest__failed)]
    
    syntax InitCodeBranchTestField ::= "IS_SCRIPT" [symbol(), klabel(field_InitCodeBranchTest_IS_SCRIPT)]
    
    syntax InitCodeBranchTestField ::= "stdstore" [symbol(), klabel(field_InitCodeBranchTest_stdstore)]
    
    syntax InitCodeBranchTestField ::= "a" [symbol(), klabel(field_InitCodeBranchTest_a)]
    
    syntax InitCodeBranchTestField ::= "b" [symbol(), klabel(field_InitCodeBranchTest_b)]
    
    rule  ( #loc ( S2KInitCodeBranchTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . a ) => 8 )
      
    
    rule  ( #loc ( S2KInitCodeBranchTest . b ) => 9 )
      
    
    syntax Bytes ::= S2KInitCodeBranchTestContract "." S2KInitCodeBranchTestMethod [function(), symbol(), klabel(method_InitCodeBranchTest)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KISZUndSCRIPT_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KISZUndTEST_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2Kfailed_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2Kkevm_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2KtestZUndbranch" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2KtestZUndbranch_)]
    
    syntax S2KInitCodeBranchTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_InitCodeBranchTest_S2Kvm_)]
    
    rule  ( S2KInitCodeBranchTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2KtestZUndbranch ( ) => #abiCallData ( "test_branch" , .TypedArgs ) )
      
    
    rule  ( S2KInitCodeBranchTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "test_branch()" ) => 295163020 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module KEVMCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsContract
    
    syntax S2KKEVMCheatsContract ::= "S2KKEVMCheats" [symbol(), klabel(contract_KEVMCheats)]
    
      
    
    rule  ( #initBytecode ( S2KKEVMCheats ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KKEVMCheatsContract "." S2KKEVMCheatsMethod [function(), symbol(), klabel(method_KEVMCheats)]
    
    syntax S2KKEVMCheatsMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_KEVMCheats_S2Kkevm_)]
    
    rule  ( S2KKEVMCheats . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      

endmodule

module KEVMCheatsBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsBaseContract
    
    syntax S2KKEVMCheatsBaseContract ::= "S2KKEVMCheatsBase" [symbol(), klabel(contract_KEVMCheatsBase)]
    
      
    
    rule  ( #initBytecode ( S2KKEVMCheatsBase ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KKEVMCheatsBaseContract "." S2KKEVMCheatsBaseMethod [function(), symbol(), klabel(method_KEVMCheatsBase)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KallowCallsToAddress" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KallowCallsToAddress_address)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KallowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KallowChangesToStorage_address_uint256)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectCreate_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectCreate2_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectDelegateCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectNoCall" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectNoCall_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectRegularCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectRegularCall_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KexpectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KexpectStaticCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KinfiniteGas" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KinfiniteGas_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "S2KsymbolicStorage" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_S2KsymbolicStorage_address)]
    
    rule  ( S2KKEVMCheatsBase . S2KallowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KKEVMCheatsBase . S2KallowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . S2KexpectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . S2KinfiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . S2KsymbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )
      
    
    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )
      
    
    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )
      
    
    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )
      
    
    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )
      
    
    rule  ( selector ( "expectNoCall()" ) => 3861374088 )
      
    
    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )
      
    
    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )
      
    
    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )
      
    
    rule  ( selector ( "infiniteGas()" ) => 3986649939 )
      
    
    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )
      

endmodule

module LabelTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLabelTestContract
    
    syntax S2KLabelTestContract ::= "S2KLabelTest" [symbol(), klabel(contract_LabelTest)]
    
      
    
    rule  ( #initBytecode ( S2KLabelTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b5061037b806100316000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632fa150bd1461005c5780633a76846314610066578063ba414fa61461009e578063f8ccbf47146100b6578063fa7626d4146100c9575b600080fd5b6100646100d6565b005b610081737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a6610170565b6040519015158152602001610095565b6000546100a69062010000900460ff1681565b6000546100a69060ff1681565b604080516318caf8e360e31b8152600060048201526024810191909152600c60448201526b5a65726f204164647265737360a01b6064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561014857600080fd5b505af115801561015c573d6000803e3d6000fd5b50505050600161016e5761016e61029b565b565b60008054610100900460ff16156101905750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102965760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161021e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016102ec565b60408051601f198184030181529082905261023891610310565b6000604051808303816000865af19150503d8060008114610275576040519150601f19603f3d011682016040523d82523d6000602084013e61027a565b606091505b50915050808060200190518101906102929190610323565b9150505b919050565b634e487b7160e01b600052600160045260246000fd5b6000815160005b818110156102d257602081850181015186830152016102b8565b818111156102e1576000828601525b509290920192915050565b6001600160e01b031983168152600061030860048301846102b1565b949350505050565b600061031c82846102b1565b9392505050565b60006020828403121561033557600080fd5b8151801515811461031c57600080fdfea264697066735822122091aa42b8ad6133bec7a59d6b34b926aa6502b0e9461a170f692a9305bcd8d99564736f6c634300080d0033" ) )
      
    
    syntax Field ::= LabelTestField
    
    syntax LabelTestField ::= "IS_TEST" [symbol(), klabel(field_LabelTest_IS_TEST)]
    
    syntax LabelTestField ::= "_failed" [symbol(), klabel(field_LabelTest__failed)]
    
    syntax LabelTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LabelTest_IS_SCRIPT)]
    
    syntax LabelTestField ::= "stdstore" [symbol(), klabel(field_LabelTest_stdstore)]
    
    rule  ( #loc ( S2KLabelTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KLabelTestContract "." S2KLabelTestMethod [function(), symbol(), klabel(method_LabelTest)]
    
    syntax S2KLabelTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_LabelTest_S2KISZUndSCRIPT_)]
    
    syntax S2KLabelTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_LabelTest_S2KISZUndTEST_)]
    
    syntax S2KLabelTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_LabelTest_S2Kfailed_)]
    
    syntax S2KLabelTestMethod ::= "S2KtestLabel" "(" ")" [symbol(), klabel(method_LabelTest_S2KtestLabel_)]
    
    syntax S2KLabelTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_LabelTest_S2Kvm_)]
    
    rule  ( S2KLabelTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2KtestLabel ( ) => #abiCallData ( "testLabel" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testLabel()" ) => 799101117 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module LoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLoopsTestContract
    
    syntax S2KLoopsTestContract ::= "S2KLoopsTest" [symbol(), klabel(contract_LoopsTest)]
    
      
    
    rule  ( #initBytecode ( S2KLoopsTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b5061156f806100316000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80635de22f07116100ad578063a118e10211610071578063a118e10214610262578063ba414fa614610275578063d313940d1461028d578063f8ccbf47146102a0578063fa7626d4146102b357600080fd5b80635de22f07146102035780636d5d39df146102165780637e8e23d014610229578063887e4fdb1461023c5780638fe34aed1461024f57600080fd5b80633a768463116100f45780633a7684631461019a57806340ca711a146101cd5780634e94ce57146101d557806351cdc192146101e85780635a98a5c0146101fb57600080fd5b806306ac1530146101315780630d472879146101465780630de4eb1614610161578063181f88ec1461017457806330476e2714610187575b600080fd5b61014461013f366004611213565b6102c0565b005b61014e610319565b6040519081526020015b60405180910390f35b61014461016f366004611235565b61032b565b610144610182366004611235565b610389565b610144610195366004611235565b6103a6565b6101b5737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610158565b61014e61040a565b6101446101e3366004611235565b610416565b6101446101f6366004611264565b6104bc565b61014e61051c565b610144610211366004611264565b610528565b610144610224366004611213565b61057e565b61014e610237366004611235565b610589565b61014461024a366004611235565b610627565b61014461025d366004611264565b6106c1565b610144610270366004611213565b61073b565b61027d6107a5565b6040519015158152602001610158565b61014461029b366004611264565b6108d0565b60005461027d9062010000900460ff1681565b60005461027d9060ff1681565b60006102cb8361094a565b90506102e28115806102dd5750600184115b61099b565b61031460028310806102f45750838310155b806102fd575081155b806102dd575061030d8385611338565b151561099b565b505050565b60006103266103e8610589565b905090565b600061033682610a0f565b905060006103448283610a57565b90506000838211156103615761035a8483611362565b905061036e565b61036b8383611362565b90505b61038361037c606486611379565b821061099b565b50505050565b6103a36103958261094a565b61039e83610a92565b610ae3565b50565b60006103b18261094a565b905080806103bf5750600282105b156103c8575050565b60025b828110156103fb576103dd8184611338565b6000036103e957505050565b806103f38161138d565b9150506103cb565b50610406600061099b565b5050565b6000610326600a610589565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561046657600080fd5b505af115801561047a573d6000803e3d6000fd5b505050506000600282600161048f91906113a6565b61049990846113be565b6104a39190611379565b905060006104b083610c60565b90506103148282610c92565b60006104c782610db2565b9050600160005b8351811080156104db5750815b15610512578381815181106104f2576104f26113dd565b60200260200101518310159150808061050a9061138d565b9150506104ce565b506103148161099b565b60006103266064610589565b600061053382610e11565b9050600160005b8351811080156105475750815b156105125783818151811061055e5761055e6113dd565b6020026020010151831015915080806105769061138d565b91505061053a565b60006102cb83610e6f565b604051632631f2b160e11b815266b81702e05c0b6f8211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b5050505060005b82156106215761060d83826113a6565b905061061a600184611362565b92506105fd565b92915050565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b50505050600060028260016106a091906113a6565b6106aa90846113be565b6106b49190611379565b905060006104b083610ea6565b60006106cc82610ed0565b90506001805b8251811080156106df5750815b15610512578381815181106106f6576106f66113dd565b60200260200101518460018361070c9190611362565b8151811061071c5761071c6113dd565b60200260200101511115915080806107339061138d565b9150506106d2565b600061074683610efc565b90508260000361075b57610314816000610c92565b6107676102dd8261094a565b600061077c610777600186611362565b610efc565b905061038381841115806107905750828410155b806102dd575061079f8461094a565b1561099b565b60008054610100900460ff16156107c55750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108cb5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610853917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161141f565b60408051601f198184030181529082905261086d91611450565b6000604051808303816000865af19150503d80600081146108aa576040519150601f19603f3d011682016040523d82523d6000602084013e6108af565b606091505b50915050808060200190518101906108c7919061146c565b9150505b919050565b60006108db82610f36565b90506001805b8251811080156108ee5750815b1561051257838181518110610905576109056113dd565b60200260200101518460018361091b9190611362565b8151811061092b5761092b6113dd565b60200260200101511115915080806109429061138d565b9150506108e1565b6000600282101561095d57506000919050565b60025b82811015610992576109728184611338565b156109805750600092915050565b8061098a8161138d565b915050610960565b50600192915050565b806103a3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109ff9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16103a3610f58565b600081600003610a2157506000919050565b815b809150600281610a338584611064565b610a3d91906113a6565b610a479190611379565b9050818103610a23575b50919050565b6000670de0b6b3a7640000610a6d600282611379565b610a7784866113be565b610a8191906113a6565b610a8b9190611379565b9392505050565b60006002821015610aa557506000919050565b60025b610ab3600284611379565b811161099257610ac38184611338565b15610ad15750600092915050565b80610adb8161138d565b915050610aa8565b80151582151514610406577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b589060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381610ba9576040518060400160405280600581526020016466616c736560d81b815250610bc7565b604051806040016040528060048152602001637472756560e01b8152505b604051610bd491906114ba565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382610c25576040518060400160405280600581526020016466616c736560d81b815250610c43565b604051806040016040528060048152602001637472756560e01b8152505b604051610c5091906114ee565b60405180910390a1610406610f58565b600080805b83811015610c8b57610c7781836113a6565b915080610c838161138d565b915050610c65565b5092915050565b808214610406577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610d039060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a91810191909152690808080808149a59da1d60b21b6060820152602081018290527fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a890608001610c50565b60008060015b8351811015610c8b5781848281518110610dd457610dd46113dd565b60200260200101511115610dff57838181518110610df457610df46113dd565b602002602001015191505b80610e098161138d565b915050610db8565b600080805b8351811015610c8b5781848281518110610e3257610e326113dd565b60200260200101511115610e5d57838181518110610e5257610e526113dd565b602002602001015191505b80610e678161138d565b915050610e16565b600060025b8281101561099257610e868184611338565b15610e945750600092915050565b80610e9e8161138d565b915050610e74565b600080805b838111610c8b57610ebc81836113a6565b915080610ec88161138d565b915050610eab565b60606001825111610edf575090565b610ef882600060018551610ef39190611362565b611084565b5090565b6000805b82811015610a515781610f128161138d565b925050610f1e8261094a565b15610f315780610f2d8161138d565b9150505b610f00565b60606001825111610f45575090565b610ef8826001808551610ef39190611362565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110535760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610ff2929160200161141f565b60408051601f198184030181529082905261100c91611450565b6000604051808303816000865af19150503d8060008114611049576040519150601f19603f3d011682016040523d82523d6000602084013e61104e565b606091505b505050505b6000805461ff001916610100179055565b600081611072600282611379565b610a77670de0b6b3a7640000866113be565b80821061109057505050565b818160008560026110a18585611362565b6110ab9190611379565b6110b590876113a6565b815181106110c5576110c56113dd565b602002602001015190505b8183116111e5575b808684815181106110eb576110eb6113dd565b6020026020010151101561110b57826111038161138d565b9350506110d8565b85828151811061111d5761111d6113dd565b6020026020010151811080156111335750600082115b1561114a578161114281611522565b92505061110b565b8183116111e057858281518110611163576111636113dd565b602002602001015186848151811061117d5761117d6113dd565b6020026020010151878581518110611197576111976113dd565b602002602001018885815181106111b0576111b06113dd565b602090810291909101019190915252826111c98161138d565b93505081156111e057816111dc81611522565b9250505b6110d0565b818510156111f8576111f8868684611084565b8383101561120b5761120b868486611084565b505050505050565b6000806040838503121561122657600080fd5b50508035926020909101359150565b60006020828403121561124757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561127757600080fd5b823567ffffffffffffffff8082111561128f57600080fd5b818501915085601f8301126112a357600080fd5b8135818111156112b5576112b561124e565b8060051b604051601f19603f830116810181811085821117156112da576112da61124e565b6040529182528482019250838101850191888311156112f857600080fd5b938501935b82851015611316578435845293850193928501926112fd565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261134757611347611322565b500690565b634e487b7160e01b600052601160045260246000fd5b6000828210156113745761137461134c565b500390565b60008261138857611388611322565b500490565b60006001820161139f5761139f61134c565b5060010190565b600082198211156113b9576113b961134c565b500190565b60008160001904831182151516156113d8576113d861134c565b500290565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561140e5781810151838201526020016113f6565b838111156103835750506000910152565b6001600160e01b03198316815281516000906114428160048501602087016113f3565b919091016004019392505050565b600082516114628184602087016113f3565b9190910192915050565b60006020828403121561147e57600080fd5b81518015158114610a8b57600080fd5b600081518084526114a68160208601602086016113f3565b601f01601f19169290920160200192915050565b60408152600a6040820152690808115e1c1958dd195960b21b6060820152608060208201526000610a8b608083018461148e565b60408152600a604082015269080808081058dd1d585b60b21b6060820152608060208201526000610a8b608083018461148e565b6000816115315761153161134c565b50600019019056fea2646970667358221220685f6e8b5c19dd469d5430d6a218b2e32f6677eb2d28814743b9fe1f55fde47564736f6c634300080d0033" ) )
      
    
    syntax Field ::= LoopsTestField
    
    syntax LoopsTestField ::= "IS_TEST" [symbol(), klabel(field_LoopsTest_IS_TEST)]
    
    syntax LoopsTestField ::= "_failed" [symbol(), klabel(field_LoopsTest__failed)]
    
    syntax LoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestField ::= "stdstore" [symbol(), klabel(field_LoopsTest_stdstore)]
    
    rule  ( #loc ( S2KLoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KLoopsTestContract "." S2KLoopsTestMethod [function(), symbol(), klabel(method_LoopsTest)]
    
    syntax S2KLoopsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_LoopsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_LoopsTest_S2KISZUndTEST_)]
    
    syntax S2KLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_LoopsTest_S2Kfailed_)]
    
    syntax S2KLoopsTestMethod ::= "S2KsumZUndN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KsumZUndN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsNotPrime" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsNotPrime_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrimeBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrimeBroken_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestIsPrimeOpt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestIsPrimeOpt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestMax" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestMax_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestMaxBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestMaxBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestNthPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestNthPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSort" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestSort_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSortBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_S2KtestSortBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSqrt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSqrt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSumToN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSumToN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestSumToNBroken" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_S2KtestSumToNBroken_uint256)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd10" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd10_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd100" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd100_)]
    
    syntax S2KLoopsTestMethod ::= "S2KtestZUndsumZUnd1000" "(" ")" [symbol(), klabel(method_LoopsTest_S2KtestZUndsumZUnd1000_)]
    
    syntax S2KLoopsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_LoopsTest_S2Kvm_)]
    
    rule  ( S2KLoopsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KsumZUndN ( V0_n : uint256 ) => #abiCallData ( "sum_N" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestIsNotPrime ( V0_n : uint256 ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrimeBroken ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestIsPrimeOpt ( V0_n : uint256 ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestNthPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . S2KtestSqrt ( V0_x : uint256 ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KLoopsTest . S2KtestSumToN ( V0_n : uint256 ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestSumToNBroken ( V0_n : uint256 ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd10 ( ) => #abiCallData ( "test_sum_10" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd100 ( ) => #abiCallData ( "test_sum_100" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2KtestZUndsumZUnd1000 ( ) => #abiCallData ( "test_sum_1000" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "sum_N(uint256)" ) => 2123244496 )
      
    
    rule  ( selector ( "testIsNotPrime(uint256)" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime(uint256,uint256)" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken(uint256,uint256)" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt(uint256)" ) => 404719852 )
      
    
    rule  ( selector ( "testMax(uint256[])" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken(uint256[])" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime(uint256,uint256)" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort(uint256[])" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken(uint256[])" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt(uint256)" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN(uint256)" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken(uint256)" ) => 1318374999 )
      
    
    rule  ( selector ( "test_sum_10()" ) => 1087009050 )
      
    
    rule  ( selector ( "test_sum_100()" ) => 1519953344 )
      
    
    rule  ( selector ( "test_sum_1000()" ) => 222767225 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MethodDisambiguateTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMethodDisambiguateTestContract
    
    syntax S2KMethodDisambiguateTestContract ::= "S2KMethodDisambiguateTest" [symbol(), klabel(contract_MethodDisambiguateTest)]
    
      
    
    rule  ( #initBytecode ( S2KMethodDisambiguateTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506105e1806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100e5578063f8ccbf47146100fd578063fa7626d414610110578063fc5636581461011d57600080fd5b8063089791d6146100825780633a768463146100a85780636b8153b0146100db575b600080fd5b6100956100903660046104d8565b610130565b6040519081526020015b60405180910390f35b6100c3737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161009f565b6100e361014a565b005b6100ed610162565b604051901515815260200161009f565b6000546100ed9062010000900460ff1681565b6000546100ed9060ff1681565b61009561012b366004610505565b61028d565b600061014263ffffffff8316806102a1565b506002919050565b600061015f600161015a8361028d565b6102a1565b50565b60008054610100900460ff16156101825750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102885760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610210917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610559565b60408051601f198184030181529082905261022a9161057d565b6000604051808303816000865af19150503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b50915050808060200190518101906102849190610589565b9150505b919050565b600061029982836102a1565b506001919050565b8082146103c8577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103129060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103c86103cc565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104c75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104669291602001610559565b60408051601f19818403018152908290526104809161057d565b6000604051808303816000865af19150503d80600081146104bd576040519150601f19603f3d011682016040523d82523d6000602084013e6104c2565b606091505b505050505b6000805461ff001916610100179055565b6000602082840312156104ea57600080fd5b813563ffffffff811681146104fe57600080fd5b9392505050565b60006020828403121561051757600080fd5b5035919050565b6000815160005b8181101561053f5760208185018101518683015201610525565b8181111561054e576000828601525b509290920192915050565b6001600160e01b0319831681526000610575600483018461051e565b949350505050565b60006104fe828461051e565b60006020828403121561059b57600080fd5b815180151581146104fe57600080fdfea2646970667358221220237e84fe001f8abd310063486644f6cb04a235b4f4f15ba49ca47eeccd5ad64164736f6c634300080d0033" ) )
      
    
    syntax Field ::= MethodDisambiguateTestField
    
    syntax MethodDisambiguateTestField ::= "IS_TEST" [symbol(), klabel(field_MethodDisambiguateTest_IS_TEST)]
    
    syntax MethodDisambiguateTestField ::= "_failed" [symbol(), klabel(field_MethodDisambiguateTest__failed)]
    
    syntax MethodDisambiguateTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MethodDisambiguateTest_IS_SCRIPT)]
    
    syntax MethodDisambiguateTestField ::= "stdstore" [symbol(), klabel(field_MethodDisambiguateTest_stdstore)]
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KMethodDisambiguateTestContract "." S2KMethodDisambiguateTestMethod [function(), symbol(), klabel(method_MethodDisambiguateTest)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KISZUndSCRIPT_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KISZUndTEST_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2Kfailed_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KgetNumber_uint256)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint32" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KgetNumber_uint32)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2KtestZUndmethodZUndcall" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2KtestZUndmethodZUndcall_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_S2Kvm_)]
    
    rule  ( S2KMethodDisambiguateTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KgetNumber ( V0_x : uint256 ) => #abiCallData ( "getNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KgetNumber ( V0_x : uint32 ) => #abiCallData ( "getNumber" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . S2KtestZUndmethodZUndcall ( ) => #abiCallData ( "test_method_call" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "getNumber(uint256)" ) => 4233508440 )
      
    
    rule  ( selector ( "getNumber(uint32)" ) => 144150998 )
      
    
    rule  ( selector ( "test_method_call()" ) => 1803637680 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MockCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMockCallTestContract
    
    syntax S2KMockCallTestContract ::= "S2KMockCallTest" [symbol(), klabel(contract_MockCallTest)]
    
      
    
    rule  ( #initBytecode ( S2KMockCallTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610df2806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100cc578063bb630a5c146100e4578063f8ccbf47146100ec578063fa7626d4146100ff57600080fd5b806339188d4e146100825780633a7684631461008c578063480a6996146100c4575b600080fd5b61008a61010c565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a6102b2565b6100d461057f565b60405190151581526020016100bb565b61008a6106aa565b6000546100d49062010000900460ff1681565b6000546100d49060ff1681565b6040805160048152602481018252602080820180516001600160e01b03166370a0823160e01b1790528251600a818301528351808203909201825280840193849052632e5884f960e21b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d9263b96213e49261018492600092604401610a2f565b600060405180830381600087803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b50506040516370a0823160e01b8152600160048201526102239250600091506370a08231906024015b602060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c9190610a6f565b600a610793565b6040516370a0823160e01b81526002600482015261024c906000906370a08231906024016101db565b60408051633fdf4e1560e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d91633fdf4e1591600480830192600092919082900301818387803b15801561029857600080fd5b505af11580156102ac573d6000803e3d6000fd5b50505050565b60006105396040516102c3906109ca565b6001600160a01b039091168152602001604051809103906000f0801580156102ef573d6000803e3d6000fd5b50604051630c11dedd60e01b815260016004820152909150610365906001600160a01b03831690630c11dedd90600a9060240160206040518083038185885af1158015610340573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061021c9190610a6f565b604051630c11dedd60e01b81526002600482018190526103dd916001600160a01b03841691630c11dedd9160240160206040518083038185885af11580156103b1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103d69190610a6f565b6002610793565b6040805160048152602481018252602080820180516001600160e01b0316630c11dedd60e01b179052825160638183015283518082039092018252808401938490526381409b9160e01b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d926381409b9192610459928692600a929190604401610a88565b600060405180830381600087803b15801561047357600080fd5b505af1158015610487573d6000803e3d6000fd5b5050604051630c11dedd60e01b81526001600482015261050492506001600160a01b0384169150630c11dedd90600a9060240160206040518083038185885af11580156104d8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104fd9190610a6f565b6063610793565b604051630c11dedd60e01b815260026004820181905261057c916001600160a01b03841691630c11dedd9160240160206040518083038185885af1158015610550573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105759190610a6f565b6004610793565b50565b60008054610100900460ff161561059f5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106a55760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161062d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610acc565b60408051601f198184030181529082905261064791610afd565b6000604051808303816000865af19150503d8060008114610684576040519150601f19603f3d011682016040523d82523d6000602084013e610689565b606091505b50915050808060200190518101906106a19190610b19565b9150505b919050565b6040805160016024808301919091528251808303909101815260449182018352602080820180516001600160e01b03166370a0823160e01b1790528351600a818301528451808203909201825280850194859052632e5884f960e21b909452737109709ecfa91a80626ff3989d68f67f5b1dd12d9363b96213e493610736936000939092909101610a2f565b600060405180830381600087803b15801561075057600080fd5b505af1158015610764573d6000803e3d6000fd5b50506040516370a0823160e01b8152600160048201526107919250600091506370a08231906024016101db565b565b8082146108ba577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108049060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16108ba6108be565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109b95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109589291602001610acc565b60408051601f198184030181529082905261097291610afd565b6000604051808303816000865af19150503d80600081146109af576040519150601f19603f3d011682016040523d82523d6000602084013e6109b4565b606091505b505050505b6000805461ff001916610100179055565b61027a80610b4383390190565b60005b838110156109f25781810151838201526020016109da565b838111156102ac5750506000910152565b60008151808452610a1b8160208601602086016109d7565b601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090610a5390830185610a03565b8281036040840152610a658185610a03565b9695505050505050565b600060208284031215610a8157600080fd5b5051919050565b60018060a01b0385168152836020820152608060408201526000610aaf6080830185610a03565b8281036060840152610ac18185610a03565b979650505050505050565b6001600160e01b0319831681528151600090610aef8160048501602087016109d7565b919091016004019392505050565b60008251610b0f8184602087016109d7565b9190910192915050565b600060208284031215610b2b57600080fd5b81518015158114610b3b57600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a26469706673582212200b44f355f0ea073304f0fe5d15066f00f9f43434a86484455f58e1d484b0a6d164736f6c634300080d0033" ) )
      
    
    syntax Field ::= MockCallTestField
    
    syntax MockCallTestField ::= "IS_TEST" [symbol(), klabel(field_MockCallTest_IS_TEST)]
    
    syntax MockCallTestField ::= "_failed" [symbol(), klabel(field_MockCallTest__failed)]
    
    syntax MockCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestField ::= "stdstore" [symbol(), klabel(field_MockCallTest_stdstore)]
    
    rule  ( #loc ( S2KMockCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KMockCallTestContract "." S2KMockCallTestMethod [function(), symbol(), klabel(method_MockCallTest)]
    
    syntax S2KMockCallTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_MockCallTest_S2KISZUndSCRIPT_)]
    
    syntax S2KMockCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_MockCallTest_S2KISZUndTEST_)]
    
    syntax S2KMockCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_MockCallTest_S2Kfailed_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCall" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCall_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCallValue" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCallValue_)]
    
    syntax S2KMockCallTestMethod ::= "S2KtestMockCalls" "(" ")" [symbol(), klabel(method_MockCallTest_S2KtestMockCalls_)]
    
    syntax S2KMockCallTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_MockCallTest_S2Kvm_)]
    
    rule  ( S2KMockCallTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCall ( ) => #abiCallData ( "testMockCall" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2KtestMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testMockCall()" ) => 3143830108 )
      
    
    rule  ( selector ( "testMockCallValue()" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls()" ) => 957910350 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MyIERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyIERC20Contract
    
    syntax S2KMyIERC20Contract ::= "S2KMyIERC20" [symbol(), klabel(contract_MyIERC20)]
    
      
    
    rule  ( #initBytecode ( S2KMyIERC20 ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KMyIERC20Contract "." S2KMyIERC20Method [function(), symbol(), klabel(method_MyIERC20)]
    
    syntax S2KMyIERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2Kapprove_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyIERC20_S2KbalanceOf_address)]
    
    syntax S2KMyIERC20Method ::= "S2Kdecimals" "(" ")" [symbol(), klabel(method_MyIERC20_S2Kdecimals_)]
    
    syntax S2KMyIERC20Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_MyIERC20_S2Ksymbol_)]
    
    syntax S2KMyIERC20Method ::= "S2KtotalSupply" "(" ")" [symbol(), klabel(method_MyIERC20_S2KtotalSupply_)]
    
    syntax S2KMyIERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2Ktransfer_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_S2KtransferFrom_address_address_uint256)]
    
    rule  ( S2KMyIERC20 . S2Kapprove ( V0_spender : address , V1_value : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))
      
    
    rule  ( S2KMyIERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyIERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . S2Ktransfer ( V0_recipient : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_recipient ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_recipient )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KMyIERC20 . S2KtransferFrom ( V0_sender : address , V1_recipient : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_sender ) , #address ( V1_recipient ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_sender )
       andBool ( #rangeAddress ( V1_recipient )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module MyToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyTokenContract
    
    syntax S2KMyTokenContract ::= "S2KMyToken" [symbol(), klabel(contract_MyToken)]
    
      
    
    rule  ( #initBytecode ( S2KMyToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033" ) )
      
    
    syntax Field ::= MyTokenField
    
    syntax MyTokenField ::= "token" [symbol(), klabel(field_MyToken_token)]
    
    syntax MyTokenField ::= "balances" [symbol(), klabel(field_MyToken_balances)]
    
    rule  ( #loc ( S2KMyToken . token ) => 0 )
      
    
    rule  ( #loc ( S2KMyToken . balances ) => 1 )
      
    
    syntax Bytes ::= S2KMyTokenContract "." S2KMyTokenMethod [function(), symbol(), klabel(method_MyToken)]
    
    syntax S2KMyTokenMethod ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2KbalanceOf_address)]
    
    syntax S2KMyTokenMethod ::= "S2Kbalances" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2Kbalances_address)]
    
    syntax S2KMyTokenMethod ::= "S2Kpay" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_S2Kpay_address)]
    
    syntax S2KMyTokenMethod ::= "S2Ktoken" "(" ")" [symbol(), klabel(method_MyToken_S2Ktoken_)]
    
    rule  ( S2KMyToken . S2KbalanceOf ( V0_user : address ) => #abiCallData ( "balanceOf" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . S2Kbalances ( V0_ : address ) => #abiCallData ( "balances" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyToken . S2Kpay ( V0_user : address ) => #abiCallData ( "pay" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . S2Ktoken ( ) => #abiCallData ( "token" , .TypedArgs ) )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "balances(address)" ) => 669136355 )
      
    
    rule  ( selector ( "pay(address)" ) => 202497757 )
      
    
    rule  ( selector ( "token()" ) => 4228666474 )
      

endmodule

module NoImport-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KNoImportContract
    
    syntax S2KNoImportContract ::= "S2KNoImport" [symbol(), klabel(contract_NoImport)]
    
      
    
    rule  ( #initBytecode ( S2KNoImport ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061011c806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d466a81314602d575b600080fd5b60336045565b60405190815260200160405180910390f35b60008060016002826055838260a1565b905060006061848460b6565b90506000606d828460ca565b9050806078838560a1565b6080919060a1565b965050505050505090565b634e487b7160e01b600052601160045260246000fd5b6000821982111560b15760b1608b565b500190565b60008282101560c55760c5608b565b500390565b600081600019048311821515161560e15760e1608b565b50029056fea2646970667358221220396cae21e2199c8413fc2c4c525eadb7fe48408a10d853a1a13a708b199d51bd64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KNoImportContract "." S2KNoImportMethod [function(), symbol(), klabel(method_NoImport)]
    
    syntax S2KNoImportMethod ::= "S2KtestZUndsourceZUndmap" "(" ")" [symbol(), klabel(method_NoImport_S2KtestZUndsourceZUndmap_)]
    
    rule  ( S2KNoImport . S2KtestZUndsourceZUndmap ( ) => #abiCallData ( "test_source_map" , .TypedArgs ) )
      
    
    rule  ( selector ( "test_source_map()" ) => 3563497491 )
      

endmodule

module OwnerUpOnly-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyContract
    
    syntax S2KOwnerUpOnlyContract ::= "S2KOwnerUpOnly" [symbol(), klabel(contract_OwnerUpOnly)]
    
      
    
    rule  ( #initBytecode ( S2KOwnerUpOnly ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033" ) )
      
    
    syntax Field ::= OwnerUpOnlyField
    
    syntax OwnerUpOnlyField ::= "count" [symbol(), klabel(field_OwnerUpOnly_count)]
    
    rule  ( #loc ( S2KOwnerUpOnly . count ) => 0 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyContract "." S2KOwnerUpOnlyMethod [function(), symbol(), klabel(method_OwnerUpOnly)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kcount_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kincrement_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_OwnerUpOnly_S2Kowner_)]
    
    rule  ( S2KOwnerUpOnly . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module OwnerUpOnlyTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyTestContract
    
    syntax S2KOwnerUpOnlyTestContract ::= "S2KOwnerUpOnlyTest" [symbol(), klabel(contract_OwnerUpOnlyTest)]
    
      
    
    rule  ( #initBytecode ( S2KOwnerUpOnlyTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610a2a806100316000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100df578063f8ccbf47146100f7578063fa7626d41461010a578063fd50a0811461011757600080fd5b80630a9254e41461008d5780633a768463146100975780634d9feb35146100cf578063760c01a7146100d7575b600080fd5b61009561011f565b005b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009561016a565b6100956102a4565b6100e7610405565b60405190151581526020016100c6565b6000546100e79062010000900460ff1681565b6000546100e79060ff1681565b610095610530565b60405161012b9061079f565b604051809103906000f080158015610147573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505060405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015b600060405180830381600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561028a57600080fd5b505af115801561029e573d6000803e3d6000fd5b50505050565b600854604080516306661abd60e01b8152905161031a926001600160a01b0316916306661abd9160048083019260209291908290030181865afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906107ac565b6000610568565b600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b50505050610403600860009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc91906107ac565b6001610568565b565b60008054610100900460ff16156104255750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561052b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104b3917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610800565b60408051601f19818403018152908290526104cd91610824565b6000604051808303816000865af19150503d806000811461050a576040519150601f19603f3d011682016040523d82523d6000602084013e61050f565b606091505b50915050808060200190518101906105279190610837565b9150505b919050565b60405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401610208565b80821461068f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105d99060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161068f610693565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561078e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261072d9291602001610800565b60408051601f198184030181529082905261074791610824565b6000604051808303816000865af19150503d8060008114610784576040519150601f19603f3d011682016040523d82523d6000602084013e610789565b606091505b505050505b6000805461ff001916610100179055565b61019b8061085a83390190565b6000602082840312156107be57600080fd5b5051919050565b6000815160005b818110156107e657602081850181015186830152016107cc565b818111156107f5576000828601525b509290920192915050565b6001600160e01b031983168152600061081c60048301846107c5565b949350505050565b600061083082846107c5565b9392505050565b60006020828403121561084957600080fd5b8151801515811461083057600080fdfe60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033a2646970667358221220f8364a94cc3f1e3c50ee70816186683e8af699a77286e25a71fba917184dfb0664736f6c634300080d0033" ) )
      
    
    syntax Field ::= OwnerUpOnlyTestField
    
    syntax OwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestField ::= "_failed" [symbol(), klabel(field_OwnerUpOnlyTest__failed)]
    
    syntax OwnerUpOnlyTestField ::= "IS_SCRIPT" [symbol(), klabel(field_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_OwnerUpOnlyTest_stdstore)]
    
    syntax OwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_OwnerUpOnlyTest_upOnly)]
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . upOnly ) => 8 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyTestContract "." S2KOwnerUpOnlyTestMethod [function(), symbol(), klabel(method_OwnerUpOnlyTest)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KISZUndSCRIPT_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KISZUndTEST_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2Kfailed_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KsetUp_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestFailIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestFailIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2KtestIncrementAsOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_S2Kvm_)]
    
    rule  ( S2KOwnerUpOnlyTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2KtestIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner()" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner()" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner()" ) => 1980498343 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AdditionalToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAdditionalTokenContract
    
    syntax S2KAdditionalTokenContract ::= "S2KAdditionalToken" [symbol(), klabel(contract_AdditionalToken)]
    
      
    
    rule  ( #initBytecode ( S2KAdditionalToken ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b50336080526000805560805161014b610039600039600081816067015260b6015261014b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063e5071b8e146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100ed576000546100e99060016100ef565b6000555b565b6000821982111561011057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f12f4f69baafc672fea8a968200a87ab471cde0973e3c51c6d021823903544ff64736f6c634300080d0033" ) )
      
    
    syntax Field ::= AdditionalTokenField
    
    syntax AdditionalTokenField ::= "count" [symbol(), klabel(field_AdditionalToken_count)]
    
    rule  ( #loc ( S2KAdditionalToken . count ) => 0 )
      
    
    syntax Bytes ::= S2KAdditionalTokenContract "." S2KAdditionalTokenMethod [function(), symbol(), klabel(method_AdditionalToken)]
    
    syntax S2KAdditionalTokenMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_AdditionalToken_S2Kcount_)]
    
    syntax S2KAdditionalTokenMethod ::= "S2KincrementCount" "(" ")" [symbol(), klabel(method_AdditionalToken_S2KincrementCount_)]
    
    syntax S2KAdditionalTokenMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_AdditionalToken_S2Kowner_)]
    
    rule  ( S2KAdditionalToken . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . S2KincrementCount ( ) => #abiCallData ( "incrementCount" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "incrementCount()" ) => 3842448270 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module PlainPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPlainPrankTestContract
    
    syntax S2KPlainPrankTestContract ::= "S2KPlainPrankTest" [symbol(), klabel(contract_PlainPrankTest)]
    
      
    
    rule  ( #initBytecode ( S2KPlainPrankTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610b91806100316000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a036536a11610071578063a036536a14610115578063b753193d1461012a578063ba414fa614610132578063e22315a41461013a578063f8ccbf4714610142578063fa7626d41461015557600080fd5b80630e83f10b146100b957806310a13dbb146100c3578063332d7c4d146100cb5780633a768463146100d35780635cf61e5b1461010557806386d77e851461010d575b600080fd5b6100c1610162565b005b6100c161031d565b6100c161038b565b6100e8600080516020610b3c83398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16103eb565b6100c161045a565b600f33145b60405190151581526020016100fc565b6100c16105d6565b61011a6106ad565b6100c16107cc565b60005461011a9062010000900460ff1681565b60005461011a9060ff1681565b6000604051610170906108e7565b604051809103906000f08015801561018c573d6000803e3d6000fd5b506040516303223eab60e11b81526001600160a01b0382166004820152909150600080516020610b3c833981519152906306447d56906024015b600060405180830381600087803b1580156101e057600080fd5b505af11580156101f4573d6000803e3d6000fd5b50505050806001600160a01b031663e5071b8e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023357600080fd5b505af1158015610247573d6000803e3d6000fd5b5050604080516390c5013b60e01b81529051600080516020610b3c83398151915293506390c5013b9250600480830192600092919082900301818387803b15801561029157600080fd5b505af11580156102a5573d6000803e3d6000fd5b50505050806001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b91906108f4565b60011461031a5761031a61090d565b50565b604080516390c5013b60e01b81529051600080516020610b3c833981519152916390c5013b91600480830192600092919082900301818387803b15801561036357600080fd5b505af1158015610377573d6000803e3d6000fd5b5050505060016103895761038961090d565b565b6000604051610399906108e7565b604051809103906000f0801580156103b5573d6000803e3d6000fd5b506040516303223eab60e11b815260006004820152909150600080516020610b3c833981519152906306447d56906024016101c6565b60006040516103f9906108e7565b604051809103906000f080158015610415573d6000803e3d6000fd5b506040516308b6ac0f60e31b81526001600160a01b038216600482018190526024820152909150600080516020610b3c833981519152906345b56078906044016101c6565b6040516303223eab60e11b815260006004820152600080516020610b3c833981519152906306447d5690602401600060405180830381600087803b1580156104a157600080fd5b505af11580156104b5573d6000803e3d6000fd5b50506040516303223eab60e11b815260016004820152600080516020610b3c83398151915292506306447d569150602401600060405180830381600087803b15801561050057600080fd5b505af1158015610514573d6000803e3d6000fd5b5050604080516390c5013b60e01b81529051600080516020610b3c83398151915293506390c5013b9250600480830192600092919082900301818387803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b5050604080516390c5013b60e01b81529051600080516020610b3c83398151915293506390c5013b9250600480830192600092919082900301818387803b1580156105bc57600080fd5b505af11580156105d0573d6000803e3d6000fd5b50505050565b604051632631f2b160e11b8152600f3314156004820152600080516020610b3c83398151915290634c63e56290602401600060405180830381600087803b15801561062057600080fd5b505af1158015610634573d6000803e3d6000fd5b50506040516303223eab60e11b8152600f6004820152600080516020610b3c83398151915292506306447d569150602401600060405180830381600087803b15801561067f57600080fd5b505af1158015610693573d6000803e3d6000fd5b505050506106a133600f1490565b6103895761038961090d565b60008054610100900460ff16156106cd5750600054610100900460ff1690565b6000600080516020610b3c8339815191523b156107c75760408051600080516020610b3c833981519152602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161074f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161095e565b60408051601f198184030181529082905261076991610982565b6000604051808303816000865af19150503d80600081146107a6576040519150601f19603f3d011682016040523d82523d6000602084013e6107ab565b606091505b50915050808060200190518101906107c39190610995565b9150505b919050565b60006040516107da906108e7565b604051809103906000f0801580156107f6573d6000803e3d6000fd5b5060405163ca669fa760e01b815260006004820152909150600080516020610b3c8339815191529063ca669fa790602401600060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b50505050806001600160a01b031663e5071b8e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b50505050806001600160a01b031663e5071b8e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561029157600080fd5b610184806109b883390190565b60006020828403121561090657600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b6000815160005b81811015610944576020818501810151868301520161092a565b81811115610953576000828601525b509290920192915050565b6001600160e01b031983168152600061097a6004830184610923565b949350505050565b600061098e8284610923565b9392505050565b6000602082840312156109a757600080fd5b8151801515811461098e57600080fdfe60a060405234801561001057600080fd5b50336080526000805560805161014b610039600039600081816067015260b6015261014b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063e5071b8e146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100ed576000546100e99060016100ef565b6000555b565b6000821982111561011057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f12f4f69baafc672fea8a968200a87ab471cde0973e3c51c6d021823903544ff64736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da264697066735822122079513c816abe12d47fd8b8617fff0338ff237a0ca6af4dd029253dd522f7509b64736f6c634300080d0033" ) )
      
    
    syntax Field ::= PlainPrankTestField
    
    syntax PlainPrankTestField ::= "IS_TEST" [symbol(), klabel(field_PlainPrankTest_IS_TEST)]
    
    syntax PlainPrankTestField ::= "_failed" [symbol(), klabel(field_PlainPrankTest__failed)]
    
    syntax PlainPrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PlainPrankTest_IS_SCRIPT)]
    
    syntax PlainPrankTestField ::= "stdstore" [symbol(), klabel(field_PlainPrankTest_stdstore)]
    
    rule  ( #loc ( S2KPlainPrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KPlainPrankTestContract "." S2KPlainPrankTestMethod [function(), symbol(), klabel(method_PlainPrankTest)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KISZUndSCRIPT_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KISZUndTEST_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2Kfailed_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KinternalCounter" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KinternalCounter_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndexistingAlready" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestFailZUndstartPrankZUndexistingAlready_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndinternalCall" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestFailZUndstartPrankZUndinternalCall_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndprankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndprankZUndzeroAddressZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankWithOriginZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankWithOriginZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstartPrankZUndzeroAddressZUndtrue_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2KtestZUndstopPrankZUndnotExistent" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2KtestZUndstopPrankZUndnotExistent_)]
    
    syntax S2KPlainPrankTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_PlainPrankTest_S2Kvm_)]
    
    rule  ( S2KPlainPrankTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KinternalCounter ( ) => #abiCallData ( "internalCounter" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestFailZUndstartPrankZUndexistingAlready ( ) => #abiCallData ( "testFail_startPrank_existingAlready" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestFailZUndstartPrankZUndinternalCall ( ) => #abiCallData ( "testFail_startPrank_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndprankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_prank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankWithOriginZUndtrue ( ) => #abiCallData ( "test_startPrankWithOrigin_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankZUndtrue ( ) => #abiCallData ( "test_startPrank_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstartPrankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_startPrank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2KtestZUndstopPrankZUndnotExistent ( ) => #abiCallData ( "test_stopPrank_notExistent" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "internalCounter()" ) => 2687914858 )
      
    
    rule  ( selector ( "testFail_startPrank_existingAlready()" ) => 2262269573 )
      
    
    rule  ( selector ( "testFail_startPrank_internalCall()" ) => 3075676477 )
      
    
    rule  ( selector ( "test_prank_zeroAddress_true()" ) => 3793950116 )
      
    
    rule  ( selector ( "test_startPrankWithOrigin_true()" ) => 1559633499 )
      
    
    rule  ( selector ( "test_startPrank_true()" ) => 243527947 )
      
    
    rule  ( selector ( "test_startPrank_zeroAddress_true()" ) => 858618957 )
      
    
    rule  ( selector ( "test_stopPrank_notExistent()" ) => 279002555 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Prank-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankContract
    
    syntax S2KPrankContract ::= "S2KPrank" [symbol(), klabel(contract_Prank)]
    
      
    
    rule  ( #initBytecode ( S2KPrank ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b503360805260805161021561003560003960008181609a015260df01526102156000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780631003e2d21461006d5780631dc05f17146100825780638da5cb5b14610095575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b61008061007b366004610181565b6100d4565b005b610080610090366004610181565b610156565b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610064565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461013d5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461014e91906101b0565b909155505050565b321561016157600080fd5b80600054101561017057600080fd5b8060008082825461014e91906101c8565b60006020828403121561019357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101c3576101c361019a565b500190565b6000828210156101da576101da61019a565b50039056fea2646970667358221220576c66ed00ea73f0e268ced3370e2f9eb32d0943dd3d09852caf3160c1aa619764736f6c634300080d0033" ) )
      
    
    syntax Field ::= PrankField
    
    syntax PrankField ::= "count" [symbol(), klabel(field_Prank_count)]
    
    rule  ( #loc ( S2KPrank . count ) => 0 )
      
    
    syntax Bytes ::= S2KPrankContract "." S2KPrankMethod [function(), symbol(), klabel(method_Prank)]
    
    syntax S2KPrankMethod ::= "S2Kadd" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_S2Kadd_uint256)]
    
    syntax S2KPrankMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_Prank_S2Kcount_)]
    
    syntax S2KPrankMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_Prank_S2Kowner_)]
    
    syntax S2KPrankMethod ::= "S2Ksubtract" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_S2Ksubtract_uint256)]
    
    rule  ( S2KPrank . S2Kadd ( V0_value : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KPrank . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . S2Ksubtract ( V0_value : uint256 ) => #abiCallData ( "subtract" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( selector ( "add(uint256)" ) => 268690130 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      
    
    rule  ( selector ( "subtract(uint256)" ) => 499146519 )
      

endmodule

module PrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankTestContract
    
    syntax S2KPrankTestContract ::= "S2KPrankTest" [symbol(), klabel(contract_PrankTest)]
    
      
    
    rule  ( #initBytecode ( S2KPrankTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= PrankTestField
    
    syntax PrankTestField ::= "IS_TEST" [symbol(), klabel(field_PrankTest_IS_TEST)]
    
    syntax PrankTestField ::= "_failed" [symbol(), klabel(field_PrankTest__failed)]
    
    syntax PrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestField ::= "stdstore" [symbol(), klabel(field_PrankTest_stdstore)]
    
    syntax PrankTestField ::= "prankContract" [symbol(), klabel(field_PrankTest_prankContract)]
    
    rule  ( #loc ( S2KPrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KPrankTest . prankContract ) => 8 )
      
    
    syntax Bytes ::= S2KPrankTestContract "." S2KPrankTestMethod [function(), symbol(), klabel(method_PrankTest)]
    
    syntax S2KPrankTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_PrankTest_S2KISZUndSCRIPT_)]
    
    syntax S2KPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PrankTest_S2KISZUndTEST_)]
    
    syntax S2KPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PrankTest_S2Kfailed_)]
    
    syntax S2KPrankTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_PrankTest_S2KsetUp_)]
    
    syntax S2KPrankTestMethod ::= "S2KtestAddAsOwner" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestAddAsOwner_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestAddStartPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestAddStartPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestFailAddPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestFailAddPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractAsTxOrigin" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractAsTxOrigin_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractFail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractFail_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2KtestSubtractStartPrank" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_S2KtestSubtractStartPrank_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_PrankTest_S2Kvm_)]
    
    rule  ( S2KPrankTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . S2KtestAddAsOwner ( V0_x : uint256 ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestAddStartPrank ( V0_x : uint256 ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestFailAddPrank ( V0_x : uint256 ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestSubtractAsTxOrigin ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KPrankTest . S2KtestSubtractFail ( V0_x : uint256 ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . S2KtestSubtractStartPrank ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KPrankTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testAddAsOwner(uint256)" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank(uint256)" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank(uint256)" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin(uint256,uint256)" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail(uint256)" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank(uint256,uint256)" ) => 262874110 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module PreconditionsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPreconditionsTestContract
    
    syntax S2KPreconditionsTestContract ::= "S2KPreconditionsTest" [symbol(), klabel(contract_PreconditionsTest)]
    
      
    
    rule  ( #initBytecode ( S2KPreconditionsTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610635806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d6a2ec761161005b578063d6a2ec76146100dc578063ea281abd14610103578063f8ccbf471461010b578063fa7626d41461011e57600080fd5b80630a9254e4146100825780633a7684631461008c578063ba414fa6146100c4575b600080fd5b61008a61012b565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc6101fd565b60405190151581526020016100bb565b6100a77f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b61008a610328565b6000546100cc9062010000900460ff1681565b6000546100cc9060ff1681565b6040516316f02cd760e11b8152306004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae90602401600060405180830381600087803b15801561017757600080fd5b505af115801561018b573d6000803e3d6000fd5b5050600854604051632631f2b160e11b8152600a919091116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e5629150602401600060405180830381600087803b1580156101e357600080fd5b505af11580156101f7573d6000803e3d6000fd5b50505050565b60008054610100900460ff161561021d5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103235760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102ab917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016105a6565b60408051601f19818403018152908290526102c5916105ca565b6000604051808303816000865af19150503d8060008114610302576040519150601f19603f3d011682016040523d82523d6000602084013e610307565b606091505b509150508080602001905181019061031f91906105dd565b9150505b919050565b610335600854600a610337565b565b80821061045b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103a79060208082526021908201527f4572726f723a2061203c2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1604080518181526009818301526810102b30b63ab2903160b91b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161045b61045f565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561055a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104f992916020016105a6565b60408051601f1981840301815290829052610513916105ca565b6000604051808303816000865af19150503d8060008114610550576040519150601f19603f3d011682016040523d82523d6000602084013e610555565b606091505b505050505b6000805461ff001916610100179055565b6000815160005b8181101561058c5760208185018101518683015201610572565b8181111561059b576000828601525b509290920192915050565b6001600160e01b03198316815260006105c2600483018461056b565b949350505050565b60006105d6828461056b565b9392505050565b6000602082840312156105ef57600080fd5b815180151581146105d657600080fdfea264697066735822122020f177a6bc401ed003345df3be1deb316a244cfc15fed51c0acb3d28c3cd272164736f6c634300080d0033" ) )
      
    
    syntax Field ::= PreconditionsTestField
    
    syntax PreconditionsTestField ::= "IS_TEST" [symbol(), klabel(field_PreconditionsTest_IS_TEST)]
    
    syntax PreconditionsTestField ::= "_failed" [symbol(), klabel(field_PreconditionsTest__failed)]
    
    syntax PreconditionsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PreconditionsTest_IS_SCRIPT)]
    
    syntax PreconditionsTestField ::= "stdstore" [symbol(), klabel(field_PreconditionsTest_stdstore)]
    
    syntax PreconditionsTestField ::= "n" [symbol(), klabel(field_PreconditionsTest_n)]
    
    rule  ( #loc ( S2KPreconditionsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . n ) => 8 )
      
    
    syntax Bytes ::= S2KPreconditionsTestContract "." S2KPreconditionsTestMethod [function(), symbol(), klabel(method_PreconditionsTest)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KISZUndTEST_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kfailed_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kkevm_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KsetUp_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2KtestAssume" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2KtestAssume_)]
    
    syntax S2KPreconditionsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_PreconditionsTest_S2Kvm_)]
    
    rule  ( S2KPreconditionsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2KtestAssume ( ) => #abiCallData ( "testAssume" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testAssume()" ) => 3928496829 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module RecordLogsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KRecordLogsTestContract
    
    syntax S2KRecordLogsTestContract ::= "S2KRecordLogsTest" [symbol(), klabel(contract_RecordLogsTest)]
    
      
    
    rule  ( #initBytecode ( S2KRecordLogsTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610be9806100316000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610071578063ba414fa6146100a9578063d7f89958146100c1578063f8ccbf47146100c9578063fa7626d4146100dc575b600080fd5b61006f6100e9565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b1610198565b60405190151581526020016100a0565b61006f6102c3565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b6040516100f59061074f565b604051809103906000f080158015610111573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055604080516320d797a960e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916341af2f5291600480830192600092919082900301818387803b15801561017e57600080fd5b505af1158015610192573d6000803e3d6000fd5b50505050565b60008054610100900460ff16156101b85750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102be5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610246917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610787565b60408051601f1981840301815290829052610260916107b8565b6000604051808303816000865af19150503d806000811461029d576040519150601f19603f3d011682016040523d82523d6000602084013e6102a2565b606091505b50915050808060200190518101906102ba91906107d4565b9150505b919050565b600860009054906101000a90046001600160a01b03166001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561031357600080fd5b505af1158015610327573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103be91908101906108fd565b90506103cc8151600161046e565b61042e816000815181106103e2576103e2610a5e565b60200260200101516000015160008151811061040057610400610a5e565b60200260200101517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610561565b61046b8160008151811061044457610444610a5e565b6020026020010151602001518060200190518101906104639190610a74565b61053961046e565b50565b80821461055d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104df9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516105169190610a8d565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405161054d9190610ac5565b60405180910390a161055d610643565b5050565b80821461055d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105d59060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998260405161060c9190610a8d565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998160405161054d9190610ac5565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561073e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106dd9291602001610787565b60408051601f19818403018152908290526106f7916107b8565b6000604051808303816000865af19150503d8060008114610734576040519150601f19603f3d011682016040523d82523d6000602084013e610739565b606091505b505050505b6000805461ff001916610100179055565b60c480610af083390190565b60005b8381101561077657818101518382015260200161075e565b838111156101925750506000910152565b6001600160e01b03198316815281516000906107aa81600485016020870161075b565b919091016004019392505050565b600082516107ca81846020870161075b565b9190910192915050565b6000602082840312156107e657600080fd5b815180151581146107f657600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610836576108366107fd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610865576108656107fd565b604052919050565b600067ffffffffffffffff821115610887576108876107fd565b5060051b60200190565b600082601f8301126108a257600080fd5b815167ffffffffffffffff8111156108bc576108bc6107fd565b6108cf601f8201601f191660200161083c565b8181528460208386010111156108e457600080fd5b6108f582602083016020870161075b565b949350505050565b6000602080838503121561091057600080fd5b825167ffffffffffffffff8082111561092857600080fd5b818501915085601f83011261093c57600080fd5b815161094f61094a8261086d565b61083c565b81815260059190911b8301840190848101908883111561096e57600080fd5b8585015b83811015610a515780518581111561098957600080fd5b86016040818c03601f1901121561099f57600080fd5b6109a7610813565b88820151878111156109b857600080fd5b8201603f81018d136109c957600080fd5b898101516109d961094a8261086d565b81815260059190911b8201604001908b8101908f8311156109f957600080fd5b6040840193505b82841015610a195783518252928c0192908c0190610a00565b8452505050604082015187811115610a3057600080fd5b610a3e8d8b83860101610891565b828b015250845250918601918601610972565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a8657600080fd5b5051919050565b604081526000610ab760408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000610ab760408301600a8152690808080808149a59da1d60b21b60208201526040019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a2646970667358221220ec26c99b9447561f896c5b450931a07143dd50704abc1d56d22a6f98fc99e2b764736f6c634300080d0033" ) )
      
    
    syntax Field ::= RecordLogsTestField
    
    syntax RecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestField ::= "_failed" [symbol(), klabel(field_RecordLogsTest__failed)]
    
    syntax RecordLogsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestField ::= "stdstore" [symbol(), klabel(field_RecordLogsTest_stdstore)]
    
    syntax RecordLogsTestField ::= "emitter" [symbol(), klabel(field_RecordLogsTest_emitter)]
    
    rule  ( #loc ( S2KRecordLogsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . emitter ) => 8 )
      
    
    syntax Bytes ::= S2KRecordLogsTestContract "." S2KRecordLogsTestMethod [function(), symbol(), klabel(method_RecordLogsTest)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KISZUndSCRIPT_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KISZUndTEST_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2Kfailed_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KsetUp_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2KtestRecordLogs" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2KtestRecordLogs_)]
    
    syntax S2KRecordLogsTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_RecordLogsTest_S2Kvm_)]
    
    rule  ( S2KRecordLogsTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2KtestRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testRecordLogs()" ) => 3623393624 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Safe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeContract
    
    syntax S2KSafeContract ::= "S2KSafe" [symbol(), klabel(contract_Safe)]
    
      
    
    rule  ( #initBytecode ( S2KSafe ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KSafeContract "." S2KSafeMethod [function(), symbol(), klabel(method_Safe)]
    
    syntax S2KSafeMethod ::= "S2Kwithdraw" "(" ")" [symbol(), klabel(method_Safe_S2Kwithdraw_)]
    
    rule  ( S2KSafe . S2Kwithdraw ( ) => #abiCallData ( "withdraw" , .TypedArgs ) )
      
    
    rule  ( selector ( "withdraw()" ) => 1020253707 )
      

endmodule

module SafeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeTestContract
    
    syntax S2KSafeTestContract ::= "S2KSafeTest" [symbol(), klabel(contract_SafeTest)]
    
      
    
    rule  ( #initBytecode ( S2KSafeTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506108ef806100316000396000f3fe6080604052600436106100745760003560e01c8063d0da5a0a1161004e578063d0da5a0a14610101578063d509b16c14610121578063f8ccbf4714610136578063fa7626d41461015657600080fd5b80630a9254e4146100805780633a76846314610097578063ba414fa6146100dc57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b50610095610170565b005b3480156100a357600080fd5b506100bf737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100e857600080fd5b506100f16101bb565b60405190151581526020016100d3565b34801561010d57600080fd5b5061009561011c366004610715565b6102e6565b34801561012d57600080fd5b50610095610423565b34801561014257600080fd5b506000546100f19062010000900460ff1681565b34801561016257600080fd5b506000546100f19060ff1681565b60405161017c90610709565b604051809103906000f080158015610198573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60008054610100900460ff16156101db5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102e15760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610269917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610780565b60408051601f1981840301815290829052610283916107a4565b6000604051808303816000865af19150503d80600081146102c0576040519150601f19603f3d011682016040523d82523d6000602084013e6102c5565b606091505b50915050808060200190518101906102dd91906107b0565b9150505b919050565b604051632631f2b160e11b815267016345785d8a00006001600160601b038316116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561034557600080fd5b505af1158015610359573d6000803e3d6000fd5b50506008546040516001600160a01b0390911692506001600160601b03841680156108fc029250906000818181858888f193505050501580156103a0573d6000803e3d6000fd5b5060085460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b5047925061041e915061041890506001600160601b038516846107d2565b826104db565b505050565b6008546040516001600160a01b0390911690600090670de0b6b3a76400009082818181858883f19350505050158015610460573d6000803e3d6000fd5b5060085460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b504792506104d79150610418905083670de0b6b3a76400006107d2565b5050565b8082146104d7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161054c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16104d7737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106f85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106979291602001610780565b60408051601f19818403018152908290526106b1916107a4565b6000604051808303816000865af19150503d80600081146106ee576040519150601f19603f3d011682016040523d82523d6000602084013e6106f3565b606091505b505050505b6000805461ff001916610100179055565b60c1806107f983390190565b60006020828403121561072757600080fd5b81356001600160601b038116811461073e57600080fd5b9392505050565b6000815160005b81811015610766576020818501810151868301520161074c565b81811115610775576000828601525b509290920192915050565b6001600160e01b031983168152600061079c6004830184610745565b949350505050565b600061073e8284610745565b6000602082840312156107c257600080fd5b8151801515811461073e57600080fd5b600082198211156107f357634e487b7160e01b600052601160045260246000fd5b50019056fe6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033a2646970667358221220dcdc2070bdd51a8ce9443b132529ea4954d288039ba2a0c3207a4bcb83b4343364736f6c634300080d0033" ) )
      
    
    syntax Field ::= SafeTestField
    
    syntax SafeTestField ::= "IS_TEST" [symbol(), klabel(field_SafeTest_IS_TEST)]
    
    syntax SafeTestField ::= "_failed" [symbol(), klabel(field_SafeTest__failed)]
    
    syntax SafeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestField ::= "stdstore" [symbol(), klabel(field_SafeTest_stdstore)]
    
    syntax SafeTestField ::= "safe" [symbol(), klabel(field_SafeTest_safe)]
    
    rule  ( #loc ( S2KSafeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSafeTest . safe ) => 8 )
      
    
    syntax Bytes ::= S2KSafeTestContract "." S2KSafeTestMethod [function(), symbol(), klabel(method_SafeTest)]
    
    syntax S2KSafeTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SafeTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSafeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SafeTest_S2KISZUndTEST_)]
    
    syntax S2KSafeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SafeTest_S2Kfailed_)]
    
    syntax S2KSafeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SafeTest_S2KsetUp_)]
    
    syntax S2KSafeTestMethod ::= "S2KtestWithdraw" "(" ")" [symbol(), klabel(method_SafeTest_S2KtestWithdraw_)]
    
    syntax S2KSafeTestMethod ::= "S2KtestWithdrawFuzz" "(" Int ":" "uint96" ")" [symbol(), klabel(method_SafeTest_S2KtestWithdrawFuzz_uint96)]
    
    syntax S2KSafeTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SafeTest_S2Kvm_)]
    
    rule  ( S2KSafeTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtestWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . S2KtestWithdrawFuzz ( V0_amount : uint96 ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( S2KSafeTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testWithdraw()" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz(uint96)" ) => 3503970826 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Script-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KScriptContract
    
    syntax S2KScriptContract ::= "S2KScript" [symbol(), klabel(contract_Script)]
    
      
    
    rule  ( #initBytecode ( S2KScript ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= ScriptField
    
    syntax ScriptField ::= "IS_SCRIPT" [symbol(), klabel(field_Script_IS_SCRIPT)]
    
    rule  ( #loc ( S2KScript . IS_SCRIPT ) => 0 )
      
    
    syntax Bytes ::= S2KScriptContract "." S2KScriptMethod [function(), symbol(), klabel(method_Script)]
    
    syntax S2KScriptMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Script_S2KISZUndSCRIPT_)]
    
    syntax S2KScriptMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_Script_S2Kvm_)]
    
    rule  ( S2KScript . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KScript . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Setup2Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetup2TestContract
    
    syntax S2KSetup2TestContract ::= "S2KSetup2Test" [symbol(), klabel(contract_Setup2Test)]
    
      
    
    rule  ( #initBytecode ( S2KSetup2Test ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506105b6806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100d8578063d0b346e6146100f0578063f8ccbf47146100f8578063fa7626d41461010b57600080fd5b80630a9254e4146100825780633a7684631461009857806377493bf3146100d0575b600080fd5b610096600160085560026009556003600a55565b005b6100b3737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b610096610118565b6100e0610141565b60405190151581526020016100c7565b61009661026c565b6000546100e09062010000900460ff1681565b6000546100e09060ff1681565b61013f600a5460095460085461012e91906104c6565b61013891906104c6565b600661028f565b565b60008054610100900460ff16156101615750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102675760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101ef917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610527565b60408051601f19818403018152908290526102099161054b565b6000604051808303816000865af19150503d8060008114610246576040519150601f19603f3d011682016040523d82523d6000602084013e61024b565b606091505b5091505080806020019051810190610263919061055e565b9150505b919050565b61013f600a5460095460085461028291906104c6565b61028c91906104c6565b60075b8082146103b6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103009060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103b66103ba565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104b55760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104549291602001610527565b60408051601f198184030181529082905261046e9161054b565b6000604051808303816000865af19150503d80600081146104ab576040519150601f19603f3d011682016040523d82523d6000602084013e6104b0565b606091505b505050505b6000805461ff001916610100179055565b600082198211156104e757634e487b7160e01b600052601160045260246000fd5b500190565b6000815160005b8181101561050d57602081850181015186830152016104f3565b8181111561051c576000828601525b509290920192915050565b6001600160e01b031983168152600061054360048301846104ec565b949350505050565b600061055782846104ec565b9392505050565b60006020828403121561057057600080fd5b8151801515811461055757600080fdfea264697066735822122086d24036834632e41dcf55700d10793bc58cca9689228852d643bd6ef533a67664736f6c634300080d0033" ) )
      
    
    syntax Field ::= Setup2TestField
    
    syntax Setup2TestField ::= "IS_TEST" [symbol(), klabel(field_Setup2Test_IS_TEST)]
    
    syntax Setup2TestField ::= "_failed" [symbol(), klabel(field_Setup2Test__failed)]
    
    syntax Setup2TestField ::= "IS_SCRIPT" [symbol(), klabel(field_Setup2Test_IS_SCRIPT)]
    
    syntax Setup2TestField ::= "stdstore" [symbol(), klabel(field_Setup2Test_stdstore)]
    
    syntax Setup2TestField ::= "a" [symbol(), klabel(field_Setup2Test_a)]
    
    syntax Setup2TestField ::= "b" [symbol(), klabel(field_Setup2Test_b)]
    
    syntax Setup2TestField ::= "c" [symbol(), klabel(field_Setup2Test_c)]
    
    rule  ( #loc ( S2KSetup2Test . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetup2Test . a ) => 8 )
      
    
    rule  ( #loc ( S2KSetup2Test . b ) => 9 )
      
    
    rule  ( #loc ( S2KSetup2Test . c ) => 10 )
      
    
    syntax Bytes ::= S2KSetup2TestContract "." S2KSetup2TestMethod [function(), symbol(), klabel(method_Setup2Test)]
    
    syntax S2KSetup2TestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Setup2Test_S2KISZUndSCRIPT_)]
    
    syntax S2KSetup2TestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Setup2Test_S2KISZUndTEST_)]
    
    syntax S2KSetup2TestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Setup2Test_S2Kfailed_)]
    
    syntax S2KSetup2TestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_Setup2Test_S2KsetUp_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtestFailZUndsetup" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtestFailZUndsetup_)]
    
    syntax S2KSetup2TestMethod ::= "S2KtestZUndsetup" "(" ")" [symbol(), klabel(method_Setup2Test_S2KtestZUndsetup_)]
    
    syntax S2KSetup2TestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_Setup2Test_S2Kvm_)]
    
    rule  ( S2KSetup2Test . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtestFailZUndsetup ( ) => #abiCallData ( "testFail_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2KtestZUndsetup ( ) => #abiCallData ( "test_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_setup()" ) => 3501410022 )
      
    
    rule  ( selector ( "test_setup()" ) => 2001288179 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SetUpDeployTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpDeployTestContract
    
    syntax S2KSetUpDeployTestContract ::= "S2KSetUpDeployTest" [symbol(), klabel(contract_SetUpDeployTest)]
    
      
    
    rule  ( #initBytecode ( S2KSetUpDeployTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506105f8806100316000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a7684631461007157806362c9eac5146100a9578063ba414fa6146100b1578063f8ccbf47146100c9578063fa7626d4146100dc575b600080fd5b61006f6100e9565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61006f610146565b6100b9610166565b60405190151581526020016100a0565b6000546100b99062010000900460ff1681565b6000546100b99060ff1681565b60006040516100f790610291565b6001600160a01b039091168152602001604051809103906000f080158015610123573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b0316803b90816101625761016261029e565b5050565b60008054610100900460ff16156101865750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561028c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610214917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016102ef565b60408051601f198184030181529082905261022e91610313565b6000604051808303816000865af19150503d806000811461026b576040519150601f19603f3d011682016040523d82523d6000602084013e610270565b606091505b50915050808060200190518101906102889190610326565b9150505b919050565b61027a8061034983390190565b634e487b7160e01b600052600160045260246000fd5b6000815160005b818110156102d557602081850181015186830152016102bb565b818111156102e4576000828601525b509290920192915050565b6001600160e01b031983168152600061030b60048301846102b4565b949350505050565b600061031f82846102b4565b9392505050565b60006020828403121561033857600080fd5b8151801515811461031f57600080fdfe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a2646970667358221220efd7442397b591c74e50f38095f98b89375e62d111c85b376f3a8258b5e02faa64736f6c634300080d0033" ) )
      
    
    syntax Field ::= SetUpDeployTestField
    
    syntax SetUpDeployTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpDeployTest_IS_TEST)]
    
    syntax SetUpDeployTestField ::= "_failed" [symbol(), klabel(field_SetUpDeployTest__failed)]
    
    syntax SetUpDeployTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpDeployTest_IS_SCRIPT)]
    
    syntax SetUpDeployTestField ::= "stdstore" [symbol(), klabel(field_SetUpDeployTest_stdstore)]
    
    syntax SetUpDeployTestField ::= "token" [symbol(), klabel(field_SetUpDeployTest_token)]
    
    rule  ( #loc ( S2KSetUpDeployTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . token ) => 8 )
      
    
    syntax Bytes ::= S2KSetUpDeployTestContract "." S2KSetUpDeployTestMethod [function(), symbol(), klabel(method_SetUpDeployTest)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KISZUndTEST_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2Kfailed_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KsetUp_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2KtestZUndextcodesize" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2KtestZUndextcodesize_)]
    
    syntax S2KSetUpDeployTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SetUpDeployTest_S2Kvm_)]
    
    rule  ( S2KSetUpDeployTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2KtestZUndextcodesize ( ) => #abiCallData ( "test_extcodesize" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "test_extcodesize()" ) => 1657400005 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SetUpTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpTestContract
    
    syntax S2KSetUpTestContract ::= "S2KSetUpTest" [symbol(), klabel(contract_SetUpTest)]
    
      
    
    rule  ( #initBytecode ( S2KSetUpTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117815560085534801561002457600080fd5b5060646008556105c3806100396000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c6a19dd21161005b578063c6a19dd2146100dc578063ec7fe471146100ef578063f8ccbf47146100f7578063fa7626d41461010a57600080fd5b80630a9254e4146100825780633a7684631461008c578063ba414fa6146100c4575b600080fd5b61008a610117565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc61012e565b60405190151581526020016100bb565b61008a6100ea3660046104b9565b610259565b61008a610273565b6000546100cc9062010000900460ff1681565b6000546100cc9060ff1681565b60088054906000610127836104d2565b9190505550565b60008054610100900460ff161561014e5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102545760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101dc917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610534565b60408051601f19818403018152908290526101f691610558565b6000604051808303816000865af19150503d8060008114610233576040519150601f19603f3d011682016040523d82523d6000602084013e610238565b606091505b5091505080806020019051810190610250919061056b565b9150505b919050565b6102666008546065610282565b6102708182610282565b50565b6102806008546065610282565b565b8082146103a9577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102f39060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103a96103ad565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104a85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104479291602001610534565b60408051601f198184030181529082905261046191610558565b6000604051808303816000865af19150503d806000811461049e576040519150601f19603f3d011682016040523d82523d6000602084013e6104a3565b606091505b505050505b6000805461ff001916610100179055565b6000602082840312156104cb57600080fd5b5035919050565b6000600182016104f257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815160005b8181101561051a5760208185018101518683015201610500565b81811115610529576000828601525b509290920192915050565b6001600160e01b031983168152600061055060048301846104f9565b949350505050565b600061056482846104f9565b9392505050565b60006020828403121561057d57600080fd5b8151801515811461056457600080fdfea2646970667358221220bae9ee04a18682c884279393a38e3922fcc53a46801ade561d01d741fb31b85764736f6c634300080d0033" ) )
      
    
    syntax Field ::= SetUpTestField
    
    syntax SetUpTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpTest_IS_TEST)]
    
    syntax SetUpTestField ::= "_failed" [symbol(), klabel(field_SetUpTest__failed)]
    
    syntax SetUpTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestField ::= "stdstore" [symbol(), klabel(field_SetUpTest_stdstore)]
    
    syntax SetUpTestField ::= "counter" [symbol(), klabel(field_SetUpTest_counter)]
    
    rule  ( #loc ( S2KSetUpTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetUpTest . counter ) => 8 )
      
    
    syntax Bytes ::= S2KSetUpTestContract "." S2KSetUpTestMethod [function(), symbol(), klabel(method_SetUpTest)]
    
    syntax S2KSetUpTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SetUpTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSetUpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SetUpTest_S2KISZUndTEST_)]
    
    syntax S2KSetUpTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SetUpTest_S2Kfailed_)]
    
    syntax S2KSetUpTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SetUpTest_S2KsetUp_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtestSetUpCalled" "(" ")" [symbol(), klabel(method_SetUpTest_S2KtestSetUpCalled_)]
    
    syntax S2KSetUpTestMethod ::= "S2KtestSetUpCalledSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SetUpTest_S2KtestSetUpCalledSymbolic_uint256)]
    
    syntax S2KSetUpTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SetUpTest_S2Kvm_)]
    
    rule  ( S2KSetUpTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtestSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . S2KtestSetUpCalledSymbolic ( V0_x : uint256 ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KSetUpTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testSetUpCalled()" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic(uint256)" ) => 3332480466 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SignTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSignTestContract
    
    syntax S2KSignTestContract ::= "S2KSignTest" [symbol(), klabel(contract_SignTest)]
    
      
    
    rule  ( #initBytecode ( S2KSignTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506109f3806100316000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633a76846314610067578063af5bc10d1461009f578063ba414fa6146100b4578063ed8f10df146100cc578063f8ccbf47146100d4578063fa7626d4146100e7575b600080fd5b610082737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b26100ad3660046108aa565b6100f4565b005b6100bc61037b565b6040519015158152602001610096565b6100b26104a6565b6000546100bc9062010000900460ff1681565b6000546100bc9060ff1681565b604051632631f2b160e11b81528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561014257600080fd5b505af1158015610156573d6000803e3d6000fd5b5050604051632631f2b160e11b815270014551231950b75fc4402da1732fc9bebe1984106004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e5629150602401600060405180830381600087803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b50506040516001625e79b760e01b031981526004810184905260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ffa18649906024016020604051808303816000875af115801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e91906108c3565b6040516338d07aa960e21b8152600481018490527fcec7901caf5725c08993c6c23be407884cf770cbb2394af38ff5d00d0e11ad426024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa4906044016060604051808303816000875af11580156102d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f691906108f3565b92509250925060006001858585856040516000815260200160405260405161033a949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561035c573d6000803e3d6000fd5b505050602060405103519050610372868261064e565b50505050505050565b60008054610100900460ff161561039b5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104a15760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610429917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161096b565b60408051601f19818403018152908290526104439161098f565b6000604051808303816000865af19150503d8060008114610480576040519150601f19603f3d011682016040523d82523d6000602084013e610485565b606091505b509150508080602001905181019061049d919061099b565b9150505b919050565b6040516001625e79b760e01b0319815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052291906108c3565b6040516338d07aa960e21b8152600160048201527f385967023fb9520b497ee37da9c1e3d5faac1385800ce4ed07ca32d7893c7bb56024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa4906044016060604051808303816000875af11580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca91906108f3565b92509250925060006001858585856040516000815260200160405260405161060e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610630573d6000803e3d6000fd5b505050602060405103519050610646868261064e565b505050505050565b806001600160a01b0316826001600160a01b03161461079a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106d49060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a161079a61079e565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108995760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610838929160200161096b565b60408051601f19818403018152908290526108529161098f565b6000604051808303816000865af19150503d806000811461088f576040519150601f19603f3d011682016040523d82523d6000602084013e610894565b606091505b505050505b6000805461ff001916610100179055565b6000602082840312156108bc57600080fd5b5035919050565b6000602082840312156108d557600080fd5b81516001600160a01b03811681146108ec57600080fd5b9392505050565b60008060006060848603121561090857600080fd5b835160ff8116811461091957600080fd5b602085015160409095015190969495509392505050565b6000815160005b818110156109515760208185018101518683015201610937565b81811115610960576000828601525b509290920192915050565b6001600160e01b03198316815260006109876004830184610930565b949350505050565b60006108ec8284610930565b6000602082840312156109ad57600080fd5b815180151581146108ec57600080fdfea26469706673582212200f41d7462cb7a7911cbf814b31498280df99c16495c71b27b98469c8a85177a264736f6c634300080d0033" ) )
      
    
    syntax Field ::= SignTestField
    
    syntax SignTestField ::= "IS_TEST" [symbol(), klabel(field_SignTest_IS_TEST)]
    
    syntax SignTestField ::= "_failed" [symbol(), klabel(field_SignTest__failed)]
    
    syntax SignTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SignTest_IS_SCRIPT)]
    
    syntax SignTestField ::= "stdstore" [symbol(), klabel(field_SignTest_stdstore)]
    
    rule  ( #loc ( S2KSignTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KSignTestContract "." S2KSignTestMethod [function(), symbol(), klabel(method_SignTest)]
    
    syntax S2KSignTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SignTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSignTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SignTest_S2KISZUndTEST_)]
    
    syntax S2KSignTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SignTest_S2Kfailed_)]
    
    syntax S2KSignTestMethod ::= "S2KtestSign" "(" ")" [symbol(), klabel(method_SignTest_S2KtestSign_)]
    
    syntax S2KSignTestMethod ::= "S2KtestSignZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SignTest_S2KtestSignZUndsymbolic_uint256)]
    
    syntax S2KSignTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SignTest_S2Kvm_)]
    
    rule  ( S2KSignTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtestSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . S2KtestSignZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "testSign_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KSignTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testSign()" ) => 3985576159 )
      
    
    rule  ( selector ( "testSign_symbolic(uint256)" ) => 2942025997 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AssertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssertTestContract
    
    syntax S2KAssertTestContract ::= "S2KAssertTest" [symbol(), klabel(contract_AssertTest)]
    
      
    
    rule  ( #initBytecode ( S2KAssertTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506105d1806100316000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635ddecbfd11610097578063c2c0bcc711610066578063c2c0bcc714610195578063d6a2ec76146101a8578063f8ccbf47146101cf578063fa7626d4146101e257600080fd5b80635ddecbfd146101625780637aa9ccae146101625780638c0edd8b1461016a578063ba414fa61461017d57600080fd5b8063360da4d2116100d3578063360da4d2146100fa5780633a768463146101045780633ba4d90c1461013c5780634622b1551461014f57600080fd5b80630a9254e4146100fa57806318675d42146100fa5780632a4de1a1146100fc575b600080fd5b005b6100fa6101f1565b61011f737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa61014a366004610491565b61025d565b6100fa61015d366004610491565b610301565b6100fa610312565b6100fa6101783660046104aa565b61031a565b610185610332565b6040519015158152602001610133565b6100fa6101a3366004610491565b61045d565b61011f7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6000546101859062010000900460ff1681565b6000546101859060ff1681565b565b60408051633d21120560e21b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d9163f484481491600480830192600092919082900301818387803b15801561023d57600080fd5b505af1158015610251573d6000803e3d6000fd5b505050506101ef6104cc565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663ed9f73536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102bb57600080fd5b505af11580156102cf573d6000803e3d6000fd5b50505050600a8110156102e65760006008556102ec565b60016008555b6002600854106102fe576102fe6104cc565b50565b60648110156102fe576102fe6104cc565b6101ef6104cc565b80821015610326575050565b61032e6104cc565b5050565b60008054610100900460ff16156103525750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104585760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916103e0917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161051d565b60408051601f19818403018152908290526103fa91610541565b6000604051808303816000865af19150503d8060008114610437576040519150601f19603f3d011682016040523d82523d6000602084013e61043c565b606091505b50915050808060200190518101906104549190610554565b9150505b919050565b600381101561047057600881905561047f565b61047b600182610576565b6008555b8060085411156102fe576102fe6104cc565b6000602082840312156104a357600080fd5b5035919050565b600080604083850312156104bd57600080fd5b50508035926020909101359150565b634e487b7160e01b600052600160045260246000fd5b6000815160005b8181101561050357602081850181015186830152016104e9565b81811115610512576000828601525b509290920192915050565b6001600160e01b031983168152600061053960048301846104e2565b949350505050565b600061054d82846104e2565b9392505050565b60006020828403121561056657600080fd5b8151801515811461054d57600080fd5b60008282101561059657634e487b7160e01b600052601160045260246000fd5b50039056fea264697066735822122094ea2315083dcbf233c23b51e7a71284e34fb7edd8c2a7cb02334f844639c15a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= AssertTestField
    
    syntax AssertTestField ::= "IS_TEST" [symbol(), klabel(field_AssertTest_IS_TEST)]
    
    syntax AssertTestField ::= "_failed" [symbol(), klabel(field_AssertTest__failed)]
    
    syntax AssertTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssertTest_IS_SCRIPT)]
    
    syntax AssertTestField ::= "stdstore" [symbol(), klabel(field_AssertTest_stdstore)]
    
    syntax AssertTestField ::= "y" [symbol(), klabel(field_AssertTest_y)]
    
    rule  ( #loc ( S2KAssertTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KAssertTest . y ) => 8 )
      
    
    syntax Bytes ::= S2KAssertTestContract "." S2KAssertTestMethod [function(), symbol(), klabel(method_AssertTest)]
    
    syntax S2KAssertTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_AssertTest_S2KISZUndSCRIPT_)]
    
    syntax S2KAssertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_AssertTest_S2KISZUndTEST_)]
    
    syntax S2KAssertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_AssertTest_S2Kfailed_)]
    
    syntax S2KAssertTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_AssertTest_S2Kkevm_)]
    
    syntax S2KAssertTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_AssertTest_S2KsetUp_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndassertZUndtrue_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestFailZUndexpectZUndrevert" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestFailZUndexpectZUndrevert_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndfalse_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndtrue_)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndassertZUndtrueZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndassertZUndtrueZUndbranch_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndbranchZUndmerge" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndbranchZUndmerge_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndfailingZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndfailingZUndbranch_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2KtestZUndrevertZUndbranch" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_S2KtestZUndrevertZUndbranch_uint256_uint256)]
    
    syntax S2KAssertTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_AssertTest_S2Kvm_)]
    
    rule  ( S2KAssertTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndassertZUndfalse ( ) => #abiCallData ( "testFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndassertZUndtrue ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestFailZUndexpectZUndrevert ( ) => #abiCallData ( "testFail_expect_revert" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndfalse ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . S2KtestZUndassertZUndtrueZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_assert_true_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndbranchZUndmerge ( V0_x : uint256 ) => #abiCallData ( "test_branch_merge" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndfailingZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_failing_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . S2KtestZUndrevertZUndbranch ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_revert_branch" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KAssertTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_assert_false()" ) => 2057948334 )
      
    
    rule  ( selector ( "testFail_assert_true()" ) => 409427266 )
      
    
    rule  ( selector ( "testFail_expect_revert()" ) => 709747105 )
      
    
    rule  ( selector ( "test_assert_false()" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true_branch(uint256)" ) => 3267411143 )
      
    
    rule  ( selector ( "test_branch_merge(uint256)" ) => 1000659212 )
      
    
    rule  ( selector ( "test_failing_branch(uint256)" ) => 1176678741 )
      
    
    rule  ( selector ( "test_revert_branch(uint256,uint256)" ) => 2349784459 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SnapshotTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSnapshotTestContract
    
    syntax S2KSnapshotTestContract ::= "S2KSnapshotTest" [symbol(), klabel(contract_SnapshotTest)]
    
      
    
    rule  ( #initBytecode ( S2KSnapshotTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506107b6806100316000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610078578063ba414fa6146100b0578063befb3b8a146100c8578063f8ccbf47146100d0578063fa7626d4146100e3575b600080fd5b610076600a6008556014600955565b005b610093737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b86100f0565b60405190151581526020016100a7565b61007661021b565b6000546100b89062010000900460ff1681565b6000546100b89060ff1681565b60008054610100900460ff16156101105750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102165760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161019e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610654565b60408051601f19818403018152908290526101b891610685565b6000604051808303816000865af19150503d80600081146101f5576040519150601f19603f3d011682016040523d82523d6000602084013e6101fa565b606091505b509150508080602001905181019061021291906106a1565b9150505b919050565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa91906106ca565b61012c60088190556101906009559091506102c590806103a0565b6009546102d4906101906103a0565b604051631135fc2960e21b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906344d7f0a4906024016020604051808303816000875af1158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a91906106a1565b50610374600860000154600a60405180606001604052806027815260200161075a602791396104cb565b61039d6008600101546014604051806060016040528060278152602001610733602791396104cb565b50565b8082146104c7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104119060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16104c7610518565b5050565b818314610513577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161050191906106e3565b60405180910390a161051383836103a0565b505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106135760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105b29291602001610654565b60408051601f19818403018152908290526105cc91610685565b6000604051808303816000865af19150503d8060008114610609576040519150601f19603f3d011682016040523d82523d6000602084013e61060e565b606091505b505050505b6000805461ff001916610100179055565b60005b8381101561063f578181015183820152602001610627565b8381111561064e576000848401525b50505050565b6001600160e01b0319831681528151600090610677816004850160208701610624565b919091016004019392505050565b60008251610697818460208701610624565b9190910192915050565b6000602082840312156106b357600080fd5b815180151581146106c357600080fd5b9392505050565b6000602082840312156106dc57600080fd5b5051919050565b60408152600560408201526422b93937b960d91b6060820152608060208201526000825180608084015261071e8160a0850160208701610624565b601f01601f19169190910160a0019291505056fe736e617073686f742072657665727420666f7220736c6f74203120756e7375636365737366756c736e617073686f742072657665727420666f7220736c6f74203020756e7375636365737366756ca2646970667358221220ef4cfae0f634f9a87e7baa23310ed516586bcb86081a5afc086b00662943a0ca64736f6c634300080d0033" ) )
      
    
    syntax Field ::= SnapshotTestField
    
    syntax SnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestField ::= "_failed" [symbol(), klabel(field_SnapshotTest__failed)]
    
    syntax SnapshotTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestField ::= "stdstore" [symbol(), klabel(field_SnapshotTest_stdstore)]
    
    syntax SnapshotTestField ::= "store" [symbol(), klabel(field_SnapshotTest_store)]
    
    rule  ( #loc ( S2KSnapshotTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSnapshotTest . store ) => 8 )
      
    
    syntax Bytes ::= S2KSnapshotTestContract "." S2KSnapshotTestMethod [function(), symbol(), klabel(method_SnapshotTest)]
    
    syntax S2KSnapshotTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KISZUndTEST_)]
    
    syntax S2KSnapshotTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SnapshotTest_S2Kfailed_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KsetUp_)]
    
    syntax S2KSnapshotTestMethod ::= "S2KtestSnapshot" "(" ")" [symbol(), klabel(method_SnapshotTest_S2KtestSnapshot_)]
    
    syntax S2KSnapshotTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SnapshotTest_S2Kvm_)]
    
    rule  ( S2KSnapshotTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2KtestSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testSnapshot()" ) => 3204135818 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Store-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreContract
    
    syntax S2KStoreContract ::= "S2KStore" [symbol(), klabel(contract_Store)]
    
      
    
    rule  ( #initBytecode ( S2KStore ) => #parseByteStack ( "0x6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea2646970667358221220326e9a3263aa557848aecceeb7b28c6490ddd145f93ceb4a4f9b1f0349069ced64736f6c634300080d0033" ) )
      
    
    syntax Field ::= StoreField
    
    syntax StoreField ::= "testNumber" [symbol(), klabel(field_Store_testNumber)]
    
    rule  ( #loc ( S2KStore . testNumber ) => 0 )
      

endmodule

module StoreTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreTestContract
    
    syntax S2KStoreTestContract ::= "S2KStoreTest" [symbol(), klabel(contract_StoreTest)]
    
      
    
    rule  ( #initBytecode ( S2KStoreTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610c59806100316000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806389a99a741161008c578063e292f8b511610066578063e292f8b51461017b578063e92ca5bb14610183578063f8ccbf471461018b578063fa7626d41461019e57600080fd5b806389a99a74146101535780639b716e861461015b578063ba414fa61461016357600080fd5b80633a768463116100c85780633a76846314610109578063480880731461013b5780635c2d302e1461014357806387a8a81b1461014b57600080fd5b806305f6ff37146100ef57806309840bb5146100f957806324007a2614610101575b600080fd5b6100f76101ab565b005b6100f7610245565b6100f761039a565b61011e600080516020610c0483398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f761042e565b6100f761055f565b6100f76105e5565b6100f761066f565b6100f76106b1565b61016b610733565b6040519015158152602001610132565b6100f7610852565b6100f7610882565b60005461016b9062010000900460ff1681565b60005461016b9060ff1681565b604051600080516020610c04833981519152906108fc9060009081818181818888f15050604051600093506102309250600080516020610c048339815191529150610201906065906017906005906024016109a8565b60408051601f198184030181529190526020810180516001600160e01b03166370ca10bb60e01b17905261097a565b905080607d14610242576102426109c9565b50565b60006040516102539061099c565b604051809103906000f08015801561026f573d6000803e3d6000fd5b5090507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102d657600080fd5b505af11580156102ea573d6000803e3d6000fd5b50506040516365bc948160e01b81526001600160a01b038416600482015260009250829150600080516020610c04833981519152906365bc9481906024016000604051808303816000875af1158015610347573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036f9190810190610a90565b915091508151600114610384576103846109c9565b8051600114610395576103956109c9565b505050565b604051630667f9d760e41b81526065600482015260176024820152600080516020610c048339815191529063667f9d70906044016020604051808303816000875af11580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104119190610af4565b50600061023060656040518060200160405280600081525061097a565b600060405161043c9061099c565b604051809103906000f080158015610458573d6000803e3d6000fd5b506040516370ca10bb60e01b8152909150600080516020610c04833981519152906370ca10bb90610494908490600090617a69906004016109a8565b600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b5050604051630667f9d760e41b81526001600160a01b03841660048201526000602482018190529250600080516020610c04833981519152915063667f9d70906044016020604051808303816000875af1158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610af4565b9050617a69811461055b5761055b6109c9565b5050565b6040516370ca10bb60e01b8152600080516020610c04833981519152906370ca10bb90610597906065906017906005906004016109a8565b600060405180830381600087803b1580156105b157600080fd5b505af11580156105c5573d6000803e3d6000fd5b50505050600061023060656040518060200160405280600081525061097a565b604051630667f9d760e41b81526064600482015260176024820152600090600080516020610c048339815191529063667f9d70906044016020604051808303816000875af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190610af4565b90508015610242576102426109c9565b60405160009061069e90600080516020610c0483398151915290610201906065906017906005906024016109a8565b905080610a4114610242576102426109c9565b604051600080516020610c04833981519152906108fc9060009081818181818888f150506040516065602482015260176044820152600093506102309250600080516020610c0483398151915291506064015b60408051601f198184030181529190526020810180516001600160e01b0316630667f9d760e41b17905261097a565b60008054610100900460ff16156107535750600054610100900460ff1690565b6000600080516020610c048339815191523b1561084d5760408051600080516020610c04833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107d5917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610b48565b60408051601f19818403018152908290526107ef91610b6c565b6000604051808303816000865af19150503d806000811461082c576040519150601f19603f3d011682016040523d82523d6000602084013e610831565b606091505b50915050808060200190518101906108499190610b7f565b9150505b919050565b604051606560248201526017604482015260009061069e90600080516020610c0483398151915290606401610704565b6040516370ca10bb60e01b8152600080516020610c04833981519152906370ca10bb906108bb90600090600390617a69906004016109a8565b600060405180830381600087803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b5050604051630667f9d760e41b8152600060048201819052600360248301529250600080516020610c04833981519152915063667f9d70906044016020604051808303816000875af1158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190610af4565b9050617a698114610242576102426109c9565b6000808260200183515a600080838560008b86f1505a90039695505050505050565b606280610ba283390190565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a0657600080fd5b8151602067ffffffffffffffff80831115610a2357610a236109df565b8260051b604051601f19603f83011681018181108482111715610a4857610a486109df565b604052938452858101830193838101925087851115610a6657600080fd5b83870191505b84821015610a8557815183529183019190830190610a6c565b979650505050505050565b60008060408385031215610aa357600080fd5b825167ffffffffffffffff80821115610abb57600080fd5b610ac7868387016109f5565b93506020850151915080821115610add57600080fd5b50610aea858286016109f5565b9150509250929050565b600060208284031215610b0657600080fd5b5051919050565b6000815160005b81811015610b2e5760208185018101518683015201610b14565b81811115610b3d576000828601525b509290920192915050565b6001600160e01b0319831681526000610b646004830184610b0d565b949350505050565b6000610b788284610b0d565b9392505050565b600060208284031215610b9157600080fd5b81518015158114610b7857600080fdfe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea2646970667358221220326e9a3263aa557848aecceeb7b28c6490ddd145f93ceb4a4f9b1f0349069ced64736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220a17cb0334f7c5a6627275285756d38595b049230c7fa4cc7f044b335fb61e43964736f6c634300080d0033" ) )
      
    
    syntax Field ::= StoreTestField
    
    syntax StoreTestField ::= "IS_TEST" [symbol(), klabel(field_StoreTest_IS_TEST)]
    
    syntax StoreTestField ::= "_failed" [symbol(), klabel(field_StoreTest__failed)]
    
    syntax StoreTestField ::= "IS_SCRIPT" [symbol(), klabel(field_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestField ::= "stdstore" [symbol(), klabel(field_StoreTest_stdstore)]
    
    rule  ( #loc ( S2KStoreTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KStoreTestContract "." S2KStoreTestMethod [function(), symbol(), klabel(method_StoreTest)]
    
    syntax S2KStoreTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_StoreTest_S2KISZUndSCRIPT_)]
    
    syntax S2KStoreTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_StoreTest_S2KISZUndTEST_)]
    
    syntax S2KStoreTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_StoreTest_S2Kfailed_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestAccesses" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestAccesses_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadColdVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadColdVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasLoadWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasLoadWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreColdVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreColdVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestGasStoreWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestGasStoreWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestStoreLoad" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestStoreLoad_)]
    
    syntax S2KStoreTestMethod ::= "S2KtestStoreLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_S2KtestStoreLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_StoreTest_S2Kvm_)]
    
    rule  ( S2KStoreTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadColdVM ( ) => #abiCallData ( "testGasLoadColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadWarmUp ( ) => #abiCallData ( "testGasLoadWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasLoadWarmVM ( ) => #abiCallData ( "testGasLoadWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreColdVM ( ) => #abiCallData ( "testGasStoreColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreWarmUp ( ) => #abiCallData ( "testGasStoreWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestGasStoreWarmVM ( ) => #abiCallData ( "testGasStoreWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestLoadNonExistent ( ) => #abiCallData ( "testLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2KtestStoreLoadNonExistent ( ) => #abiCallData ( "testStoreLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testAccesses()" ) => 159648693 )
      
    
    rule  ( selector ( "testGasLoadColdVM()" ) => 3801282741 )
      
    
    rule  ( selector ( "testGasLoadWarmUp()" ) => 604011046 )
      
    
    rule  ( selector ( "testGasLoadWarmVM()" ) => 2607902342 )
      
    
    rule  ( selector ( "testGasStoreColdVM()" ) => 2309593716 )
      
    
    rule  ( selector ( "testGasStoreWarmUp()" ) => 1546465326 )
      
    
    rule  ( selector ( "testGasStoreWarmVM()" ) => 100073271 )
      
    
    rule  ( selector ( "testLoadNonExistent()" ) => 2275977243 )
      
    
    rule  ( selector ( "testStoreLoad()" ) => 1208516723 )
      
    
    rule  ( selector ( "testStoreLoadNonExistent()" ) => 3912017339 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SymbolicStorageTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStorageTestContract
    
    syntax S2KSymbolicStorageTestContract ::= "S2KSymbolicStorageTest" [symbol(), klabel(contract_SymbolicStorageTest)]
    
      
    
    rule  ( #initBytecode ( S2KSymbolicStorageTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610844806100316000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa614610100578063d6a2ec7614610118578063f8ccbf471461013f578063fa7626d41461015257600080fd5b806330f6beb51461008d5780633a768463146100a257806396127946146100da578063acd69640146100ed575b600080fd5b6100a061009b3660046106e6565b61015f565b005b6100bd737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100e83660046106e6565b610283565b6100a06100fb3660046106e6565b610313565b610108610381565b60405190151581526020016100d1565b6100bd7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6000546101089062010000900460ff1681565b6000546101089060ff1681565b6040516316f02cd760e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae906024015b600060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b5050604051630667f9d760e41b81526001600160a01b03841660048201526024810185905260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d70906044016020604051808303816000875af115801561023f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026391906106ff565b9050600081900361027357600080fd5b61027e8160006104ac565b505050565b604051630667f9d760e41b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190526024820183905260009163667f9d70906044016020604051808303816000875af11580156102de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030291906106ff565b905061030f8160006104ac565b5050565b6000604051610321906106da565b604051809103906000f08015801561033d573d6000803e3d6000fd5b506040516316f02cd760e11b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae906024016101a9565b60008054610100900460ff16156103a15750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104a75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161042f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610753565b60408051601f198184030181529082905261044991610777565b6000604051808303816000865af19150503d8060008114610486576040519150601f19603f3d011682016040523d82523d6000602084013e61048b565b606091505b50915050808060200190518101906104a3919061078a565b9150505b919050565b80821461030f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161051d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161030f737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106c95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106689291602001610753565b60408051601f198184030181529082905261068291610777565b6000604051808303816000865af19150503d80600081146106bf576040519150601f19603f3d011682016040523d82523d6000602084013e6106c4565b606091505b505050505b6000805461ff001916610100179055565b6062806107ad83390190565b6000602082840312156106f857600080fd5b5035919050565b60006020828403121561071157600080fd5b5051919050565b6000815160005b81811015610739576020818501810151868301520161071f565b81811115610748576000828601525b509290920192915050565b6001600160e01b031983168152600061076f6004830184610718565b949350505050565b60006107838284610718565b9392505050565b60006020828403121561079c57600080fd5b8151801515811461078357600080fdfe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea2646970667358221220b01fd5140807667458d070dad103e011e8122d77aab30db02ef1051ea3c3557564736f6c634300080d0033a26469706673582212205df7ace5945f5654ca9b7b984e9684723f93c2d01954e43618c70e3eba39a1c764736f6c634300080d0033" ) )
      
    
    syntax Field ::= SymbolicStorageTestField
    
    syntax SymbolicStorageTestField ::= "IS_TEST" [symbol(), klabel(field_SymbolicStorageTest_IS_TEST)]
    
    syntax SymbolicStorageTestField ::= "_failed" [symbol(), klabel(field_SymbolicStorageTest__failed)]
    
    syntax SymbolicStorageTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SymbolicStorageTest_IS_SCRIPT)]
    
    syntax SymbolicStorageTestField ::= "stdstore" [symbol(), klabel(field_SymbolicStorageTest_stdstore)]
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KSymbolicStorageTestContract "." S2KSymbolicStorageTestMethod [function(), symbol(), klabel(method_SymbolicStorageTest)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KISZUndSCRIPT_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KISZUndTEST_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kfailed_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kkevm_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestEmptyInitialStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestEmptyInitialStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestFailZUndSymbolicStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_S2KtestFailZUndSymbolicStorage1_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_S2Kvm_)]
    
    rule  ( S2KSymbolicStorageTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestEmptyInitialStorage ( V0_slot : uint256 ) => #abiCallData ( "testEmptyInitialStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestFailZUndSymbolicStorage ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2KtestFailZUndSymbolicStorage1 ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage1" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testEmptyInitialStorage(uint256)" ) => 2517793094 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage(uint256)" ) => 821477045 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage1(uint256)" ) => 2899744320 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SymbolicStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStoreContract
    
    syntax S2KSymbolicStoreContract ::= "S2KSymbolicStore" [symbol(), klabel(contract_SymbolicStore)]
    
      
    
    rule  ( #initBytecode ( S2KSymbolicStore ) => #parseByteStack ( "0x6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea2646970667358221220b01fd5140807667458d070dad103e011e8122d77aab30db02ef1051ea3c3557564736f6c634300080d0033" ) )
      
    
    syntax Field ::= SymbolicStoreField
    
    syntax SymbolicStoreField ::= "testNumber" [symbol(), klabel(field_SymbolicStore_testNumber)]
    
    rule  ( #loc ( S2KSymbolicStore . testNumber ) => 0 )
      

endmodule

module Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestContract
    
    syntax S2KTestContract ::= "S2KTest" [symbol(), klabel(contract_Test)]
    
      
    
    rule  ( #initBytecode ( S2KTest ) => #parseByteStack ( "0x" ) )
      
    
    syntax Field ::= TestField
    
    syntax TestField ::= "IS_TEST" [symbol(), klabel(field_Test_IS_TEST)]
    
    syntax TestField ::= "_failed" [symbol(), klabel(field_Test__failed)]
    
    syntax TestField ::= "IS_SCRIPT" [symbol(), klabel(field_Test_IS_SCRIPT)]
    
    syntax TestField ::= "stdstore" [symbol(), klabel(field_Test_stdstore)]
    
    rule  ( #loc ( S2KTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KTestContract "." S2KTestMethod [function(), symbol(), klabel(method_Test)]
    
    syntax S2KTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Test_S2KISZUndSCRIPT_)]
    
    syntax S2KTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Test_S2KISZUndTEST_)]
    
    syntax S2KTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Test_S2Kfailed_)]
    
    syntax S2KTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_Test_S2Kvm_)]
    
    rule  ( S2KTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module stdError-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdErrorContract
    
    syntax S2KstdErrorContract ::= "S2KstdError" [symbol(), klabel(contract_stdError)]
    
      
    
    rule  ( #initBytecode ( S2KstdError ) => #parseByteStack ( "0x61027761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063ac3d92c611610070578063ac3d92c6146100eb578063b22dc54d14610101578063b67689da14610109578063d160e4de14610111578063fa784a441461011957600080fd5b806305ee8612146100ad57806310332977146100cb5780631de45560146100d35780638995290f146100db578063986c5f68146100e3575b600080fd5b6100b5610121565b6040516100c291906101ec565b60405180910390f35b6100b561015c565b6100b561016e565b6100b5610180565b6100b5610192565b6100b56040518060200160405280600081525081565b6100b56101a4565b6100b56101b6565b6100b56101c8565b6100b56101da565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161012f565b6040516021602482015260440161012f565b6040516011602482015260440161012f565b6040516041602482015260440161012f565b6040516031602482015260440161012f565b6040516051602482015260440161012f565b6040516022602482015260440161012f565b6040516012602482015260440161012f565b600060208083528351808285015260005b81811015610219578581018301518582016040015282016101fd565b8181111561022b576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e8bb02ca3a08351f25aad4c794181a86e18dce0de6fe4ab3b05e5dfbf6eed71164736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KstdErrorContract "." S2KstdErrorMethod [function(), symbol(), klabel(method_stdError)]
    
    syntax S2KstdErrorMethod ::= "S2KarithmeticError" "(" ")" [symbol(), klabel(method_stdError_S2KarithmeticError_)]
    
    syntax S2KstdErrorMethod ::= "S2KassertionError" "(" ")" [symbol(), klabel(method_stdError_S2KassertionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KdivisionError" "(" ")" [symbol(), klabel(method_stdError_S2KdivisionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KencodeStorageError" "(" ")" [symbol(), klabel(method_stdError_S2KencodeStorageError_)]
    
    syntax S2KstdErrorMethod ::= "S2KenumConversionError" "(" ")" [symbol(), klabel(method_stdError_S2KenumConversionError_)]
    
    syntax S2KstdErrorMethod ::= "S2KindexOOBError" "(" ")" [symbol(), klabel(method_stdError_S2KindexOOBError_)]
    
    syntax S2KstdErrorMethod ::= "S2KlowLevelError" "(" ")" [symbol(), klabel(method_stdError_S2KlowLevelError_)]
    
    syntax S2KstdErrorMethod ::= "S2KmemOverflowError" "(" ")" [symbol(), klabel(method_stdError_S2KmemOverflowError_)]
    
    syntax S2KstdErrorMethod ::= "S2KpopError" "(" ")" [symbol(), klabel(method_stdError_S2KpopError_)]
    
    syntax S2KstdErrorMethod ::= "S2KzeroVarError" "(" ")" [symbol(), klabel(method_stdError_S2KzeroVarError_)]
    
    rule  ( S2KstdError . S2KarithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KassertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KdivisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KencodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KenumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KindexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KlowLevelError ( ) => #abiCallData ( "lowLevelError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KmemOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KpopError ( ) => #abiCallData ( "popError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . S2KzeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )
      
    
    rule  ( selector ( "arithmeticError()" ) => 2308253967 )
      
    
    rule  ( selector ( "assertionError()" ) => 271788407 )
      
    
    rule  ( selector ( "divisionError()" ) => 4202187332 )
      
    
    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )
      
    
    rule  ( selector ( "enumConversionError()" ) => 501503328 )
      
    
    rule  ( selector ( "indexOOBError()" ) => 99517970 )
      
    
    rule  ( selector ( "lowLevelError()" ) => 2889716422 )
      
    
    rule  ( selector ( "memOverflowError()" ) => 2557239144 )
      
    
    rule  ( selector ( "popError()" ) => 2989344077 )
      
    
    rule  ( selector ( "zeroVarError()" ) => 3061221850 )
      

endmodule

module stdMath-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdMathContract
    
    syntax S2KstdMathContract ::= "S2KstdMath" [symbol(), klabel(contract_stdMath)]
    
      
    
    rule  ( #initBytecode ( S2KstdMath ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf98577ce0b32656a5e5217e4e1cd38ba175d1beb5612c48924c576afe68acc564736f6c634300080d0033" ) )
      

endmodule

module stdStorage-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdStorageContract
    
    syntax S2KstdStorageContract ::= "S2KstdStorage" [symbol(), klabel(contract_stdStorage)]
    
      
    
    rule  ( #initBytecode ( S2KstdStorage ) => #parseByteStack ( "0x61025961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063535849391461003a575b600080fd5b61004d6100483660046100f2565b61005f565b60405190815260200160405180910390f35b60008060006020855111610074578451610077565b60205b905060005b818110156100d25761008f8160086101bd565b8661009a83886101dc565b815181106100aa576100aa6101f4565b01602001516001600160f81b031916901c9290921791806100ca8161020a565b91505061007c565b5090949350505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561010557600080fd5b823567ffffffffffffffff8082111561011d57600080fd5b818501915085601f83011261013157600080fd5b813581811115610143576101436100dc565b604051601f8201601f19908116603f0116810190838211818310171561016b5761016b6100dc565b8160405282815288602084870101111561018457600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156101d7576101d76101a7565b500290565b600082198211156101ef576101ef6101a7565b500190565b634e487b7160e01b600052603260045260246000fd5b60006001820161021c5761021c6101a7565b506001019056fea264697066735822122005b9009f6d53bab1583d606a325fa82572fcd84de0df02cc7cbf052291ce823c64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KstdStorageContract "." S2KstdStorageMethod [function(), symbol(), klabel(method_stdStorage)]
    
    syntax S2KstdStorageMethod ::= "S2KbytesToBytes32" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_stdStorage_S2KbytesToBytes32_bytes_uint256)]
    
    rule  ( S2KstdStorage . S2KbytesToBytes32 ( V0_b : bytes , V1_offset : uint256 ) => #abiCallData ( "bytesToBytes32" , #bytes ( V0_b ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_b ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( selector ( "bytesToBytes32(bytes,uint256)" ) => 1398294841 )
      

endmodule

module TestNumber-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestNumberContract
    
    syntax S2KTestNumberContract ::= "S2KTestNumber" [symbol(), klabel(contract_TestNumber)]
    
      
    
    rule  ( #initBytecode ( S2KTestNumber ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= TestNumberField
    
    syntax TestNumberField ::= "IS_TEST" [symbol(), klabel(field_TestNumber_IS_TEST)]
    
    syntax TestNumberField ::= "_failed" [symbol(), klabel(field_TestNumber__failed)]
    
    syntax TestNumberField ::= "testNumber" [symbol(), klabel(field_TestNumber_testNumber)]
    
    rule  ( #loc ( S2KTestNumber . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . testNumber ) => 1 )
      
    
    syntax Bytes ::= S2KTestNumberContract "." S2KTestNumberMethod [function(), symbol(), klabel(method_TestNumber)]
    
    syntax S2KTestNumberMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_TestNumber_S2KISZUndTEST_)]
    
    syntax S2KTestNumberMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_TestNumber_S2Kfailed_)]
    
    syntax S2KTestNumberMethod ::= "S2Kt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_TestNumber_S2Kt_uint256)]
    
    syntax S2KTestNumberMethod ::= "S2KtestNumber" "(" ")" [symbol(), klabel(method_TestNumber_S2KtestNumber_)]
    
    rule  ( S2KTestNumber . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . S2Kt ( V0_a : uint256 ) => #abiCallData ( "t" , #uint256 ( V0_a ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_a )
      
    
    rule  ( S2KTestNumber . S2KtestNumber ( ) => #abiCallData ( "testNumber" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "t(uint256)" ) => 2950864753 )
      
    
    rule  ( selector ( "testNumber()" ) => 219771635 )
      

endmodule

module ToStringTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KToStringTestContract
    
    syntax S2KToStringTestContract ::= "S2KToStringTest" [symbol(), klabel(contract_ToStringTest)]
    
      
    
    rule  ( #initBytecode ( S2KToStringTest ) => #parseByteStack ( "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610c57806100316000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806353538af91161006657806353538af9146100fd578063ba414fa614610105578063f0cb13fb1461011d578063f8ccbf4714610125578063fa7626d41461013857600080fd5b806305e65172146100a35780630c35d2ac146100ad578063302ab09d146100b55780633a768463146100bd578063416c8c83146100f5575b600080fd5b6100ab610145565b005b6100ab6101f2565b6100ab610295565b6100d8737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab61034c565b6100ab610497565b61010d610565565b60405190151581526020016100ec565b6100ab610690565b60005461010d9062010000900460ff1681565b60005461010d9060ff1681565b60405163348051d760e11b81526104d26004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024016000604051808303816000875af115801561019e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c691908101906109c1565b90506101ee604051806040016040528060048152602001630c4c8ccd60e21b81525082610737565b5050565b604051631623433d60e31b8152600060048201819052908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b11a19e8906024016000604051808303816000875af1158015610249573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027191908101906109c1565b90506101ee604051806080016040528060428152602001610bb66042913982610737565b604051632b65311f60e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e906024016000604051808303816000875af1158015610300573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032891908101906109c1565b90506101ee6040518060600160405280602a8152602001610bf8602a913982610737565b6040516338ee73ed60e11b815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da906024016000604051808303816000875af11580156103a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103c991908101906109c1565b90506103f1604051806040016040528060048152602001637472756560e01b81525082610737565b6040516338ee73ed60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da906024016000604051808303816000875af1158015610443573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046b91908101906109c1565b90506104946040518060400160405280600581526020016466616c736560d81b81525082610737565b50565b60408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516371aad10d60e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371aad10d906104fa908590600401610a9a565b6000604051808303816000875af1158015610519573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054191908101906109c1565b90506101ee6040518060600160405280602a8152602001610b8c602a913982610737565b60008054610100900460ff16156105855750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561068b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610613917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ab4565b60408051601f198184030181529082905261062d91610ae5565b6000604051808303816000865af19150503d806000811461066a576040519150601f19603f3d011682016040523d82523d6000602084013e61066f565b606091505b50915050808060200190518101906106879190610b01565b9150505b919050565b604051635191620760e11b81526104d1196004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a322c40e906024016000604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261071291908101906109c1565b90506101ee604051806040016040528060058152602001640b4c4c8ccd60da1b815250825b806040516020016107489190610ae5565b604051602081830303815290604052805190602001208260405160200161076f9190610ae5565b60405160208183030381529060405280519060200120146101ee577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107f69060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838260405161082d9190610b23565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516108649190610b57565b60405180910390a16101ee737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561096a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109099291602001610ab4565b60408051601f198184030181529082905261092391610ae5565b6000604051808303816000865af19150503d8060008114610960576040519150601f19603f3d011682016040523d82523d6000602084013e610965565b606091505b505050505b6000805461ff001916610100179055565b634e487b7160e01b600052604160045260246000fd5b60005b838110156109ac578181015183820152602001610994565b838111156109bb576000848401525b50505050565b6000602082840312156109d357600080fd5b815167ffffffffffffffff808211156109eb57600080fd5b818401915084601f8301126109ff57600080fd5b815181811115610a1157610a1161097b565b604051601f8201601f19908116603f01168101908382118183101715610a3957610a3961097b565b81604052828152876020848701011115610a5257600080fd5b610a63836020830160208801610991565b979650505050505050565b60008151808452610a86816020860160208601610991565b601f01601f19169290920160200192915050565b602081526000610aad6020830184610a6e565b9392505050565b6001600160e01b0319831681528151600090610ad7816004850160208701610991565b919091016004019392505050565b60008251610af7818460208701610991565b9190910192915050565b600060208284031215610b1357600080fd5b81518015158114610aad57600080fd5b60408152600a6040820152690808080808081319599d60b21b6060820152608060208201526000610aad6080830184610a6e565b60408152600a6040820152690808080808149a59da1d60b21b6060820152608060208201526000610aad6080830184610a6e56fe307837313039373039656366613931613830363236666633393839643638663637663562316464313264307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030307845413637346664446537313466643937396465334564463046353641413937313642383938656338a26469706673582212204916da434b299df8bee2c18c84a701827ed1efacfebc55d804061dfbffe9494564736f6c634300080d0033" ) )
      
    
    syntax Field ::= ToStringTestField
    
    syntax ToStringTestField ::= "IS_TEST" [symbol(), klabel(field_ToStringTest_IS_TEST)]
    
    syntax ToStringTestField ::= "_failed" [symbol(), klabel(field_ToStringTest__failed)]
    
    syntax ToStringTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestField ::= "stdstore" [symbol(), klabel(field_ToStringTest_stdstore)]
    
    rule  ( #loc ( S2KToStringTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KToStringTestContract "." S2KToStringTestMethod [function(), symbol(), klabel(method_ToStringTest)]
    
    syntax S2KToStringTestMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_ToStringTest_S2KISZUndSCRIPT_)]
    
    syntax S2KToStringTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_ToStringTest_S2KISZUndTEST_)]
    
    syntax S2KToStringTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_ToStringTest_S2Kfailed_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestAddressToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestAddressToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBoolToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBoolToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBytes32ToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBytes32ToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestBytesToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestBytesToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestIntToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestIntToString_)]
    
    syntax S2KToStringTestMethod ::= "S2KtestUint256ToString" "(" ")" [symbol(), klabel(method_ToStringTest_S2KtestUint256ToString_)]
    
    syntax S2KToStringTestMethod ::= "S2Kvm" "(" ")" [symbol(), klabel(method_ToStringTest_S2Kvm_)]
    
    rule  ( S2KToStringTest . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2KtestUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . S2Kvm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testAddressToString()" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString()" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString()" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString()" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString()" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString()" ) => 98980210 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Token-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTokenContract
    
    syntax S2KTokenContract ::= "S2KToken" [symbol(), klabel(contract_Token)]
    
      
    
    rule  ( #initBytecode ( S2KToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004361003e3660046100c9565b610045565b005b610050338383610054565b5050565b6001600160a01b038316600090815260016020526040902054610078908290610117565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546100a890829061012e565b6001600160a01b039092166000908152600160205260409020919091555050565b600080604083850312156100dc57600080fd5b82356001600160a01b03811681146100f357600080fd5b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561012957610129610101565b500390565b6000821982111561014157610141610101565b50019056fea2646970667358221220e48b937e7c9104a0808e115af1ee42e958a0c671314391ceab78b4d1e9009fe964736f6c634300080d0033" ) )
      
    
    syntax Field ::= TokenField
    
    syntax TokenField ::= "x" [symbol(), klabel(field_Token_x)]
    
    syntax TokenField ::= "balances" [symbol(), klabel(field_Token_balances)]
    
    syntax TokenField ::= "allowances" [symbol(), klabel(field_Token_allowances)]
    
    syntax TokenField ::= "name" [symbol(), klabel(field_Token_name)]
    
    syntax TokenField ::= "y" [symbol(), klabel(field_Token_y)]
    
    syntax TokenField ::= "z" [symbol(), klabel(field_Token_z)]
    
    syntax TokenField ::= "a" [symbol(), klabel(field_Token_a)]
    
    syntax TokenField ::= "foos" [symbol(), klabel(field_Token_foos)]
    
    rule  ( #loc ( S2KToken . x ) => 0 )
      
    
    rule  ( #loc ( S2KToken . balances ) => 1 )
      
    
    rule  ( #loc ( S2KToken . allowances ) => 2 )
      
    
    rule  ( #loc ( S2KToken . name ) => 3 )
      
    
    rule  ( #loc ( S2KToken . y ) => 4 )
      
    
    rule  ( #loc ( S2KToken . z ) => 4 )
      
    
    rule  ( #loc ( S2KToken . a ) => 4 )
      
    
    rule  ( #loc ( S2KToken . foos ) => 5 )
      
    
    syntax Bytes ::= S2KTokenContract "." S2KTokenMethod [function(), symbol(), klabel(method_Token)]
    
    syntax S2KTokenMethod ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Token_S2Ktransfer_address_uint256)]
    
    rule  ( S2KToken . S2Ktransfer ( V0_dst : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_dst ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      

endmodule

module BytesTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBytesTypeTestContract
    
    syntax S2KBytesTypeTestContract ::= "S2KBytesTypeTest" [symbol(), klabel(contract_BytesTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KBytesTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610189806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063176854031461006757806395a933ba1461007c578063a7c088351461008f578063ccdc3f4d146100a2578063d6bf2ada1461007c578063ffa9fc7114610067575b600080fd5b61007a6100753660046100f3565b6100b3565b005b61007a61008a36600461010c565b6100c4565b61007a61009d36600461010c565b6100db565b61007a6100b03660046100f3565b50565b60001981106100b0576100b061013d565b60e081901c63ffffffff116100b0576100b061013d565b60e081901c63ffffffff10156100b0576100b061013d565b60006020828403121561010557600080fd5b5035919050565b60006020828403121561011e57600080fd5b81356001600160e01b03198116811461013657600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea26469706673582212208bff25d6d461931d0a12c59230f268b9a1e1fd934e9f2a86c1849c8710dc994f64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KBytesTypeTestContract "." S2KBytesTypeTestMethod [function(), symbol(), klabel(method_BytesTypeTest)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestFailZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestFailZUndbytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestFailZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestFailZUndbytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes32ZUndfail" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes32ZUndfail_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "S2KtestZUndbytes4ZUndfail" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_S2KtestZUndbytes4ZUndfail_bytes4)]
    
    rule  ( S2KBytesTypeTest . S2KtestFailZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "testFail_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestFailZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "testFail_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes32ZUndfail ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32_fail" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . S2KtestZUndbytes4ZUndfail ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4_fail" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( selector ( "testFail_bytes32(bytes32)" ) => 4289330289 )
      
    
    rule  ( selector ( "testFail_bytes4(bytes4)" ) => 3602852570 )
      
    
    rule  ( selector ( "test_bytes32(bytes32)" ) => 3436986189 )
      
    
    rule  ( selector ( "test_bytes32_fail(bytes32)" ) => 392713219 )
      
    
    rule  ( selector ( "test_bytes4(bytes4)" ) => 2814412853 )
      
    
    rule  ( selector ( "test_bytes4_fail(bytes4)" ) => 2510894010 )
      

endmodule

module IntTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KIntTypeTestContract
    
    syntax S2KIntTypeTestContract ::= "S2KIntTypeTest" [symbol(), klabel(contract_IntTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KIntTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061025a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636ad45b2e116100665780636ad45b2e146100e65780636fe1d822146100ad5780637686b9d9146100c0578063a38fa320146100d3578063e3a003ce146100f957600080fd5b80633b5bed8d1461009857806346a322e3146100ad57806349f45c19146100c057806368593cf1146100d3575b600080fd5b6100ab6100a63660046101a8565b61010c565b005b6100ab6100bb3660046101d2565b61012a565b6100ab6100ce3660046101a8565b610140565b6100ab6100e13660046101eb565b61015a565b6100ab6100f43660046101eb565b610175565b6100ab6101073660046101d2565b610191565b600f81900b60016001607f1b0312156101275761012761020e565b50565b806001600160ff1b03136101275761012761020e565b600f81900b60016001607f1b03136101275761012761020e565b600781900b677fffffffffffffff136101275761012761020e565b600781900b677fffffffffffffff12156101275761012761020e565b806001600160ff1b0312156101275761012761020e565b6000602082840312156101ba57600080fd5b813580600f0b81146101cb57600080fd5b9392505050565b6000602082840312156101e457600080fd5b5035919050565b6000602082840312156101fd57600080fd5b81358060070b81146101cb57600080fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220bbab6119f5035c7d8a7eb9eb2a70f3c90363ba23373314b4de9df238301d4f2164736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KIntTypeTestContract "." S2KIntTypeTestMethod [function(), symbol(), klabel(method_IntTypeTest)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint128_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint256_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestFailZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestFailZUndint64_int64)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint128_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint128ZUndfail" "(" Int ":" "int128" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint128ZUndfail_int128)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint256_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint256ZUndfail" "(" Int ":" "int256" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint256ZUndfail_int256)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint64_int64)]
    
    syntax S2KIntTypeTestMethod ::= "S2KtestZUndint64ZUndfail" "(" Int ":" "int64" ")" [symbol(), klabel(method_IntTypeTest_S2KtestZUndint64ZUndfail_int64)]
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint128 ( V0_x : int128 ) => #abiCallData ( "testFail_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint256 ( V0_x : int256 ) => #abiCallData ( "testFail_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestFailZUndint64 ( V0_x : int64 ) => #abiCallData ( "testFail_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint128 ( V0_x : int128 ) => #abiCallData ( "test_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint128ZUndfail ( V0_x : int128 ) => #abiCallData ( "test_int128_fail" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint256 ( V0_x : int256 ) => #abiCallData ( "test_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint256ZUndfail ( V0_x : int256 ) => #abiCallData ( "test_int256_fail" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint64 ( V0_x : int64 ) => #abiCallData ( "test_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KIntTypeTest . S2KtestZUndint64ZUndfail ( V0_x : int64 ) => #abiCallData ( "test_int64_fail" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( selector ( "testFail_int128(int128)" ) => 1988540889 )
      
    
    rule  ( selector ( "testFail_int256(int256)" ) => 1185096419 )
      
    
    rule  ( selector ( "testFail_int64(int64)" ) => 1750678769 )
      
    
    rule  ( selector ( "test_int128(int128)" ) => 995880333 )
      
    
    rule  ( selector ( "test_int128_fail(int128)" ) => 1240751129 )
      
    
    rule  ( selector ( "test_int256(int256)" ) => 3818914766 )
      
    
    rule  ( selector ( "test_int256_fail(int256)" ) => 1877071906 )
      
    
    rule  ( selector ( "test_int64(int64)" ) => 1792301870 )
      
    
    rule  ( selector ( "test_int64_fail(int64)" ) => 2744099616 )
      

endmodule

module UintTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KUintTypeTestContract
    
    syntax S2KUintTypeTestContract ::= "S2KUintTypeTest" [symbol(), klabel(contract_UintTypeTest)]
    
      
    
    rule  ( #initBytecode ( S2KUintTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50611537806100206000396000f3fe608060405234801561001057600080fd5b50600436106105305760003560e01c80639034111c116102af578063c32ac8df11610172578063dc3a57f0116100d9578063f12bce4c11610092578063f12bce4c14610924578063f2f9691c1461089f578063f4566ec31461068d578063f7c0d17c146109bc578063f9126fa1146105f5578063f930f01c1461099657600080fd5b8063dc3a57f0146109a9578063e4d5122b146109bc578063e4f24a3f146109cf578063e920ae5914610853578063eb92aaa9146107e1578063ef35afd1146109e257600080fd5b8063d316d6851161012b578063d316d68514610583578063d3d8df2314610710578063d56555a814610911578063d606851214610983578063d822867414610996578063db522592146108eb57600080fd5b8063c32ac8df14610970578063c3aea4171461067a578063c415e5d5146107ce578063c7ce39e11461094a578063ccd4bffe1461081a578063d2b7065b146105cf57600080fd5b8063aac485ac11610216578063b9f3c162116101cf578063b9f3c16214610937578063bc8ed9a61461094a578063bde61bde146106ea578063bf6062251461095d578063bf94b1d31461076f578063bfd448f71461065457600080fd5b8063aac485ac146108eb578063aacd089d146108fe578063ae698c7c146107f4578063b09b241f146107a8578063b6fc8d8c14610911578063b82d23b31461092457600080fd5b8063a308298f11610268578063a308298f1461088c578063a315fd391461089f578063a5d0028d146108b2578063a63fc1df146108c5578063a66657e8146108d8578063aa5cd64b146106d757600080fd5b80639034111c146108405780639169462d1461085357806391d4c9ed14610866578063935fc9ff1461080757806395aca5b7146108795780639d24f4be146105bc57600080fd5b80633a5aacb8116103f757806365914c181161035e57806370fd922e1161031757806370fd922e1461081a578063774319e7146106a0578063790714c21461082d5780637abd93aa146106c45780637eaa7a22146107365780638acb32de1461062e57600080fd5b806365914c18146107bb57806365dfa08c146107ce57806367b70aa3146107e15780636cf6fd10146107f45780636d232e6d146106085780636f3d57cc1461080757600080fd5b80634b3cfeb1116103b05780634b3cfeb11461075c5780634cdd512b1461076f5780634d69982e146107825780634e6e74f914610795578063617db4a3146107a8578063647c8823146105a957600080fd5b80633a5aacb8146106ea5780633a8b8b96146106fd57806340639d891461071057806348fa8be7146107235780634a27f445146107365780634a5ad1a61461074957600080fd5b80631eb6018f1161049b5780632f300e61116104545780632f300e611461067a578063304660441461068d57806330dfd541146106a057806332beb385146106b3578063342fae45146106c45780633991d7d4146106d757600080fd5b80631eb6018f14610608578063227ccddb1461061b5780632618b7101461062e57806327a2a08c146106415780632dd4c189146106545780632ec723c91461066757600080fd5b806314673504116104ed578063146735041461059657806314bbddc9146105a957806318a442de146105bc57806319148a5d146105cf5780631b1620f9146105e25780631d4c35a4146105f557600080fd5b80630289569714610535578063037f147d1461054a57806305f6eb211461055d578063078f9137146105705780630bd5c5d21461058357806312ffa78914610535575b600080fd5b610548610543366004610fdf565b6109f5565b005b610548610558366004611013565b610a11565b61054861056b366004610fdf565b610a2a565b61054861057e36600461103c565b610a47565b610548610591366004611065565b610a60565b6105486105a436600461108e565b610a78565b6105486105b73660046110b7565b610a91565b6105486105ca3660046110de565b610aa7565b6105486105dd366004611107565b610abf565b6105486105f0366004611130565b610ad7565b610548610603366004611130565b610aef565b610548610616366004611158565b610b06565b610548610629366004611181565b610b1e565b61054861063c3660046111aa565b610b37565b61054861064f366004611158565b610b4b565b6105486106623660046111cf565b610b64565b6105486106753660046111f5565b610b79565b6105486106883660046111f5565b610b92565b61054861069b36600461121e565b610baa565b6105486106ae366004611247565b610bc2565b6105486106c1366004611271565b50565b6105486106d236600461128a565b610bdb565b6105486106e536600461103c565b610bf5565b6105486106f8366004611013565b610c0d565b61054861070b3660046111cf565b610c25565b61054861071e36600461108e565b610c3b565b6105486107313660046112b5565b610c53565b6105486107443660046112de565b610c6c565b610548610757366004611065565b610c84565b61054861076a366004611307565b610c9d565b61054861077d36600461132b565b610cb1565b6105486107903660046110b7565b610cc9565b6105486107a3366004611354565b610ce0565b6105486107b6366004611354565b610cf9565b6105486107c936600461137d565b610d11565b6105486107dc3660046113a0565b610d24565b6105486107ef3660046113c9565b610d3c565b6105486108023660046113f2565b610d54565b61054861081536600461141b565b610d6c565b610548610828366004611271565b610d84565b61054861083b3660046113a0565b610d95565b61054861084e36600461121e565b610dae565b6105486108613660046112b5565b610dc7565b61054861087436600461132b565b610ddf565b610548610887366004611247565b610df8565b61054861089a3660046112de565b610e12565b6105486108ad366004611307565b610e2b565b6105486108c0366004611444565b610e3e565b6105486108d33660046110de565b610e57565b6105486108e6366004611107565b610e70565b6105486108f936600461137d565b610e89565b61054861090c3660046111aa565b610e9b565b61054861091f366004611181565b610eb0565b61054861093236600461146d565b610ec8565b6105486109453660046113f2565b610ee0565b610548610958366004611444565b610ef9565b61054861096b36600461141b565b610f11565b61054861097e36600461146d565b610f2a565b6105486109913660046113c9565b610f43565b6105486109a4366004611496565b610f5c565b6105486109b736600461128a565b610f77565b6105486109ca3660046114c2565b610f92565b6105486109dd366004611496565b610faa565b6105486109f03660046114c2565b610fc6565b6affffffffffffffffffffff808216106106c1576106c16114eb565b66ffffffffffffff80821611156106c1576106c16114eb565b6affffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160c01b0380821611156106c1576106c16114eb565b6001600160701b03808216106106c1576106c16114eb565b6001600160c81b0380821611156106c1576106c16114eb565b64ffffffffff808216106106c1576106c16114eb565b6001600160a81b03808216106106c1576106c16114eb565b6001600160e01b03808216106106c1576106c16114eb565b65ffffffffffff80821611156106c1576106c16114eb565b65ffffffffffff808216106106c1576106c16114eb565b6001600160d01b03808216106106c1576106c16114eb565b6001600160f81b0380821611156106c1576106c16114eb565b62ffffff808216106106c1576106c16114eb565b6001600160d01b0380821611156106c1576106c16114eb565b63ffffffff808216106106c1576106c16114eb565b6001600160801b0380821611156106c1576106c16114eb565b6001600160801b03808216106106c1576106c16114eb565b6001600160b81b03808216106106c1576106c16114eb565b67ffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff808216106106c1576106c16114eb565b6001600160c01b03808216106106c1576106c16114eb565b66ffffffffffffff808216106106c1576106c16114eb565b63ffffffff80821611156106c1576106c16114eb565b6001600160c81b03808216106106c1576106c16114eb565b6001600160901b0380821611156106c1576106c16114eb565b6001600160d81b03808216106106c1576106c16114eb565b6001600160701b0380821611156106c1576106c16114eb565b61ffff80821611156106c1576106c16114eb565b6001600160a01b03808216106106c1576106c16114eb565b64ffffffffff80821611156106c1576106c16114eb565b6001600160601b0380821611156106c1576106c16114eb565b6001600160601b03808216106106c1576106c16114eb565b60ff80821611156106c1576106c16114eb565b6001600160681b03808216106106c1576106c16114eb565b6001600160881b03808216106106c1576106c16114eb565b6001600160b01b03808216106106c1576106c16114eb565b6001600160981b03808216106106c1576106c16114eb565b80600019116106c1576106c16114eb565b6001600160681b0380821611156106c1576106c16114eb565b6001600160b81b0380821611156106c1576106c16114eb565b6001600160901b03808216106106c1576106c16114eb565b6001600160a01b0380821611156106c1576106c16114eb565b67ffffffffffffffff80821611156106c1576106c16114eb565b6001600160d81b0380821611156106c1576106c16114eb565b61ffff808216106106c1576106c16114eb565b6001600160e81b0380821611156106c1576106c16114eb565b6001600160a81b0380821611156106c1576106c16114eb565b6001600160e01b0380821611156106c1576106c16114eb565b60ff808216106106c1576106c16114eb565b62ffffff80821611156106c1576106c16114eb565b6001600160f81b03808216106106c1576106c16114eb565b6001600160f01b03808216106106c1576106c16114eb565b6001600160b01b0380821611156106c1576106c16114eb565b6001600160e81b03808216106106c1576106c16114eb565b6001600160981b0380821611156106c1576106c16114eb565b6001600160f01b0380821611156106c1576106c16114eb565b6001600160881b0380821611156106c1576106c16114eb565b69ffffffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b03808216106106c1576106c16114eb565b69ffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b0380821611156106c1576106c16114eb565b600060208284031215610ff157600080fd5b81356affffffffffffffffffffff8116811461100c57600080fd5b9392505050565b60006020828403121561102557600080fd5b813566ffffffffffffff8116811461100c57600080fd5b60006020828403121561104e57600080fd5b81356001600160c01b038116811461100c57600080fd5b60006020828403121561107757600080fd5b81356001600160701b038116811461100c57600080fd5b6000602082840312156110a057600080fd5b81356001600160c81b038116811461100c57600080fd5b6000602082840312156110c957600080fd5b813564ffffffffff8116811461100c57600080fd5b6000602082840312156110f057600080fd5b81356001600160a81b038116811461100c57600080fd5b60006020828403121561111957600080fd5b81356001600160e01b038116811461100c57600080fd5b60006020828403121561114257600080fd5b813565ffffffffffff8116811461100c57600080fd5b60006020828403121561116a57600080fd5b81356001600160d01b038116811461100c57600080fd5b60006020828403121561119357600080fd5b81356001600160f81b038116811461100c57600080fd5b6000602082840312156111bc57600080fd5b813562ffffff8116811461100c57600080fd5b6000602082840312156111e157600080fd5b813563ffffffff8116811461100c57600080fd5b60006020828403121561120757600080fd5b81356001600160801b038116811461100c57600080fd5b60006020828403121561123057600080fd5b81356001600160b81b038116811461100c57600080fd5b60006020828403121561125957600080fd5b813567ffffffffffffffff8116811461100c57600080fd5b60006020828403121561128357600080fd5b5035919050565b60006020828403121561129c57600080fd5b813568ffffffffffffffffff8116811461100c57600080fd5b6000602082840312156112c757600080fd5b81356001600160901b038116811461100c57600080fd5b6000602082840312156112f057600080fd5b81356001600160d81b038116811461100c57600080fd5b60006020828403121561131957600080fd5b813561ffff8116811461100c57600080fd5b60006020828403121561133d57600080fd5b81356001600160a01b038116811461100c57600080fd5b60006020828403121561136657600080fd5b81356001600160601b038116811461100c57600080fd5b60006020828403121561138f57600080fd5b813560ff8116811461100c57600080fd5b6000602082840312156113b257600080fd5b81356001600160681b038116811461100c57600080fd5b6000602082840312156113db57600080fd5b81356001600160881b038116811461100c57600080fd5b60006020828403121561140457600080fd5b81356001600160b01b038116811461100c57600080fd5b60006020828403121561142d57600080fd5b81356001600160981b038116811461100c57600080fd5b60006020828403121561145657600080fd5b81356001600160e81b038116811461100c57600080fd5b60006020828403121561147f57600080fd5b81356001600160f01b038116811461100c57600080fd5b6000602082840312156114a857600080fd5b813569ffffffffffffffffffff8116811461100c57600080fd5b6000602082840312156114d457600080fd5b81356001600160781b038116811461100c57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212205a24e247bd493ed4a807a1301b5eb935e21176a019a8b97aaa595fe0760dc2de64736f6c634300080d0033" ) )
      
    
    syntax Bytes ::= S2KUintTypeTestContract "." S2KUintTypeTestMethod [function(), symbol(), klabel(method_UintTypeTest)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestFailZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestFailZUnduint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint104ZUndfail" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint104ZUndfail_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint112ZUndfail" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint112ZUndfail_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint120ZUndfail" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint120ZUndfail_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint128ZUndfail" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint128ZUndfail_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint136ZUndfail" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint136ZUndfail_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint144ZUndfail" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint144ZUndfail_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint152ZUndfail" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint152ZUndfail_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint160ZUndfail" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint160ZUndfail_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint168ZUndfail" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint168ZUndfail_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint16ZUndfail" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint16ZUndfail_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint176ZUndfail" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint176ZUndfail_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint184ZUndfail" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint184ZUndfail_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint192ZUndfail" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint192ZUndfail_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint200ZUndfail" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint200ZUndfail_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint208ZUndfail" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint208ZUndfail_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint216ZUndfail" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint216ZUndfail_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint224ZUndfail" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint224ZUndfail_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint232ZUndfail" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint232ZUndfail_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint240ZUndfail" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint240ZUndfail_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint248ZUndfail" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint248ZUndfail_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint24ZUndfail" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint24ZUndfail_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint256ZUndfail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint256ZUndfail_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint32ZUndfail" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint32ZUndfail_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint40ZUndfail" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint40ZUndfail_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint48ZUndfail" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint48ZUndfail_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint56ZUndfail" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint56ZUndfail_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint64ZUndfail" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint64ZUndfail_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint72ZUndfail" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint72ZUndfail_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint80ZUndfail" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint80ZUndfail_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint88ZUndfail" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint88ZUndfail_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint8ZUndfail" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint8ZUndfail_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "S2KtestZUnduint96ZUndfail" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_S2KtestZUnduint96ZUndfail_uint96)]
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "testFail_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "testFail_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "testFail_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "testFail_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "testFail_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "testFail_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "testFail_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "testFail_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "testFail_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "testFail_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "testFail_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "testFail_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "testFail_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "testFail_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "testFail_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "testFail_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "testFail_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "testFail_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "testFail_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "testFail_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "testFail_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "testFail_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "testFail_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "testFail_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "testFail_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "testFail_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "testFail_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "testFail_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "testFail_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "testFail_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "testFail_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestFailZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "testFail_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "test_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint104ZUndfail ( V0_x : uint104 ) => #abiCallData ( "test_uint104_fail" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "test_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint112ZUndfail ( V0_x : uint112 ) => #abiCallData ( "test_uint112_fail" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "test_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint120ZUndfail ( V0_x : uint120 ) => #abiCallData ( "test_uint120_fail" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "test_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint128ZUndfail ( V0_x : uint128 ) => #abiCallData ( "test_uint128_fail" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "test_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint136ZUndfail ( V0_x : uint136 ) => #abiCallData ( "test_uint136_fail" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "test_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint144ZUndfail ( V0_x : uint144 ) => #abiCallData ( "test_uint144_fail" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "test_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint152ZUndfail ( V0_x : uint152 ) => #abiCallData ( "test_uint152_fail" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "test_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "test_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint160ZUndfail ( V0_x : uint160 ) => #abiCallData ( "test_uint160_fail" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "test_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint168ZUndfail ( V0_x : uint168 ) => #abiCallData ( "test_uint168_fail" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint16ZUndfail ( V0_x : uint16 ) => #abiCallData ( "test_uint16_fail" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "test_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint176ZUndfail ( V0_x : uint176 ) => #abiCallData ( "test_uint176_fail" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "test_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint184ZUndfail ( V0_x : uint184 ) => #abiCallData ( "test_uint184_fail" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "test_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint192ZUndfail ( V0_x : uint192 ) => #abiCallData ( "test_uint192_fail" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "test_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint200ZUndfail ( V0_x : uint200 ) => #abiCallData ( "test_uint200_fail" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "test_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint208ZUndfail ( V0_x : uint208 ) => #abiCallData ( "test_uint208_fail" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "test_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint216ZUndfail ( V0_x : uint216 ) => #abiCallData ( "test_uint216_fail" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "test_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint224ZUndfail ( V0_x : uint224 ) => #abiCallData ( "test_uint224_fail" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "test_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint232ZUndfail ( V0_x : uint232 ) => #abiCallData ( "test_uint232_fail" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "test_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "test_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint240ZUndfail ( V0_x : uint240 ) => #abiCallData ( "test_uint240_fail" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "test_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint248ZUndfail ( V0_x : uint248 ) => #abiCallData ( "test_uint248_fail" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint24ZUndfail ( V0_x : uint24 ) => #abiCallData ( "test_uint24_fail" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "test_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint256ZUndfail ( V0_x : uint256 ) => #abiCallData ( "test_uint256_fail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "test_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint32ZUndfail ( V0_x : uint32 ) => #abiCallData ( "test_uint32_fail" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "test_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint40ZUndfail ( V0_x : uint40 ) => #abiCallData ( "test_uint40_fail" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "test_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint48ZUndfail ( V0_x : uint48 ) => #abiCallData ( "test_uint48_fail" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "test_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint56ZUndfail ( V0_x : uint56 ) => #abiCallData ( "test_uint56_fail" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "test_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint64ZUndfail ( V0_x : uint64 ) => #abiCallData ( "test_uint64_fail" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "test_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint72ZUndfail ( V0_x : uint72 ) => #abiCallData ( "test_uint72_fail" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "test_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "test_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint80ZUndfail ( V0_x : uint80 ) => #abiCallData ( "test_uint80_fail" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "test_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint88ZUndfail ( V0_x : uint88 ) => #abiCallData ( "test_uint88_fail" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint8ZUndfail ( V0_x : uint8 ) => #abiCallData ( "test_uint8_fail" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "test_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . S2KtestZUnduint96ZUndfail ( V0_x : uint96 ) => #abiCallData ( "test_uint96_fail" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( selector ( "testFail_uint104(uint104)" ) => 1709154444 )
      
    
    rule  ( selector ( "testFail_uint112(uint112)" ) => 3541489285 )
      
    
    rule  ( selector ( "testFail_uint120(uint120)" ) => 3839169067 )
      
    
    rule  ( selector ( "testFail_uint128(uint128)" ) => 791678561 )
      
    
    rule  ( selector ( "testFail_uint136(uint136)" ) => 3952257705 )
      
    
    rule  ( selector ( "testFail_uint144(uint144)" ) => 2439595565 )
      
    
    rule  ( selector ( "testFail_uint152(uint152)" ) => 1866291148 )
      
    
    rule  ( selector ( "testFail_uint16(uint16)" ) => 4076431644 )
      
    
    rule  ( selector ( "testFail_uint160(uint160)" ) => 3214193107 )
      
    
    rule  ( selector ( "testFail_uint168(uint168)" ) => 2636444862 )
      
    
    rule  ( selector ( "testFail_uint176(uint176)" ) => 1828125968 )
      
    
    rule  ( selector ( "testFail_uint184(uint184)" ) => 4099305155 )
      
    
    rule  ( selector ( "testFail_uint192(uint192)" ) => 2858210891 )
      
    
    rule  ( selector ( "testFail_uint200(uint200)" ) => 1080270217 )
      
    
    rule  ( selector ( "testFail_uint208(uint208)" ) => 1831022189 )
      
    
    rule  ( selector ( "testFail_uint216(uint216)" ) => 2125101602 )
      
    
    rule  ( selector ( "testFail_uint224(uint224)" ) => 420776541 )
      
    
    rule  ( selector ( "testFail_uint232(uint232)" ) => 3163478438 )
      
    
    rule  ( selector ( "testFail_uint24(uint24)" ) => 639153936 )
      
    
    rule  ( selector ( "testFail_uint240(uint240)" ) => 3089966003 )
      
    
    rule  ( selector ( "testFail_uint248(uint248)" ) => 3070004620 )
      
    
    rule  ( selector ( "testFail_uint256(uint256)" ) => 3436494846 )
      
    
    rule  ( selector ( "testFail_uint32(uint32)" ) => 3218360567 )
      
    
    rule  ( selector ( "testFail_uint40(uint40)" ) => 347856329 )
      
    
    rule  ( selector ( "testFail_uint48(uint48)" ) => 4178735009 )
      
    
    rule  ( selector ( "testFail_uint56(uint56)" ) => 979020984 )
      
    
    rule  ( selector ( "testFail_uint64(uint64)" ) => 819975489 )
      
    
    rule  ( selector ( "testFail_uint72(uint72)" ) => 2059244458 )
      
    
    rule  ( selector ( "testFail_uint8(uint8)" ) => 3679593874 )
      
    
    rule  ( selector ( "testFail_uint80(uint80)" ) => 4180733980 )
      
    
    rule  ( selector ( "testFail_uint88(uint88)" ) => 42555031 )
      
    
    rule  ( selector ( "testFail_uint96(uint96)" ) => 2962957343 )
      
    
    rule  ( selector ( "test_uint104(uint104)" ) => 2030507202 )
      
    
    rule  ( selector ( "test_uint104_fail(uint104)" ) => 3289769429 )
      
    
    rule  ( selector ( "test_uint112(uint112)" ) => 1247465894 )
      
    
    rule  ( selector ( "test_uint112_fail(uint112)" ) => 198559186 )
      
    
    rule  ( selector ( "test_uint120(uint120)" ) => 4013273041 )
      
    
    rule  ( selector ( "test_uint120_fail(uint120)" ) => 4156608892 )
      
    
    rule  ( selector ( "test_uint128(uint128)" ) => 784802761 )
      
    
    rule  ( selector ( "test_uint128_fail(uint128)" ) => 3283002391 )
      
    
    rule  ( selector ( "test_uint136(uint136)" ) => 3590751506 )
      
    
    rule  ( selector ( "test_uint136_fail(uint136)" ) => 1740049059 )
      
    
    rule  ( selector ( "test_uint144(uint144)" ) => 1224379367 )
      
    
    rule  ( selector ( "test_uint144_fail(uint144)" ) => 3911233113 )
      
    
    rule  ( selector ( "test_uint152(uint152)" ) => 3210764837 )
      
    
    rule  ( selector ( "test_uint152_fail(uint152)" ) => 2472528383 )
      
    
    rule  ( selector ( "test_uint16(uint16)" ) => 1262288561 )
      
    
    rule  ( selector ( "test_uint160(uint160)" ) => 2446641645 )
      
    
    rule  ( selector ( "test_uint160_fail(uint160)" ) => 1289572651 )
      
    
    rule  ( selector ( "test_uint168(uint168)" ) => 2789196255 )
      
    
    rule  ( selector ( "test_uint168_fail(uint168)" ) => 413418206 )
      
    
    rule  ( selector ( "test_uint16_fail(uint16)" ) => 2736127289 )
      
    
    rule  ( selector ( "test_uint176(uint176)" ) => 3119759714 )
      
    
    rule  ( selector ( "test_uint176_fail(uint176)" ) => 2926152828 )
      
    
    rule  ( selector ( "test_uint184(uint184)" ) => 2419331356 )
      
    
    rule  ( selector ( "test_uint184_fail(uint184)" ) => 809918532 )
      
    
    rule  ( selector ( "test_uint192(uint192)" ) => 126849335 )
      
    
    rule  ( selector ( "test_uint192_fail(uint192)" ) => 965859284 )
      
    
    rule  ( selector ( "test_uint200(uint200)" ) => 342308100 )
      
    
    rule  ( selector ( "test_uint200_fail(uint200)" ) => 3554205475 )
      
    
    rule  ( selector ( "test_uint208(uint208)" ) => 664969356 )
      
    
    rule  ( selector ( "test_uint208_fail(uint208)" ) => 515244431 )
      
    
    rule  ( selector ( "test_uint216(uint216)" ) => 2735221135 )
      
    
    rule  ( selector ( "test_uint216_fail(uint216)" ) => 1244132421 )
      
    
    rule  ( selector ( "test_uint224(uint224)" ) => 2791725032 )
      
    
    rule  ( selector ( "test_uint224_fail(uint224)" ) => 3535210075 )
      
    
    rule  ( selector ( "test_uint232(uint232)" ) => 2781872781 )
      
    
    rule  ( selector ( "test_uint232_fail(uint232)" ) => 3352181217 )
      
    
    rule  ( selector ( "test_uint24(uint24)" ) => 2865563805 )
      
    
    rule  ( selector ( "test_uint240(uint240)" ) => 3274361055 )
      
    
    rule  ( selector ( "test_uint240_fail(uint240)" ) => 4046179916 )
      
    
    rule  ( selector ( "test_uint248(uint248)" ) => 578604507 )
      
    
    rule  ( selector ( "test_uint248_fail(uint248)" ) => 3580188072 )
      
    
    rule  ( selector ( "test_uint24_fail(uint24)" ) => 2328572638 )
      
    
    rule  ( selector ( "test_uint256(uint256)" ) => 851358597 )
      
    
    rule  ( selector ( "test_uint256_fail(uint256)" ) => 1895666222 )
      
    
    rule  ( selector ( "test_uint32(uint32)" ) => 982223766 )
      
    
    rule  ( selector ( "test_uint32_fail(uint32)" ) => 768917897 )
      
    
    rule  ( selector ( "test_uint40(uint40)" ) => 1298765870 )
      
    
    rule  ( selector ( "test_uint40_fail(uint40)" ) => 1685882915 )
      
    
    rule  ( selector ( "test_uint48(uint48)" ) => 454435065 )
      
    
    rule  ( selector ( "test_uint48_fail(uint48)" ) => 491533732 )
      
    
    rule  ( selector ( "test_uint56(uint56)" ) => 58659965 )
      
    
    rule  ( selector ( "test_uint56_fail(uint56)" ) => 3185974238 )
      
    
    rule  ( selector ( "test_uint64(uint64)" ) => 2511119799 )
      
    
    rule  ( selector ( "test_uint64_fail(uint64)" ) => 2000886247 )
      
    
    rule  ( selector ( "test_uint72(uint72)" ) => 3694811120 )
      
    
    rule  ( selector ( "test_uint72_fail(uint72)" ) => 875540037 )
      
    
    rule  ( selector ( "test_uint8(uint8)" ) => 1704021016 )
      
    
    rule  ( selector ( "test_uint80(uint80)" ) => 3841083967 )
      
    
    rule  ( selector ( "test_uint80_fail(uint80)" ) => 3626141300 )
      
    
    rule  ( selector ( "test_uint88(uint88)" ) => 100068129 )
      
    
    rule  ( selector ( "test_uint88_fail(uint88)" ) => 318744457 )
      
    
    rule  ( selector ( "test_uint8_fail(uint8)" ) => 2865005996 )
      
    
    rule  ( selector ( "test_uint96(uint96)" ) => 1315861753 )
      
    
    rule  ( selector ( "test_uint96_fail(uint96)" ) => 1635628195 )
      

endmodule

module Vm-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KVmContract
    
    syntax S2KVmContract ::= "S2KVm" [symbol(), klabel(contract_Vm)]
    
      
    
    rule  ( #initBytecode ( S2KVm ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KVmContract "." S2KVmMethod [function(), symbol(), klabel(method_Vm)]
    
    syntax S2KVmMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kaccesses_address)]
    
    syntax S2KVmMethod ::= "S2KactiveFork" "(" ")" [symbol(), klabel(method_Vm_S2KactiveFork_)]
    
    syntax S2KVmMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kaddr_uint256)]
    
    syntax S2KVmMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kassume_bool)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_)]
    
    syntax S2KVmMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_address)]
    
    syntax S2KVmMethod ::= "S2KchainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KchainId_uint256)]
    
    syntax S2KVmMethod ::= "S2KclearMockedCalls" "(" ")" [symbol(), klabel(method_Vm_S2KclearMockedCalls_)]
    
    syntax S2KVmMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcloseFile_string)]
    
    syntax S2KVmMethod ::= "S2Kcoinbase" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kcoinbase_address)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string)]
    
    syntax S2KVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string_uint256)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string)]
    
    syntax S2KVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string_uint256)]
    
    syntax S2KVmMethod ::= "S2Kdeal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kdeal_address_uint256)]
    
    syntax S2KVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_string_uint32)]
    
    syntax S2KVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_uint32)]
    
    syntax S2KVmMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string)]
    
    syntax S2KVmMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string)]
    
    syntax S2KVmMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string)]
    
    syntax S2KVmMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string)]
    
    syntax S2KVmMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string)]
    
    syntax S2KVmMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string_string)]
    
    syntax S2KVmMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string)]
    
    syntax S2KVmMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string_string)]
    
    syntax S2KVmMethod ::= "S2Ketch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2Ketch_address_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool)]
    
    syntax S2KVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool_address)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes)]
    
    syntax S2KVmMethod ::= "S2KexpectRevert" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes4)]
    
    syntax S2KVmMethod ::= "S2Kfee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kfee_uint256)]
    
    syntax S2KVmMethod ::= "S2Kffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2Kffi_string[])]
    
    syntax S2KVmMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KgetCode_string)]
    
    syntax S2KVmMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KgetNonce_address)]
    
    syntax S2KVmMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_Vm_S2KgetRecordedLogs_)]
    
    syntax S2KVmMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2Klabel_address_string)]
    
    syntax S2KVmMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kload_address_bytes32)]
    
    syntax S2KVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_uint256_bytes_bytes)]
    
    syntax S2KVmMethod ::= "S2Kprank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address)]
    
    syntax S2KVmMethod ::= "S2Kprank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address_address)]
    
    syntax S2KVmMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadFile_string)]
    
    syntax S2KVmMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadLine_string)]
    
    syntax S2KVmMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_Vm_S2Krecord_)]
    
    syntax S2KVmMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_Vm_S2KrecordLogs_)]
    
    syntax S2KVmMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KremoveFile_string)]
    
    syntax S2KVmMethod ::= "S2KrevertTo" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrevertTo_uint256)]
    
    syntax S2KVmMethod ::= "S2Kroll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kroll_uint256)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256)]
    
    syntax S2KVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256_uint256)]
    
    syntax S2KVmMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KrpcUrl_string)]
    
    syntax S2KVmMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_Vm_S2KrpcUrls_)]
    
    syntax S2KVmMethod ::= "S2KselectFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KselectFork_uint256)]
    
    syntax S2KVmMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KsetEnv_string_string)]
    
    syntax S2KVmMethod ::= "S2KsetNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KsetNonce_address_uint64)]
    
    syntax S2KVmMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ksign_uint256_bytes32)]
    
    syntax S2KVmMethod ::= "S2Ksnapshot" "(" ")" [symbol(), klabel(method_Vm_S2Ksnapshot_)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_)]
    
    syntax S2KVmMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_address)]
    
    syntax S2KVmMethod ::= "S2KstartPrank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address)]
    
    syntax S2KVmMethod ::= "S2KstartPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address_address)]
    
    syntax S2KVmMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstopBroadcast_)]
    
    syntax S2KVmMethod ::= "S2KstopPrank" "(" ")" [symbol(), klabel(method_Vm_S2KstopPrank_)]
    
    syntax S2KVmMethod ::= "S2Kstore" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kstore_address_bytes32_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KtoString_address)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KtoString_bool)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes32)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KtoString_int256)]
    
    syntax S2KVmMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KtoString_uint256)]
    
    syntax S2KVmMethod ::= "S2Kwarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kwarp_uint256)]
    
    syntax S2KVmMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteFile_string_string)]
    
    syntax S2KVmMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteLine_string_string)]
    
    rule  ( S2KVm . S2Kaccesses ( V0_ : address ) => #abiCallData ( "accesses" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KactiveFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kaddr ( V0_ : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2Kassume ( V0_ : bool ) => #abiCallData ( "assume" , #bool ( V0_ ) , .TypedArgs ) )
       ensures #rangeBool ( V0_ )
      
    
    rule  ( S2KVm . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kbroadcast ( V0_ : address ) => #abiCallData ( "broadcast" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KchainId ( V0_ : uint256 ) => #abiCallData ( "chainId" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KclearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcloseFile ( V0_ : string ) => #abiCallData ( "closeFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kcoinbase ( V0_ : address ) => #abiCallData ( "coinbase" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_ : string ) => #abiCallData ( "createFork" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcreateFork ( V0_ : string , V1_ : uint256 ) => #abiCallData ( "createFork" , #string ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_ )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_ : string ) => #abiCallData ( "createSelectFork" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KcreateSelectFork ( V0_ : string , V1_ : uint256 ) => #abiCallData ( "createSelectFork" , #string ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_ )
      
    
    rule  ( S2KVm . S2Kdeal ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "deal" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2KderiveKey ( V0_ : string , V1_ : string , V2_ : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_ ) , #string ( V1_ ) , #uint32 ( V2_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_ )
      
    
    rule  ( S2KVm . S2KderiveKey ( V0_ : string , V1_ : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_ ) , #uint32 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_ )
      
    
    rule  ( S2KVm . S2KenvAddress ( V0_ : string ) => #abiCallData ( "envAddress" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "envAddress" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBool ( V0_ : string ) => #abiCallData ( "envBool" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBool ( V0_ : string , V1_ : string ) => #abiCallData ( "envBool" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes ( V0_ : string ) => #abiCallData ( "envBytes" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "envBytes" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes32 ( V0_ : string ) => #abiCallData ( "envBytes32" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "envBytes32" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvInt ( V0_ : string ) => #abiCallData ( "envInt" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvInt ( V0_ : string , V1_ : string ) => #abiCallData ( "envInt" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvString ( V0_ : string ) => #abiCallData ( "envString" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvString ( V0_ : string , V1_ : string ) => #abiCallData ( "envString" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvUint ( V0_ : string ) => #abiCallData ( "envUint" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KenvUint ( V0_ : string , V1_ : string ) => #abiCallData ( "envUint" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Ketch ( V0_ : address , V1_ : bytes ) => #abiCallData ( "etch" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KVm . S2KexpectCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_ : bool , V1_ : bool , V2_ : bool , V3_ : bool ) => #abiCallData ( "expectEmit" , #bool ( V0_ ) , #bool ( V1_ ) , #bool ( V2_ ) , #bool ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_ )
       andBool ( #rangeBool ( V1_ )
       andBool ( #rangeBool ( V2_ )
       andBool ( #rangeBool ( V3_ )
               ))))
      
    
    rule  ( S2KVm . S2KexpectEmit ( V0_ : bool , V1_ : bool , V2_ : bool , V3_ : bool , V4_ : address ) => #abiCallData ( "expectEmit" , #bool ( V0_ ) , #bool ( V1_ ) , #bool ( V2_ ) , #bool ( V3_ ) , #address ( V4_ ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_ )
       andBool ( #rangeBool ( V1_ )
       andBool ( #rangeBool ( V2_ )
       andBool ( #rangeBool ( V3_ )
       andBool ( #rangeAddress ( V4_ )
               )))))
      
    
    rule  ( S2KVm . S2KexpectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KexpectRevert ( V0_ : bytes ) => #abiCallData ( "expectRevert" , #bytes ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_ ) )
      
    
    rule  ( S2KVm . S2KexpectRevert ( V0_ : bytes4 ) => #abiCallData ( "expectRevert" , #bytes4 ( V0_ ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_ )
      
    
    rule  ( S2KVm . S2Kfee ( V0_ : uint256 ) => #abiCallData ( "fee" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KgetCode ( V0_ : string ) => #abiCallData ( "getCode" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KgetNonce ( V0_ : address ) => #abiCallData ( "getNonce" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Klabel ( V0_ : address , V1_ : string ) => #abiCallData ( "label" , #address ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2Kload ( V0_ : address , V1_ : bytes32 ) => #abiCallData ( "load" , #address ( V0_ ) , #bytes32 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeBytes ( 32 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2KmockCall ( V0_ : address , V1_ : bytes , V2_ : bytes ) => #abiCallData ( "mockCall" , #address ( V0_ ) , #bytes ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KVm . S2KmockCall ( V0_ : address , V1_ : uint256 , V2_ : bytes , V3_ : bytes ) => #abiCallData ( "mockCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , #bytes ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_ ) )
               ))))
      
    
    rule  ( S2KVm . S2Kprank ( V0_ : address ) => #abiCallData ( "prank" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2Kprank ( V0_ : address , V1_ : address ) => #abiCallData ( "prank" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KVm . S2KreadFile ( V0_ : string ) => #abiCallData ( "readFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KreadLine ( V0_ : string ) => #abiCallData ( "readLine" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KremoveFile ( V0_ : string ) => #abiCallData ( "removeFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrevertTo ( V0_ : uint256 ) => #abiCallData ( "revertTo" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2Kroll ( V0_ : uint256 ) => #abiCallData ( "roll" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_ : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KrollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))
      
    
    rule  ( S2KVm . S2KrpcUrl ( V0_ : string ) => #abiCallData ( "rpcUrl" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KselectFork ( V0_ : uint256 ) => #abiCallData ( "selectFork" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KsetEnv ( V0_ : string , V1_ : string ) => #abiCallData ( "setEnv" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KsetNonce ( V0_ : address , V1_ : uint64 ) => #abiCallData ( "setNonce" , #address ( V0_ ) , #uint64 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2Ksign ( V0_ : uint256 , V1_ : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_ ) , #bytes32 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_ )
       andBool ( #rangeBytes ( 32 , V1_ )
               ))
      
    
    rule  ( S2KVm . S2Ksnapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstartBroadcast ( V0_ : address ) => #abiCallData ( "startBroadcast" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KstartPrank ( V0_ : address ) => #abiCallData ( "startPrank" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KstartPrank ( V0_ : address , V1_ : address ) => #abiCallData ( "startPrank" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KVm . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KstopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2Kstore ( V0_ : address , V1_ : bytes32 , V2_ : bytes32 ) => #abiCallData ( "store" , #address ( V0_ ) , #bytes32 ( V1_ ) , #bytes32 ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeBytes ( 32 , V1_ )
       andBool ( #rangeBytes ( 32 , V2_ )
               )))
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : address ) => #abiCallData ( "toString" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : bool ) => #abiCallData ( "toString" , #bool ( V0_ ) , .TypedArgs ) )
       ensures #rangeBool ( V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : bytes ) => #abiCallData ( "toString" , #bytes ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_ ) )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_ ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : int256 ) => #abiCallData ( "toString" , #int256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KtoString ( V0_ : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2Kwarp ( V0_ : uint256 ) => #abiCallData ( "warp" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . S2KwriteFile ( V0_ : string , V1_ : string ) => #abiCallData ( "writeFile" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . S2KwriteLine ( V0_ : string , V1_ : string ) => #abiCallData ( "writeLine" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "activeFork()" ) => 789593890 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )
      
    
    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "coinbase(address)" ) => 4282924116 )
      
    
    rule  ( selector ( "createFork(string)" ) => 834286744 )
      
    
    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )
      
    
    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )
      
    
    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )
      
    
    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )
      
    
    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )
      
    
    rule  ( selector ( "expectRevert()" ) => 4102309908 )
      
    
    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )
      
    
    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )
      
    
    rule  ( selector ( "fee(uint256)" ) => 968063664 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )
      
    
    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )
      
    
    rule  ( selector ( "prank(address)" ) => 3395723175 )
      
    
    rule  ( selector ( "prank(address,address)" ) => 1206193358 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )
      
    
    rule  ( selector ( "roll(uint256)" ) => 528174896 )
      
    
    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )
      
    
    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "snapshot()" ) => 2534502746 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startPrank(address)" ) => 105151830 )
      
    
    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopPrank()" ) => 2428830011 )
      
    
    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "warp(uint256)" ) => 3856056066 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module console-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KconsoleContract
    
    syntax S2KconsoleContract ::= "S2Kconsole" [symbol(), klabel(contract_console)]
    
      
    
    rule  ( #initBytecode ( S2Kconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055cb7f21d69d5a68626bed666b69adc58fdc46d700fc111b3a1cc03e01c56ffd64736f6c634300080d0033" ) )
      

endmodule

module console2-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2Kconsole2Contract
    
    syntax S2Kconsole2Contract ::= "S2Kconsole2" [symbol(), klabel(contract_console2)]
    
      
    
    rule  ( #initBytecode ( S2Kconsole2 ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122017af94728e4fd8592ef4392559b9c941d0bf92d7928b48a70203c5ea8bb219ad64736f6c634300080d0033" ) )
      

endmodule

module DSTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDSTestContract
    
    syntax S2KDSTestContract ::= "S2KDSTest" [symbol(), klabel(contract_DSTest)]
    
      
    
    rule  ( #initBytecode ( S2KDSTest ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b506102598061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ba414fa61461003b578063fa7626d414610057575b600080fd5b610043610064565b604051901515815260200160405180910390f35b6000546100439060ff1681565b60008054610100900460ff16156100845750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561018a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610112917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016101ca565b60408051601f198184030181529082905261012c916101ee565b6000604051808303816000865af19150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b50915050808060200190518101906101869190610201565b9150505b919050565b6000815160005b818110156101b05760208185018101518683015201610196565b818111156101bf576000828601525b509290920192915050565b6001600160e01b03198316815260006101e6600483018461018f565b949350505050565b60006101fa828461018f565b9392505050565b60006020828403121561021357600080fd5b815180151581146101fa57600080fdfea2646970667358221220acd34c7900a0f78b52ca6e76525777d2bb4ff172d44682161ada1b655e2ff2cb64736f6c634300080d0033" ) )
      
    
    syntax Field ::= DSTestField
    
    syntax DSTestField ::= "IS_TEST" [symbol(), klabel(field_DSTest_IS_TEST)]
    
    syntax DSTestField ::= "_failed" [symbol(), klabel(field_DSTest__failed)]
    
    rule  ( #loc ( S2KDSTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDSTest . _failed ) => 0 )
      
    
    syntax Bytes ::= S2KDSTestContract "." S2KDSTestMethod [function(), symbol(), klabel(method_DSTest)]
    
    syntax S2KDSTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DSTest_S2KISZUndTEST_)]
    
    syntax S2KDSTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DSTest_S2Kfailed_)]
    
    rule  ( S2KDSTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDSTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule
