
┌─ 1 (root, init)
│   k: #execute ~> CONTINUATION:K
│   pc: 0
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode
│   src: test/nested/SimpleNested.t.sol:7:11
│   method: test%ContractFieldTest.setUp()
│
│  (2231 steps)
├─ 8 (terminal)
│   k: #halt ~> CONTINUATION:K
│   pc: 194
│   callDepth: 0
│   statusCode: EVMC_SUCCESS
│   src: lib/forge-std/src/StdInvariant.sol:69:71
│   method: test%ContractFieldTest.testEscrowToken()
│
┊  constraint: true
┊  subst: ...
└─ 7 (leaf, target, terminal)
    k: #halt ~> CONTINUATION:K
    pc: PC_CELL_5d410f2a:Int
    callDepth: CALLDEPTH_CELL_5d410f2a:Int
    statusCode: STATUSCODE_FINAL:StatusCode




module SUMMARY-TEST%CONTRACTFIELDTEST.TESTESCROWTOKEN():0
    
    
    rule [BASIC-BLOCK-1-TO-8]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   ( .Set => ( SetItem ( #address ( FoundryTest ) ) ( SetItem ( 263400868551549723330807389252719309078400616203 ) SetItem ( 491460923342184218035706888008750043977755113263 ) ) ) )
                 </touchedAccounts>
                 <callState>
                   <id>
                     #address ( FoundryTest )
                   </id>
                   <caller>
                     137122462167341575662000267002353578582749290296
                   </caller>
                   <callData>
                     ( b"\n\x92T\xe4" => b"51X\xa0" )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 892426400 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0009" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   <codeAddr>
                     #address ( FoundryTest )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <refund>
                     0
                   </refund>
                   <accessedAccounts>
                     ( .Set => ( SetItem ( #address ( FoundryTest ) ) ( SetItem ( 263400868551549723330807389252719309078400616203 ) SetItem ( 491460923342184218035706888008750043977755113263 ) ) ) )
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   <createdAccounts>
                     .Set
                   </createdAccounts>
                   ...
                 </substate>
                 <origin>
                   137122462167341575662000267002353578582749290296
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( #address ( FoundryCheat ) => 263400868551549723330807389252719309078400616203 )
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       ( .Map => ( 0 |-> 125813996375599159817140963330240011258305308995328 ) )
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <transientStorage>
                       .Map
                     </transientStorage>
                     <nonce>
                       ( 0 => 1 )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       #address ( FoundryTest )
                     </acctID>
                     <balance>
                       maxUInt96
                     </balance>
                     <storage>
                       ( ( 11 |-> 1 )
                       ( 7 |-> 1 ) )
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <transientStorage>
                       .Map
                     </transientStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> => ( <account>
                     <acctID>
                       #address ( FoundryCheat )
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <transientStorage>
                       .Map
                     </transientStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       #address ( FoundryTest )
                     </acctID>
                     <balance>
                       maxUInt96
                     </balance>
                     <storage>
                       ( ( 11 |-> 1 )
                       ( ( 27 |-> 491460923342184218035706888008750043977755113263 )
                       ( ( 28 |-> 263400868551549723330807389252719309078400616203 )
                       ( 7 |-> 1 ) ) ) )
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <transientStorage>
                       .Map
                     </transientStorage>
                     <nonce>
                       3
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       491460923342184218035706888008750043977755113263
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       ( 0 |-> 12300 )
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <transientStorage>
                       .Map
                     </transientStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> ) ) ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
           </cheatcodes>
         </foundry>
      requires ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
               ))))
       ensures ( ?__DEPTH_CELL:Int <Int 1
       andBool ( ?_?__DEPTH_CELL:Int <Int 2
       andBool ( ?__EXPECTEDDEPTH_CELL:Int <Int 1
       andBool ( ?_?__EXPECTEDDEPTH_CELL:Int <Int 2
               ))))
      [priority(20), label(BASIC-BLOCK-1-TO-8)]

endmodule