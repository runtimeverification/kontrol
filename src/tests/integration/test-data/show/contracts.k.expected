requires "foundry.md"

module S2KsrcZModduplicatesZMod1ZModDuplicateName-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModduplicatesZMod1ZModDuplicateNameContract

    syntax S2KsrcZModduplicatesZMod1ZModDuplicateNameContract ::= "S2KsrcZModduplicatesZMod1ZModDuplicateName" [symbol(), klabel(contract_src%duplicates%1%DuplicateName)]

    rule  ( #binRuntime ( S2KsrcZModduplicatesZMod1ZModDuplicateName ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063a16d8ccd14602d575b600080fd5b00fea2646970667358221220985a3a82b02941f0da2e4be085d0c1d4467398538f9c9898423a8b3709050b3464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModduplicatesZMod1ZModDuplicateName ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50606580601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a16d8ccd14602d575b600080fd5b00fea2646970667358221220985a3a82b02941f0da2e4be085d0c1d4467398538f9c9898423a8b3709050b3464736f6c634300080d0033" ) )


    syntax Bytes ::= S2KsrcZModduplicatesZMod1ZModDuplicateNameContract "." S2KsrcZModduplicatesZMod1ZModDuplicateNameMethod [function(), symbol(), klabel(method_src%duplicates%1%DuplicateName)]

    syntax S2KsrcZModduplicatesZMod1ZModDuplicateNameMethod ::= "S2KduplicateNamedFunction" "(" ")" [symbol(), klabel(method_src%duplicates%1%DuplicateName_S2KduplicateNamedFunction_)]

    rule  ( S2KsrcZModduplicatesZMod1ZModDuplicateName . S2KduplicateNamedFunction ( ) => #abiCallData ( "duplicateNamedFunction" , .TypedArgs ) )


    rule  ( selector ( "duplicateNamedFunction()" ) => 2708311245 )


endmodule

module S2KsrcZModduplicatesZMod2ZModDuplicateName-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModduplicatesZMod2ZModDuplicateNameContract

    syntax S2KsrcZModduplicatesZMod2ZModDuplicateNameContract ::= "S2KsrcZModduplicatesZMod2ZModDuplicateName" [symbol(), klabel(contract_src%duplicates%2%DuplicateName)]

    rule  ( #binRuntime ( S2KsrcZModduplicatesZMod2ZModDuplicateName ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063a16d8ccd14602d575b600080fd5b00fea2646970667358221220803923ddd7316f5dc93c16701c2aaffb8970849eee42927a5cc11e4eb382eb9564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModduplicatesZMod2ZModDuplicateName ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50606580601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a16d8ccd14602d575b600080fd5b00fea2646970667358221220803923ddd7316f5dc93c16701c2aaffb8970849eee42927a5cc11e4eb382eb9564736f6c634300080d0033" ) )


    syntax Bytes ::= S2KsrcZModduplicatesZMod2ZModDuplicateNameContract "." S2KsrcZModduplicatesZMod2ZModDuplicateNameMethod [function(), symbol(), klabel(method_src%duplicates%2%DuplicateName)]

    syntax S2KsrcZModduplicatesZMod2ZModDuplicateNameMethod ::= "S2KduplicateNamedFunction" "(" ")" [symbol(), klabel(method_src%duplicates%2%DuplicateName_S2KduplicateNamedFunction_)]

    rule  ( S2KsrcZModduplicatesZMod2ZModDuplicateName . S2KduplicateNamedFunction ( ) => #abiCallData ( "duplicateNamedFunction" , .TypedArgs ) )


    rule  ( selector ( "duplicateNamedFunction()" ) => 2708311245 )


endmodule

module S2KtestZModAccountParamsTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAccountParamsTestContract

    syntax S2KtestZModAccountParamsTestContract ::= "S2KtestZModAccountParamsTest" [symbol(), klabel(contract_test%AccountParamsTest)]

    rule  ( #binRuntime ( S2KtestZModAccountParamsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806385226c81116100c3578063ba414fa61161007c578063ba414fa61461023a578063d350206f14610252578063e20c9f711461025a578063eaef3d1414610262578063ec846da614610275578063fa7626d41461027d57600080fd5b806385226c81146101f25780638eafad6314610207578063916a17c61461020f5780639a13b46014610217578063b1ec79811461022a578063b5508aa91461023257600080fd5b80633f7286f4116101155780633f7286f41461019f5780633fa6f850146101a75780634e18fd0b146101af5780635f45761c146101c257806366d9a9a0146101ca5780637dbb0fbf146101df57600080fd5b80631ed7831c146101525780631f9894c2146101705780632ade38801461017a5780633021887c1461018f5780633e5e3c2314610197575b600080fd5b61015a61028a565b6040516101679190611779565b60405180910390f35b6101786102ec565b005b61018261036e565b6040516101679190611822565b6101786104b0565b61015a61057b565b61015a6105db565b61017861063b565b6101786101bd3660046118f8565b6106c4565b6101786108a4565b6101d2610996565b604051610167919061191c565b6101786101ed3660046119cf565b610a7c565b6101fa610b4a565b6040516101679190611a41565b610178610c1a565b6101d2610ca1565b610178610225366004611aa3565b610d87565b610178610e04565b6101fa610e9f565b610242610f6f565b6040519015158152602001610167565b610178611090565b61015a6110c5565b610178610270366004611abc565b611125565b610178611380565b6007546102429060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156102e257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c4575b5050505050905090565b60405163c88a5e6d60e01b81526101f960048201526101006024820152600080516020611d338339815191529063c88a5e6d90604401600060405180830381600087803b15801561033c57600080fd5b505af1158015610350573d6000803e3d6000fd5b5050505061036c6101f96001600160a01b03163161010061140c565b565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156104a757600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561049057838290600052602060002001805461040390611ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90611ae5565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b5050505050815260200190600101906103e4565b505050508152505081526020019060010190610392565b50505050905090565b604080518082018252601b81527f746869732073686f756c642062652045564d2062797465636f6465000000000060208201529051635a6b63c160e11b8152600080516020611d338339815191529063b4d6c7829061051690607c908590600401611b1f565b600060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b50505050610578607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c826114fb565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b604051632d0335ab60e01b815260006004820181905290600080516020611d3383398151915290632d0335ab906024015b602060405180830381865afa158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad9190611b4b565b90506105788167ffffffffffffffff16600a61140c565b604051632d0335ab60e01b8152306004820152600090600080516020611d3383398151915290632d0335ab90602401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190611b4b565b604051632631f2b160e11b815267ffffffffffffffff808316908516116004820152909150600080516020611d3383398151915290634c63e5629060240160006040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b505060405163f8e18b5760e01b815230600482015267ffffffffffffffff85166024820152600080516020611d33833981519152925063f8e18b579150604401600060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015267ffffffffffffffff85169250600080516020611d338339815191529150632d0335ab90602401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190611b4b565b67ffffffffffffffff16146108a0576108a0611b68565b5050565b60405163f8e18b5760e01b815230600482015260646024820152600080516020611d338339815191529063f8e18b5790604401600060405180830381600087803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015260009250600080516020611d338339815191529150632d0335ab906024015b602060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611b4b565b90508067ffffffffffffffff1660641461057857610578611b68565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104a75760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a6457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a265790505b505050505081525050815260200190600101906109ba565b604051635a6b63c160e11b8152600080516020611d338339815191529063b4d6c78290610ab290607c9086908690600401611b7e565b600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b505050506108a0607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114fb92505050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104a7578382906000526020600020018054610b8d90611ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb990611ae5565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b505050505081526020019060010190610b6e565b604051632d0335ab60e01b8152306004820152600090600080516020611d3383398151915290632d0335ab90602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190611b4b565b90506105788167ffffffffffffffff16600161140c565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104a75760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610d6f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d315790505b50505050508152505081526020019060010190610cc5565b60405163c88a5e6d60e01b8152610148600482015260248101829052600080516020611d338339815191529063c88a5e6d90604401600060405180830381600087803b158015610dd657600080fd5b505af1158015610dea573d6000803e3d6000fd5b505050506105786101486001600160a01b0316318261140c565b60405163f8e18b5760e01b81526064600482018190526024820152600080516020611d338339815191529063f8e18b5790604401600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526064600482015260009250600080516020611d338339815191529150632d0335ab90602401610939565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104a7578382906000526020600020018054610ee290611ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0e90611ae5565b8015610f5b5780601f10610f3057610100808354040283529160200191610f5b565b820191906000526020600020905b815481529060010190602001808311610f3e57829003601f168201915b505050505081526020019060010190610ec3565b600754600090610100900460ff1615610f915750600754610100900460ff1690565b6000600080516020611d338339815191523b1561108b5760408051600080516020611d33833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611013917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611bbe565b60408051601f198184030181529082905261102d91611bef565b6000604051808303816000865af19150503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b50915050808060200190518101906110879190611c0b565b9150505b919050565b604051632d0335ab60e01b815260646004820152600090600080516020611d3383398151915290632d0335ab9060240161066c565b606060138054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b604051632631f2b160e11b8152600080516020611d338339815191526001600160a01b038316811415600483015290634c63e5629060240160006040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b5050604051632631f2b160e11b8152306001600160a01b03851614156004820152600080516020611d338339815191529250634c63e562915060240160006040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b5050604051632631f2b160e11b8152733fab184622dc19b6109349b94811493bf2a453626001600160a01b03851614156004820152600080516020611d338339815191529250634c63e562915060240160006040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b5050604051632631f2b160e11b8152734e59b44847b379578588920ca78fbf26c0b4956c6001600160a01b03851614156004820152600080516020611d338339815191529250634c63e562915060240160006040518083038186803b1580156112d557600080fd5b505afa1580156112e9573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526001600160a01b038416600482015260009250600080516020611d338339815191529150632d0335ab90602401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113669190611b4b565b905067ffffffffffffffff8116156108a0576108a0611b68565b604051632d0335ab60e01b8152306004820152600090600080516020611d3383398151915290632d0335ab90602401602060405180830381865afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190611b4b565b90508067ffffffffffffffff1660011461057857610578611b68565b8082146108a0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161147d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516114b49190611c2d565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516114eb9190611c65565b60405180910390a16108a0611505565b6108a08282611605565b600080516020611d338339815191523b156115f45760408051600080516020611d33833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526115939291602001611bbe565b60408051601f19818403018152908290526115ad91611bef565b6000604051808303816000865af19150503d80600081146115ea576040519150601f19603f3d011682016040523d82523d6000602084013e6115ef565b606091505b505050505b6007805461ff001916610100179055565b61160f82826116ec565b6108a0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161167e9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516116b59190611c8f565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516114eb9190611ccb565b80518251600191900361176f5760005b83518110156117695782818151811061171757611717611cf5565b602001015160f81c60f81b6001600160f81b03191684828151811061173e5761173e611cf5565b01602001516001600160f81b0319161461175757600091505b8061176181611d0b565b9150506116fc565b50611773565b5060005b92915050565b6020808252825182820181905260009190848201906040850190845b818110156117ba5783516001600160a01b031683529284019291840191600101611795565b50909695505050505050565b60005b838110156117e15781810151838201526020016117c9565b838111156117f0576000848401525b50505050565b6000815180845261180e8160208601602086016117c6565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156118d257603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156118bc57605f198985030183526118aa8486516117f6565b948e01949350918d019160010161188e565b505050978a019794505091880191600101611849565b50919a9950505050505050505050565b67ffffffffffffffff8116811461057857600080fd5b60006020828403121561190a57600080fd5b8135611915816118e2565b9392505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156119c057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156119ab5783516001600160e01b0319168252928b019260019290920191908b0190611981565b50978a01979550505091870191600101611944565b50919998505050505050505050565b600080602083850312156119e257600080fd5b823567ffffffffffffffff808211156119fa57600080fd5b818501915085601f830112611a0e57600080fd5b813581811115611a1d57600080fd5b866020828501011115611a2f57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a9657603f19888603018452611a848583516117f6565b94509285019290850190600101611a68565b5092979650505050505050565b600060208284031215611ab557600080fd5b5035919050565b600060208284031215611ace57600080fd5b81356001600160a01b038116811461191557600080fd5b600181811c90821680611af957607f821691505b602082108103611b1957634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0383168152604060208201819052600090611b43908301846117f6565b949350505050565b600060208284031215611b5d57600080fd5b8151611915816118e2565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6001600160e01b0319831681528151600090611be18160048501602087016117c6565b919091016004019392505050565b60008251611c018184602087016117c6565b9190910192915050565b600060208284031215611c1d57600080fd5b8151801515811461191557600080fd5b604081526000611c5760408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611c5760408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611cb960408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611b4381856117f6565b604081526000611cb960408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600060018201611d2b57634e487b7160e01b600052601160045260246000fd5b506001019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212204db9a115bb32b5dd0cccf3580ae66c912f5de90e20f2efaa9865255369a0090b64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModAccountParamsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611d888061003d6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806385226c81116100c3578063ba414fa61161007c578063ba414fa61461023a578063d350206f14610252578063e20c9f711461025a578063eaef3d1414610262578063ec846da614610275578063fa7626d41461027d57600080fd5b806385226c81146101f25780638eafad6314610207578063916a17c61461020f5780639a13b46014610217578063b1ec79811461022a578063b5508aa91461023257600080fd5b80633f7286f4116101155780633f7286f41461019f5780633fa6f850146101a75780634e18fd0b146101af5780635f45761c146101c257806366d9a9a0146101ca5780637dbb0fbf146101df57600080fd5b80631ed7831c146101525780631f9894c2146101705780632ade38801461017a5780633021887c1461018f5780633e5e3c2314610197575b600080fd5b61015a61028a565b6040516101679190611779565b60405180910390f35b6101786102ec565b005b61018261036e565b6040516101679190611822565b6101786104b0565b61015a61057b565b61015a6105db565b61017861063b565b6101786101bd3660046118f8565b6106c4565b6101786108a4565b6101d2610996565b604051610167919061191c565b6101786101ed3660046119cf565b610a7c565b6101fa610b4a565b6040516101679190611a41565b610178610c1a565b6101d2610ca1565b610178610225366004611aa3565b610d87565b610178610e04565b6101fa610e9f565b610242610f6f565b6040519015158152602001610167565b610178611090565b61015a6110c5565b610178610270366004611abc565b611125565b610178611380565b6007546102429060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156102e257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c4575b5050505050905090565b60405163c88a5e6d60e01b81526101f960048201526101006024820152600080516020611d338339815191529063c88a5e6d90604401600060405180830381600087803b15801561033c57600080fd5b505af1158015610350573d6000803e3d6000fd5b5050505061036c6101f96001600160a01b03163161010061140c565b565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156104a757600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561049057838290600052602060002001805461040390611ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90611ae5565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b5050505050815260200190600101906103e4565b505050508152505081526020019060010190610392565b50505050905090565b604080518082018252601b81527f746869732073686f756c642062652045564d2062797465636f6465000000000060208201529051635a6b63c160e11b8152600080516020611d338339815191529063b4d6c7829061051690607c908590600401611b1f565b600060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b50505050610578607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c826114fb565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b604051632d0335ab60e01b815260006004820181905290600080516020611d3383398151915290632d0335ab906024015b602060405180830381865afa158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad9190611b4b565b90506105788167ffffffffffffffff16600a61140c565b604051632d0335ab60e01b8152306004820152600090600080516020611d3383398151915290632d0335ab90602401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190611b4b565b604051632631f2b160e11b815267ffffffffffffffff808316908516116004820152909150600080516020611d3383398151915290634c63e5629060240160006040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b505060405163f8e18b5760e01b815230600482015267ffffffffffffffff85166024820152600080516020611d33833981519152925063f8e18b579150604401600060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015267ffffffffffffffff85169250600080516020611d338339815191529150632d0335ab90602401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190611b4b565b67ffffffffffffffff16146108a0576108a0611b68565b5050565b60405163f8e18b5760e01b815230600482015260646024820152600080516020611d338339815191529063f8e18b5790604401600060405180830381600087803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015260009250600080516020611d338339815191529150632d0335ab906024015b602060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611b4b565b90508067ffffffffffffffff1660641461057857610578611b68565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104a75760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a6457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a265790505b505050505081525050815260200190600101906109ba565b604051635a6b63c160e11b8152600080516020611d338339815191529063b4d6c78290610ab290607c9086908690600401611b7e565b600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b505050506108a0607c6001600160a01b0316803b806020016040519081016040528181526000908060200190933c83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114fb92505050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104a7578382906000526020600020018054610b8d90611ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb990611ae5565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b505050505081526020019060010190610b6e565b604051632d0335ab60e01b8152306004820152600090600080516020611d3383398151915290632d0335ab90602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190611b4b565b90506105788167ffffffffffffffff16600161140c565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104a75760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610d6f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d315790505b50505050508152505081526020019060010190610cc5565b60405163c88a5e6d60e01b8152610148600482015260248101829052600080516020611d338339815191529063c88a5e6d90604401600060405180830381600087803b158015610dd657600080fd5b505af1158015610dea573d6000803e3d6000fd5b505050506105786101486001600160a01b0316318261140c565b60405163f8e18b5760e01b81526064600482018190526024820152600080516020611d338339815191529063f8e18b5790604401600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526064600482015260009250600080516020611d338339815191529150632d0335ab90602401610939565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104a7578382906000526020600020018054610ee290611ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0e90611ae5565b8015610f5b5780601f10610f3057610100808354040283529160200191610f5b565b820191906000526020600020905b815481529060010190602001808311610f3e57829003601f168201915b505050505081526020019060010190610ec3565b600754600090610100900460ff1615610f915750600754610100900460ff1690565b6000600080516020611d338339815191523b1561108b5760408051600080516020611d33833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611013917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611bbe565b60408051601f198184030181529082905261102d91611bef565b6000604051808303816000865af19150503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b50915050808060200190518101906110879190611c0b565b9150505b919050565b604051632d0335ab60e01b815260646004820152600090600080516020611d3383398151915290632d0335ab9060240161066c565b606060138054806020026020016040519081016040528092919081815260200182805480156102e2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c4575050505050905090565b604051632631f2b160e11b8152600080516020611d338339815191526001600160a01b038316811415600483015290634c63e5629060240160006040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b5050604051632631f2b160e11b8152306001600160a01b03851614156004820152600080516020611d338339815191529250634c63e562915060240160006040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b5050604051632631f2b160e11b8152733fab184622dc19b6109349b94811493bf2a453626001600160a01b03851614156004820152600080516020611d338339815191529250634c63e562915060240160006040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b5050604051632631f2b160e11b8152734e59b44847b379578588920ca78fbf26c0b4956c6001600160a01b03851614156004820152600080516020611d338339815191529250634c63e562915060240160006040518083038186803b1580156112d557600080fd5b505afa1580156112e9573d6000803e3d6000fd5b5050604051632d0335ab60e01b81526001600160a01b038416600482015260009250600080516020611d338339815191529150632d0335ab90602401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113669190611b4b565b905067ffffffffffffffff8116156108a0576108a0611b68565b604051632d0335ab60e01b8152306004820152600090600080516020611d3383398151915290632d0335ab90602401602060405180830381865afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190611b4b565b90508067ffffffffffffffff1660011461057857610578611b68565b8082146108a0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161147d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516114b49190611c2d565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516114eb9190611c65565b60405180910390a16108a0611505565b6108a08282611605565b600080516020611d338339815191523b156115f45760408051600080516020611d33833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526115939291602001611bbe565b60408051601f19818403018152908290526115ad91611bef565b6000604051808303816000865af19150503d80600081146115ea576040519150601f19603f3d011682016040523d82523d6000602084013e6115ef565b606091505b505050505b6007805461ff001916610100179055565b61160f82826116ec565b6108a0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161167e9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516116b59190611c8f565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516114eb9190611ccb565b80518251600191900361176f5760005b83518110156117695782818151811061171757611717611cf5565b602001015160f81c60f81b6001600160f81b03191684828151811061173e5761173e611cf5565b01602001516001600160f81b0319161461175757600091505b8061176181611d0b565b9150506116fc565b50611773565b5060005b92915050565b6020808252825182820181905260009190848201906040850190845b818110156117ba5783516001600160a01b031683529284019291840191600101611795565b50909695505050505050565b60005b838110156117e15781810151838201526020016117c9565b838111156117f0576000848401525b50505050565b6000815180845261180e8160208601602086016117c6565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156118d257603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156118bc57605f198985030183526118aa8486516117f6565b948e01949350918d019160010161188e565b505050978a019794505091880191600101611849565b50919a9950505050505050505050565b67ffffffffffffffff8116811461057857600080fd5b60006020828403121561190a57600080fd5b8135611915816118e2565b9392505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156119c057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156119ab5783516001600160e01b0319168252928b019260019290920191908b0190611981565b50978a01979550505091870191600101611944565b50919998505050505050505050565b600080602083850312156119e257600080fd5b823567ffffffffffffffff808211156119fa57600080fd5b818501915085601f830112611a0e57600080fd5b813581811115611a1d57600080fd5b866020828501011115611a2f57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a9657603f19888603018452611a848583516117f6565b94509285019290850190600101611a68565b5092979650505050505050565b600060208284031215611ab557600080fd5b5035919050565b600060208284031215611ace57600080fd5b81356001600160a01b038116811461191557600080fd5b600181811c90821680611af957607f821691505b602082108103611b1957634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0383168152604060208201819052600090611b43908301846117f6565b949350505050565b600060208284031215611b5d57600080fd5b8151611915816118e2565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6001600160e01b0319831681528151600090611be18160048501602087016117c6565b919091016004019392505050565b60008251611c018184602087016117c6565b9190910192915050565b600060208284031215611c1d57600080fd5b8151801515811461191557600080fd5b604081526000611c5760408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611c5760408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611cb960408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611b4381856117f6565b604081526000611cb960408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600060018201611d2b57634e487b7160e01b600052601160045260246000fd5b506001019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212204db9a115bb32b5dd0cccf3580ae66c912f5de90e20f2efaa9865255369a0090b64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModAccountParamsTestField

    syntax S2KtestZModAccountParamsTestField ::= "stdstore" [symbol(), klabel(field_test%AccountParamsTest_stdstore)]

    syntax S2KtestZModAccountParamsTestField ::= "IS_TEST" [symbol(), klabel(field_test%AccountParamsTest_IS_TEST)]

    syntax S2KtestZModAccountParamsTestField ::= "_failed" [symbol(), klabel(field_test%AccountParamsTest__failed)]

    syntax S2KtestZModAccountParamsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%AccountParamsTest_stdChainsInitialized)]

    syntax S2KtestZModAccountParamsTestField ::= "chains" [symbol(), klabel(field_test%AccountParamsTest_chains)]

    syntax S2KtestZModAccountParamsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%AccountParamsTest_defaultRpcUrls)]

    syntax S2KtestZModAccountParamsTestField ::= "idToAlias" [symbol(), klabel(field_test%AccountParamsTest_idToAlias)]

    syntax S2KtestZModAccountParamsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%AccountParamsTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModAccountParamsTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%AccountParamsTest_gasMeteringOff)]

    syntax S2KtestZModAccountParamsTestField ::= "_excludedContracts" [symbol(), klabel(field_test%AccountParamsTest__excludedContracts)]

    syntax S2KtestZModAccountParamsTestField ::= "_excludedSenders" [symbol(), klabel(field_test%AccountParamsTest__excludedSenders)]

    syntax S2KtestZModAccountParamsTestField ::= "_targetedContracts" [symbol(), klabel(field_test%AccountParamsTest__targetedContracts)]

    syntax S2KtestZModAccountParamsTestField ::= "_targetedSenders" [symbol(), klabel(field_test%AccountParamsTest__targetedSenders)]

    syntax S2KtestZModAccountParamsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%AccountParamsTest__excludedArtifacts)]

    syntax S2KtestZModAccountParamsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%AccountParamsTest__targetedArtifacts)]

    syntax S2KtestZModAccountParamsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%AccountParamsTest__targetedArtifactSelectors)]

    syntax S2KtestZModAccountParamsTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%AccountParamsTest__targetedSelectors)]

    syntax S2KtestZModAccountParamsTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%AccountParamsTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModAccountParamsTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModAccountParamsTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModAccountParamsTestContract "." S2KtestZModAccountParamsTestMethod [function(), symbol(), klabel(method_test%AccountParamsTest)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KISZUndTEST_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KexcludeContracts_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KexcludeSenders_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2Kfailed_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtargetArtifacts_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtargetContracts_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtargetInterfaces_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtargetSelectors_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtargetSenders_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestDealConcrete" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestDealConcrete_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestDealSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestDealSymbolic_uint256)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestEtchConcrete" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestEtchConcrete_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestEtchSymbolic" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestEtchSymbolic_bytes)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestFailZUndGetNonceZUndfalse_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestFailZUndGetNonceZUndtrue_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestNonceSymbolic" "(" Int ":" "uint64" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestNonceSymbolic_uint64)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndfalse" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestZUndGetNonceZUndfalse_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndtrue" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestZUndGetNonceZUndtrue_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndNonceZUndExistentAddress" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestZUndNonceZUndExistentAddress_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndNonceZUndNonExistentAddress" "(" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestZUndNonceZUndNonExistentAddress_)]

    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndgetNonceZUndunknownSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_test%AccountParamsTest_S2KtestZUndgetNonceZUndunknownSymbolic_address)]

    rule  ( S2KtestZModAccountParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestDealConcrete ( ) => #abiCallData ( "testDealConcrete" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestDealSymbolic ( V0_value : uint256 ) => #abiCallData ( "testDealSymbolic" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )


    rule  ( S2KtestZModAccountParamsTest . S2KtestEtchConcrete ( ) => #abiCallData ( "testEtchConcrete" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestEtchSymbolic ( V0_code : bytes ) => #abiCallData ( "testEtchSymbolic" , #bytes ( V0_code ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_code ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestFailZUndGetNonceZUndfalse ( ) => #abiCallData ( "testFail_GetNonce_false" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestFailZUndGetNonceZUndtrue ( ) => #abiCallData ( "testFail_GetNonce_true" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestNonceSymbolic ( V0_newNonce : uint64 ) => #abiCallData ( "testNonceSymbolic" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )


    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndGetNonceZUndfalse ( ) => #abiCallData ( "test_GetNonce_false" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndGetNonceZUndtrue ( ) => #abiCallData ( "test_GetNonce_true" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndNonceZUndExistentAddress ( ) => #abiCallData ( "test_Nonce_ExistentAddress" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndNonceZUndNonExistentAddress ( ) => #abiCallData ( "test_Nonce_NonExistentAddress" , .TypedArgs ) )


    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndgetNonceZUndunknownSymbolic ( V0_addr : address ) => #abiCallData ( "test_getNonce_unknownSymbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testDealConcrete()" ) => 530093250 )


    rule  ( selector ( "testDealSymbolic(uint256)" ) => 2584982624 )


    rule  ( selector ( "testEtchConcrete()" ) => 807503996 )


    rule  ( selector ( "testEtchSymbolic(bytes)" ) => 2109411263 )


    rule  ( selector ( "testFail_GetNonce_false()" ) => 2393877859 )


    rule  ( selector ( "testFail_GetNonce_true()" ) => 1067907152 )


    rule  ( selector ( "testNonceSymbolic(uint64)" ) => 1310260491 )


    rule  ( selector ( "test_GetNonce_false()" ) => 3545243759 )


    rule  ( selector ( "test_GetNonce_true()" ) => 3968101798 )


    rule  ( selector ( "test_Nonce_ExistentAddress()" ) => 1598387740 )


    rule  ( selector ( "test_Nonce_NonExistentAddress()" ) => 2985064833 )


    rule  ( selector ( "test_getNonce_unknownSymbolic(address)" ) => 3941547284 )


endmodule

module S2KtestZModAddrTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAddrTestContract

    syntax S2KtestZModAddrTestContract ::= "S2KtestZModAddrTest" [symbol(), klabel(contract_test%AddrTest)]

    rule  ( #binRuntime ( S2KtestZModAddrTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModAddrTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506114a38061003d6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063942d6ecd116100ad578063c4ddbed311610071578063c4ddbed314610164578063d6a2ec761461020e578063e20c9f711461024d578063f5d3bbdd14610255578063fa7626d41461025d57600080fd5b8063942d6ecd146101cb578063b5508aa9146101d3578063b70f1ccb146101db578063ba414fa6146101ee578063bff1c1001461020657600080fd5b806366d9a9a0116100f457806366d9a9a01461017e57806380c8c4b31461019357806385226c81146101a65780638f9999a7146101bb578063916a17c6146101c357600080fd5b80631ed7831c146101315780632ade38801461014f57806330391edb146101645780633e5e3c231461016e5780633f7286f414610176575b600080fd5b61013961026a565b60405161014691906110bd565b60405180910390f35b6101576102cc565b604051610146919061113a565b61016c61040e565b005b6101396104a5565b610139610505565b610186610565565b6040516101469190611215565b61016c6101a13660046112dd565b61064b565b6101ae610740565b6040516101469190611301565b61016c610810565b61018661081f565b61016c610905565b6101ae61098f565b61016c6101e936600461136e565b610a5f565b6101f6610ba6565b6040519015158152602001610146565b61016c610cc7565b6102357f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610146565b610139610d1d565b61016c610d7d565b6007546101f69060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156102c257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102a4575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561040557600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103ee57838290600052602060002001805461036190611387565b80601f016020809104026020016040519081016040528092919081815260200182805461038d90611387565b80156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b505050505081526020019060010190610342565b5050505081525050815260200190600101906102f0565b50505050905090565b6040516001625e79b760e01b031981526001600482015260009060008051602061144e8339815191529063ffa1864990602401602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048291906113c1565b90506104a281737e5f4552091a69125d5dfcb7b8c2659029395bdf610db5565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156102c2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102a4575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102c2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102a4575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104055760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561063357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105f55790505b50505050508152505081526020019060010190610589565b604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b0383161415600482015260008051602061144e83398151915290634c63e5629060240160006040518083038186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b5050604051632631f2b160e11b815260008051602061144e8339815191526001600160a01b03851681141560048301529250634c63e562915060240160006040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506104a261073b82610f01565b610f4d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561040557838290600052602060002001805461078390611387565b80601f01602080910402602001604051908101604052809291908181526020018280546107af90611387565b80156107fc5780601f106107d1576101008083540402835291602001916107fc565b820191906000526020600020905b8154815290600101906020018083116107df57829003601f168201915b505050505081526020019060010190610764565b61081d61073b606e610f01565b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104055760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108ed57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108af5790505b50505050508152505081526020019060010190610843565b6040516001625e79b760e01b0319815270014551231950b75fc4402da1732fc9bebe19600482015260009060008051602061144e8339815191529063ffa18649906024015b602060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b91906113c1565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104055783829060005260206000200180546109d290611387565b80601f01602080910402602001604051908101604052809291908181526020018280546109fe90611387565b8015610a4b5780601f10610a2057610100808354040283529160200191610a4b565b820191906000526020600020905b815481529060010190602001808311610a2e57829003601f168201915b5050505050815260200190600101906109b3565b604051632631f2b160e11b8152811515600482015260008051602061144e83398151915290634c63e5629060240160006040518083038186803b158015610aa557600080fd5b505afa158015610ab9573d6000803e3d6000fd5b5050604051632631f2b160e11b815270014551231950b75fc4402da1732fc9bebe198410600482015260008051602061144e8339815191529250634c63e562915060240160006040518083038186803b158015610b1557600080fd5b505afa158015610b29573d6000803e3d6000fd5b50506040516001625e79b760e01b03198152600481018490526000925060008051602061144e833981519152915063ffa1864990602401602060405180830381865afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba191906113c1565b505050565b600754600090610100900460ff1615610bc85750600754610100900460ff1690565b600060008051602061144e8339815191523b15610cc2576040805160008051602061144e833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610c4a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113de565b60408051601f1981840301815290829052610c649161140f565b6000604051808303816000865af19150503d8060008114610ca1576040519150601f19603f3d011682016040523d82523d6000602084013e610ca6565b606091505b5091505080806020019051810190610cbe919061142b565b9150505b919050565b610ce530737fa9385be102ac3eac297483dd6233d62b3e1496610db5565b61081d7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60008051602061144e833981519152610db5565b606060138054806020026020016040519081016040528092919081815260200182805480156102c2576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102a4575050505050905090565b6040516001625e79b760e01b031981526000600482018190529060008051602061144e8339815191529063ffa186499060240161094a565b806001600160a01b0316826001600160a01b03161461098b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610e3b9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a161098b610fbd565b60006001600160a01b03821660008051602061144e83398151915214801590610f4757506001600160a01b038216737fa9385be102ac3eac297483dd6233d62b3e149614155b92915050565b806104a2577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fb19060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16104a25b60008051602061144e8339815191523b156110ac576040805160008051602061144e833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261104b92916020016113de565b60408051601f19818403018152908290526110659161140f565b6000604051808303816000865af19150503d80600081146110a2576040519150601f19603f3d011682016040523d82523d6000602084013e6110a7565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156110fe5783516001600160a01b0316835292840192918401916001016110d9565b50909695505050505050565b60005b8381101561112557818101518382015260200161110d565b83811115611134576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561120857603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156111f157898403605f19018352845180518086526111d2818e88018f850161110a565b958c0195601f01601f1916949094018b019350918a01916001016111ab565b509197505050938601935090850190600101611161565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156112b957898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112a45783516001600160e01b0319168252928b019260019290920191908b019061127a565b50978a0197955050509187019160010161123d565b50919998505050505050505050565b6001600160a01b03811681146104a257600080fd5b6000602082840312156112ef57600080fd5b81356112fa816112c8565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561120857878503603f190184528151805180875261134f818989018a850161110a565b601f01601f191695909501860194509285019290850190600101611328565b60006020828403121561138057600080fd5b5035919050565b600181811c9082168061139b57607f821691505b6020821081036113bb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156113d357600080fd5b81516112fa816112c8565b6001600160e01b031983168152815160009061140181600485016020870161110a565b919091016004019392505050565b6000825161142181846020870161110a565b9190910192915050565b60006020828403121561143d57600080fd5b815180151581146112fa57600080fdfe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212202d7339e31b182ada0ae7c3d401c907d52402419c9a064224bfdcbe186dab790664736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModAddrTestField

    syntax S2KtestZModAddrTestField ::= "stdstore" [symbol(), klabel(field_test%AddrTest_stdstore)]

    syntax S2KtestZModAddrTestField ::= "IS_TEST" [symbol(), klabel(field_test%AddrTest_IS_TEST)]

    syntax S2KtestZModAddrTestField ::= "_failed" [symbol(), klabel(field_test%AddrTest__failed)]

    syntax S2KtestZModAddrTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%AddrTest_stdChainsInitialized)]

    syntax S2KtestZModAddrTestField ::= "chains" [symbol(), klabel(field_test%AddrTest_chains)]

    syntax S2KtestZModAddrTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%AddrTest_defaultRpcUrls)]

    syntax S2KtestZModAddrTestField ::= "idToAlias" [symbol(), klabel(field_test%AddrTest_idToAlias)]

    syntax S2KtestZModAddrTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%AddrTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModAddrTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%AddrTest_gasMeteringOff)]

    syntax S2KtestZModAddrTestField ::= "_excludedContracts" [symbol(), klabel(field_test%AddrTest__excludedContracts)]

    syntax S2KtestZModAddrTestField ::= "_excludedSenders" [symbol(), klabel(field_test%AddrTest__excludedSenders)]

    syntax S2KtestZModAddrTestField ::= "_targetedContracts" [symbol(), klabel(field_test%AddrTest__targetedContracts)]

    syntax S2KtestZModAddrTestField ::= "_targetedSenders" [symbol(), klabel(field_test%AddrTest__targetedSenders)]

    syntax S2KtestZModAddrTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%AddrTest__excludedArtifacts)]

    syntax S2KtestZModAddrTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%AddrTest__targetedArtifacts)]

    syntax S2KtestZModAddrTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%AddrTest__targetedArtifactSelectors)]

    syntax S2KtestZModAddrTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%AddrTest__targetedSelectors)]

    syntax S2KtestZModAddrTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%AddrTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModAddrTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModAddrTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModAddrTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModAddrTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModAddrTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModAddrTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModAddrTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModAddrTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModAddrTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModAddrTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModAddrTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModAddrTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModAddrTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModAddrTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModAddrTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModAddrTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModAddrTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModAddrTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModAddrTestContract "." S2KtestZModAddrTestMethod [function(), symbol(), klabel(method_test%AddrTest)]

    syntax S2KtestZModAddrTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KISZUndTEST_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KexcludeContracts_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KexcludeSenders_)]

    syntax S2KtestZModAddrTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%AddrTest_S2Kfailed_)]

    syntax S2KtestZModAddrTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%AddrTest_S2Kkevm_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtargetArtifacts_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtargetContracts_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtargetInterfaces_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtargetSelectors_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtargetSenders_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestFailZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtestFailZUndaddrZUndfalse_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestFailZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtestFailZUndaddrZUndtrue_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndaddrZUndfalse" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtestZUndaddrZUndfalse_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndaddrZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%AddrTest_S2KtestZUndaddrZUndsymbolic_uint256)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndaddrZUndtrue" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtestZUndaddrZUndtrue_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndbuiltInAddresses" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtestZUndbuiltInAddresses_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndconcrete" "(" ")" [symbol(), klabel(method_test%AddrTest_S2KtestZUndnotBuiltinAddressZUndconcrete_)]

    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndsymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_test%AddrTest_S2KtestZUndnotBuiltinAddressZUndsymbolic_address)]

    rule  ( S2KtestZModAddrTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestFailZUndaddrZUndfalse ( ) => #abiCallData ( "testFail_addr_false" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestFailZUndaddrZUndtrue ( ) => #abiCallData ( "testFail_addr_true" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestZUndaddrZUndfalse ( ) => #abiCallData ( "test_addr_false" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestZUndaddrZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "test_addr_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )


    rule  ( S2KtestZModAddrTest . S2KtestZUndaddrZUndtrue ( ) => #abiCallData ( "test_addr_true" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestZUndbuiltInAddresses ( ) => #abiCallData ( "test_builtInAddresses" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestZUndnotBuiltinAddressZUndconcrete ( ) => #abiCallData ( "test_notBuiltinAddress_concrete" , .TypedArgs ) )


    rule  ( S2KtestZModAddrTest . S2KtestZUndnotBuiltinAddressZUndsymbolic ( V0_addr : address ) => #abiCallData ( "test_notBuiltinAddress_symbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_addr_false()" ) => 3302866643 )


    rule  ( selector ( "testFail_addr_true()" ) => 2486005453 )


    rule  ( selector ( "test_addr_false()" ) => 4124294109 )


    rule  ( selector ( "test_addr_symbolic(uint256)" ) => 3071220939 )


    rule  ( selector ( "test_addr_true()" ) => 809049819 )


    rule  ( selector ( "test_builtInAddresses()" ) => 3220291840 )


    rule  ( selector ( "test_notBuiltinAddress_concrete()" ) => 2409208231 )


    rule  ( selector ( "test_notBuiltinAddress_symbolic(address)" ) => 2160641203 )


endmodule

module S2KtestZModAllowChangesTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAllowChangesTestContract

    syntax S2KtestZModAllowChangesTestContract ::= "S2KtestZModAllowChangesTest" [symbol(), klabel(contract_test%AllowChangesTest)]

    rule  ( #binRuntime ( S2KtestZModAllowChangesTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063916a17c6116100a2578063dc20bc5b11610071578063dc20bc5b146101f6578063e20c9f71146101fe578063f6243db114610206578063f8a8fd6d1461020e578063fa7626d41461021657600080fd5b8063916a17c61461018f578063b5508aa914610197578063ba414fa61461019f578063d6a2ec76146101b757600080fd5b80634b453a59116100de5780634b453a59146101535780635b31d5271461015d57806366d9a9a01461016557806385226c811461017a57600080fd5b80631ed7831c146101105780632ade38801461012e5780633e5e3c23146101435780633f7286f41461014b575b600080fd5b610118610223565b60405161012591906110f5565b60405180910390f35b610136610285565b6040516101259190611172565b6101186103c7565b610118610427565b61015b610487565b005b61015b610623565b61016d61078d565b604051610125919061124d565b610182610873565b6040516101259190611300565b61016d610943565b610182610a29565b6101a7610af9565b6040519015158152602001610125565b6101de7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610125565b61015b610c26565b610118610d8f565b61015b610def565b61015b610f5a565b6007546101a79060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561027b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161025d575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103be57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103a757838290600052602060002001805461031a9061136d565b80601f01602080910402602001604051908101604052809291908181526020018280546103469061136d565b80156103935780601f1061036857610100808354040283529160200191610393565b820191906000526020600020905b81548152906001019060200180831161037657829003601f168201915b5050505050815260200190600101906102fb565b5050505081525050815260200190600101906102a9565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561027b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161025d575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561027b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161025d575050505050905090565b6000604051610495906110e9565b604051809103906000f0801580156104b1573d6000803e3d6000fd5b50905060006040516104c2906110e9565b604051809103906000f0801580156104de573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b1580156105ab57600080fd5b505af11580156105bf573d6000803e3d6000fd5b505060405163616b8d0560e01b815261280560048201526001600160a01b038416925063616b8d0591506024015b600060405180830381600087803b15801561060757600080fd5b505af115801561061b573d6000803e3d6000fd5b505050505050565b6000604051610631906110e9565b604051809103906000f08015801561064d573d6000803e3d6000fd5b509050600060405161065e906110e9565b604051809103906000f08015801561067a573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b1580156106d357600080fd5b505af11580156106e7573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b15801561074757600080fd5b505af115801561075b573d6000803e3d6000fd5b5050604051630af33d5360e11b8152615b9c60048201526001600160a01b03851692506315e67aa691506024016105ed565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103be5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561085b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161081d5790505b505050505081525050815260200190600101906107b1565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103be5783829060005260206000200180546108b69061136d565b80601f01602080910402602001604051908101604052809291908181526020018280546108e29061136d565b801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b505050505081526020019060010190610897565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103be5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a1157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109d35790505b50505050508152505081526020019060010190610967565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103be578382906000526020600020018054610a6c9061136d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a989061136d565b8015610ae55780601f10610aba57610100808354040283529160200191610ae5565b820191906000526020600020905b815481529060010190602001808311610ac857829003601f168201915b505050505081526020019060010190610a4d565b600754600090610100900460ff1615610b1b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c215760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610ba9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113a7565b60408051601f1981840301815290829052610bc3916113d8565b6000604051808303816000865af19150503d8060008114610c00576040519150601f19603f3d011682016040523d82523d6000602084013e610c05565b606091505b5091505080806020019051810190610c1d91906113f4565b9150505b919050565b6000604051610c34906110e9565b604051809103906000f080158015610c50573d6000803e3d6000fd5b5090506000604051610c61906110e9565b604051809103906000f080158015610c7d573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505060405163616b8d0560e01b8152605560048201526001600160a01b038516925063616b8d0591506024016105ed565b6060601380548060200260200160405190810160405280929190818152602001828054801561027b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161025d575050505050905090565b6000604051610dfd906110e9565b604051809103906000f080158015610e19573d6000803e3d6000fd5b5090506000604051610e2a906110e9565b604051809103906000f080158015610e46573d6000803e3d6000fd5b50604051631b94398d60e21b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90636e50e63490602401600060405180830381600087803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b5050604051633eb205c360e21b81526001600160a01b038516600482015260006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063fac8170c9150604401600060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b5050604051630af33d5360e11b81526203941960048201526001600160a01b03851692506315e67aa691506024016105ed565b610f646001610f66565b565b80610fda577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fca9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610fda610fdd565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110d85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261107792916020016113a7565b60408051601f1981840301815290829052611091916113d8565b6000604051808303816000865af19150503d80600081146110ce576040519150601f19603f3d011682016040523d82523d6000602084013e6110d3565b606091505b505050505b6007805461ff001916610100179055565b60fc8061141e83390190565b6020808252825182820181905260009190848201906040850190845b818110156111365783516001600160a01b031683529284019291840191600101611111565b50909695505050505050565b60005b8381101561115d578181015183820152602001611145565b8381111561116c576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561124057603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b8181101561122957898403605f190183528451805180865261120a818e88018f8501611142565b958c0195601f01601f1916949094018b019350918a01916001016111e3565b509197505050938601935090850190600101611199565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156112f157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112dc5783516001600160e01b0319168252928b019260019290920191908b01906112b2565b50978a01979550505091870191600101611275565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561124057878503603f190184528151805180875261134e818989018a8501611142565b601f01601f191695909501860194509285019290850190600101611327565b600181811c9082168061138157607f821691505b6020821081036113a157634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906113ca816004850160208701611142565b919091016004019392505050565b600082516113ea818460208701611142565b9190910192915050565b60006020828403121561140657600080fd5b8151801515811461141657600080fd5b939250505056fe608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea2646970667358221220e81805ecfa03d3133b90159ff34bb38b98f444ed95e9a3a8a8bda5571aa966cb64736f6c634300080d0033a2646970667358221220bee802737d9b85e14c7e04509395fb7722329ec524163cb53d646eb23536568c64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModAllowChangesTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModAllowChangesTestField

    syntax S2KtestZModAllowChangesTestField ::= "stdstore" [symbol(), klabel(field_test%AllowChangesTest_stdstore)]

    syntax S2KtestZModAllowChangesTestField ::= "IS_TEST" [symbol(), klabel(field_test%AllowChangesTest_IS_TEST)]

    syntax S2KtestZModAllowChangesTestField ::= "_failed" [symbol(), klabel(field_test%AllowChangesTest__failed)]

    syntax S2KtestZModAllowChangesTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%AllowChangesTest_stdChainsInitialized)]

    syntax S2KtestZModAllowChangesTestField ::= "chains" [symbol(), klabel(field_test%AllowChangesTest_chains)]

    syntax S2KtestZModAllowChangesTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%AllowChangesTest_defaultRpcUrls)]

    syntax S2KtestZModAllowChangesTestField ::= "idToAlias" [symbol(), klabel(field_test%AllowChangesTest_idToAlias)]

    syntax S2KtestZModAllowChangesTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%AllowChangesTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModAllowChangesTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%AllowChangesTest_gasMeteringOff)]

    syntax S2KtestZModAllowChangesTestField ::= "_excludedContracts" [symbol(), klabel(field_test%AllowChangesTest__excludedContracts)]

    syntax S2KtestZModAllowChangesTestField ::= "_excludedSenders" [symbol(), klabel(field_test%AllowChangesTest__excludedSenders)]

    syntax S2KtestZModAllowChangesTestField ::= "_targetedContracts" [symbol(), klabel(field_test%AllowChangesTest__targetedContracts)]

    syntax S2KtestZModAllowChangesTestField ::= "_targetedSenders" [symbol(), klabel(field_test%AllowChangesTest__targetedSenders)]

    syntax S2KtestZModAllowChangesTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%AllowChangesTest__excludedArtifacts)]

    syntax S2KtestZModAllowChangesTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%AllowChangesTest__targetedArtifacts)]

    syntax S2KtestZModAllowChangesTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%AllowChangesTest__targetedArtifactSelectors)]

    syntax S2KtestZModAllowChangesTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%AllowChangesTest__targetedSelectors)]

    syntax S2KtestZModAllowChangesTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%AllowChangesTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModAllowChangesTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModAllowChangesTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModAllowChangesTestContract "." S2KtestZModAllowChangesTestMethod [function(), symbol(), klabel(method_test%AllowChangesTest)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KISZUndTEST_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KexcludeContracts_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KexcludeSenders_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2Kfailed_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2Kkevm_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtargetArtifacts_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtargetContracts_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtargetInterfaces_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtargetSelectors_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtargetSenders_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2Ktest" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2Ktest_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestAllow" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtestAllow_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestAllowZUndfail" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtestAllowZUndfail_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestFailAllowCallsToAddress" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtestFailAllowCallsToAddress_)]

    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestFailAllowChangesToStorage" "(" ")" [symbol(), klabel(method_test%AllowChangesTest_S2KtestFailAllowChangesToStorage_)]

    rule  ( S2KtestZModAllowChangesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2Ktest ( ) => #abiCallData ( "test" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtestAllow ( ) => #abiCallData ( "testAllow" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtestAllowZUndfail ( ) => #abiCallData ( "testAllow_fail" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtestFailAllowCallsToAddress ( ) => #abiCallData ( "testFailAllowCallsToAddress" , .TypedArgs ) )


    rule  ( S2KtestZModAllowChangesTest . S2KtestFailAllowChangesToStorage ( ) => #abiCallData ( "testFailAllowChangesToStorage" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test()" ) => 4171824493 )


    rule  ( selector ( "testAllow()" ) => 3693132891 )


    rule  ( selector ( "testAllow_fail()" ) => 4129570225 )


    rule  ( selector ( "testFailAllowCallsToAddress()" ) => 1262828121 )


    rule  ( selector ( "testFailAllowChangesToStorage()" ) => 1529992487 )


endmodule

module S2KtestZModValueStore-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModValueStoreContract

    syntax S2KtestZModValueStoreContract ::= "S2KtestZModValueStore" [symbol(), klabel(contract_test%ValueStore)]

    rule  ( #binRuntime ( S2KtestZModValueStore ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea2646970667358221220e81805ecfa03d3133b90159ff34bb38b98f444ed95e9a3a8a8bda5571aa966cb64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModValueStore ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806315e67aa614604b5780633033413b14605d5780635d33a27f146077578063616b8d0514607f575b600080fd5b605b6056366004608f565b600155565b005b606560005481565b60405190815260200160405180910390f35b606560015481565b605b608a366004608f565b600055565b60006020828403121560a057600080fd5b503591905056fea2646970667358221220e81805ecfa03d3133b90159ff34bb38b98f444ed95e9a3a8a8bda5571aa966cb64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModValueStoreField

    syntax S2KtestZModValueStoreField ::= "value1" [symbol(), klabel(field_test%ValueStore_value1)]

    syntax S2KtestZModValueStoreField ::= "value2" [symbol(), klabel(field_test%ValueStore_value2)]

    rule  ( #loc ( S2KtestZModValueStore . value1 ) => 0 )


    rule  ( #loc ( S2KtestZModValueStore . value2 ) => 1 )


    syntax Bytes ::= S2KtestZModValueStoreContract "." S2KtestZModValueStoreMethod [function(), symbol(), klabel(method_test%ValueStore)]

    syntax S2KtestZModValueStoreMethod ::= "S2KchangeValue1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%ValueStore_S2KchangeValue1_uint256)]

    syntax S2KtestZModValueStoreMethod ::= "S2KchangeValue2" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%ValueStore_S2KchangeValue2_uint256)]

    syntax S2KtestZModValueStoreMethod ::= "S2Kvalue1" "(" ")" [symbol(), klabel(method_test%ValueStore_S2Kvalue1_)]

    syntax S2KtestZModValueStoreMethod ::= "S2Kvalue2" "(" ")" [symbol(), klabel(method_test%ValueStore_S2Kvalue2_)]

    rule  ( S2KtestZModValueStore . S2KchangeValue1 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue1" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )


    rule  ( S2KtestZModValueStore . S2KchangeValue2 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue2" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )


    rule  ( S2KtestZModValueStore . S2Kvalue1 ( ) => #abiCallData ( "value1" , .TypedArgs ) )


    rule  ( S2KtestZModValueStore . S2Kvalue2 ( ) => #abiCallData ( "value2" , .TypedArgs ) )


    rule  ( selector ( "changeValue1(uint256)" ) => 1634438405 )


    rule  ( selector ( "changeValue2(uint256)" ) => 367426214 )


    rule  ( selector ( "value1()" ) => 808665403 )


    rule  ( selector ( "value2()" ) => 1563665023 )


endmodule

module S2KtestZModAmbiguousTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAmbiguousTestContract

    syntax S2KtestZModAmbiguousTestContract ::= "S2KtestZModAmbiguousTest" [symbol(), klabel(contract_test%AmbiguousTest)]

    rule  ( #binRuntime ( S2KtestZModAmbiguousTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063029ad3241461005c5780631bc8f2e51461007057806329f11b2414610081578063360da4d21461006e578063b44b821914610070575b600080fd5b61006e61006a36600461008f565b5050565b005b61006e61007e366004610104565b50565b61006e61007e36600461011d565b600080602083850312156100a257600080fd5b823567ffffffffffffffff808211156100ba57600080fd5b818501915085601f8301126100ce57600080fd5b8135818111156100dd57600080fd5b8660208260051b85010111156100f257600080fd5b60209290920196919550909350505050565b60006020828403121561011657600080fd5b5035919050565b60006020828403121561012f57600080fd5b813560ff8116811461014057600080fd5b939250505056fea2646970667358221220936666807f8fb02a8fcfd4e8703ab22b9e93ee2e18a103ebe670f84184c60c2e64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModAmbiguousTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061017d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063029ad3241461005c5780631bc8f2e51461007057806329f11b2414610081578063360da4d21461006e578063b44b821914610070575b600080fd5b61006e61006a36600461008f565b5050565b005b61006e61007e366004610104565b50565b61006e61007e36600461011d565b600080602083850312156100a257600080fd5b823567ffffffffffffffff808211156100ba57600080fd5b818501915085601f8301126100ce57600080fd5b8135818111156100dd57600080fd5b8660208260051b85010111156100f257600080fd5b60209290920196919550909350505050565b60006020828403121561011657600080fd5b5035919050565b60006020828403121561012f57600080fd5b813560ff8116811461014057600080fd5b939250505056fea2646970667358221220936666807f8fb02a8fcfd4e8703ab22b9e93ee2e18a103ebe670f84184c60c2e64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModAmbiguousTestContract "." S2KtestZModAmbiguousTestMethod [function(), symbol(), klabel(method_test%AmbiguousTest)]

    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndarrayZUndtype" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%AmbiguousTest_S2KtestZUndarrayZUndtype_uint256)]

    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndarrayZUndtype" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%AmbiguousTest_S2KtestZUndarrayZUndtype_uint256_uint256)]

    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_test%AmbiguousTest_S2KtestZUndassertZUndtrue_)]

    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%AmbiguousTest_S2KtestZUndassertZUndtrue_uint256)]

    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" Int ":" "uint8" ")" [symbol(), klabel(method_test%AmbiguousTest_S2KtestZUndassertZUndtrue_uint8)]

    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndarrayZUndtype ( V0_ : uint256 ) => #abiCallData ( "test_array_type" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )


    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndarrayZUndtype ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "test_array_type" , #array ( #uint256 ( V0_numbers_0 ) , 2 , #uint256 ( V0_numbers_0 ) , #uint256 ( V0_numbers_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))


    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )


    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndassertZUndtrue ( V0_ : uint256 ) => #abiCallData ( "test_assert_true" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )


    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndassertZUndtrue ( V0_ : uint8 ) => #abiCallData ( "test_assert_true" , #uint8 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_ )


    rule  ( selector ( "test_array_type(uint256)" ) => 3024847385 )


    rule  ( selector ( "test_array_type(uint256[])" ) => 43701028 )


    rule  ( selector ( "test_assert_true()" ) => 906863826 )


    rule  ( selector ( "test_assert_true(uint256)" ) => 466154213 )


    rule  ( selector ( "test_assert_true(uint8)" ) => 703666980 )


endmodule

module S2KtestZModArithmeticTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModArithmeticTestContract

    syntax S2KtestZModArithmeticTestContract ::= "S2KtestZModArithmeticTest" [symbol(), klabel(contract_test%ArithmeticTest)]

    rule  ( #binRuntime ( S2KtestZModArithmeticTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModArithmeticTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModArithmeticTestField

    syntax S2KtestZModArithmeticTestField ::= "stdstore" [symbol(), klabel(field_test%ArithmeticTest_stdstore)]

    syntax S2KtestZModArithmeticTestField ::= "IS_TEST" [symbol(), klabel(field_test%ArithmeticTest_IS_TEST)]

    syntax S2KtestZModArithmeticTestField ::= "_failed" [symbol(), klabel(field_test%ArithmeticTest__failed)]

    syntax S2KtestZModArithmeticTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ArithmeticTest_stdChainsInitialized)]

    syntax S2KtestZModArithmeticTestField ::= "chains" [symbol(), klabel(field_test%ArithmeticTest_chains)]

    syntax S2KtestZModArithmeticTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ArithmeticTest_defaultRpcUrls)]

    syntax S2KtestZModArithmeticTestField ::= "idToAlias" [symbol(), klabel(field_test%ArithmeticTest_idToAlias)]

    syntax S2KtestZModArithmeticTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ArithmeticTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModArithmeticTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ArithmeticTest_gasMeteringOff)]

    syntax S2KtestZModArithmeticTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ArithmeticTest__excludedContracts)]

    syntax S2KtestZModArithmeticTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ArithmeticTest__excludedSenders)]

    syntax S2KtestZModArithmeticTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ArithmeticTest__targetedContracts)]

    syntax S2KtestZModArithmeticTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ArithmeticTest__targetedSenders)]

    syntax S2KtestZModArithmeticTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ArithmeticTest__excludedArtifacts)]

    syntax S2KtestZModArithmeticTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ArithmeticTest__targetedArtifacts)]

    syntax S2KtestZModArithmeticTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ArithmeticTest__targetedArtifactSelectors)]

    syntax S2KtestZModArithmeticTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ArithmeticTest__targetedSelectors)]

    syntax S2KtestZModArithmeticTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ArithmeticTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModArithmeticTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModArithmeticTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModArithmeticTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModArithmeticTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModArithmeticTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModArithmeticTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModArithmeticTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModArithmeticTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModArithmeticTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModArithmeticTestContract "." S2KtestZModArithmeticTestMethod [function(), symbol(), klabel(method_test%ArithmeticTest)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KISZUndTEST_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KexcludeContracts_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KexcludeSenders_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2Kfailed_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtargetArtifacts_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtargetContracts_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtargetInterfaces_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtargetSelectors_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtargetSenders_)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUnddecreasingZUnddiv" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUnddecreasingZUnddiv_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndmax1" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndmax1_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndmax1ZUndbroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndmax1ZUndbroken_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndmax2" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndmax2_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwdivZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwdivZUndrounding_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasing" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasing_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndgtZUndone" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndgtZUndone_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndoverflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndoverflow_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndpositive_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndrounding_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverse_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow_uint256_uint256)]

    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticTest_S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive_uint256_uint256)]

    rule  ( S2KtestZModArithmeticTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticTest . S2KtestZUnddecreasingZUnddiv ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_decreasing_div" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndmax1 ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndmax1ZUndbroken ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1_broken" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndmax2 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_max2" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwdivZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wdiv_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasing ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasingZUndgtZUndone ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_gt_one" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasingZUndoverflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_overflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse_underflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_weakly_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_decreasing_div(uint256,uint256)" ) => 1011519306 )


    rule  ( selector ( "test_max1(uint256,uint256)" ) => 1625765100 )


    rule  ( selector ( "test_max1_broken(uint256,uint256)" ) => 2809107068 )


    rule  ( selector ( "test_max2(uint256,uint256)" ) => 434746443 )


    rule  ( selector ( "test_wdiv_rounding(uint256,uint256)" ) => 345004095 )


    rule  ( selector ( "test_wmul_increasing(uint256,uint256)" ) => 2784670501 )


    rule  ( selector ( "test_wmul_increasing_gt_one(uint256,uint256)" ) => 899022695 )


    rule  ( selector ( "test_wmul_increasing_overflow(uint256,uint256)" ) => 1123042280 )


    rule  ( selector ( "test_wmul_increasing_positive(uint256,uint256)" ) => 490103800 )


    rule  ( selector ( "test_wmul_rounding(uint256,uint256)" ) => 4261140569 )


    rule  ( selector ( "test_wmul_wdiv_inverse(uint256,uint256)" ) => 3719613508 )


    rule  ( selector ( "test_wmul_wdiv_inverse_underflow(uint256,uint256)" ) => 2736038219 )


    rule  ( selector ( "test_wmul_weakly_increasing_positive(uint256,uint256)" ) => 1421647895 )


endmodule

module S2KtestZModArithmeticCallTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModArithmeticCallTestContract

    syntax S2KtestZModArithmeticCallTestContract ::= "S2KtestZModArithmeticCallTest" [symbol(), klabel(contract_test%ArithmeticCallTest)]

    rule  ( #binRuntime ( S2KtestZModArithmeticCallTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063dfb7fed014610173578063e20c9f7114610186578063fa7626d41461018e57600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc61019b565b005b6100e66101e6565b6040516100f39190610a50565b60405180910390f35b610104610248565b6040516100f39190610acd565b6100e661038a565b6100e66103ea565b61012961044a565b6040516100f39190610ba8565b61013e610530565b6040516100f39190610c5b565b610129610600565b61013e6106e6565b6101636107b6565b60405190151581526020016100f3565b6100dc610181366004610cc8565b6108e3565b6100e66109e3565b6007546101639060ff1681565b6040516101a790610a43565b604051809103906000f0801580156101c3573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561023e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610220575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561036a5783829060005260206000200180546102dd90610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461030990610cea565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b5050505050815260200190600101906102be565b50505050815250508152602001906001019061026c565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561023e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610220575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561023e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610220575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103815760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104da5790505b5050505050815250508152602001906001019061046e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038157838290600052602060002001805461057390610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461059f90610cea565b80156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b505050505081526020019060010190610554565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103815760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ce57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106905790505b50505050508152505081526020019060010190610624565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038157838290600052602060002001805461072990610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461075590610cea565b80156107a25780601f10610777576101008083540402835291602001916107a2565b820191906000526020600020905b81548152906001019060200180831161078557829003601f168201915b50505050508152602001906001019061070a565b600754600090610100900460ff16156107d85750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108de5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610866917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d24565b60408051601f198184030181529082905261088091610d55565b6000604051808303816000865af19150503d80600081146108bd576040519150601f19603f3d011682016040523d82523d6000602084013e6108c2565b606091505b50915050808060200190518101906108da9190610d71565b9150505b919050565b601c5460405163771602f760e01b815260048101849052602481018390526000916001600160a01b03169063771602f790604401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610d9a565b601c5460405163771602f760e01b815260048101839052602481018590529192506001600160a01b03169063771602f790604401602060405180830381865afa1580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd9190610d9a565b90508281116109de576109de610db3565b505050565b6060601380548060200260200160405190810160405280929190818152602001828054801561023e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610220575050505050905090565b61026180610dca83390190565b6020808252825182820181905260009190848201906040850190845b81811015610a915783516001600160a01b031683529284019291840191600101610a6c565b50909695505050505050565b60005b83811015610ab8578181015183820152602001610aa0565b83811115610ac7576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b9b57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610b8457898403605f1901835284518051808652610b65818e88018f8501610a9d565b958c0195601f01601f1916949094018b019350918a0191600101610b3e565b509197505050938601935090850190600101610af4565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c4c57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c375783516001600160e01b0319168252928b019260019290920191908b0190610c0d565b50978a01979550505091870191600101610bd0565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b9b57878503603f1901845281518051808752610ca9818989018a8501610a9d565b601f01601f191695909501860194509285019290850190600101610c82565b60008060408385031215610cdb57600080fd5b50508035926020909101359150565b600181811c90821680610cfe57607f821691505b602082108103610d1e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d47816004850160208701610a9d565b919091016004019392505050565b60008251610d67818460208701610a9d565b9190910192915050565b600060208284031215610d8357600080fd5b81518015158114610d9357600080fd5b9392505050565b600060208284031215610dac57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fdfe608060405234801561001057600080fd5b50610241806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063771602f714610051578063b67d77c514610076578063d820f05b14610089578063f4fac2711461009c575b600080fd5b61006461005f3660046100ee565b6100af565b60405190815260200160405180910390f35b6100646100843660046100ee565b6100c2565b610064610097366004610110565b6100ce565b6100646100aa366004610110565b6100de565b60006100bb828461015c565b9392505050565b60006100bb8284610174565b60006100bb600f83900b8461018b565b60006100bb600f83900b846101ca565b6000806040838503121561010157600080fd5b50508035926020909101359150565b6000806040838503121561012357600080fd5b82359150602083013580600f0b811461013b57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561016f5761016f610146565b500190565b60008282101561018657610186610146565b500390565b60008083128015600160ff1b8501841216156101a9576101a9610146565b6001600160ff1b03840183138116156101c4576101c4610146565b50500390565b600080821280156001600160ff1b03849003851316156101ec576101ec610146565b600160ff1b839003841281161561020557610205610146565b5050019056fea2646970667358221220aae9baa29d0194649d33b47596bce9ba1e21c9a0250efff1d2fa37115b755cff64736f6c634300080d0033a2646970667358221220bc429b4492f48ed7667d37f1e8f35ba469f76d2c60dc61ec4a1acc51e649217864736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModArithmeticCallTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506110608061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063dfb7fed014610173578063e20c9f7114610186578063fa7626d41461018e57600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc61019b565b005b6100e66101e6565b6040516100f39190610a50565b60405180910390f35b610104610248565b6040516100f39190610acd565b6100e661038a565b6100e66103ea565b61012961044a565b6040516100f39190610ba8565b61013e610530565b6040516100f39190610c5b565b610129610600565b61013e6106e6565b6101636107b6565b60405190151581526020016100f3565b6100dc610181366004610cc8565b6108e3565b6100e66109e3565b6007546101639060ff1681565b6040516101a790610a43565b604051809103906000f0801580156101c3573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561023e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610220575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561036a5783829060005260206000200180546102dd90610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461030990610cea565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b5050505050815260200190600101906102be565b50505050815250508152602001906001019061026c565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561023e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610220575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561023e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610220575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103815760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104da5790505b5050505050815250508152602001906001019061046e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038157838290600052602060002001805461057390610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461059f90610cea565b80156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b505050505081526020019060010190610554565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103815760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ce57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106905790505b50505050508152505081526020019060010190610624565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038157838290600052602060002001805461072990610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461075590610cea565b80156107a25780601f10610777576101008083540402835291602001916107a2565b820191906000526020600020905b81548152906001019060200180831161078557829003601f168201915b50505050508152602001906001019061070a565b600754600090610100900460ff16156107d85750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108de5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610866917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d24565b60408051601f198184030181529082905261088091610d55565b6000604051808303816000865af19150503d80600081146108bd576040519150601f19603f3d011682016040523d82523d6000602084013e6108c2565b606091505b50915050808060200190518101906108da9190610d71565b9150505b919050565b601c5460405163771602f760e01b815260048101849052602481018390526000916001600160a01b03169063771602f790604401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610d9a565b601c5460405163771602f760e01b815260048101839052602481018590529192506001600160a01b03169063771602f790604401602060405180830381865afa1580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd9190610d9a565b90508281116109de576109de610db3565b505050565b6060601380548060200260200160405190810160405280929190818152602001828054801561023e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610220575050505050905090565b61026180610dca83390190565b6020808252825182820181905260009190848201906040850190845b81811015610a915783516001600160a01b031683529284019291840191600101610a6c565b50909695505050505050565b60005b83811015610ab8578181015183820152602001610aa0565b83811115610ac7576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b9b57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610b8457898403605f1901835284518051808652610b65818e88018f8501610a9d565b958c0195601f01601f1916949094018b019350918a0191600101610b3e565b509197505050938601935090850190600101610af4565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c4c57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c375783516001600160e01b0319168252928b019260019290920191908b0190610c0d565b50978a01979550505091870191600101610bd0565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b9b57878503603f1901845281518051808752610ca9818989018a8501610a9d565b601f01601f191695909501860194509285019290850190600101610c82565b60008060408385031215610cdb57600080fd5b50508035926020909101359150565b600181811c90821680610cfe57607f821691505b602082108103610d1e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d47816004850160208701610a9d565b919091016004019392505050565b60008251610d67818460208701610a9d565b9190910192915050565b600060208284031215610d8357600080fd5b81518015158114610d9357600080fd5b9392505050565b600060208284031215610dac57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fdfe608060405234801561001057600080fd5b50610241806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063771602f714610051578063b67d77c514610076578063d820f05b14610089578063f4fac2711461009c575b600080fd5b61006461005f3660046100ee565b6100af565b60405190815260200160405180910390f35b6100646100843660046100ee565b6100c2565b610064610097366004610110565b6100ce565b6100646100aa366004610110565b6100de565b60006100bb828461015c565b9392505050565b60006100bb8284610174565b60006100bb600f83900b8461018b565b60006100bb600f83900b846101ca565b6000806040838503121561010157600080fd5b50508035926020909101359150565b6000806040838503121561012357600080fd5b82359150602083013580600f0b811461013b57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561016f5761016f610146565b500190565b60008282101561018657610186610146565b500390565b60008083128015600160ff1b8501841216156101a9576101a9610146565b6001600160ff1b03840183138116156101c4576101c4610146565b50500390565b600080821280156001600160ff1b03849003851316156101ec576101ec610146565b600160ff1b839003841281161561020557610205610146565b5050019056fea2646970667358221220aae9baa29d0194649d33b47596bce9ba1e21c9a0250efff1d2fa37115b755cff64736f6c634300080d0033a2646970667358221220bc429b4492f48ed7667d37f1e8f35ba469f76d2c60dc61ec4a1acc51e649217864736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModArithmeticCallTestField

    syntax S2KtestZModArithmeticCallTestField ::= "stdstore" [symbol(), klabel(field_test%ArithmeticCallTest_stdstore)]

    syntax S2KtestZModArithmeticCallTestField ::= "IS_TEST" [symbol(), klabel(field_test%ArithmeticCallTest_IS_TEST)]

    syntax S2KtestZModArithmeticCallTestField ::= "_failed" [symbol(), klabel(field_test%ArithmeticCallTest__failed)]

    syntax S2KtestZModArithmeticCallTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ArithmeticCallTest_stdChainsInitialized)]

    syntax S2KtestZModArithmeticCallTestField ::= "chains" [symbol(), klabel(field_test%ArithmeticCallTest_chains)]

    syntax S2KtestZModArithmeticCallTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ArithmeticCallTest_defaultRpcUrls)]

    syntax S2KtestZModArithmeticCallTestField ::= "idToAlias" [symbol(), klabel(field_test%ArithmeticCallTest_idToAlias)]

    syntax S2KtestZModArithmeticCallTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ArithmeticCallTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModArithmeticCallTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ArithmeticCallTest_gasMeteringOff)]

    syntax S2KtestZModArithmeticCallTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ArithmeticCallTest__excludedContracts)]

    syntax S2KtestZModArithmeticCallTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ArithmeticCallTest__excludedSenders)]

    syntax S2KtestZModArithmeticCallTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ArithmeticCallTest__targetedContracts)]

    syntax S2KtestZModArithmeticCallTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ArithmeticCallTest__targetedSenders)]

    syntax S2KtestZModArithmeticCallTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ArithmeticCallTest__excludedArtifacts)]

    syntax S2KtestZModArithmeticCallTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ArithmeticCallTest__targetedArtifacts)]

    syntax S2KtestZModArithmeticCallTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ArithmeticCallTest__targetedArtifactSelectors)]

    syntax S2KtestZModArithmeticCallTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ArithmeticCallTest__targetedSelectors)]

    syntax S2KtestZModArithmeticCallTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ArithmeticCallTest__targetedInterfaces)]

    syntax S2KtestZModArithmeticCallTestField ::= "arith" [symbol(), klabel(field_test%ArithmeticCallTest_arith)]

    rule  ( #loc ( S2KtestZModArithmeticCallTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModArithmeticCallTest . arith ) => 28 )


    syntax Bytes ::= S2KtestZModArithmeticCallTestContract "." S2KtestZModArithmeticCallTestMethod [function(), symbol(), klabel(method_test%ArithmeticCallTest)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KISZUndTEST_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KexcludeContracts_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KexcludeSenders_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2Kfailed_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KsetUp_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtargetArtifacts_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtargetContracts_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtargetInterfaces_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtargetSelectors_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtargetSenders_)]

    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtestZUnddoubleZUndadd" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%ArithmeticCallTest_S2KtestZUnddoubleZUndadd_uint256_uint256)]

    rule  ( S2KtestZModArithmeticCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModArithmeticCallTest . S2KtestZUnddoubleZUndadd ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_double_add" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_double_add(uint256,uint256)" ) => 3753377488 )


endmodule

module S2KsrcZModArithmeticContract-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModArithmeticContractContract

    syntax S2KsrcZModArithmeticContractContract ::= "S2KsrcZModArithmeticContract" [symbol(), klabel(contract_src%ArithmeticContract)]

    rule  ( #binRuntime ( S2KsrcZModArithmeticContract ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063771602f714610051578063b67d77c514610076578063d820f05b14610089578063f4fac2711461009c575b600080fd5b61006461005f3660046100ee565b6100af565b60405190815260200160405180910390f35b6100646100843660046100ee565b6100c2565b610064610097366004610110565b6100ce565b6100646100aa366004610110565b6100de565b60006100bb828461015c565b9392505050565b60006100bb8284610174565b60006100bb600f83900b8461018b565b60006100bb600f83900b846101ca565b6000806040838503121561010157600080fd5b50508035926020909101359150565b6000806040838503121561012357600080fd5b82359150602083013580600f0b811461013b57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561016f5761016f610146565b500190565b60008282101561018657610186610146565b500390565b60008083128015600160ff1b8501841216156101a9576101a9610146565b6001600160ff1b03840183138116156101c4576101c4610146565b50500390565b600080821280156001600160ff1b03849003851316156101ec576101ec610146565b600160ff1b839003841281161561020557610205610146565b5050019056fea2646970667358221220aae9baa29d0194649d33b47596bce9ba1e21c9a0250efff1d2fa37115b755cff64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModArithmeticContract ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610241806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063771602f714610051578063b67d77c514610076578063d820f05b14610089578063f4fac2711461009c575b600080fd5b61006461005f3660046100ee565b6100af565b60405190815260200160405180910390f35b6100646100843660046100ee565b6100c2565b610064610097366004610110565b6100ce565b6100646100aa366004610110565b6100de565b60006100bb828461015c565b9392505050565b60006100bb8284610174565b60006100bb600f83900b8461018b565b60006100bb600f83900b846101ca565b6000806040838503121561010157600080fd5b50508035926020909101359150565b6000806040838503121561012357600080fd5b82359150602083013580600f0b811461013b57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561016f5761016f610146565b500190565b60008282101561018657610186610146565b500390565b60008083128015600160ff1b8501841216156101a9576101a9610146565b6001600160ff1b03840183138116156101c4576101c4610146565b50500390565b600080821280156001600160ff1b03849003851316156101ec576101ec610146565b600160ff1b839003841281161561020557610205610146565b5050019056fea2646970667358221220aae9baa29d0194649d33b47596bce9ba1e21c9a0250efff1d2fa37115b755cff64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KsrcZModArithmeticContractContract "." S2KsrcZModArithmeticContractMethod [function(), symbol(), klabel(method_src%ArithmeticContract)]

    syntax S2KsrcZModArithmeticContractMethod ::= "S2Kadd" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%ArithmeticContract_S2Kadd_uint256_uint256)]

    syntax S2KsrcZModArithmeticContractMethod ::= "S2Kaddi" "(" Int ":" "uint256" "," Int ":" "int128" ")" [symbol(), klabel(method_src%ArithmeticContract_S2Kaddi_uint256_int128)]

    syntax S2KsrcZModArithmeticContractMethod ::= "S2Ksub" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%ArithmeticContract_S2Ksub_uint256_uint256)]

    syntax S2KsrcZModArithmeticContractMethod ::= "S2Ksubi" "(" Int ":" "uint256" "," Int ":" "int128" ")" [symbol(), klabel(method_src%ArithmeticContract_S2Ksubi_uint256_int128)]

    rule  ( S2KsrcZModArithmeticContract . S2Kadd ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))


    rule  ( S2KsrcZModArithmeticContract . S2Kaddi ( V0_x : uint256 , V1_y : int128 ) => #abiCallData ( "addi" , #uint256 ( V0_x ) , #int128 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeSInt ( 128 , V1_y )
               ))


    rule  ( S2KsrcZModArithmeticContract . S2Ksub ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "sub" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))


    rule  ( S2KsrcZModArithmeticContract . S2Ksubi ( V0_x : uint256 , V1_y : int128 ) => #abiCallData ( "subi" , #uint256 ( V0_x ) , #int128 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeSInt ( 128 , V1_y )
               ))


    rule  ( selector ( "add(uint256,uint256)" ) => 1997931255 )


    rule  ( selector ( "addi(uint256,int128)" ) => 4110074481 )


    rule  ( selector ( "sub(uint256,uint256)" ) => 3061675973 )


    rule  ( selector ( "subi(uint256,int128)" ) => 3626037339 )


endmodule

module S2KtestZModAssumeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAssumeTestContract

    syntax S2KtestZModAssumeTestContract ::= "S2KtestZModAssumeTest" [symbol(), klabel(contract_test%AssumeTest)]

    rule  ( #binRuntime ( S2KtestZModAssumeTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModAssumeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506114928061003d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636eef607c116100a2578063b5508aa911610071578063b5508aa9146101d3578063ba414fa6146101db578063e20c9f71146101f3578063e41befb414610110578063fa7626d4146101fb57600080fd5b80636eef607c1461017b57806385226c81146101a3578063916a17c6146101b85780639c7670e4146101c057600080fd5b80633f7286f4116100de5780633f7286f41461016057806358313c47146101685780635f2e70fb1461017b57806366d9a9a01461018e57600080fd5b80630eb656da146101105780631ed7831c146101255780632ade3880146101435780633e5e3c2314610158575b600080fd5b61012361011e36600461106c565b610208565b005b61012d610276565b60405161013a919061108e565b60405180910390f35b61014b6102d8565b60405161013a919061110b565b61012d61041a565b61012d61047a565b6101236101763660046111f4565b6104da565b61012361018936600461106c565b610580565b6101966105b3565b60405161013a9190611218565b6101ab610699565b60405161013a91906112cb565b610196610769565b6101236101ce36600461134f565b61084f565b6101ab610bf9565b6101e3610cc9565b604051901515815260200161013a565b61012d610dea565b6007546101e39060ff1681565b604051632631f2b160e11b815281831415600482015260008051602061143d83398151915290634c63e562906024015b60006040518083038186803b15801561025057600080fd5b505afa158015610264573d6000803e3d6000fd5b505050506102728282610e4a565b5050565b606060148054806020026020016040519081016040528092919081815260200182805480156102ce57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102b0575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561041157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103fa57838290600052602060002001805461036d90611382565b80601f016020809104026020016040519081016040528092919081815260200182805461039990611382565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b50505050508152602001906001019061034e565b5050505081525050815260200190600101906102fc565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102ce576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102b0575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102ce576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102b0575050505050905090565b604051811515602482015260008051602061143d8339815191529060440160408051601f198184030181529181526020820180516001600160e01b0316632631f2b160e11b1790525161052d91906113bc565b600060405180830381855afa9150503d8060008114610568576040519150601f19603f3d011682016040523d82523d6000602084013e61056d565b606091505b5050508061057d5761057d6113d8565b50565b604051632631f2b160e11b8152818314600482015260008051602061143d83398151915290634c63e56290602401610238565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104115760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561068157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106435790505b505050505081525050815260200190600101906105d7565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104115783829060005260206000200180546106dc90611382565b80601f016020809104026020016040519081016040528092919081815260200182805461070890611382565b80156107555780601f1061072a57610100808354040283529160200191610755565b820191906000526020600020905b81548152906001019060200180831161073857829003601f168201915b5050505050815260200190600101906106bd565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104115760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561083757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107f95790505b5050505050815250508152602001906001019061078d565b604051632631f2b160e11b81526a636f6e736f6c652e6c6f676001600160a01b0384161415600482015260008051602061143d83398151915290634c63e5629060240160006040518083038186803b1580156108aa57600080fd5b505afa1580156108be573d6000803e3d6000fd5b5050604051632631f2b160e11b8152731804c8ab1f12e6bbf3894d4083f33e07309d1f386001600160a01b0386161415600482015260008051602061143d8339815191529250634c63e562915060240160006040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b5050604051632631f2b160e11b815260008051602061143d8339815191526001600160a01b03861681141560048301529250634c63e562915060240160006040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b5050604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b0386161415600482015260008051602061143d8339815191529250634c63e562915060240160006040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b5050604051632631f2b160e11b81526a636f6e736f6c652e6c6f676001600160a01b0385161415600482015260008051602061143d8339815191529250634c63e562915060240160006040518083038186803b158015610a7d57600080fd5b505afa158015610a91573d6000803e3d6000fd5b5050604051632631f2b160e11b8152731804c8ab1f12e6bbf3894d4083f33e07309d1f386001600160a01b0385161415600482015260008051602061143d8339815191529250634c63e562915060240160006040518083038186803b158015610af957600080fd5b505afa158015610b0d573d6000803e3d6000fd5b5050604051632631f2b160e11b815260008051602061143d8339815191526001600160a01b03851681141560048301529250634c63e562915060240160006040518083038186803b158015610b6157600080fd5b505afa158015610b75573d6000803e3d6000fd5b5050604051632631f2b160e11b8152737fa9385be102ac3eac297483dd6233d62b3e14966001600160a01b0385161415600482015260008051602061143d8339815191529250634c63e562915060240160006040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050505050565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610411578382906000526020600020018054610c3c90611382565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6890611382565b8015610cb55780601f10610c8a57610100808354040283529160200191610cb5565b820191906000526020600020905b815481529060010190602001808311610c9857829003601f168201915b505050505081526020019060010190610c1d565b600754600090610100900460ff1615610ceb5750600754610100900460ff1690565b600060008051602061143d8339815191523b15610de5576040805160008051602061143d833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610d6d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113ee565b60408051601f1981840301815290829052610d87916113bc565b6000604051808303816000865af19150503d8060008114610dc4576040519150601f19603f3d011682016040523d82523d6000602084013e610dc9565b606091505b5091505080806020019051810190610de1919061141f565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102ce576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102b0575050505050905090565b808214610272577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610ebb9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161027260008051602061143d8339815191523b1561105b576040805160008051602061143d833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610ffa92916020016113ee565b60408051601f1981840301815290829052611014916113bc565b6000604051808303816000865af19150503d8060008114611051576040519150601f19603f3d011682016040523d82523d6000602084013e611056565b606091505b505050505b6007805461ff001916610100179055565b6000806040838503121561107f57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156110cf5783516001600160a01b0316835292840192918401916001016110aa565b50909695505050505050565b60005b838110156110f65781810151838201526020016110de565b83811115611105576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111d957603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156111c257898403605f19018352845180518086526111a3818e88018f85016110db565b958c0195601f01601f1916949094018b019350918a019160010161117c565b509197505050938601935090850190600101611132565b5092979650505050505050565b801515811461057d57600080fd5b60006020828403121561120657600080fd5b8135611211816111e6565b9392505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156112bc57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112a75783516001600160e01b0319168252928b019260019290920191908b019061127d565b50978a01979550505091870191600101611240565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111d957878503603f1901845281518051808752611319818989018a85016110db565b601f01601f1916959095018601945092850192908501906001016112f2565b80356001600160a01b0381168114610de557600080fd5b6000806040838503121561136257600080fd5b61136b83611338565b915061137960208401611338565b90509250929050565b600181811c9082168061139657607f821691505b6020821081036113b657634e487b7160e01b600052602260045260246000fd5b50919050565b600082516113ce8184602087016110db565b9190910192915050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b03198316815281516000906114118160048501602087016110db565b919091016004019392505050565b60006020828403121561143157600080fd5b8151611211816111e656fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220a551c21488126ca999622eac90e6e47237cb7ca6b1e19dbc2c930d11b7e2433164736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModAssumeTestField

    syntax S2KtestZModAssumeTestField ::= "stdstore" [symbol(), klabel(field_test%AssumeTest_stdstore)]

    syntax S2KtestZModAssumeTestField ::= "IS_TEST" [symbol(), klabel(field_test%AssumeTest_IS_TEST)]

    syntax S2KtestZModAssumeTestField ::= "_failed" [symbol(), klabel(field_test%AssumeTest__failed)]

    syntax S2KtestZModAssumeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%AssumeTest_stdChainsInitialized)]

    syntax S2KtestZModAssumeTestField ::= "chains" [symbol(), klabel(field_test%AssumeTest_chains)]

    syntax S2KtestZModAssumeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%AssumeTest_defaultRpcUrls)]

    syntax S2KtestZModAssumeTestField ::= "idToAlias" [symbol(), klabel(field_test%AssumeTest_idToAlias)]

    syntax S2KtestZModAssumeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%AssumeTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModAssumeTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%AssumeTest_gasMeteringOff)]

    syntax S2KtestZModAssumeTestField ::= "_excludedContracts" [symbol(), klabel(field_test%AssumeTest__excludedContracts)]

    syntax S2KtestZModAssumeTestField ::= "_excludedSenders" [symbol(), klabel(field_test%AssumeTest__excludedSenders)]

    syntax S2KtestZModAssumeTestField ::= "_targetedContracts" [symbol(), klabel(field_test%AssumeTest__targetedContracts)]

    syntax S2KtestZModAssumeTestField ::= "_targetedSenders" [symbol(), klabel(field_test%AssumeTest__targetedSenders)]

    syntax S2KtestZModAssumeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%AssumeTest__excludedArtifacts)]

    syntax S2KtestZModAssumeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%AssumeTest__targetedArtifacts)]

    syntax S2KtestZModAssumeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%AssumeTest__targetedArtifactSelectors)]

    syntax S2KtestZModAssumeTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%AssumeTest__targetedSelectors)]

    syntax S2KtestZModAssumeTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%AssumeTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModAssumeTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModAssumeTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModAssumeTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModAssumeTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModAssumeTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModAssumeTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModAssumeTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModAssumeTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModAssumeTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModAssumeTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModAssumeTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModAssumeTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModAssumeTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModAssumeTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModAssumeTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModAssumeTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModAssumeTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModAssumeTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModAssumeTestContract "." S2KtestZModAssumeTestMethod [function(), symbol(), klabel(method_test%AssumeTest)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KISZUndTEST_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KexcludeContracts_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KexcludeSenders_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2Kfailed_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KtargetArtifacts_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KtargetContracts_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KtargetInterfaces_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KtargetSelectors_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%AssumeTest_S2KtargetSenders_)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtestFailZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%AssumeTest_S2KtestFailZUndassumeZUndfalse_uint256_uint256)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtestFailZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%AssumeTest_S2KtestFailZUndassumeZUndtrue_uint256_uint256)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%AssumeTest_S2KtestZUndassumeZUndfalse_uint256_uint256)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndassumeZUndstaticCall" "(" Int ":" "bool" ")" [symbol(), klabel(method_test%AssumeTest_S2KtestZUndassumeZUndstaticCall_bool)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%AssumeTest_S2KtestZUndassumeZUndtrue_uint256_uint256)]

    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndmultiZUndassume" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_test%AssumeTest_S2KtestZUndmultiZUndassume_address_address)]

    rule  ( S2KtestZModAssumeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAssumeTest . S2KtestFailZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModAssumeTest . S2KtestFailZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModAssumeTest . S2KtestZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModAssumeTest . S2KtestZUndassumeZUndstaticCall ( V0_a : bool ) => #abiCallData ( "test_assume_staticCall" , #bool ( V0_a ) , .TypedArgs ) )
       ensures #rangeBool ( V0_a )


    rule  ( S2KtestZModAssumeTest . S2KtestZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KtestZModAssumeTest . S2KtestZUndmultiZUndassume ( V0_alice : address , V1_bob : address ) => #abiCallData ( "test_multi_assume" , #address ( V0_alice ) , #address ( V1_bob ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_alice )
       andBool ( #rangeAddress ( V1_bob )
               ))


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_assume_false(uint256,uint256)" ) => 1596879099 )


    rule  ( selector ( "testFail_assume_true(uint256,uint256)" ) => 246830810 )


    rule  ( selector ( "test_assume_false(uint256,uint256)" ) => 3827036084 )


    rule  ( selector ( "test_assume_staticCall(bool)" ) => 1479621703 )


    rule  ( selector ( "test_assume_true(uint256,uint256)" ) => 1861181564 )


    rule  ( selector ( "test_multi_assume(address,address)" ) => 2625007844 )


endmodule

module S2KtestZModBMCLoopsTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModBMCLoopsTestContract

    syntax S2KtestZModBMCLoopsTestContract ::= "S2KtestZModBMCLoopsTest" [symbol(), klabel(contract_test%BMCLoopsTest)]

    rule  ( #binRuntime ( S2KtestZModBMCLoopsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa614610197578063bdbd8cd8146101af578063e20c9f71146101c2578063fa7626d4146101ca57600080fd5b8063916a17c61461017257806396e037911461017a578063b5508aa91461018f57600080fd5b80633f7286f4116100c85780633f7286f41461012a57806346e696bc1461013257806366d9a9a01461014857806385226c811461015d57600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101d7565b6040516101049190610c59565b60405180910390f35b610115610239565b6040516101049190610cd6565b6100f761037b565b6100f76103db565b61013a61043b565b604051908152602001610104565b61015061046a565b6040516101049190610db1565b610165610550565b6040516101049190610e64565b610150610620565b61018d610188366004610ed1565b610706565b005b61016561073e565b61019f61080e565b6040519015158152602001610104565b61013a6101bd366004610ed1565b61093b565b6100f76109cb565b60075461019f9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610211575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561037257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561035b5783829060005260206000200180546102ce90610eea565b80601f01602080910402602001604051908101604052809291908181526020018280546102fa90610eea565b80156103475780601f1061031c57610100808354040283529160200191610347565b820191906000526020600020905b81548152906001019060200180831161032a57829003601f168201915b5050505050815260200190600101906102af565b50505050815250508152602001906001019061025d565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610211575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610211575050505050905090565b600060035b801561045857610451600182610f3a565b9050610440565b801561046657610466610f51565b5090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103725760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104fa5790505b5050505050815250508152602001906001019061048e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561037257838290600052602060002001805461059390610eea565b80601f01602080910402602001604051908101604052809291908181526020018280546105bf90610eea565b801561060c5780601f106105e15761010080835404028352916020019161060c565b820191906000526020600020905b8154815290600101906020018083116105ef57829003601f168201915b505050505081526020019060010190610574565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103725760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ee57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b05790505b50505050508152505081526020019060010190610644565b6000805b8281101561072f5761071d600183610f67565b915061072881610f7f565b905061070a565b5061073a8183610a2b565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561037257838290600052602060002001805461078190610eea565b80601f01602080910402602001604051908101604052809291908181526020018280546107ad90610eea565b80156107fa5780601f106107cf576101008083540402835291602001916107fa565b820191906000526020600020905b8154815290600101906020018083116107dd57829003601f168201915b505050505081526020019060010190610762565b600754600090610100900460ff16156108305750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109365760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108be917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610f98565b60408051601f19818403018152908290526108d891610fc9565b6000604051808303816000865af19150503d8060008114610915576040519150601f19603f3d011682016040523d82523d6000602084013e61091a565b606091505b50915050808060200190518101906109329190610fe5565b9150505b919050565b604051632631f2b160e11b815260038211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561098c57600080fd5b505afa1580156109a0573d6000803e3d6000fd5b505050505b81156109bd576109b6600183610f3a565b91506109a5565b811561093657610936610f51565b6060601380548060200260200160405190810160405280929190818152602001828054801561022f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610211575050505050905090565b80821461073a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a9c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161073a737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c485760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610be79291602001610f98565b60408051601f1981840301815290829052610c0191610fc9565b6000604051808303816000865af19150503d8060008114610c3e576040519150601f19603f3d011682016040523d82523d6000602084013e610c43565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610c9a5783516001600160a01b031683529284019291840191600101610c75565b50909695505050505050565b60005b83811015610cc1578181015183820152602001610ca9565b83811115610cd0576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610da457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610d8d57898403605f1901835284518051808652610d6e818e88018f8501610ca6565b958c0195601f01601f1916949094018b019350918a0191600101610d47565b509197505050938601935090850190600101610cfd565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610e5557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610e405783516001600160e01b0319168252928b019260019290920191908b0190610e16565b50978a01979550505091870191600101610dd9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610da457878503603f1901845281518051808752610eb2818989018a8501610ca6565b601f01601f191695909501860194509285019290850190600101610e8b565b600060208284031215610ee357600080fd5b5035919050565b600181811c90821680610efe57607f821691505b602082108103610f1e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610f4c57610f4c610f24565b500390565b634e487b7160e01b600052600160045260246000fd5b60008219821115610f7a57610f7a610f24565b500190565b600060018201610f9157610f91610f24565b5060010190565b6001600160e01b0319831681528151600090610fbb816004850160208701610ca6565b919091016004019392505050565b60008251610fdb818460208701610ca6565b9190910192915050565b600060208284031215610ff757600080fd5b8151801515811461100757600080fd5b939250505056fea2646970667358221220b0d0bbb2936572a7dee9c5ccfeca0d27165fb098dcc40d6081c69c7bd1c782d364736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModBMCLoopsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506110448061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa614610197578063bdbd8cd8146101af578063e20c9f71146101c2578063fa7626d4146101ca57600080fd5b8063916a17c61461017257806396e037911461017a578063b5508aa91461018f57600080fd5b80633f7286f4116100c85780633f7286f41461012a57806346e696bc1461013257806366d9a9a01461014857806385226c811461015d57600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101d7565b6040516101049190610c59565b60405180910390f35b610115610239565b6040516101049190610cd6565b6100f761037b565b6100f76103db565b61013a61043b565b604051908152602001610104565b61015061046a565b6040516101049190610db1565b610165610550565b6040516101049190610e64565b610150610620565b61018d610188366004610ed1565b610706565b005b61016561073e565b61019f61080e565b6040519015158152602001610104565b61013a6101bd366004610ed1565b61093b565b6100f76109cb565b60075461019f9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610211575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561037257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561035b5783829060005260206000200180546102ce90610eea565b80601f01602080910402602001604051908101604052809291908181526020018280546102fa90610eea565b80156103475780601f1061031c57610100808354040283529160200191610347565b820191906000526020600020905b81548152906001019060200180831161032a57829003601f168201915b5050505050815260200190600101906102af565b50505050815250508152602001906001019061025d565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610211575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610211575050505050905090565b600060035b801561045857610451600182610f3a565b9050610440565b801561046657610466610f51565b5090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103725760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104fa5790505b5050505050815250508152602001906001019061048e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561037257838290600052602060002001805461059390610eea565b80601f01602080910402602001604051908101604052809291908181526020018280546105bf90610eea565b801561060c5780601f106105e15761010080835404028352916020019161060c565b820191906000526020600020905b8154815290600101906020018083116105ef57829003601f168201915b505050505081526020019060010190610574565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103725760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ee57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b05790505b50505050508152505081526020019060010190610644565b6000805b8281101561072f5761071d600183610f67565b915061072881610f7f565b905061070a565b5061073a8183610a2b565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561037257838290600052602060002001805461078190610eea565b80601f01602080910402602001604051908101604052809291908181526020018280546107ad90610eea565b80156107fa5780601f106107cf576101008083540402835291602001916107fa565b820191906000526020600020905b8154815290600101906020018083116107dd57829003601f168201915b505050505081526020019060010190610762565b600754600090610100900460ff16156108305750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109365760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108be917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610f98565b60408051601f19818403018152908290526108d891610fc9565b6000604051808303816000865af19150503d8060008114610915576040519150601f19603f3d011682016040523d82523d6000602084013e61091a565b606091505b50915050808060200190518101906109329190610fe5565b9150505b919050565b604051632631f2b160e11b815260038211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561098c57600080fd5b505afa1580156109a0573d6000803e3d6000fd5b505050505b81156109bd576109b6600183610f3a565b91506109a5565b811561093657610936610f51565b6060601380548060200260200160405190810160405280929190818152602001828054801561022f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610211575050505050905090565b80821461073a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a9c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161073a737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c485760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610be79291602001610f98565b60408051601f1981840301815290829052610c0191610fc9565b6000604051808303816000865af19150503d8060008114610c3e576040519150601f19603f3d011682016040523d82523d6000602084013e610c43565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610c9a5783516001600160a01b031683529284019291840191600101610c75565b50909695505050505050565b60005b83811015610cc1578181015183820152602001610ca9565b83811115610cd0576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610da457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610d8d57898403605f1901835284518051808652610d6e818e88018f8501610ca6565b958c0195601f01601f1916949094018b019350918a0191600101610d47565b509197505050938601935090850190600101610cfd565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610e5557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610e405783516001600160e01b0319168252928b019260019290920191908b0190610e16565b50978a01979550505091870191600101610dd9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610da457878503603f1901845281518051808752610eb2818989018a8501610ca6565b601f01601f191695909501860194509285019290850190600101610e8b565b600060208284031215610ee357600080fd5b5035919050565b600181811c90821680610efe57607f821691505b602082108103610f1e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610f4c57610f4c610f24565b500390565b634e487b7160e01b600052600160045260246000fd5b60008219821115610f7a57610f7a610f24565b500190565b600060018201610f9157610f91610f24565b5060010190565b6001600160e01b0319831681528151600090610fbb816004850160208701610ca6565b919091016004019392505050565b60008251610fdb818460208701610ca6565b9190910192915050565b600060208284031215610ff757600080fd5b8151801515811461100757600080fd5b939250505056fea2646970667358221220b0d0bbb2936572a7dee9c5ccfeca0d27165fb098dcc40d6081c69c7bd1c782d364736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModBMCLoopsTestField

    syntax S2KtestZModBMCLoopsTestField ::= "stdstore" [symbol(), klabel(field_test%BMCLoopsTest_stdstore)]

    syntax S2KtestZModBMCLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_test%BMCLoopsTest_IS_TEST)]

    syntax S2KtestZModBMCLoopsTestField ::= "_failed" [symbol(), klabel(field_test%BMCLoopsTest__failed)]

    syntax S2KtestZModBMCLoopsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%BMCLoopsTest_stdChainsInitialized)]

    syntax S2KtestZModBMCLoopsTestField ::= "chains" [symbol(), klabel(field_test%BMCLoopsTest_chains)]

    syntax S2KtestZModBMCLoopsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%BMCLoopsTest_defaultRpcUrls)]

    syntax S2KtestZModBMCLoopsTestField ::= "idToAlias" [symbol(), klabel(field_test%BMCLoopsTest_idToAlias)]

    syntax S2KtestZModBMCLoopsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%BMCLoopsTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModBMCLoopsTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%BMCLoopsTest_gasMeteringOff)]

    syntax S2KtestZModBMCLoopsTestField ::= "_excludedContracts" [symbol(), klabel(field_test%BMCLoopsTest__excludedContracts)]

    syntax S2KtestZModBMCLoopsTestField ::= "_excludedSenders" [symbol(), klabel(field_test%BMCLoopsTest__excludedSenders)]

    syntax S2KtestZModBMCLoopsTestField ::= "_targetedContracts" [symbol(), klabel(field_test%BMCLoopsTest__targetedContracts)]

    syntax S2KtestZModBMCLoopsTestField ::= "_targetedSenders" [symbol(), klabel(field_test%BMCLoopsTest__targetedSenders)]

    syntax S2KtestZModBMCLoopsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%BMCLoopsTest__excludedArtifacts)]

    syntax S2KtestZModBMCLoopsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%BMCLoopsTest__targetedArtifacts)]

    syntax S2KtestZModBMCLoopsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%BMCLoopsTest__targetedArtifactSelectors)]

    syntax S2KtestZModBMCLoopsTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%BMCLoopsTest__targetedSelectors)]

    syntax S2KtestZModBMCLoopsTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%BMCLoopsTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModBMCLoopsTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModBMCLoopsTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModBMCLoopsTestContract "." S2KtestZModBMCLoopsTestMethod [function(), symbol(), klabel(method_test%BMCLoopsTest)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KISZUndTEST_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KexcludeContracts_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KexcludeSenders_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2Kfailed_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtargetArtifacts_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtargetContracts_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtargetInterfaces_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtargetSelectors_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtargetSenders_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtestZUndbmc" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtestZUndbmc_uint256)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndconcrete" "(" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtestZUndcountdownZUndconcrete_)]

    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%BMCLoopsTest_S2KtestZUndcountdownZUndsymbolic_uint256)]

    rule  ( S2KtestZModBMCLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtestZUndbmc ( V0_n : uint256 ) => #abiCallData ( "test_bmc" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( S2KtestZModBMCLoopsTest . S2KtestZUndcountdownZUndconcrete ( ) => #abiCallData ( "test_countdown_concrete" , .TypedArgs ) )


    rule  ( S2KtestZModBMCLoopsTest . S2KtestZUndcountdownZUndsymbolic ( V0_n : uint256 ) => #abiCallData ( "test_countdown_symbolic" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_bmc(uint256)" ) => 2531276689 )


    rule  ( selector ( "test_countdown_concrete()" ) => 1189516988 )


    rule  ( selector ( "test_countdown_symbolic(uint256)" ) => 3183316184 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModCommonBase-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModCommonBaseContract

    syntax S2KlibZModforgeZSubstdZModsrcZModCommonBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModCommonBase" [symbol(), klabel(contract_lib%forge-std%src%CommonBase)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModCommonBase ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModCommonBase ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModCommonBaseField

    syntax S2KlibZModforgeZSubstdZModsrcZModCommonBaseField ::= "stdstore" [symbol(), klabel(field_lib%forge-std%src%CommonBase_stdstore)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModCommonBase . stdstore ) => 0 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModScriptBase-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModScriptBaseContract

    syntax S2KlibZModforgeZSubstdZModsrcZModScriptBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModScriptBase" [symbol(), klabel(contract_lib%forge-std%src%ScriptBase)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModScriptBase ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModScriptBase ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModScriptBaseField

    syntax S2KlibZModforgeZSubstdZModsrcZModScriptBaseField ::= "stdstore" [symbol(), klabel(field_lib%forge-std%src%ScriptBase_stdstore)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModScriptBase . stdstore ) => 0 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModTestBase-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModTestBaseContract

    syntax S2KlibZModforgeZSubstdZModsrcZModTestBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModTestBase" [symbol(), klabel(contract_lib%forge-std%src%TestBase)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModTestBase ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModTestBase ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModTestBaseField

    syntax S2KlibZModforgeZSubstdZModsrcZModTestBaseField ::= "stdstore" [symbol(), klabel(field_lib%forge-std%src%TestBase_stdstore)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTestBase . stdstore ) => 0 )


endmodule

module S2KtestZModBlockParamsTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModBlockParamsTestContract

    syntax S2KtestZModBlockParamsTestContract ::= "S2KtestZModBlockParamsTest" [symbol(), klabel(contract_test%BlockParamsTest)]

    rule  ( #binRuntime ( S2KtestZModBlockParamsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806385017cac116100a2578063ba414fa611610071578063ba414fa6146101d0578063e20c9f71146101e8578063e46f59bb146101f0578063e970e86d14610123578063fa7626d41461020357600080fd5b806385017cac146101a357806385226c81146101ab578063916a17c6146101c0578063b5508aa9146101c857600080fd5b80633e5e3c23116100de5780633e5e3c231461016b5780633f7286f41461017357806366d9a9a01461017b57806374b41d6a1461019057600080fd5b80631d06e436146101105780631ed7831c1461012557806328f82645146101435780632ade388014610156575b600080fd5b61012361011e366004610ea3565b610210565b005b61012d610282565b60405161013a9190610ebc565b60405180910390f35b610123610151366004610ea3565b6102e4565b61015e610353565b60405161013a9190610f39565b61012d610495565b61012d6104f5565b610183610555565b60405161013a9190611014565b61012361019e366004610ea3565b61063b565b6101236106aa565b6101b3610732565b60405161013a91906110c7565b610183610802565b6101b36108e8565b6101d86109b8565b604051901515815260200161013a565b61012d610ae5565b6101236101fe366004610ea3565b610b45565b6007546101d89060ff1681565b604051632024eee960e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90634049ddd290602401600060405180830381600087803b15801561025d57600080fd5b505af1158015610271573d6000803e3d6000fd5b5050505061027f4682610bb0565b50565b606060148054806020026020016040519081016040528092919081815260200182805480156102da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102bc575b5050505050905090565b60405163039b37ab60e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906339b37ab090602401600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b5050505061027f4882610bb0565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561048c57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104755783829060005260206000200180546103e890611134565b80601f016020809104026020016040519081016040528092919081815260200182805461041490611134565b80156104615780601f1061043657610100808354040283529160200191610461565b820191906000526020600020905b81548152906001019060200180831161044457829003601f168201915b5050505050815260200190600101906103c9565b505050508152505081526020019060010190610377565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102bc575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102bc575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561048c5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561062357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105e55790505b50505050508152505081526020019060010190610579565b6040516372eb5f8160e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e5d6bf0290602401600060405180830381600087803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b5050505061027f4282610bb0565b6040516001622df0eb60e21b0319815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ff483c5490602401600060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b5050505061027f4182610ca3565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561048c57838290600052602060002001805461077590611134565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190611134565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505081526020019060010190610756565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561048c5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108d057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108925790505b50505050508152505081526020019060010190610826565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561048c57838290600052602060002001805461092b90611134565b80601f016020809104026020016040519081016040528092919081815260200182805461095790611134565b80156109a45780601f10610979576101008083540402835291602001916109a4565b820191906000526020600020905b81548152906001019060200180831161098757829003601f168201915b50505050508152602001906001019061090c565b600754600090610100900460ff16156109da5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ae05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a68917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161116e565b60408051601f1981840301815290829052610a829161119f565b6000604051808303816000865af19150503d8060008114610abf576040519150601f19603f3d011682016040523d82523d6000602084013e610ac4565b606091505b5091505080806020019051810190610adc91906111bb565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102bc575050505050905090565b6040516301f7b4f360e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b158015610b9257600080fd5b505af1158015610ba6573d6000803e3d6000fd5b5050505061027f43825b808214610c9f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c219060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610c5891906111e4565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610c8f919061121c565b60405180910390a1610c9f610d97565b5050565b806001600160a01b0316826001600160a01b031614610c9f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610d299060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f82604051610d609190611246565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f81604051610c8f919061128a565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e925760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610e31929160200161116e565b60408051601f1981840301815290829052610e4b9161119f565b6000604051808303816000865af19150503d8060008114610e88576040519150601f19603f3d011682016040523d82523d6000602084013e610e8d565b606091505b505050505b6007805461ff001916610100179055565b600060208284031215610eb557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610efd5783516001600160a01b031683529284019291840191600101610ed8565b50909695505050505050565b60005b83811015610f24578181015183820152602001610f0c565b83811115610f33576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561100757603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ff057898403605f1901835284518051808652610fd1818e88018f8501610f09565b958c0195601f01601f1916949094018b019350918a0191600101610faa565b509197505050938601935090850190600101610f60565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156110b857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110a35783516001600160e01b0319168252928b019260019290920191908b0190611079565b50978a0197955050509187019160010161103c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561100757878503603f1901845281518051808752611115818989018a8501610f09565b601f01601f1916959095018601945092850192908501906001016110ee565b600181811c9082168061114857607f821691505b60208210810361116857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090611191816004850160208701610f09565b919091016004019392505050565b600082516111b1818460208701610f09565b9190910192915050565b6000602082840312156111cd57600080fd5b815180151581146111dd57600080fd5b9392505050565b60408152600061120e60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600061120e60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061127060408301600a8152690808080808081319599d60b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600061127060408301600a8152690808080808149a59da1d60b21b60208201526040019056fea2646970667358221220ef485b56242aa76d9ace2184b7bce638f0f707c47963cf84f8c663d19c89e71c64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModBlockParamsTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModBlockParamsTestField

    syntax S2KtestZModBlockParamsTestField ::= "stdstore" [symbol(), klabel(field_test%BlockParamsTest_stdstore)]

    syntax S2KtestZModBlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_test%BlockParamsTest_IS_TEST)]

    syntax S2KtestZModBlockParamsTestField ::= "_failed" [symbol(), klabel(field_test%BlockParamsTest__failed)]

    syntax S2KtestZModBlockParamsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%BlockParamsTest_stdChainsInitialized)]

    syntax S2KtestZModBlockParamsTestField ::= "chains" [symbol(), klabel(field_test%BlockParamsTest_chains)]

    syntax S2KtestZModBlockParamsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%BlockParamsTest_defaultRpcUrls)]

    syntax S2KtestZModBlockParamsTestField ::= "idToAlias" [symbol(), klabel(field_test%BlockParamsTest_idToAlias)]

    syntax S2KtestZModBlockParamsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%BlockParamsTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModBlockParamsTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%BlockParamsTest_gasMeteringOff)]

    syntax S2KtestZModBlockParamsTestField ::= "_excludedContracts" [symbol(), klabel(field_test%BlockParamsTest__excludedContracts)]

    syntax S2KtestZModBlockParamsTestField ::= "_excludedSenders" [symbol(), klabel(field_test%BlockParamsTest__excludedSenders)]

    syntax S2KtestZModBlockParamsTestField ::= "_targetedContracts" [symbol(), klabel(field_test%BlockParamsTest__targetedContracts)]

    syntax S2KtestZModBlockParamsTestField ::= "_targetedSenders" [symbol(), klabel(field_test%BlockParamsTest__targetedSenders)]

    syntax S2KtestZModBlockParamsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%BlockParamsTest__excludedArtifacts)]

    syntax S2KtestZModBlockParamsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%BlockParamsTest__targetedArtifacts)]

    syntax S2KtestZModBlockParamsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%BlockParamsTest__targetedArtifactSelectors)]

    syntax S2KtestZModBlockParamsTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%BlockParamsTest__targetedSelectors)]

    syntax S2KtestZModBlockParamsTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%BlockParamsTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModBlockParamsTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModBlockParamsTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModBlockParamsTestContract "." S2KtestZModBlockParamsTestMethod [function(), symbol(), klabel(method_test%BlockParamsTest)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KISZUndTEST_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KexcludeContracts_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KexcludeSenders_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2Kfailed_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtargetArtifacts_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtargetContracts_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtargetInterfaces_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtargetSelectors_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtargetSenders_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestBlockNumber" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtestBlockNumber_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestChainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtestChainId_uint256)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestCoinBase" "(" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtestCoinBase_)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestFee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtestFee_uint256)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestRoll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtestRoll_uint256)]

    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestWarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%BlockParamsTest_S2KtestWarp_uint256)]

    rule  ( S2KtestZModBlockParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtestBlockNumber ( ) => #abiCallData ( "testBlockNumber" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtestChainId ( V0_newChainId : uint256 ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )


    rule  ( S2KtestZModBlockParamsTest . S2KtestCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )


    rule  ( S2KtestZModBlockParamsTest . S2KtestFee ( V0_newFee : uint256 ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )


    rule  ( S2KtestZModBlockParamsTest . S2KtestRoll ( V0_newHeight : uint256 ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )


    rule  ( S2KtestZModBlockParamsTest . S2KtestWarp ( V0_time : uint256 ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testBlockNumber()" ) => 3916490861 )


    rule  ( selector ( "testChainId(uint256)" ) => 486990902 )


    rule  ( selector ( "testCoinBase()" ) => 2231467180 )


    rule  ( selector ( "testFee(uint256)" ) => 687351365 )


    rule  ( selector ( "testRoll(uint256)" ) => 3832502715 )


    rule  ( selector ( "testWarp(uint256)" ) => 1957961066 )


endmodule

module S2KtestZModChainIdTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModChainIdTestContract

    syntax S2KtestZModChainIdTestContract ::= "S2KtestZModChainIdTest" [symbol(), klabel(contract_test%ChainIdTest)]

    rule  ( #binRuntime ( S2KtestZModChainIdTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806366d9a9a01461012957806385226c811461013e578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f4146101195780635059d10814610121575b600080fd5b6100dc610190565b005b6100e66101f8565b6040516100f39190610968565b60405180910390f35b61010461025a565b6040516100f391906109e1565b6100e661039c565b6100e66103fc565b6100dc61045c565b61013161046f565b6040516100f39190610abc565b610146610555565b6040516100f39190610b6f565b610131610625565b61014661070b565b61016b6107db565b60405190151581526020016100f3565b6100e6610908565b60075461016b9060ff1681565b604051632024eee960e11b8152617a696004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634049ddd290602401600060405180830381600087803b1580156101de57600080fd5b505af11580156101f2573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561025057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610232575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037c5783829060005260206000200180546102ef90610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461031b90610bdc565b80156103685780601f1061033d57610100808354040283529160200191610368565b820191906000526020600020905b81548152906001019060200180831161034b57829003601f168201915b5050505050815260200190600101906102d0565b50505050815250508152602001906001019061027e565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610250576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610232575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610250576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610232575050505050905090565b46617a691461046d5761046d610c16565b565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103935760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ff5790505b50505050508152505081526020019060010190610493565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039357838290600052602060002001805461059890610bdc565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490610bdc565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b505050505081526020019060010190610579565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103935760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b55790505b50505050508152505081526020019060010190610649565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039357838290600052602060002001805461074e90610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461077a90610bdc565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b50505050508152602001906001019061072f565b600754600090610100900460ff16156107fd5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109035760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2c565b60408051601f19818403018152908290526108a591610c5d565b6000604051808303816000865af19150503d80600081146108e2576040519150601f19603f3d011682016040523d82523d6000602084013e6108e7565b606091505b50915050808060200190518101906108ff9190610c79565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610250576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610232575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109a95783516001600160a01b031683529284019291840191600101610984565b50909695505050505050565b60005b838110156109d05781810151838201526020016109b8565b838111156101f25750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9857898403605f1901835284518051808652610a79818e88018f85016109b5565b958c0195601f01601f1916949094018b019350918a0191600101610a52565b509197505050938601935090850190600101610a08565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4b5783516001600160e01b0319168252928b019260019290920191908b0190610b21565b50978a01979550505091870191600101610ae4565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57878503603f1901845281518051808752610bbd818989018a85016109b5565b601f01601f191695909501860194509285019290850190600101610b96565b600181811c90821680610bf057607f821691505b602082108103610c1057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c4f8160048501602087016109b5565b919091016004019392505050565b60008251610c6f8184602087016109b5565b9190910192915050565b600060208284031215610c8b57600080fd5b81518015158114610c9b57600080fd5b939250505056fea26469706673582212206e201edd320d926c685a39560a58639586c69d7e00a2ca12d708807cef6b938464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModChainIdTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cd88061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806366d9a9a01461012957806385226c811461013e578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f4146101195780635059d10814610121575b600080fd5b6100dc610190565b005b6100e66101f8565b6040516100f39190610968565b60405180910390f35b61010461025a565b6040516100f391906109e1565b6100e661039c565b6100e66103fc565b6100dc61045c565b61013161046f565b6040516100f39190610abc565b610146610555565b6040516100f39190610b6f565b610131610625565b61014661070b565b61016b6107db565b60405190151581526020016100f3565b6100e6610908565b60075461016b9060ff1681565b604051632024eee960e11b8152617a696004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634049ddd290602401600060405180830381600087803b1580156101de57600080fd5b505af11580156101f2573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561025057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610232575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037c5783829060005260206000200180546102ef90610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461031b90610bdc565b80156103685780601f1061033d57610100808354040283529160200191610368565b820191906000526020600020905b81548152906001019060200180831161034b57829003601f168201915b5050505050815260200190600101906102d0565b50505050815250508152602001906001019061027e565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610250576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610232575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610250576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610232575050505050905090565b46617a691461046d5761046d610c16565b565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103935760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ff5790505b50505050508152505081526020019060010190610493565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039357838290600052602060002001805461059890610bdc565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490610bdc565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b505050505081526020019060010190610579565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103935760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b55790505b50505050508152505081526020019060010190610649565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039357838290600052602060002001805461074e90610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461077a90610bdc565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b50505050508152602001906001019061072f565b600754600090610100900460ff16156107fd5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109035760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2c565b60408051601f19818403018152908290526108a591610c5d565b6000604051808303816000865af19150503d80600081146108e2576040519150601f19603f3d011682016040523d82523d6000602084013e6108e7565b606091505b50915050808060200190518101906108ff9190610c79565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610250576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610232575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109a95783516001600160a01b031683529284019291840191600101610984565b50909695505050505050565b60005b838110156109d05781810151838201526020016109b8565b838111156101f25750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9857898403605f1901835284518051808652610a79818e88018f85016109b5565b958c0195601f01601f1916949094018b019350918a0191600101610a52565b509197505050938601935090850190600101610a08565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4b5783516001600160e01b0319168252928b019260019290920191908b0190610b21565b50978a01979550505091870191600101610ae4565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57878503603f1901845281518051808752610bbd818989018a85016109b5565b601f01601f191695909501860194509285019290850190600101610b96565b600181811c90821680610bf057607f821691505b602082108103610c1057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c4f8160048501602087016109b5565b919091016004019392505050565b60008251610c6f8184602087016109b5565b9190910192915050565b600060208284031215610c8b57600080fd5b81518015158114610c9b57600080fd5b939250505056fea26469706673582212206e201edd320d926c685a39560a58639586c69d7e00a2ca12d708807cef6b938464736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModChainIdTestField

    syntax S2KtestZModChainIdTestField ::= "stdstore" [symbol(), klabel(field_test%ChainIdTest_stdstore)]

    syntax S2KtestZModChainIdTestField ::= "IS_TEST" [symbol(), klabel(field_test%ChainIdTest_IS_TEST)]

    syntax S2KtestZModChainIdTestField ::= "_failed" [symbol(), klabel(field_test%ChainIdTest__failed)]

    syntax S2KtestZModChainIdTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ChainIdTest_stdChainsInitialized)]

    syntax S2KtestZModChainIdTestField ::= "chains" [symbol(), klabel(field_test%ChainIdTest_chains)]

    syntax S2KtestZModChainIdTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ChainIdTest_defaultRpcUrls)]

    syntax S2KtestZModChainIdTestField ::= "idToAlias" [symbol(), klabel(field_test%ChainIdTest_idToAlias)]

    syntax S2KtestZModChainIdTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ChainIdTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModChainIdTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ChainIdTest_gasMeteringOff)]

    syntax S2KtestZModChainIdTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ChainIdTest__excludedContracts)]

    syntax S2KtestZModChainIdTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ChainIdTest__excludedSenders)]

    syntax S2KtestZModChainIdTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ChainIdTest__targetedContracts)]

    syntax S2KtestZModChainIdTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ChainIdTest__targetedSenders)]

    syntax S2KtestZModChainIdTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ChainIdTest__excludedArtifacts)]

    syntax S2KtestZModChainIdTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ChainIdTest__targetedArtifacts)]

    syntax S2KtestZModChainIdTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ChainIdTest__targetedArtifactSelectors)]

    syntax S2KtestZModChainIdTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ChainIdTest__targetedSelectors)]

    syntax S2KtestZModChainIdTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ChainIdTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModChainIdTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModChainIdTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModChainIdTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModChainIdTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModChainIdTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModChainIdTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModChainIdTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModChainIdTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModChainIdTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModChainIdTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModChainIdTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModChainIdTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModChainIdTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModChainIdTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModChainIdTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModChainIdTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModChainIdTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModChainIdTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModChainIdTestContract "." S2KtestZModChainIdTestMethod [function(), symbol(), klabel(method_test%ChainIdTest)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KISZUndTEST_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KexcludeContracts_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KexcludeSenders_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2Kfailed_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KsetUp_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtargetArtifacts_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtargetContracts_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtargetInterfaces_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtargetSelectors_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtargetSenders_)]

    syntax S2KtestZModChainIdTestMethod ::= "S2KtestZUndchainidZUndsetup" "(" ")" [symbol(), klabel(method_test%ChainIdTest_S2KtestZUndchainidZUndsetup_)]

    rule  ( S2KtestZModChainIdTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModChainIdTest . S2KtestZUndchainidZUndsetup ( ) => #abiCallData ( "test_chainid_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_chainid_setup()" ) => 1348063496 )


endmodule

module S2KtestZModCoinBaseTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModCoinBaseTestContract

    syntax S2KtestZModCoinBaseTestContract ::= "S2KtestZModCoinBaseTest" [symbol(), klabel(contract_test%CoinBaseTest)]

    rule  ( #binRuntime ( S2KtestZModCoinBaseTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063e20c9f7114610173578063ec07b9e41461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e661020d565b6040516100f3919061098f565b60405180910390f35b61010461026f565b6040516100f39190610a08565b6100e66103b1565b6100e6610411565b610129610471565b6040516100f39190610ae3565b61013e610557565b6040516100f39190610b96565b610129610627565b61013e61070d565b6101636107dd565b60405190151581526020016100f3565b6100e661090a565b6100dc61096a565b6007546101639060ff1681565b6040516001622df0eb60e21b0319815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ff483c5490602401600060405180830381600087803b1580156101f357600080fd5b505af1158015610207573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561026557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610247575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103a857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561039157838290600052602060002001805461030490610c03565b80601f016020809104026020016040519081016040528092919081815260200182805461033090610c03565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050815260200190600101906102e5565b505050508152505081526020019060010190610293565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610265576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610247575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610265576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610247575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103a85760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105015790505b50505050508152505081526020019060010190610495565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103a857838290600052602060002001805461059a90610c03565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690610c03565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b50505050508152602001906001019061057b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103a85760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b75790505b5050505050815250508152602001906001019061064b565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103a857838290600052602060002001805461075090610c03565b80601f016020809104026020016040519081016040528092919081815260200182805461077c90610c03565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b505050505081526020019060010190610731565b600754600090610100900460ff16156107ff5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109055760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3d565b60408051601f19818403018152908290526108a791610c6e565b6000604051808303816000865af19150503d80600081146108e4576040519150601f19603f3d011682016040523d82523d6000602084013e6108e9565b606091505b50915050808060200190518101906109019190610c8a565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610265576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610247575050505050905090565b73ea674fdde714fd979de3edf0f56aa9716b898ec8411461098d5761098d610cb3565b565b6020808252825182820181905260009190848201906040850190845b818110156109d05783516001600160a01b0316835292840192918401916001016109ab565b50909695505050505050565b60005b838110156109f75781810151838201526020016109df565b838111156102075750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ad657603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610abf57898403605f1901835284518051808652610aa0818e88018f85016109dc565b958c0195601f01601f1916949094018b019350918a0191600101610a79565b509197505050938601935090850190600101610a2f565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b8757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b725783516001600160e01b0319168252928b019260019290920191908b0190610b48565b50978a01979550505091870191600101610b0b565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ad657878503603f1901845281518051808752610be4818989018a85016109dc565b601f01601f191695909501860194509285019290850190600101610bbd565b600181811c90821680610c1757607f821691505b602082108103610c3757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c608160048501602087016109dc565b919091016004019392505050565b60008251610c808184602087016109dc565b9190910192915050565b600060208284031215610c9c57600080fd5b81518015158114610cac57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220042cffae89121615a56052a4ad3108fdf177efd9269d8dd25c73de8f1405645264736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModCoinBaseTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cff8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063e20c9f7114610173578063ec07b9e41461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e661020d565b6040516100f3919061098f565b60405180910390f35b61010461026f565b6040516100f39190610a08565b6100e66103b1565b6100e6610411565b610129610471565b6040516100f39190610ae3565b61013e610557565b6040516100f39190610b96565b610129610627565b61013e61070d565b6101636107dd565b60405190151581526020016100f3565b6100e661090a565b6100dc61096a565b6007546101639060ff1681565b6040516001622df0eb60e21b0319815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ff483c5490602401600060405180830381600087803b1580156101f357600080fd5b505af1158015610207573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561026557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610247575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103a857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561039157838290600052602060002001805461030490610c03565b80601f016020809104026020016040519081016040528092919081815260200182805461033090610c03565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050815260200190600101906102e5565b505050508152505081526020019060010190610293565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610265576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610247575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610265576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610247575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103a85760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105015790505b50505050508152505081526020019060010190610495565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103a857838290600052602060002001805461059a90610c03565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690610c03565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b50505050508152602001906001019061057b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103a85760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b75790505b5050505050815250508152602001906001019061064b565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103a857838290600052602060002001805461075090610c03565b80601f016020809104026020016040519081016040528092919081815260200182805461077c90610c03565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b505050505081526020019060010190610731565b600754600090610100900460ff16156107ff5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109055760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3d565b60408051601f19818403018152908290526108a791610c6e565b6000604051808303816000865af19150503d80600081146108e4576040519150601f19603f3d011682016040523d82523d6000602084013e6108e9565b606091505b50915050808060200190518101906109019190610c8a565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610265576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610247575050505050905090565b73ea674fdde714fd979de3edf0f56aa9716b898ec8411461098d5761098d610cb3565b565b6020808252825182820181905260009190848201906040850190845b818110156109d05783516001600160a01b0316835292840192918401916001016109ab565b50909695505050505050565b60005b838110156109f75781810151838201526020016109df565b838111156102075750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ad657603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610abf57898403605f1901835284518051808652610aa0818e88018f85016109dc565b958c0195601f01601f1916949094018b019350918a0191600101610a79565b509197505050938601935090850190600101610a2f565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b8757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b725783516001600160e01b0319168252928b019260019290920191908b0190610b48565b50978a01979550505091870191600101610b0b565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ad657878503603f1901845281518051808752610be4818989018a85016109dc565b601f01601f191695909501860194509285019290850190600101610bbd565b600181811c90821680610c1757607f821691505b602082108103610c3757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c608160048501602087016109dc565b919091016004019392505050565b60008251610c808184602087016109dc565b9190910192915050565b600060208284031215610c9c57600080fd5b81518015158114610cac57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220042cffae89121615a56052a4ad3108fdf177efd9269d8dd25c73de8f1405645264736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModCoinBaseTestField

    syntax S2KtestZModCoinBaseTestField ::= "stdstore" [symbol(), klabel(field_test%CoinBaseTest_stdstore)]

    syntax S2KtestZModCoinBaseTestField ::= "IS_TEST" [symbol(), klabel(field_test%CoinBaseTest_IS_TEST)]

    syntax S2KtestZModCoinBaseTestField ::= "_failed" [symbol(), klabel(field_test%CoinBaseTest__failed)]

    syntax S2KtestZModCoinBaseTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%CoinBaseTest_stdChainsInitialized)]

    syntax S2KtestZModCoinBaseTestField ::= "chains" [symbol(), klabel(field_test%CoinBaseTest_chains)]

    syntax S2KtestZModCoinBaseTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%CoinBaseTest_defaultRpcUrls)]

    syntax S2KtestZModCoinBaseTestField ::= "idToAlias" [symbol(), klabel(field_test%CoinBaseTest_idToAlias)]

    syntax S2KtestZModCoinBaseTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%CoinBaseTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModCoinBaseTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%CoinBaseTest_gasMeteringOff)]

    syntax S2KtestZModCoinBaseTestField ::= "_excludedContracts" [symbol(), klabel(field_test%CoinBaseTest__excludedContracts)]

    syntax S2KtestZModCoinBaseTestField ::= "_excludedSenders" [symbol(), klabel(field_test%CoinBaseTest__excludedSenders)]

    syntax S2KtestZModCoinBaseTestField ::= "_targetedContracts" [symbol(), klabel(field_test%CoinBaseTest__targetedContracts)]

    syntax S2KtestZModCoinBaseTestField ::= "_targetedSenders" [symbol(), klabel(field_test%CoinBaseTest__targetedSenders)]

    syntax S2KtestZModCoinBaseTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%CoinBaseTest__excludedArtifacts)]

    syntax S2KtestZModCoinBaseTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%CoinBaseTest__targetedArtifacts)]

    syntax S2KtestZModCoinBaseTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%CoinBaseTest__targetedArtifactSelectors)]

    syntax S2KtestZModCoinBaseTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%CoinBaseTest__targetedSelectors)]

    syntax S2KtestZModCoinBaseTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%CoinBaseTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModCoinBaseTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModCoinBaseTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModCoinBaseTestContract "." S2KtestZModCoinBaseTestMethod [function(), symbol(), klabel(method_test%CoinBaseTest)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KISZUndTEST_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KexcludeContracts_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KexcludeSenders_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2Kfailed_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KsetUp_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtargetArtifacts_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtargetContracts_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtargetInterfaces_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtargetSelectors_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtargetSenders_)]

    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtestZUndcoinbaseZUndsetup" "(" ")" [symbol(), klabel(method_test%CoinBaseTest_S2KtestZUndcoinbaseZUndsetup_)]

    rule  ( S2KtestZModCoinBaseTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModCoinBaseTest . S2KtestZUndcoinbaseZUndsetup ( ) => #abiCallData ( "test_coinbase_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_coinbase_setup()" ) => 3959929316 )


endmodule

module S2KtestZModFeeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModFeeTestContract

    syntax S2KtestZModFeeTestContract ::= "S2KtestZModFeeTest" [symbol(), klabel(contract_test%FeeTest)]

    rule  ( #binRuntime ( S2KtestZModFeeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063d7d855b214610173578063e20c9f711461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e66101fb565b6040516100f3919061096e565b60405180910390f35b61010461025d565b6040516100f391906109e7565b6100e661039f565b6100e66103ff565b61012961045f565b6040516100f39190610ac2565b61013e610545565b6040516100f39190610b75565b610129610615565b61013e6106fb565b6101636107cb565b60405190151581526020016100f3565b6100dc6108f8565b6100e661090e565b6007546101639060ff1681565b60405163039b37ab60e41b81526405d21dba006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906339b37ab090602401600060405180830381600087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561025357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610235575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037f5783829060005260206000200180546102f290610be2565b80601f016020809104026020016040519081016040528092919081815260200182805461031e90610be2565b801561036b5780601f106103405761010080835404028352916020019161036b565b820191906000526020600020905b81548152906001019060200180831161034e57829003601f168201915b5050505050815260200190600101906102d3565b505050508152505081526020019060010190610281565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610253576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610235575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610253576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610235575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103965760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561052d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ef5790505b50505050508152505081526020019060010190610483565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039657838290600052602060002001805461058890610be2565b80601f01602080910402602001604051908101604052809291908181526020018280546105b490610be2565b80156106015780601f106105d657610100808354040283529160200191610601565b820191906000526020600020905b8154815290600101906020018083116105e457829003601f168201915b505050505081526020019060010190610569565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103965760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106e357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106a55790505b50505050508152505081526020019060010190610639565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039657838290600052602060002001805461073e90610be2565b80601f016020809104026020016040519081016040528092919081815260200182805461076a90610be2565b80156107b75780601f1061078c576101008083540402835291602001916107b7565b820191906000526020600020905b81548152906001019060200180831161079a57829003601f168201915b50505050508152602001906001019061071f565b600754600090610100900460ff16156107ed5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108f35760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161087b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c1c565b60408051601f198184030181529082905261089591610c4d565b6000604051808303816000865af19150503d80600081146108d2576040519150601f19603f3d011682016040523d82523d6000602084013e6108d7565b606091505b50915050808060200190518101906108ef9190610c69565b9150505b919050565b486405d21dba001461090c5761090c610c92565b565b60606013805480602002602001604051908101604052809291908181526020018280548015610253576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610235575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109af5783516001600160a01b03168352928401929184019160010161098a565b50909695505050505050565b60005b838110156109d65781810151838201526020016109be565b838111156101f55750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab557603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9e57898403605f1901835284518051808652610a7f818e88018f85016109bb565b958c0195601f01601f1916949094018b019350918a0191600101610a58565b509197505050938601935090850190600101610a0e565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b515783516001600160e01b0319168252928b019260019290920191908b0190610b27565b50978a01979550505091870191600101610aea565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab557878503603f1901845281518051808752610bc3818989018a85016109bb565b601f01601f191695909501860194509285019290850190600101610b9c565b600181811c90821680610bf657607f821691505b602082108103610c1657634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c3f8160048501602087016109bb565b919091016004019392505050565b60008251610c5f8184602087016109bb565b9190910192915050565b600060208284031215610c7b57600080fd5b81518015158114610c8b57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea264697066735822122052eddc0c77afa62c37d773ae159bbf927e9fdf991f5758d921e1c7136e8b35da64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModFeeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cde8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063d7d855b214610173578063e20c9f711461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e66101fb565b6040516100f3919061096e565b60405180910390f35b61010461025d565b6040516100f391906109e7565b6100e661039f565b6100e66103ff565b61012961045f565b6040516100f39190610ac2565b61013e610545565b6040516100f39190610b75565b610129610615565b61013e6106fb565b6101636107cb565b60405190151581526020016100f3565b6100dc6108f8565b6100e661090e565b6007546101639060ff1681565b60405163039b37ab60e41b81526405d21dba006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906339b37ab090602401600060405180830381600087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561025357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610235575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037f5783829060005260206000200180546102f290610be2565b80601f016020809104026020016040519081016040528092919081815260200182805461031e90610be2565b801561036b5780601f106103405761010080835404028352916020019161036b565b820191906000526020600020905b81548152906001019060200180831161034e57829003601f168201915b5050505050815260200190600101906102d3565b505050508152505081526020019060010190610281565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610253576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610235575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610253576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610235575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103965760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561052d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ef5790505b50505050508152505081526020019060010190610483565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039657838290600052602060002001805461058890610be2565b80601f01602080910402602001604051908101604052809291908181526020018280546105b490610be2565b80156106015780601f106105d657610100808354040283529160200191610601565b820191906000526020600020905b8154815290600101906020018083116105e457829003601f168201915b505050505081526020019060010190610569565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103965760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106e357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106a55790505b50505050508152505081526020019060010190610639565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039657838290600052602060002001805461073e90610be2565b80601f016020809104026020016040519081016040528092919081815260200182805461076a90610be2565b80156107b75780601f1061078c576101008083540402835291602001916107b7565b820191906000526020600020905b81548152906001019060200180831161079a57829003601f168201915b50505050508152602001906001019061071f565b600754600090610100900460ff16156107ed5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108f35760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161087b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c1c565b60408051601f198184030181529082905261089591610c4d565b6000604051808303816000865af19150503d80600081146108d2576040519150601f19603f3d011682016040523d82523d6000602084013e6108d7565b606091505b50915050808060200190518101906108ef9190610c69565b9150505b919050565b486405d21dba001461090c5761090c610c92565b565b60606013805480602002602001604051908101604052809291908181526020018280548015610253576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610235575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109af5783516001600160a01b03168352928401929184019160010161098a565b50909695505050505050565b60005b838110156109d65781810151838201526020016109be565b838111156101f55750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab557603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9e57898403605f1901835284518051808652610a7f818e88018f85016109bb565b958c0195601f01601f1916949094018b019350918a0191600101610a58565b509197505050938601935090850190600101610a0e565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b515783516001600160e01b0319168252928b019260019290920191908b0190610b27565b50978a01979550505091870191600101610aea565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab557878503603f1901845281518051808752610bc3818989018a85016109bb565b601f01601f191695909501860194509285019290850190600101610b9c565b600181811c90821680610bf657607f821691505b602082108103610c1657634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610c3f8160048501602087016109bb565b919091016004019392505050565b60008251610c5f8184602087016109bb565b9190910192915050565b600060208284031215610c7b57600080fd5b81518015158114610c8b57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea264697066735822122052eddc0c77afa62c37d773ae159bbf927e9fdf991f5758d921e1c7136e8b35da64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModFeeTestField

    syntax S2KtestZModFeeTestField ::= "stdstore" [symbol(), klabel(field_test%FeeTest_stdstore)]

    syntax S2KtestZModFeeTestField ::= "IS_TEST" [symbol(), klabel(field_test%FeeTest_IS_TEST)]

    syntax S2KtestZModFeeTestField ::= "_failed" [symbol(), klabel(field_test%FeeTest__failed)]

    syntax S2KtestZModFeeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%FeeTest_stdChainsInitialized)]

    syntax S2KtestZModFeeTestField ::= "chains" [symbol(), klabel(field_test%FeeTest_chains)]

    syntax S2KtestZModFeeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%FeeTest_defaultRpcUrls)]

    syntax S2KtestZModFeeTestField ::= "idToAlias" [symbol(), klabel(field_test%FeeTest_idToAlias)]

    syntax S2KtestZModFeeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%FeeTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModFeeTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%FeeTest_gasMeteringOff)]

    syntax S2KtestZModFeeTestField ::= "_excludedContracts" [symbol(), klabel(field_test%FeeTest__excludedContracts)]

    syntax S2KtestZModFeeTestField ::= "_excludedSenders" [symbol(), klabel(field_test%FeeTest__excludedSenders)]

    syntax S2KtestZModFeeTestField ::= "_targetedContracts" [symbol(), klabel(field_test%FeeTest__targetedContracts)]

    syntax S2KtestZModFeeTestField ::= "_targetedSenders" [symbol(), klabel(field_test%FeeTest__targetedSenders)]

    syntax S2KtestZModFeeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%FeeTest__excludedArtifacts)]

    syntax S2KtestZModFeeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%FeeTest__targetedArtifacts)]

    syntax S2KtestZModFeeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%FeeTest__targetedArtifactSelectors)]

    syntax S2KtestZModFeeTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%FeeTest__targetedSelectors)]

    syntax S2KtestZModFeeTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%FeeTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModFeeTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModFeeTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModFeeTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModFeeTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModFeeTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModFeeTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModFeeTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModFeeTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModFeeTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModFeeTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModFeeTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModFeeTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModFeeTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModFeeTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModFeeTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModFeeTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModFeeTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModFeeTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModFeeTestContract "." S2KtestZModFeeTestMethod [function(), symbol(), klabel(method_test%FeeTest)]

    syntax S2KtestZModFeeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KISZUndTEST_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KexcludeContracts_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KexcludeSenders_)]

    syntax S2KtestZModFeeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%FeeTest_S2Kfailed_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KsetUp_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtargetArtifacts_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtargetContracts_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtargetInterfaces_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtargetSelectors_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtargetSenders_)]

    syntax S2KtestZModFeeTestMethod ::= "S2KtestZUndfeeZUndsetup" "(" ")" [symbol(), klabel(method_test%FeeTest_S2KtestZUndfeeZUndsetup_)]

    rule  ( S2KtestZModFeeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFeeTest . S2KtestZUndfeeZUndsetup ( ) => #abiCallData ( "test_fee_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_fee_setup()" ) => 3621279154 )


endmodule

module S2KtestZModRollTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModRollTestContract

    syntax S2KtestZModRollTestContract ::= "S2KtestZModRollTest" [symbol(), klabel(contract_test%RollTest)]

    rule  ( #binRuntime ( S2KtestZModRollTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806385226c811461013657806385d77cb61461014b578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e66101f7565b6040516100f39190610966565b60405180910390f35b610104610259565b6040516100f391906109df565b6100e661039b565b6100e66103fb565b61012961045b565b6040516100f39190610aba565b61013e610541565b6040516100f39190610b6d565b6100dc610611565b610129610623565b61013e610709565b61016b6107d9565b60405190151581526020016100f3565b6100e6610906565b60075461016b9060ff1681565b6040516301f7b4f360e41b8152607b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b1580156101dd57600080fd5b505af11580156101f1573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561024f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610231575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037b5783829060005260206000200180546102ee90610bda565b80601f016020809104026020016040519081016040528092919081815260200182805461031a90610bda565b80156103675780601f1061033c57610100808354040283529160200191610367565b820191906000526020600020905b81548152906001019060200180831161034a57829003601f168201915b5050505050815260200190600101906102cf565b50505050815250508152602001906001019061027d565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561024f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610231575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561024f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610231575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103925760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561052957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104eb5790505b5050505050815250508152602001906001019061047f565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039257838290600052602060002001805461058490610bda565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090610bda565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b505050505081526020019060010190610565565b43607b1461062157610621610c14565b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103925760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b35790505b50505050508152505081526020019060010190610647565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039257838290600052602060002001805461074c90610bda565b80601f016020809104026020016040519081016040528092919081815260200182805461077890610bda565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b50505050508152602001906001019061072d565b600754600090610100900460ff16156107fb5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109015760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610889917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2a565b60408051601f19818403018152908290526108a391610c5b565b6000604051808303816000865af19150503d80600081146108e0576040519150601f19603f3d011682016040523d82523d6000602084013e6108e5565b606091505b50915050808060200190518101906108fd9190610c77565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561024f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610231575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109a75783516001600160a01b031683529284019291840191600101610982565b50909695505050505050565b60005b838110156109ce5781810151838201526020016109b6565b838111156101f15750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aad57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9657898403605f1901835284518051808652610a77818e88018f85016109b3565b958c0195601f01601f1916949094018b019350918a0191600101610a50565b509197505050938601935090850190600101610a06565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b5e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b495783516001600160e01b0319168252928b019260019290920191908b0190610b1f565b50978a01979550505091870191600101610ae2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aad57878503603f1901845281518051808752610bbb818989018a85016109b3565b601f01601f191695909501860194509285019290850190600101610b94565b600181811c90821680610bee57607f821691505b602082108103610c0e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c4d8160048501602087016109b3565b919091016004019392505050565b60008251610c6d8184602087016109b3565b9190910192915050565b600060208284031215610c8957600080fd5b81518015158114610c9957600080fd5b939250505056fea2646970667358221220a24b806e9ff3b36e4f5db10f5957c398caeada58a260395e40bdf7fe8239d66764736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModRollTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cd68061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806385226c811461013657806385d77cb61461014b578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e66101f7565b6040516100f39190610966565b60405180910390f35b610104610259565b6040516100f391906109df565b6100e661039b565b6100e66103fb565b61012961045b565b6040516100f39190610aba565b61013e610541565b6040516100f39190610b6d565b6100dc610611565b610129610623565b61013e610709565b61016b6107d9565b60405190151581526020016100f3565b6100e6610906565b60075461016b9060ff1681565b6040516301f7b4f360e41b8152607b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b1580156101dd57600080fd5b505af11580156101f1573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561024f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610231575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037b5783829060005260206000200180546102ee90610bda565b80601f016020809104026020016040519081016040528092919081815260200182805461031a90610bda565b80156103675780601f1061033c57610100808354040283529160200191610367565b820191906000526020600020905b81548152906001019060200180831161034a57829003601f168201915b5050505050815260200190600101906102cf565b50505050815250508152602001906001019061027d565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561024f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610231575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561024f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610231575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103925760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561052957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104eb5790505b5050505050815250508152602001906001019061047f565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039257838290600052602060002001805461058490610bda565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090610bda565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b505050505081526020019060010190610565565b43607b1461062157610621610c14565b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103925760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b35790505b50505050508152505081526020019060010190610647565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039257838290600052602060002001805461074c90610bda565b80601f016020809104026020016040519081016040528092919081815260200182805461077890610bda565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b50505050508152602001906001019061072d565b600754600090610100900460ff16156107fb5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109015760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610889917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2a565b60408051601f19818403018152908290526108a391610c5b565b6000604051808303816000865af19150503d80600081146108e0576040519150601f19603f3d011682016040523d82523d6000602084013e6108e5565b606091505b50915050808060200190518101906108fd9190610c77565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561024f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610231575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109a75783516001600160a01b031683529284019291840191600101610982565b50909695505050505050565b60005b838110156109ce5781810151838201526020016109b6565b838111156101f15750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aad57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9657898403605f1901835284518051808652610a77818e88018f85016109b3565b958c0195601f01601f1916949094018b019350918a0191600101610a50565b509197505050938601935090850190600101610a06565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b5e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b495783516001600160e01b0319168252928b019260019290920191908b0190610b1f565b50978a01979550505091870191600101610ae2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aad57878503603f1901845281518051808752610bbb818989018a85016109b3565b601f01601f191695909501860194509285019290850190600101610b94565b600181811c90821680610bee57607f821691505b602082108103610c0e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c4d8160048501602087016109b3565b919091016004019392505050565b60008251610c6d8184602087016109b3565b9190910192915050565b600060208284031215610c8957600080fd5b81518015158114610c9957600080fd5b939250505056fea2646970667358221220a24b806e9ff3b36e4f5db10f5957c398caeada58a260395e40bdf7fe8239d66764736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModRollTestField

    syntax S2KtestZModRollTestField ::= "stdstore" [symbol(), klabel(field_test%RollTest_stdstore)]

    syntax S2KtestZModRollTestField ::= "IS_TEST" [symbol(), klabel(field_test%RollTest_IS_TEST)]

    syntax S2KtestZModRollTestField ::= "_failed" [symbol(), klabel(field_test%RollTest__failed)]

    syntax S2KtestZModRollTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%RollTest_stdChainsInitialized)]

    syntax S2KtestZModRollTestField ::= "chains" [symbol(), klabel(field_test%RollTest_chains)]

    syntax S2KtestZModRollTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%RollTest_defaultRpcUrls)]

    syntax S2KtestZModRollTestField ::= "idToAlias" [symbol(), klabel(field_test%RollTest_idToAlias)]

    syntax S2KtestZModRollTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%RollTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModRollTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%RollTest_gasMeteringOff)]

    syntax S2KtestZModRollTestField ::= "_excludedContracts" [symbol(), klabel(field_test%RollTest__excludedContracts)]

    syntax S2KtestZModRollTestField ::= "_excludedSenders" [symbol(), klabel(field_test%RollTest__excludedSenders)]

    syntax S2KtestZModRollTestField ::= "_targetedContracts" [symbol(), klabel(field_test%RollTest__targetedContracts)]

    syntax S2KtestZModRollTestField ::= "_targetedSenders" [symbol(), klabel(field_test%RollTest__targetedSenders)]

    syntax S2KtestZModRollTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%RollTest__excludedArtifacts)]

    syntax S2KtestZModRollTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%RollTest__targetedArtifacts)]

    syntax S2KtestZModRollTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%RollTest__targetedArtifactSelectors)]

    syntax S2KtestZModRollTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%RollTest__targetedSelectors)]

    syntax S2KtestZModRollTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%RollTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModRollTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModRollTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModRollTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModRollTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModRollTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModRollTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModRollTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModRollTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModRollTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModRollTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModRollTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModRollTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModRollTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModRollTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModRollTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModRollTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModRollTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModRollTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModRollTestContract "." S2KtestZModRollTestMethod [function(), symbol(), klabel(method_test%RollTest)]

    syntax S2KtestZModRollTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%RollTest_S2KISZUndTEST_)]

    syntax S2KtestZModRollTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%RollTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModRollTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%RollTest_S2KexcludeContracts_)]

    syntax S2KtestZModRollTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%RollTest_S2KexcludeSenders_)]

    syntax S2KtestZModRollTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%RollTest_S2Kfailed_)]

    syntax S2KtestZModRollTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%RollTest_S2KsetUp_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtargetArtifacts_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtargetContracts_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtargetInterfaces_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtargetSelectors_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtargetSenders_)]

    syntax S2KtestZModRollTestMethod ::= "S2KtestZUndrollZUndsetup" "(" ")" [symbol(), klabel(method_test%RollTest_S2KtestZUndrollZUndsetup_)]

    rule  ( S2KtestZModRollTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModRollTest . S2KtestZUndrollZUndsetup ( ) => #abiCallData ( "test_roll_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_roll_setup()" ) => 2245491894 )


endmodule

module S2KtestZModWarpTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModWarpTestContract

    syntax S2KtestZModWarpTestContract ::= "S2KtestZModWarpTest" [symbol(), klabel(contract_test%WarpTest)]

    rule  ( #binRuntime ( S2KtestZModWarpTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806366d9a9a01461012957806385226c811461013e578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f4146101195780635202919214610121575b600080fd5b6100dc610190565b005b6100e66101fa565b6040516100f3919061096c565b60405180910390f35b61010461025c565b6040516100f391906109e5565b6100e661039e565b6100e66103fe565b6100dc61045e565b610131610473565b6040516100f39190610ac0565b610146610559565b6040516100f39190610b73565b610131610629565b61014661070f565b61016b6107df565b60405190151581526020016100f3565b6100e661090c565b60075461016b9060ff1681565b6040516372eb5f8160e11b81526361d0c0d06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e5d6bf0290602401600060405180830381600087803b1580156101e057600080fd5b505af11580156101f4573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561025257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610234575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039557600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037e5783829060005260206000200180546102f190610be0565b80601f016020809104026020016040519081016040528092919081815260200182805461031d90610be0565b801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b5050505050815260200190600101906102d2565b505050508152505081526020019060010190610280565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610252576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610234575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610252576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610234575050505050905090565b426361d0c0d01461047157610471610c1a565b565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103955760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561054157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105035790505b50505050508152505081526020019060010190610497565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039557838290600052602060002001805461059c90610be0565b80601f01602080910402602001604051908101604052809291908181526020018280546105c890610be0565b80156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b50505050508152602001906001019061057d565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103955760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b95790505b5050505050815250508152602001906001019061064d565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039557838290600052602060002001805461075290610be0565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90610be0565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081526020019060010190610733565b600754600090610100900460ff16156108015750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109075760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c30565b60408051601f19818403018152908290526108a991610c61565b6000604051808303816000865af19150503d80600081146108e6576040519150601f19603f3d011682016040523d82523d6000602084013e6108eb565b606091505b50915050808060200190518101906109039190610c7d565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610252576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610234575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109ad5783516001600160a01b031683529284019291840191600101610988565b50909695505050505050565b60005b838110156109d45781810151838201526020016109bc565b838111156101f45750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab357603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9c57898403605f1901835284518051808652610a7d818e88018f85016109b9565b958c0195601f01601f1916949094018b019350918a0191600101610a56565b509197505050938601935090850190600101610a0c565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4f5783516001600160e01b0319168252928b019260019290920191908b0190610b25565b50978a01979550505091870191600101610ae8565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab357878503603f1901845281518051808752610bc1818989018a85016109b9565b601f01601f191695909501860194509285019290850190600101610b9a565b600181811c90821680610bf457607f821691505b602082108103610c1457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c538160048501602087016109b9565b919091016004019392505050565b60008251610c738184602087016109b9565b9190910192915050565b600060208284031215610c8f57600080fd5b81518015158114610c9f57600080fd5b939250505056fea2646970667358221220ee8f1c09776fa3cf925252527edbe58859c7356e6b6c9839cba8c8ddd387192464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModWarpTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cdc8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806366d9a9a01461012957806385226c811461013e578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f4146101195780635202919214610121575b600080fd5b6100dc610190565b005b6100e66101fa565b6040516100f3919061096c565b60405180910390f35b61010461025c565b6040516100f391906109e5565b6100e661039e565b6100e66103fe565b6100dc61045e565b610131610473565b6040516100f39190610ac0565b610146610559565b6040516100f39190610b73565b610131610629565b61014661070f565b61016b6107df565b60405190151581526020016100f3565b6100e661090c565b60075461016b9060ff1681565b6040516372eb5f8160e11b81526361d0c0d06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e5d6bf0290602401600060405180830381600087803b1580156101e057600080fd5b505af11580156101f4573d6000803e3d6000fd5b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561025257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610234575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561039557600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561037e5783829060005260206000200180546102f190610be0565b80601f016020809104026020016040519081016040528092919081815260200182805461031d90610be0565b801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b5050505050815260200190600101906102d2565b505050508152505081526020019060010190610280565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610252576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610234575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610252576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610234575050505050905090565b426361d0c0d01461047157610471610c1a565b565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103955760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561054157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105035790505b50505050508152505081526020019060010190610497565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561039557838290600052602060002001805461059c90610be0565b80601f01602080910402602001604051908101604052809291908181526020018280546105c890610be0565b80156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b50505050508152602001906001019061057d565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103955760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b95790505b5050505050815250508152602001906001019061064d565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561039557838290600052602060002001805461075290610be0565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90610be0565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081526020019060010190610733565b600754600090610100900460ff16156108015750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109075760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c30565b60408051601f19818403018152908290526108a991610c61565b6000604051808303816000865af19150503d80600081146108e6576040519150601f19603f3d011682016040523d82523d6000602084013e6108eb565b606091505b50915050808060200190518101906109039190610c7d565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610252576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610234575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109ad5783516001600160a01b031683529284019291840191600101610988565b50909695505050505050565b60005b838110156109d45781810151838201526020016109bc565b838111156101f45750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab357603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9c57898403605f1901835284518051808652610a7d818e88018f85016109b9565b958c0195601f01601f1916949094018b019350918a0191600101610a56565b509197505050938601935090850190600101610a0c565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4f5783516001600160e01b0319168252928b019260019290920191908b0190610b25565b50978a01979550505091870191600101610ae8565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ab357878503603f1901845281518051808752610bc1818989018a85016109b9565b601f01601f191695909501860194509285019290850190600101610b9a565b600181811c90821680610bf457607f821691505b602082108103610c1457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c538160048501602087016109b9565b919091016004019392505050565b60008251610c738184602087016109b9565b9190910192915050565b600060208284031215610c8f57600080fd5b81518015158114610c9f57600080fd5b939250505056fea2646970667358221220ee8f1c09776fa3cf925252527edbe58859c7356e6b6c9839cba8c8ddd387192464736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModWarpTestField

    syntax S2KtestZModWarpTestField ::= "stdstore" [symbol(), klabel(field_test%WarpTest_stdstore)]

    syntax S2KtestZModWarpTestField ::= "IS_TEST" [symbol(), klabel(field_test%WarpTest_IS_TEST)]

    syntax S2KtestZModWarpTestField ::= "_failed" [symbol(), klabel(field_test%WarpTest__failed)]

    syntax S2KtestZModWarpTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%WarpTest_stdChainsInitialized)]

    syntax S2KtestZModWarpTestField ::= "chains" [symbol(), klabel(field_test%WarpTest_chains)]

    syntax S2KtestZModWarpTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%WarpTest_defaultRpcUrls)]

    syntax S2KtestZModWarpTestField ::= "idToAlias" [symbol(), klabel(field_test%WarpTest_idToAlias)]

    syntax S2KtestZModWarpTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%WarpTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModWarpTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%WarpTest_gasMeteringOff)]

    syntax S2KtestZModWarpTestField ::= "_excludedContracts" [symbol(), klabel(field_test%WarpTest__excludedContracts)]

    syntax S2KtestZModWarpTestField ::= "_excludedSenders" [symbol(), klabel(field_test%WarpTest__excludedSenders)]

    syntax S2KtestZModWarpTestField ::= "_targetedContracts" [symbol(), klabel(field_test%WarpTest__targetedContracts)]

    syntax S2KtestZModWarpTestField ::= "_targetedSenders" [symbol(), klabel(field_test%WarpTest__targetedSenders)]

    syntax S2KtestZModWarpTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%WarpTest__excludedArtifacts)]

    syntax S2KtestZModWarpTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%WarpTest__targetedArtifacts)]

    syntax S2KtestZModWarpTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%WarpTest__targetedArtifactSelectors)]

    syntax S2KtestZModWarpTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%WarpTest__targetedSelectors)]

    syntax S2KtestZModWarpTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%WarpTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModWarpTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModWarpTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModWarpTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModWarpTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModWarpTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModWarpTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModWarpTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModWarpTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModWarpTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModWarpTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModWarpTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModWarpTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModWarpTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModWarpTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModWarpTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModWarpTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModWarpTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModWarpTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModWarpTestContract "." S2KtestZModWarpTestMethod [function(), symbol(), klabel(method_test%WarpTest)]

    syntax S2KtestZModWarpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KISZUndTEST_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KexcludeContracts_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KexcludeSenders_)]

    syntax S2KtestZModWarpTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%WarpTest_S2Kfailed_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KsetUp_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtargetArtifacts_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtargetContracts_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtargetInterfaces_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtargetSelectors_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtargetSenders_)]

    syntax S2KtestZModWarpTestMethod ::= "S2KtestZUndwarpZUndsetup" "(" ")" [symbol(), klabel(method_test%WarpTest_S2KtestZUndwarpZUndsetup_)]

    rule  ( S2KtestZModWarpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModWarpTest . S2KtestZUndwarpZUndsetup ( ) => #abiCallData ( "test_warp_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_warp_setup()" ) => 1375900050 )


endmodule

module S2KtestZModBroadcastTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModBroadcastTestContract

    syntax S2KtestZModBroadcastTestContract ::= "S2KtestZModBroadcastTest" [symbol(), klabel(contract_test%BroadcastTest)]

    rule  ( #binRuntime ( S2KtestZModBroadcastTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715f1d5c11610097578063ba414fa611610066578063ba414fa6146101d6578063e20c9f71146101ee578063fa7626d4146101f6578063fd959e421461020357600080fd5b8063715f1d5c146101a957806385226c81146101b1578063916a17c6146101c6578063b5508aa9146101ce57600080fd5b8063354b2735116100d3578063354b27351461017c5780633e5e3c23146101845780633f7286f41461018c57806366d9a9a01461019457600080fd5b80630a9254e4146100fa5780631ed7831c146101495780632ade388014610167575b600080fd5b610147601c80546001600160a01b031990811673ea674fdde714fd979de3edf0f56aa9716b898ec817909155601d8054909116737109709ecfa91a80626ff3989d68f67f5b1dd12d179055565b005b61015161020b565b60405161015e919061119c565b60405180910390f35b61016f61026d565b60405161015e9190611219565b6101476103af565b6101516105b1565b610151610611565b61019c610671565b60405161015e91906112f4565b610147610757565b6101b96109cb565b60405161015e91906113a7565b61019c610a9b565b6101b9610b81565b6101de610c51565b604051901515815260200161015e565b610151610d7e565b6007546101de9060ff1681565b610147610dde565b6060601480548060200260200160405190810160405280929190818152602001828054801561026357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610245575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103a657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561038f57838290600052602060002001805461030290611414565b80601f016020809104026020016040519081016040528092919081815260200182805461032e90611414565b801561037b5780601f106103505761010080835404028352916020019161037b565b820191906000526020600020905b81548152906001019060200180831161035e57829003601f168201915b5050505050815260200190600101906102e3565b505050508152505081526020019060010190610291565b50505050905090565b601c5460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050506000600a6040516104309061118f565b908152602001604051809103906000f080158015610452573d6000803e3d6000fd5b5060405163afe29f7160e01b81526004818101529091506000906001600160a01b0383169063afe29f71906024016020604051808303816000875af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c3919061144e565b90506104d0816000610f58565b601d5460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b15801561052957600080fd5b505af115801561053d573d6000803e3d6000fd5b505060405163afe29f7160e01b8152600560048201526001600160a01b038516925063afe29f7191506024016020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac919061144e565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610263576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610245575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610263576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610245575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103a65760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561073f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107015790505b50505050508152505081526020019060010190610695565b60008051602061185c83398151915260001c6001600160a01b031663afc980406040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107a357600080fd5b505af11580156107b7573d6000803e3d6000fd5b50505050600060056040516107cb9061118f565b908152602001604051809103906000f0801580156107ed573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600060048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c919061144e565b5060008051602061185c83398151915260001c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b50505050600060146040516108d19061118f565b908152602001604051809103906000f0801580156108f3573d6000803e3d6000fd5b5060405163afe29f7160e01b8152601960048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af115801561093e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610962919061144e565b5060008051602061185c83398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050505050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103a6578382906000526020600020018054610a0e90611414565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3a90611414565b8015610a875780601f10610a5c57610100808354040283529160200191610a87565b820191906000526020600020905b815481529060010190602001808311610a6a57829003601f168201915b5050505050815260200190600101906109ef565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103a65760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610b6957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610b2b5790505b50505050508152505081526020019060010190610abf565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103a6578382906000526020600020018054610bc490611414565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf090611414565b8015610c3d5780601f10610c1257610100808354040283529160200191610c3d565b820191906000526020600020905b815481529060010190602001808311610c2057829003601f168201915b505050505081526020019060010190610ba5565b600754600090610100900460ff1615610c735750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610d795760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610d01917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611467565b60408051601f1981840301815290829052610d1b91611498565b6000604051808303816000865af19150503d8060008114610d58576040519150601f19603f3d011682016040523d82523d6000602084013e610d5d565b606091505b5091505080806020019051810190610d7591906114b4565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610263576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610245575050505050905090565b601c54604051637fec2a8d60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637fec2a8d90602401600060405180830381600087803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050506000600a604051610e5f9061118f565b908152602001604051809103906000f080158015610e81573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600160048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef0919061144e565b5060008051602061185c83398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b5050505050565b80821461107f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fc99060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161107f611083565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561117e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261111d9291602001611467565b60408051601f198184030181529082905261113791611498565b6000604051808303816000865af19150503d8060008114611174576040519150601f19603f3d011682016040523d82523d6000602084013e611179565b606091505b505050505b6007805461ff001916610100179055565b61037e806114de83390190565b6020808252825182820181905260009190848201906040850190845b818110156111dd5783516001600160a01b0316835292840192918401916001016111b8565b50909695505050505050565b60005b838110156112045781810151838201526020016111ec565b83811115611213576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112e757603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156112d057898403605f19018352845180518086526112b1818e88018f85016111e9565b958c0195601f01601f1916949094018b019350918a019160010161128a565b509197505050938601935090850190600101611240565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561139857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156113835783516001600160e01b0319168252928b019260019290920191908b0190611359565b50978a0197955050509187019160010161131c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112e757878503603f19018452815180518087526113f5818989018a85016111e9565b601f01601f1916959095018601945092850192908501906001016113ce565b600181811c9082168061142857607f821691505b60208210810361144857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561146057600080fd5b5051919050565b6001600160e01b031983168152815160009061148a8160048501602087016111e9565b919091016004019392505050565b600082516114aa8184602087016111e9565b9190910192915050565b6000602082840312156114c657600080fd5b815180151581146114d657600080fd5b939250505056fe60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212203946214694ec61778bc3253d017255188464394ff29e4dbdd6558c9f80b6e4f764736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModBroadcastTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506118b18061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715f1d5c11610097578063ba414fa611610066578063ba414fa6146101d6578063e20c9f71146101ee578063fa7626d4146101f6578063fd959e421461020357600080fd5b8063715f1d5c146101a957806385226c81146101b1578063916a17c6146101c6578063b5508aa9146101ce57600080fd5b8063354b2735116100d3578063354b27351461017c5780633e5e3c23146101845780633f7286f41461018c57806366d9a9a01461019457600080fd5b80630a9254e4146100fa5780631ed7831c146101495780632ade388014610167575b600080fd5b610147601c80546001600160a01b031990811673ea674fdde714fd979de3edf0f56aa9716b898ec817909155601d8054909116737109709ecfa91a80626ff3989d68f67f5b1dd12d179055565b005b61015161020b565b60405161015e919061119c565b60405180910390f35b61016f61026d565b60405161015e9190611219565b6101476103af565b6101516105b1565b610151610611565b61019c610671565b60405161015e91906112f4565b610147610757565b6101b96109cb565b60405161015e91906113a7565b61019c610a9b565b6101b9610b81565b6101de610c51565b604051901515815260200161015e565b610151610d7e565b6007546101de9060ff1681565b610147610dde565b6060601480548060200260200160405190810160405280929190818152602001828054801561026357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610245575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103a657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561038f57838290600052602060002001805461030290611414565b80601f016020809104026020016040519081016040528092919081815260200182805461032e90611414565b801561037b5780601f106103505761010080835404028352916020019161037b565b820191906000526020600020905b81548152906001019060200180831161035e57829003601f168201915b5050505050815260200190600101906102e3565b505050508152505081526020019060010190610291565b50505050905090565b601c5460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050506000600a6040516104309061118f565b908152602001604051809103906000f080158015610452573d6000803e3d6000fd5b5060405163afe29f7160e01b81526004818101529091506000906001600160a01b0383169063afe29f71906024016020604051808303816000875af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c3919061144e565b90506104d0816000610f58565b601d5460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b15801561052957600080fd5b505af115801561053d573d6000803e3d6000fd5b505060405163afe29f7160e01b8152600560048201526001600160a01b038516925063afe29f7191506024016020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac919061144e565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610263576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610245575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610263576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610245575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103a65760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561073f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107015790505b50505050508152505081526020019060010190610695565b60008051602061185c83398151915260001c6001600160a01b031663afc980406040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107a357600080fd5b505af11580156107b7573d6000803e3d6000fd5b50505050600060056040516107cb9061118f565b908152602001604051809103906000f0801580156107ed573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600060048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c919061144e565b5060008051602061185c83398151915260001c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b50505050600060146040516108d19061118f565b908152602001604051809103906000f0801580156108f3573d6000803e3d6000fd5b5060405163afe29f7160e01b8152601960048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af115801561093e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610962919061144e565b5060008051602061185c83398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050505050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103a6578382906000526020600020018054610a0e90611414565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3a90611414565b8015610a875780601f10610a5c57610100808354040283529160200191610a87565b820191906000526020600020905b815481529060010190602001808311610a6a57829003601f168201915b5050505050815260200190600101906109ef565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103a65760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610b6957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610b2b5790505b50505050508152505081526020019060010190610abf565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103a6578382906000526020600020018054610bc490611414565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf090611414565b8015610c3d5780601f10610c1257610100808354040283529160200191610c3d565b820191906000526020600020905b815481529060010190602001808311610c2057829003601f168201915b505050505081526020019060010190610ba5565b600754600090610100900460ff1615610c735750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610d795760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610d01917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611467565b60408051601f1981840301815290829052610d1b91611498565b6000604051808303816000865af19150503d8060008114610d58576040519150601f19603f3d011682016040523d82523d6000602084013e610d5d565b606091505b5091505080806020019051810190610d7591906114b4565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610263576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610245575050505050905090565b601c54604051637fec2a8d60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637fec2a8d90602401600060405180830381600087803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050506000600a604051610e5f9061118f565b908152602001604051809103906000f080158015610e81573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600160048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef0919061144e565b5060008051602061185c83398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b5050505050565b80821461107f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fc99060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161107f611083565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561117e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261111d9291602001611467565b60408051601f198184030181529082905261113791611498565b6000604051808303816000865af19150503d8060008114611174576040519150601f19603f3d011682016040523d82523d6000602084013e611179565b606091505b505050505b6007805461ff001916610100179055565b61037e806114de83390190565b6020808252825182820181905260009190848201906040850190845b818110156111dd5783516001600160a01b0316835292840192918401916001016111b8565b50909695505050505050565b60005b838110156112045781810151838201526020016111ec565b83811115611213576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112e757603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156112d057898403605f19018352845180518086526112b1818e88018f85016111e9565b958c0195601f01601f1916949094018b019350918a019160010161128a565b509197505050938601935090850190600101611240565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561139857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156113835783516001600160e01b0319168252928b019260019290920191908b0190611359565b50978a0197955050509187019160010161131c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112e757878503603f19018452815180518087526113f5818989018a85016111e9565b601f01601f1916959095018601945092850192908501906001016113ce565b600181811c9082168061142857607f821691505b60208210810361144857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561146057600080fd5b5051919050565b6001600160e01b031983168152815160009061148a8160048501602087016111e9565b919091016004019392505050565b600082516114aa8184602087016111e9565b9190910192915050565b6000602082840312156114c657600080fd5b815180151581146114d657600080fd5b939250505056fe60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212203946214694ec61778bc3253d017255188464394ff29e4dbdd6558c9f80b6e4f764736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModBroadcastTestField

    syntax S2KtestZModBroadcastTestField ::= "stdstore" [symbol(), klabel(field_test%BroadcastTest_stdstore)]

    syntax S2KtestZModBroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_test%BroadcastTest_IS_TEST)]

    syntax S2KtestZModBroadcastTestField ::= "_failed" [symbol(), klabel(field_test%BroadcastTest__failed)]

    syntax S2KtestZModBroadcastTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%BroadcastTest_stdChainsInitialized)]

    syntax S2KtestZModBroadcastTestField ::= "chains" [symbol(), klabel(field_test%BroadcastTest_chains)]

    syntax S2KtestZModBroadcastTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%BroadcastTest_defaultRpcUrls)]

    syntax S2KtestZModBroadcastTestField ::= "idToAlias" [symbol(), klabel(field_test%BroadcastTest_idToAlias)]

    syntax S2KtestZModBroadcastTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%BroadcastTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModBroadcastTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%BroadcastTest_gasMeteringOff)]

    syntax S2KtestZModBroadcastTestField ::= "_excludedContracts" [symbol(), klabel(field_test%BroadcastTest__excludedContracts)]

    syntax S2KtestZModBroadcastTestField ::= "_excludedSenders" [symbol(), klabel(field_test%BroadcastTest__excludedSenders)]

    syntax S2KtestZModBroadcastTestField ::= "_targetedContracts" [symbol(), klabel(field_test%BroadcastTest__targetedContracts)]

    syntax S2KtestZModBroadcastTestField ::= "_targetedSenders" [symbol(), klabel(field_test%BroadcastTest__targetedSenders)]

    syntax S2KtestZModBroadcastTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%BroadcastTest__excludedArtifacts)]

    syntax S2KtestZModBroadcastTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%BroadcastTest__targetedArtifacts)]

    syntax S2KtestZModBroadcastTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%BroadcastTest__targetedArtifactSelectors)]

    syntax S2KtestZModBroadcastTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%BroadcastTest__targetedSelectors)]

    syntax S2KtestZModBroadcastTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%BroadcastTest__targetedInterfaces)]

    syntax S2KtestZModBroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_test%BroadcastTest_ACCOUNT_A)]

    syntax S2KtestZModBroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_test%BroadcastTest_ACCOUNT_B)]

    rule  ( #loc ( S2KtestZModBroadcastTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModBroadcastTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModBroadcastTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModBroadcastTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModBroadcastTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModBroadcastTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModBroadcastTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModBroadcastTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModBroadcastTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModBroadcastTest . ACCOUNT_A ) => 28 )


    rule  ( #loc ( S2KtestZModBroadcastTest . ACCOUNT_B ) => 29 )


    syntax Bytes ::= S2KtestZModBroadcastTestContract "." S2KtestZModBroadcastTestMethod [function(), symbol(), klabel(method_test%BroadcastTest)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KISZUndTEST_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KdeployNoArgs" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KdeployNoArgs_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KdeployOther" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KdeployOther_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KexcludeContracts_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KexcludeSenders_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2Kfailed_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KsetUp_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtargetArtifacts_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtargetContracts_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtargetInterfaces_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtargetSelectors_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtargetSenders_)]

    syntax S2KtestZModBroadcastTestMethod ::= "S2KtestDeploy" "(" ")" [symbol(), klabel(method_test%BroadcastTest_S2KtestDeploy_)]

    rule  ( S2KtestZModBroadcastTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KdeployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KdeployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModBroadcastTest . S2KtestDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "deployNoArgs()" ) => 1902058844 )


    rule  ( selector ( "deployOther()" ) => 4254441026 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testDeploy()" ) => 894117685 )


endmodule

module S2KsrcZModConstants-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModConstantsContract

    syntax S2KsrcZModConstantsContract ::= "S2KsrcZModConstants" [symbol(), klabel(contract_src%Constants)]

    rule  ( #binRuntime ( S2KsrcZModConstants ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KsrcZModConstants ) => #parseByteStack ( "0x" ) )


endmodule

module S2KsrcZModContract-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModContractContract

    syntax S2KsrcZModContractContract ::= "S2KsrcZModContract" [symbol(), klabel(contract_src%Contract)]

    rule  ( #binRuntime ( S2KsrcZModContract ) => #parseByteStack ( "0x6080604052600080fdfea2646970667358221220f719aa262cc1b99b7e37851280c02555574c7f70119afa5d6c61eb2310a4d52064736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModContract ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f719aa262cc1b99b7e37851280c02555574c7f70119afa5d6c61eb2310a4d52064736f6c634300080d0033" ) )


endmodule

module S2KtestZModContractTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModContractTestContract

    syntax S2KtestZModContractTestContract ::= "S2KtestZModContractTest" [symbol(), klabel(contract_test%ContractTest)]

    rule  ( #binRuntime ( S2KtestZModContractTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461011b578063916a17c614610130578063b5508aa914610138578063ba414fa614610140578063e20c9f7114610158578063fa7626d41461016057600080fd5b80631ed7831c146100b95780632ade3880146100d75780633e5e3c23146100ec5780633f5a4a2a146100f45780633f7286f4146100fe57806366d9a9a014610106575b600080fd5b6100c161016d565b6040516100ce9190610a59565b60405180910390f35b6100df6101cf565b6040516100ce9190610ad6565b6100c1610311565b6100fc610371565b005b6100c161037d565b61010e6103dd565b6040516100ce9190610bb1565b6101236104c3565b6040516100ce9190610c64565b61010e610593565b610123610679565b610148610749565b60405190151581526020016100ce565b6100c1610876565b6007546101489060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101c557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561030857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156102f157838290600052602060002001805461026490610cd1565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610cd1565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b505050505081526020019060010190610245565b5050505081525050815260200190600101906101f3565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b61037b60016108d6565b565b606060158054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104ab57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161046d5790505b50505050508152505081526020019060010190610401565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561030857838290600052602060002001805461050690610cd1565b80601f016020809104026020016040519081016040528092919081815260200182805461053290610cd1565b801561057f5780601f106105545761010080835404028352916020019161057f565b820191906000526020600020905b81548152906001019060200180831161056257829003601f168201915b5050505050815260200190600101906104e7565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561066157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106235790505b505050505081525050815260200190600101906105b7565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103085783829060005260206000200180546106bc90610cd1565b80601f01602080910402602001604051908101604052809291908181526020018280546106e890610cd1565b80156107355780601f1061070a57610100808354040283529160200191610735565b820191906000526020600020905b81548152906001019060200180831161071857829003601f168201915b50505050508152602001906001019061069d565b600754600090610100900460ff161561076b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108715760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107f9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d0b565b60408051601f198184030181529082905261081391610d3c565b6000604051808303816000865af19150503d8060008114610850576040519150601f19603f3d011682016040523d82523d6000602084013e610855565b606091505b509150508080602001905181019061086d9190610d58565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b8061094a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161093a9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a161094a61094d565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a485760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109e79291602001610d0b565b60408051601f1981840301815290829052610a0191610d3c565b6000604051808303816000865af19150503d8060008114610a3e576040519150601f19603f3d011682016040523d82523d6000602084013e610a43565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610a9a5783516001600160a01b031683529284019291840191600101610a75565b50909695505050505050565b60005b83811015610ac1578181015183820152602001610aa9565b83811115610ad0576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ba457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610b8d57898403605f1901835284518051808652610b6e818e88018f8501610aa6565b958c0195601f01601f1916949094018b019350918a0191600101610b47565b509197505050938601935090850190600101610afd565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c5557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c405783516001600160e01b0319168252928b019260019290920191908b0190610c16565b50978a01979550505091870191600101610bd9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ba457878503603f1901845281518051808752610cb2818989018a8501610aa6565b601f01601f191695909501860194509285019290850190600101610c8b565b600181811c90821680610ce557607f821691505b602082108103610d0557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d2e816004850160208701610aa6565b919091016004019392505050565b60008251610d4e818460208701610aa6565b9190910192915050565b600060208284031215610d6a57600080fd5b81518015158114610d7a57600080fd5b939250505056fea26469706673582212206347745d3e0ad3cb14bb02bbdd91ba930140525bee7e9c06bdddfc94145b096464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModContractTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610db78061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461011b578063916a17c614610130578063b5508aa914610138578063ba414fa614610140578063e20c9f7114610158578063fa7626d41461016057600080fd5b80631ed7831c146100b95780632ade3880146100d75780633e5e3c23146100ec5780633f5a4a2a146100f45780633f7286f4146100fe57806366d9a9a014610106575b600080fd5b6100c161016d565b6040516100ce9190610a59565b60405180910390f35b6100df6101cf565b6040516100ce9190610ad6565b6100c1610311565b6100fc610371565b005b6100c161037d565b61010e6103dd565b6040516100ce9190610bb1565b6101236104c3565b6040516100ce9190610c64565b61010e610593565b610123610679565b610148610749565b60405190151581526020016100ce565b6100c1610876565b6007546101489060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101c557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561030857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156102f157838290600052602060002001805461026490610cd1565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610cd1565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b505050505081526020019060010190610245565b5050505081525050815260200190600101906101f3565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b61037b60016108d6565b565b606060158054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104ab57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161046d5790505b50505050508152505081526020019060010190610401565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561030857838290600052602060002001805461050690610cd1565b80601f016020809104026020016040519081016040528092919081815260200182805461053290610cd1565b801561057f5780601f106105545761010080835404028352916020019161057f565b820191906000526020600020905b81548152906001019060200180831161056257829003601f168201915b5050505050815260200190600101906104e7565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561066157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106235790505b505050505081525050815260200190600101906105b7565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103085783829060005260206000200180546106bc90610cd1565b80601f01602080910402602001604051908101604052809291908181526020018280546106e890610cd1565b80156107355780601f1061070a57610100808354040283529160200191610735565b820191906000526020600020905b81548152906001019060200180831161071857829003601f168201915b50505050508152602001906001019061069d565b600754600090610100900460ff161561076b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108715760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916107f9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d0b565b60408051601f198184030181529082905261081391610d3c565b6000604051808303816000865af19150503d8060008114610850576040519150601f19603f3d011682016040523d82523d6000602084013e610855565b606091505b509150508080602001905181019061086d9190610d58565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b8061094a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161093a9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a161094a61094d565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a485760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109e79291602001610d0b565b60408051601f1981840301815290829052610a0191610d3c565b6000604051808303816000865af19150503d8060008114610a3e576040519150601f19603f3d011682016040523d82523d6000602084013e610a43565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610a9a5783516001600160a01b031683529284019291840191600101610a75565b50909695505050505050565b60005b83811015610ac1578181015183820152602001610aa9565b83811115610ad0576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ba457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610b8d57898403605f1901835284518051808652610b6e818e88018f8501610aa6565b958c0195601f01601f1916949094018b019350918a0191600101610b47565b509197505050938601935090850190600101610afd565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c5557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c405783516001600160e01b0319168252928b019260019290920191908b0190610c16565b50978a01979550505091870191600101610bd9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ba457878503603f1901845281518051808752610cb2818989018a8501610aa6565b601f01601f191695909501860194509285019290850190600101610c8b565b600181811c90821680610ce557607f821691505b602082108103610d0557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d2e816004850160208701610aa6565b919091016004019392505050565b60008251610d4e818460208701610aa6565b9190910192915050565b600060208284031215610d6a57600080fd5b81518015158114610d7a57600080fd5b939250505056fea26469706673582212206347745d3e0ad3cb14bb02bbdd91ba930140525bee7e9c06bdddfc94145b096464736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModContractTestField

    syntax S2KtestZModContractTestField ::= "stdstore" [symbol(), klabel(field_test%ContractTest_stdstore)]

    syntax S2KtestZModContractTestField ::= "IS_TEST" [symbol(), klabel(field_test%ContractTest_IS_TEST)]

    syntax S2KtestZModContractTestField ::= "_failed" [symbol(), klabel(field_test%ContractTest__failed)]

    syntax S2KtestZModContractTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ContractTest_stdChainsInitialized)]

    syntax S2KtestZModContractTestField ::= "chains" [symbol(), klabel(field_test%ContractTest_chains)]

    syntax S2KtestZModContractTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ContractTest_defaultRpcUrls)]

    syntax S2KtestZModContractTestField ::= "idToAlias" [symbol(), klabel(field_test%ContractTest_idToAlias)]

    syntax S2KtestZModContractTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ContractTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModContractTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ContractTest_gasMeteringOff)]

    syntax S2KtestZModContractTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ContractTest__excludedContracts)]

    syntax S2KtestZModContractTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ContractTest__excludedSenders)]

    syntax S2KtestZModContractTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ContractTest__targetedContracts)]

    syntax S2KtestZModContractTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ContractTest__targetedSenders)]

    syntax S2KtestZModContractTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ContractTest__excludedArtifacts)]

    syntax S2KtestZModContractTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ContractTest__targetedArtifacts)]

    syntax S2KtestZModContractTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ContractTest__targetedArtifactSelectors)]

    syntax S2KtestZModContractTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ContractTest__targetedSelectors)]

    syntax S2KtestZModContractTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ContractTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModContractTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModContractTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModContractTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModContractTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModContractTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModContractTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModContractTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModContractTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModContractTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModContractTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModContractTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModContractTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModContractTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModContractTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModContractTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModContractTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModContractTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModContractTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModContractTestContract "." S2KtestZModContractTestMethod [function(), symbol(), klabel(method_test%ContractTest)]

    syntax S2KtestZModContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KISZUndTEST_)]

    syntax S2KtestZModContractTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModContractTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KexcludeContracts_)]

    syntax S2KtestZModContractTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KexcludeSenders_)]

    syntax S2KtestZModContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ContractTest_S2Kfailed_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtargetArtifacts_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtargetContracts_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtargetInterfaces_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtargetSelectors_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtargetSenders_)]

    syntax S2KtestZModContractTestMethod ::= "S2KtestExample" "(" ")" [symbol(), klabel(method_test%ContractTest_S2KtestExample_)]

    rule  ( S2KtestZModContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModContractTest . S2KtestExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testExample()" ) => 1062881834 )


endmodule

module S2KtestZModContractBTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModContractBTestContract

    syntax S2KtestZModContractBTestContract ::= "S2KtestZModContractBTest" [symbol(), klabel(contract_test%ContractBTest)]

    rule  ( #binRuntime ( S2KtestZModContractBTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80633f7286f411610097578063b5508aa911610066578063b5508aa914610193578063ba414fa61461019b578063e20c9f71146101b3578063fa7626d4146101bb57600080fd5b80633f7286f41461015957806366d9a9a01461016157806385226c8114610176578063916a17c61461018b57600080fd5b80632f6b04ac116100d35780632f6b04ac146101395780633790444c146101415780633ce7a75c146101495780633e5e3c231461015157600080fd5b80630a9254e4146100fa5780631ed7831c146101065780632ade388014610124575b600080fd5b610104602a601c55565b005b61010e6101c8565b60405161011b9190610c3c565b60405180910390f35b61012c61022a565b60405161011b9190610ce5565b61010461036c565b61010461037b565b610104610439565b61010e61044c565b61010e6104ac565b61016961050c565b60405161011b9190610da5565b61017e6105f2565b60405161011b9190610e58565b6101696106c2565b61017e6107a8565b6101a3610878565b604051901515815260200161011b565b61010e6109a5565b6007546101a39060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610202575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561034c5783829060005260206000200180546102bf90610eba565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90610eba565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b5050505050815260200190600101906102a0565b50505050815250508152602001906001019061024e565b50505050905090565b610379601c54602a610a05565b565b60405160116024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b03191681526103ed9190600401610ef4565b600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b50505050602b601c60008282546104329190610f0e565b9091555050565b602b601c60008282546104329190610f0e565b60606016805480602002602001604051908101604052809291908181526020018280548015610220576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610202575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610220576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610202575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103635760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105da57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161059c5790505b50505050508152505081526020019060010190610530565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036357838290600052602060002001805461063590610eba565b80601f016020809104026020016040519081016040528092919081815260200182805461066190610eba565b80156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b505050505081526020019060010190610616565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103635760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561079057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107525790505b505050505081525050815260200190600101906106e6565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103635783829060005260206000200180546107eb90610eba565b80601f016020809104026020016040519081016040528092919081815260200182805461081790610eba565b80156108645780601f1061083957610100808354040283529160200191610864565b820191906000526020600020905b81548152906001019060200180831161084757829003601f168201915b5050505050815260200190600101906107cc565b600754600090610100900460ff161561089a5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109a05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610928917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610f33565b60408051601f198184030181529082905261094291610f64565b6000604051808303816000865af19150503d806000811461097f576040519150601f19603f3d011682016040523d82523d6000602084013e610984565b606091505b509150508080602001905181019061099c9190610f80565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610220576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610202575050505050905090565b808214610b2c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a769060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610b2c610b30565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c2b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610bca9291602001610f33565b60408051601f1981840301815290829052610be491610f64565b6000604051808303816000865af19150503d8060008114610c21576040519150601f19603f3d011682016040523d82523d6000602084013e610c26565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610c7d5783516001600160a01b031683529284019291840191600101610c58565b50909695505050505050565b60005b83811015610ca4578181015183820152602001610c8c565b83811115610cb3576000848401525b50505050565b60008151808452610cd1816020860160208601610c89565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610d9557603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610d7f57605f19898503018352610d6d848651610cb9565b948e01949350918d0191600101610d51565b505050978a019794505091880191600101610d0c565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610e4957898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610e345783516001600160e01b0319168252928b019260019290920191908b0190610e0a565b50978a01979550505091870191600101610dcd565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ead57603f19888603018452610e9b858351610cb9565b94509285019290850190600101610e7f565b5092979650505050505050565b600181811c90821680610ece57607f821691505b602082108103610eee57634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000610f076020830184610cb9565b9392505050565b600082821015610f2e57634e487b7160e01b600052601160045260246000fd5b500390565b6001600160e01b0319831681528151600090610f56816004850160208701610c89565b919091016004019392505050565b60008251610f76818460208701610c89565b9190910192915050565b600060208284031215610f9257600080fd5b81518015158114610f0757600080fdfea264697066735822122026b6d069b1f7241d10dae174d662f773c5199e655870a1644a297e5874766ad164736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModContractBTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610fd88061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633f7286f411610097578063b5508aa911610066578063b5508aa914610193578063ba414fa61461019b578063e20c9f71146101b3578063fa7626d4146101bb57600080fd5b80633f7286f41461015957806366d9a9a01461016157806385226c8114610176578063916a17c61461018b57600080fd5b80632f6b04ac116100d35780632f6b04ac146101395780633790444c146101415780633ce7a75c146101495780633e5e3c231461015157600080fd5b80630a9254e4146100fa5780631ed7831c146101065780632ade388014610124575b600080fd5b610104602a601c55565b005b61010e6101c8565b60405161011b9190610c3c565b60405180910390f35b61012c61022a565b60405161011b9190610ce5565b61010461036c565b61010461037b565b610104610439565b61010e61044c565b61010e6104ac565b61016961050c565b60405161011b9190610da5565b61017e6105f2565b60405161011b9190610e58565b6101696106c2565b61017e6107a8565b6101a3610878565b604051901515815260200161011b565b61010e6109a5565b6007546101a39060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610202575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561034c5783829060005260206000200180546102bf90610eba565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90610eba565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b5050505050815260200190600101906102a0565b50505050815250508152602001906001019061024e565b50505050905090565b610379601c54602a610a05565b565b60405160116024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b03191681526103ed9190600401610ef4565b600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b50505050602b601c60008282546104329190610f0e565b9091555050565b602b601c60008282546104329190610f0e565b60606016805480602002602001604051908101604052809291908181526020018280548015610220576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610202575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610220576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610202575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103635760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105da57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161059c5790505b50505050508152505081526020019060010190610530565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036357838290600052602060002001805461063590610eba565b80601f016020809104026020016040519081016040528092919081815260200182805461066190610eba565b80156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b505050505081526020019060010190610616565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103635760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561079057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107525790505b505050505081525050815260200190600101906106e6565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103635783829060005260206000200180546107eb90610eba565b80601f016020809104026020016040519081016040528092919081815260200182805461081790610eba565b80156108645780601f1061083957610100808354040283529160200191610864565b820191906000526020600020905b81548152906001019060200180831161084757829003601f168201915b5050505050815260200190600101906107cc565b600754600090610100900460ff161561089a5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109a05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610928917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610f33565b60408051601f198184030181529082905261094291610f64565b6000604051808303816000865af19150503d806000811461097f576040519150601f19603f3d011682016040523d82523d6000602084013e610984565b606091505b509150508080602001905181019061099c9190610f80565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610220576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610202575050505050905090565b808214610b2c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a769060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610b2c610b30565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c2b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610bca9291602001610f33565b60408051601f1981840301815290829052610be491610f64565b6000604051808303816000865af19150503d8060008114610c21576040519150601f19603f3d011682016040523d82523d6000602084013e610c26565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610c7d5783516001600160a01b031683529284019291840191600101610c58565b50909695505050505050565b60005b83811015610ca4578181015183820152602001610c8c565b83811115610cb3576000848401525b50505050565b60008151808452610cd1816020860160208601610c89565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610d9557603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610d7f57605f19898503018352610d6d848651610cb9565b948e01949350918d0191600101610d51565b505050978a019794505091880191600101610d0c565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610e4957898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610e345783516001600160e01b0319168252928b019260019290920191908b0190610e0a565b50978a01979550505091870191600101610dcd565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ead57603f19888603018452610e9b858351610cb9565b94509285019290850190600101610e7f565b5092979650505050505050565b600181811c90821680610ece57607f821691505b602082108103610eee57634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000610f076020830184610cb9565b9392505050565b600082821015610f2e57634e487b7160e01b600052601160045260246000fd5b500390565b6001600160e01b0319831681528151600090610f56816004850160208701610c89565b919091016004019392505050565b60008251610f76818460208701610c89565b9190910192915050565b600060208284031215610f9257600080fd5b81518015158114610f0757600080fdfea264697066735822122026b6d069b1f7241d10dae174d662f773c5199e655870a1644a297e5874766ad164736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModContractBTestField

    syntax S2KtestZModContractBTestField ::= "stdstore" [symbol(), klabel(field_test%ContractBTest_stdstore)]

    syntax S2KtestZModContractBTestField ::= "IS_TEST" [symbol(), klabel(field_test%ContractBTest_IS_TEST)]

    syntax S2KtestZModContractBTestField ::= "_failed" [symbol(), klabel(field_test%ContractBTest__failed)]

    syntax S2KtestZModContractBTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ContractBTest_stdChainsInitialized)]

    syntax S2KtestZModContractBTestField ::= "chains" [symbol(), klabel(field_test%ContractBTest_chains)]

    syntax S2KtestZModContractBTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ContractBTest_defaultRpcUrls)]

    syntax S2KtestZModContractBTestField ::= "idToAlias" [symbol(), klabel(field_test%ContractBTest_idToAlias)]

    syntax S2KtestZModContractBTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ContractBTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModContractBTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ContractBTest_gasMeteringOff)]

    syntax S2KtestZModContractBTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ContractBTest__excludedContracts)]

    syntax S2KtestZModContractBTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ContractBTest__excludedSenders)]

    syntax S2KtestZModContractBTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ContractBTest__targetedContracts)]

    syntax S2KtestZModContractBTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ContractBTest__targetedSenders)]

    syntax S2KtestZModContractBTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ContractBTest__excludedArtifacts)]

    syntax S2KtestZModContractBTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ContractBTest__targetedArtifacts)]

    syntax S2KtestZModContractBTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ContractBTest__targetedArtifactSelectors)]

    syntax S2KtestZModContractBTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ContractBTest__targetedSelectors)]

    syntax S2KtestZModContractBTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ContractBTest__targetedInterfaces)]

    syntax S2KtestZModContractBTestField ::= "testNumber" [symbol(), klabel(field_test%ContractBTest_testNumber)]

    rule  ( #loc ( S2KtestZModContractBTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModContractBTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModContractBTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModContractBTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModContractBTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModContractBTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModContractBTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModContractBTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModContractBTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModContractBTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModContractBTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModContractBTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModContractBTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModContractBTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModContractBTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModContractBTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModContractBTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModContractBTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModContractBTest . testNumber ) => 28 )


    syntax Bytes ::= S2KtestZModContractBTestContract "." S2KtestZModContractBTestMethod [function(), symbol(), klabel(method_test%ContractBTest)]

    syntax S2KtestZModContractBTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KISZUndTEST_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KexcludeContracts_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KexcludeSenders_)]

    syntax S2KtestZModContractBTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2Kfailed_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KsetUp_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtargetArtifacts_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtargetContracts_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtargetInterfaces_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtargetSelectors_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtargetSenders_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtestCannotSubtract43" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtestCannotSubtract43_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtestFailSubtract43" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtestFailSubtract43_)]

    syntax S2KtestZModContractBTestMethod ::= "S2KtestNumberIs42" "(" ")" [symbol(), klabel(method_test%ContractBTest_S2KtestNumberIs42_)]

    rule  ( S2KtestZModContractBTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtestCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtestFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )


    rule  ( S2KtestZModContractBTest . S2KtestNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testCannotSubtract43()" ) => 932201548 )


    rule  ( selector ( "testFailSubtract43()" ) => 1021814620 )


    rule  ( selector ( "testNumberIs42()" ) => 795542700 )


endmodule

module S2KtestZModCounter-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModCounterContract

    syntax S2KtestZModCounterContract ::= "S2KtestZModCounter" [symbol(), klabel(contract_test%Counter)]

    rule  ( #binRuntime ( S2KtestZModCounter ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220272ea0d32b8c2399312a039e80fc43dfffa5454af2b9149531e553f06842884264736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModCounter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220272ea0d32b8c2399312a039e80fc43dfffa5454af2b9149531e553f06842884264736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModCounterField

    syntax S2KtestZModCounterField ::= "number" [symbol(), klabel(field_test%Counter_number)]

    rule  ( #loc ( S2KtestZModCounter . number ) => 0 )


    syntax Bytes ::= S2KtestZModCounterContract "." S2KtestZModCounterMethod [function(), symbol(), klabel(method_test%Counter)]

    syntax S2KtestZModCounterMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_test%Counter_S2Kincrement_)]

    syntax S2KtestZModCounterMethod ::= "S2Knumber" "(" ")" [symbol(), klabel(method_test%Counter_S2Knumber_)]

    syntax S2KtestZModCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%Counter_S2KsetNumber_uint256)]

    rule  ( S2KtestZModCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )


    rule  ( S2KtestZModCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )


    rule  ( S2KtestZModCounter . S2KsetNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , #uint256 ( V0_newNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newNumber )


    rule  ( selector ( "increment()" ) => 3500007562 )


    rule  ( selector ( "number()" ) => 2206332298 )


    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )


endmodule

module S2KtestZModCounterTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModCounterTestContract

    syntax S2KtestZModCounterTestContract ::= "S2KtestZModCounterTest" [symbol(), klabel(contract_test%CounterTest)]

    rule  ( #binRuntime ( S2KtestZModCounterTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806385226c8111610097578063ba414fa611610066578063ba414fa6146101bf578063d6a2ec76146101d7578063e20c9f71146101fe578063fa7626d41461020657600080fd5b806385226c8114610192578063916a17c6146101a7578063b5508aa9146101af578063b913a5ca146101b757600080fd5b80633f7286f4116100d35780633f7286f41461013557806361bc221a1461013d57806366d9a9a01461016857806370f985be1461017d57600080fd5b80631ed7831c146100fa5780632ade3880146101185780633e5e3c231461012d575b600080fd5b610102610213565b60405161010f9190610eae565b60405180910390f35b610120610275565b60405161010f9190610f2b565b6101026103b7565b610102610417565b601c54610150906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b610170610477565b60405161010f9190611006565b61019061018b3660046110b9565b61055d565b005b61019a6106d5565b60405161010f91906110d2565b6101706107a5565b61019a61088b565b61019061095b565b6101c7610add565b604051901515815260200161010f565b6101507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b610102610c0a565b6007546101c79060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561026b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161024d575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103ae57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561039757838290600052602060002001805461030a9061113f565b80601f01602080910402602001604051908101604052809291908181526020018280546103369061113f565b80156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b5050505050815260200190600101906102eb565b505050508152505081526020019060010190610299565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561026b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024d575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561026b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024d575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103ae5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561054557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105075790505b5050505050815250508152602001906001019061049b565b60405161056990610ea1565b604051809103906000f080158015610585573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b5050601c54604051633fb5c1cb60e01b8152600481018590526001600160a01b039091169250633fb5c1cb9150602401600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b505050506106d2601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611179565b82610c6a565b50565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103ae5783829060005260206000200180546107189061113f565b80601f01602080910402602001604051908101604052809291908181526020018280546107449061113f565b80156107915780601f1061076657610100808354040283529160200191610791565b820191906000526020600020905b81548152906001019060200180831161077457829003601f168201915b5050505050815260200190600101906106f9565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103ae5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561087357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108355790505b505050505081525050815260200190600101906107c9565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103ae5783829060005260206000200180546108ce9061113f565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa9061113f565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b5050505050815260200190600101906108af565b60405161096790610ea1565b604051809103906000f080158015610983573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b50505050601c60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a4257600080fd5b505af1158015610a56573d6000803e3d6000fd5b50505050610adb601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611179565b6001610c6a565b565b600754600090610100900460ff1615610aff5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c055760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610b8d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611192565b60408051601f1981840301815290829052610ba7916111c3565b6000604051808303816000865af19150503d8060008114610be4576040519150601f19603f3d011682016040523d82523d6000602084013e610be9565b606091505b5091505080806020019051810190610c0191906111df565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561026b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024d575050505050905090565b808214610d91577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610cdb9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610d91610d95565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e905760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610e2f9291602001611192565b60408051601f1981840301815290829052610e49916111c3565b6000604051808303816000865af19150503d8060008114610e86576040519150601f19603f3d011682016040523d82523d6000602084013e610e8b565b606091505b505050505b6007805461ff001916610100179055565b6101168061120983390190565b6020808252825182820181905260009190848201906040850190845b81811015610eef5783516001600160a01b031683529284019291840191600101610eca565b50909695505050505050565b60005b83811015610f16578181015183820152602001610efe565b83811115610f25576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ff957603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610fe257898403605f1901835284518051808652610fc3818e88018f8501610efb565b958c0195601f01601f1916949094018b019350918a0191600101610f9c565b509197505050938601935090850190600101610f52565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156110aa57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110955783516001600160e01b0319168252928b019260019290920191908b019061106b565b50978a0197955050509187019160010161102e565b50919998505050505050505050565b6000602082840312156110cb57600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ff957878503603f1901845281518051808752611120818989018a8501610efb565b601f01601f1916959095018601945092850192908501906001016110f9565b600181811c9082168061115357607f821691505b60208210810361117357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561118b57600080fd5b5051919050565b6001600160e01b03198316815281516000906111b5816004850160208701610efb565b919091016004019392505050565b600082516111d5818460208701610efb565b9190910192915050565b6000602082840312156111f157600080fd5b8151801515811461120157600080fd5b939250505056fe608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220272ea0d32b8c2399312a039e80fc43dfffa5454af2b9149531e553f06842884264736f6c634300080d0033a26469706673582212203e734f438d4bb4e29e58b0e3fc1dcfb58dad951fe0fc3cc13c16ae0b1262d65264736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModCounterTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506113548061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806385226c8111610097578063ba414fa611610066578063ba414fa6146101bf578063d6a2ec76146101d7578063e20c9f71146101fe578063fa7626d41461020657600080fd5b806385226c8114610192578063916a17c6146101a7578063b5508aa9146101af578063b913a5ca146101b757600080fd5b80633f7286f4116100d35780633f7286f41461013557806361bc221a1461013d57806366d9a9a01461016857806370f985be1461017d57600080fd5b80631ed7831c146100fa5780632ade3880146101185780633e5e3c231461012d575b600080fd5b610102610213565b60405161010f9190610eae565b60405180910390f35b610120610275565b60405161010f9190610f2b565b6101026103b7565b610102610417565b601c54610150906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b610170610477565b60405161010f9190611006565b61019061018b3660046110b9565b61055d565b005b61019a6106d5565b60405161010f91906110d2565b6101706107a5565b61019a61088b565b61019061095b565b6101c7610add565b604051901515815260200161010f565b6101507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b610102610c0a565b6007546101c79060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561026b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161024d575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103ae57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561039757838290600052602060002001805461030a9061113f565b80601f01602080910402602001604051908101604052809291908181526020018280546103369061113f565b80156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b5050505050815260200190600101906102eb565b505050508152505081526020019060010190610299565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561026b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024d575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561026b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024d575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103ae5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561054557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105075790505b5050505050815250508152602001906001019061049b565b60405161056990610ea1565b604051809103906000f080158015610585573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b5050601c54604051633fb5c1cb60e01b8152600481018590526001600160a01b039091169250633fb5c1cb9150602401600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b505050506106d2601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611179565b82610c6a565b50565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103ae5783829060005260206000200180546107189061113f565b80601f01602080910402602001604051908101604052809291908181526020018280546107449061113f565b80156107915780601f1061076657610100808354040283529160200191610791565b820191906000526020600020905b81548152906001019060200180831161077457829003601f168201915b5050505050815260200190600101906106f9565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103ae5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561087357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108355790505b505050505081525050815260200190600101906107c9565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103ae5783829060005260206000200180546108ce9061113f565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa9061113f565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b5050505050815260200190600101906108af565b60405161096790610ea1565b604051809103906000f080158015610983573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b50505050601c60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a4257600080fd5b505af1158015610a56573d6000803e3d6000fd5b50505050610adb601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611179565b6001610c6a565b565b600754600090610100900460ff1615610aff5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c055760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610b8d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611192565b60408051601f1981840301815290829052610ba7916111c3565b6000604051808303816000865af19150503d8060008114610be4576040519150601f19603f3d011682016040523d82523d6000602084013e610be9565b606091505b5091505080806020019051810190610c0191906111df565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561026b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024d575050505050905090565b808214610d91577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610cdb9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610d91610d95565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e905760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610e2f9291602001611192565b60408051601f1981840301815290829052610e49916111c3565b6000604051808303816000865af19150503d8060008114610e86576040519150601f19603f3d011682016040523d82523d6000602084013e610e8b565b606091505b505050505b6007805461ff001916610100179055565b6101168061120983390190565b6020808252825182820181905260009190848201906040850190845b81811015610eef5783516001600160a01b031683529284019291840191600101610eca565b50909695505050505050565b60005b83811015610f16578181015183820152602001610efe565b83811115610f25576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ff957603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610fe257898403605f1901835284518051808652610fc3818e88018f8501610efb565b958c0195601f01601f1916949094018b019350918a0191600101610f9c565b509197505050938601935090850190600101610f52565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156110aa57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110955783516001600160e01b0319168252928b019260019290920191908b019061106b565b50978a0197955050509187019160010161102e565b50919998505050505050505050565b6000602082840312156110cb57600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ff957878503603f1901845281518051808752611120818989018a8501610efb565b601f01601f1916959095018601945092850192908501906001016110f9565b600181811c9082168061115357607f821691505b60208210810361117357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561118b57600080fd5b5051919050565b6001600160e01b03198316815281516000906111b5816004850160208701610efb565b919091016004019392505050565b600082516111d5818460208701610efb565b9190910192915050565b6000602082840312156111f157600080fd5b8151801515811461120157600080fd5b939250505056fe608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220272ea0d32b8c2399312a039e80fc43dfffa5454af2b9149531e553f06842884264736f6c634300080d0033a26469706673582212203e734f438d4bb4e29e58b0e3fc1dcfb58dad951fe0fc3cc13c16ae0b1262d65264736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModCounterTestField

    syntax S2KtestZModCounterTestField ::= "stdstore" [symbol(), klabel(field_test%CounterTest_stdstore)]

    syntax S2KtestZModCounterTestField ::= "IS_TEST" [symbol(), klabel(field_test%CounterTest_IS_TEST)]

    syntax S2KtestZModCounterTestField ::= "_failed" [symbol(), klabel(field_test%CounterTest__failed)]

    syntax S2KtestZModCounterTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%CounterTest_stdChainsInitialized)]

    syntax S2KtestZModCounterTestField ::= "chains" [symbol(), klabel(field_test%CounterTest_chains)]

    syntax S2KtestZModCounterTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%CounterTest_defaultRpcUrls)]

    syntax S2KtestZModCounterTestField ::= "idToAlias" [symbol(), klabel(field_test%CounterTest_idToAlias)]

    syntax S2KtestZModCounterTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%CounterTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModCounterTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%CounterTest_gasMeteringOff)]

    syntax S2KtestZModCounterTestField ::= "_excludedContracts" [symbol(), klabel(field_test%CounterTest__excludedContracts)]

    syntax S2KtestZModCounterTestField ::= "_excludedSenders" [symbol(), klabel(field_test%CounterTest__excludedSenders)]

    syntax S2KtestZModCounterTestField ::= "_targetedContracts" [symbol(), klabel(field_test%CounterTest__targetedContracts)]

    syntax S2KtestZModCounterTestField ::= "_targetedSenders" [symbol(), klabel(field_test%CounterTest__targetedSenders)]

    syntax S2KtestZModCounterTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%CounterTest__excludedArtifacts)]

    syntax S2KtestZModCounterTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%CounterTest__targetedArtifacts)]

    syntax S2KtestZModCounterTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%CounterTest__targetedArtifactSelectors)]

    syntax S2KtestZModCounterTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%CounterTest__targetedSelectors)]

    syntax S2KtestZModCounterTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%CounterTest__targetedInterfaces)]

    syntax S2KtestZModCounterTestField ::= "counter" [symbol(), klabel(field_test%CounterTest_counter)]

    rule  ( #loc ( S2KtestZModCounterTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModCounterTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModCounterTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModCounterTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModCounterTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModCounterTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModCounterTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModCounterTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModCounterTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModCounterTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModCounterTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModCounterTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModCounterTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModCounterTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModCounterTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModCounterTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModCounterTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModCounterTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModCounterTest . counter ) => 28 )


    syntax Bytes ::= S2KtestZModCounterTestContract "." S2KtestZModCounterTestMethod [function(), symbol(), klabel(method_test%CounterTest)]

    syntax S2KtestZModCounterTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KISZUndTEST_)]

    syntax S2KtestZModCounterTestMethod ::= "S2Kcounter" "(" ")" [symbol(), klabel(method_test%CounterTest_S2Kcounter_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KexcludeContracts_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KexcludeSenders_)]

    syntax S2KtestZModCounterTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%CounterTest_S2Kfailed_)]

    syntax S2KtestZModCounterTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%CounterTest_S2Kkevm_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtargetArtifacts_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtargetContracts_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtargetInterfaces_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtargetSelectors_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtargetSenders_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtestIncrement" "(" ")" [symbol(), klabel(method_test%CounterTest_S2KtestIncrement_)]

    syntax S2KtestZModCounterTestMethod ::= "S2KtestSetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%CounterTest_S2KtestSetNumber_uint256)]

    rule  ( S2KtestZModCounterTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2Kcounter ( ) => #abiCallData ( "counter" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtestIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )


    rule  ( S2KtestZModCounterTest . S2KtestSetNumber ( V0_x : uint256 ) => #abiCallData ( "testSetNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "counter()" ) => 1639719450 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testIncrement()" ) => 3105072586 )


    rule  ( selector ( "testSetNumber(uint256)" ) => 1895400894 )


endmodule

module S2KsrcZModDeploymentState-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModDeploymentStateContract

    syntax S2KsrcZModDeploymentStateContract ::= "S2KsrcZModDeploymentState" [symbol(), klabel(contract_src%DeploymentState)]

    rule  ( #binRuntime ( S2KsrcZModDeploymentState ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b5b8c44814610030575b600080fd5b61003861003a565b005b6000807f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663b4d6c782735615deb798bb3e4dfa0139dfa1b3d433cc23b72f60405180610140016040528061010681526020016101e861010691396040518363ffffffff1660e01b81526004016100bd929190610182565b600060405180830381600087803b1580156100d757600080fd5b505af11580156100eb573d6000803e3d6000fd5b50506040516370ca10bb60e01b8152735615deb798bb3e4dfa0139dfa1b3d433cc23b72f60048201526000602482018190526003604483018190529095509350737109709ecfa91a80626ff3989d68f67f5b1dd12d92506370ca10bb9150606401600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b505050505050565b60018060a01b038316815260006020604081840152835180604085015260005b818110156101be578581018301518582016060015282016101a2565b818111156101d0576000606083870101525b50601f01601f19169290920160600194935050505056fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820360f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea164736f6c634300080f000aa264697066735822122005b0f7cfc6ac71288abaad1f6364eea8e5c6578275b2d35b9b735aac792eb5cc64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModDeploymentState ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610323806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b5b8c44814610030575b600080fd5b61003861003a565b005b6000807f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663b4d6c782735615deb798bb3e4dfa0139dfa1b3d433cc23b72f60405180610140016040528061010681526020016101e861010691396040518363ffffffff1660e01b81526004016100bd929190610182565b600060405180830381600087803b1580156100d757600080fd5b505af11580156100eb573d6000803e3d6000fd5b50506040516370ca10bb60e01b8152735615deb798bb3e4dfa0139dfa1b3d433cc23b72f60048201526000602482018190526003604483018190529095509350737109709ecfa91a80626ff3989d68f67f5b1dd12d92506370ca10bb9150606401600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b505050505050565b60018060a01b038316815260006020604081840152835180604085015260005b818110156101be578581018301518582016060015282016101a2565b818111156101d0576000606083870101525b50601f01601f19169290920160600194935050505056fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820360f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea164736f6c634300080f000aa264697066735822122005b0f7cfc6ac71288abaad1f6364eea8e5c6578275b2d35b9b735aac792eb5cc64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KsrcZModDeploymentStateContract "." S2KsrcZModDeploymentStateMethod [function(), symbol(), klabel(method_src%DeploymentState)]

    syntax S2KsrcZModDeploymentStateMethod ::= "S2KrecreateDeployment" "(" ")" [symbol(), klabel(method_src%DeploymentState_S2KrecreateDeployment_)]

    rule  ( S2KsrcZModDeploymentState . S2KrecreateDeployment ( ) => #abiCallData ( "recreateDeployment" , .TypedArgs ) )


    rule  ( selector ( "recreateDeployment()" ) => 3048784968 )


endmodule

module S2KsrcZModDeploymentStateCode-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModDeploymentStateCodeContract

    syntax S2KsrcZModDeploymentStateCodeContract ::= "S2KsrcZModDeploymentStateCode" [symbol(), klabel(contract_src%DeploymentStateCode)]

    rule  ( #binRuntime ( S2KsrcZModDeploymentStateCode ) => #parseByteStack ( "0x6080604052600080fdfea26469706673582212201b47cdcb77975bc16010bc60c8a61ad0becce36eeed1cead75ad8301d846c05064736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModDeploymentStateCode ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201b47cdcb77975bc16010bc60c8a61ad0becce36eeed1cead75ad8301d846c05064736f6c634300080d0033" ) )


endmodule

module S2KtestZModDynamicTypesTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModDynamicTypesTestContract

    syntax S2KtestZModDynamicTypesTestContract ::= "S2KtestZModDynamicTypesTest" [symbol(), klabel(contract_test%DynamicTypesTest)]

    rule  ( #binRuntime ( S2KtestZModDynamicTypesTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610194578063e20c9f71146101ac578063ee9c6a0d146101b4578063fa7626d4146101c757600080fd5b806385226c811461016f578063916a17c614610184578063b5508aa91461018c57600080fd5b80633f7286f4116100c85780633f7286f41461012a5780634557697f146101325780635cf935fa1461014757806366d9a9a01461015a57600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101d4565b6040516101049190610d51565b60405180910390f35b610115610236565b6040516101049190610dce565b6100f7610378565b6100f76103d8565b610145610140366004610ef5565b610438565b005b610145610155366004610f66565b6104bc565b610162610629565b6040516101049190610fda565b61017761070f565b604051610104919061108d565b6101626107df565b6101776108c5565b61019c610995565b6040519015158152602001610104565b6100f7610ac2565b6101456101c2366004611110565b610b22565b60075461019c9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020e575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036f57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103585783829060005260206000200180546102cb906111c5565b80601f01602080910402602001604051908101604052809291908181526020018280546102f7906111c5565b80156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b5050505050815260200190600101906102ac565b50505050815250508152602001906001019061025a565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020e575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020e575050505050905090565b600a81146104615760405162461bcd60e51b8152600401610458906111ff565b60405180910390fd5b61046e6020840184611247565b9050612710146104805761048061128e565b81816008818110610493576104936112a4565b90506020028101906104a59190611247565b9050610258146104b7576104b761128e565b505050565b600a84146105235760405162461bcd60e51b815260206004820152602e60248201527f44796e616d696354797065733a20696e76616c6964206c656e67746820666f7260448201526d20436f6d706c6578547970655b5d60901b6064820152608401610458565b600a82146105435760405162461bcd60e51b8152600401610458906111ff565b604051632631f2b160e11b8152600a82106004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050508484828181106105ba576105ba6112a4565b90506020028101906105cc91906112ba565b6105da906020810190611247565b9050612710146105ec576105ec61128e565b8282828181106105fe576105fe6112a4565b90506020028101906106109190611247565b9050610258146106225761062261128e565b5050505050565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561036f5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b95790505b5050505050815250508152602001906001019061064d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036f578382906000526020600020018054610752906111c5565b80601f016020809104026020016040519081016040528092919081815260200182805461077e906111c5565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081526020019060010190610733565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561036f5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108ad57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161086f5790505b50505050508152505081526020019060010190610803565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036f578382906000526020600020018054610908906111c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610934906111c5565b80156109815780601f1061095657610100808354040283529160200191610981565b820191906000526020600020905b81548152906001019060200180831161096457829003601f168201915b5050505050815260200190600101906108e9565b600754600090610100900460ff16156109b75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610abd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a45917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016112da565b60408051601f1981840301815290829052610a5f9161130b565b6000604051808303816000865af19150503d8060008114610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5091505080806020019051810190610ab9919061131d565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561022c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020e575050505050905090565b6000828281518110610b3657610b366112a4565b0160200151604051632631f2b160e11b8152600360f89290921c9182106004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506104b78160ff1660021480610bc257508160ff166001145b80610bce575060ff8216155b80610c42577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c329060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610c42610c45565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610d405760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610cdf92916020016112da565b60408051601f1981840301815290829052610cf99161130b565b6000604051808303816000865af19150503d8060008114610d36576040519150601f19603f3d011682016040523d82523d6000602084013e610d3b565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610d925783516001600160a01b031683529284019291840191600101610d6d565b50909695505050505050565b60005b83811015610db9578181015183820152602001610da1565b83811115610dc8576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e9c57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610e8557898403605f1901835284518051808652610e66818e88018f8501610d9e565b958c0195601f01601f1916949094018b019350918a0191600101610e3f565b509197505050938601935090850190600101610df5565b5092979650505050505050565b60008083601f840112610ebb57600080fd5b50813567ffffffffffffffff811115610ed357600080fd5b6020830191508360208260051b8501011115610eee57600080fd5b9250929050565b600080600060408486031215610f0a57600080fd5b833567ffffffffffffffff80821115610f2257600080fd5b9085019060408288031215610f3657600080fd5b90935060208501359080821115610f4c57600080fd5b50610f5986828701610ea9565b9497909650939450505050565b600080600080600060608688031215610f7e57600080fd5b853567ffffffffffffffff80821115610f9657600080fd5b610fa289838a01610ea9565b90975095506020880135915080821115610fbb57600080fd5b50610fc888828901610ea9565b96999598509660400135949350505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561107e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110695783516001600160e01b0319168252928b019260019290920191908b019061103f565b50978a01979550505091870191600101611002565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e9c57878503603f19018452815180518087526110db818989018a8501610d9e565b601f01601f1916959095018601945092850192908501906001016110b4565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561112357600080fd5b823567ffffffffffffffff8082111561113b57600080fd5b818501915085601f83011261114f57600080fd5b813581811115611161576111616110fa565b604051601f8201601f19908116603f01168101908382118183101715611189576111896110fa565b816040528281528860208487010111156111a257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600181811c908216806111d957607f821691505b6020821081036111f957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f44796e616d696354797065733a20696e76616c6964206c656e67746820666f726040820152672062797465735b5d60c01b606082015260800190565b6000808335601e1984360301811261125e57600080fd5b83018035915067ffffffffffffffff82111561127957600080fd5b602001915036819003821315610eee57600080fd5b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126112d057600080fd5b9190910192915050565b6001600160e01b03198316815281516000906112fd816004850160208701610d9e565b919091016004019392505050565b600082516112d0818460208701610d9e565b60006020828403121561132f57600080fd5b8151801515811461133f57600080fd5b939250505056fea2646970667358221220d26e7f32ffa14524e239fbda92f795061c48cc30f49c5eda10022a2707967bff64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModDynamicTypesTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061137c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610194578063e20c9f71146101ac578063ee9c6a0d146101b4578063fa7626d4146101c757600080fd5b806385226c811461016f578063916a17c614610184578063b5508aa91461018c57600080fd5b80633f7286f4116100c85780633f7286f41461012a5780634557697f146101325780635cf935fa1461014757806366d9a9a01461015a57600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101d4565b6040516101049190610d51565b60405180910390f35b610115610236565b6040516101049190610dce565b6100f7610378565b6100f76103d8565b610145610140366004610ef5565b610438565b005b610145610155366004610f66565b6104bc565b610162610629565b6040516101049190610fda565b61017761070f565b604051610104919061108d565b6101626107df565b6101776108c5565b61019c610995565b6040519015158152602001610104565b6100f7610ac2565b6101456101c2366004611110565b610b22565b60075461019c9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020e575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036f57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103585783829060005260206000200180546102cb906111c5565b80601f01602080910402602001604051908101604052809291908181526020018280546102f7906111c5565b80156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b5050505050815260200190600101906102ac565b50505050815250508152602001906001019061025a565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020e575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020e575050505050905090565b600a81146104615760405162461bcd60e51b8152600401610458906111ff565b60405180910390fd5b61046e6020840184611247565b9050612710146104805761048061128e565b81816008818110610493576104936112a4565b90506020028101906104a59190611247565b9050610258146104b7576104b761128e565b505050565b600a84146105235760405162461bcd60e51b815260206004820152602e60248201527f44796e616d696354797065733a20696e76616c6964206c656e67746820666f7260448201526d20436f6d706c6578547970655b5d60901b6064820152608401610458565b600a82146105435760405162461bcd60e51b8152600401610458906111ff565b604051632631f2b160e11b8152600a82106004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050508484828181106105ba576105ba6112a4565b90506020028101906105cc91906112ba565b6105da906020810190611247565b9050612710146105ec576105ec61128e565b8282828181106105fe576105fe6112a4565b90506020028101906106109190611247565b9050610258146106225761062261128e565b5050505050565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561036f5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b95790505b5050505050815250508152602001906001019061064d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036f578382906000526020600020018054610752906111c5565b80601f016020809104026020016040519081016040528092919081815260200182805461077e906111c5565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081526020019060010190610733565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561036f5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108ad57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161086f5790505b50505050508152505081526020019060010190610803565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036f578382906000526020600020018054610908906111c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610934906111c5565b80156109815780601f1061095657610100808354040283529160200191610981565b820191906000526020600020905b81548152906001019060200180831161096457829003601f168201915b5050505050815260200190600101906108e9565b600754600090610100900460ff16156109b75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610abd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a45917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016112da565b60408051601f1981840301815290829052610a5f9161130b565b6000604051808303816000865af19150503d8060008114610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5091505080806020019051810190610ab9919061131d565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561022c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020e575050505050905090565b6000828281518110610b3657610b366112a4565b0160200151604051632631f2b160e11b8152600360f89290921c9182106004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506104b78160ff1660021480610bc257508160ff166001145b80610bce575060ff8216155b80610c42577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c329060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610c42610c45565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610d405760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610cdf92916020016112da565b60408051601f1981840301815290829052610cf99161130b565b6000604051808303816000865af19150503d8060008114610d36576040519150601f19603f3d011682016040523d82523d6000602084013e610d3b565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610d925783516001600160a01b031683529284019291840191600101610d6d565b50909695505050505050565b60005b83811015610db9578181015183820152602001610da1565b83811115610dc8576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e9c57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610e8557898403605f1901835284518051808652610e66818e88018f8501610d9e565b958c0195601f01601f1916949094018b019350918a0191600101610e3f565b509197505050938601935090850190600101610df5565b5092979650505050505050565b60008083601f840112610ebb57600080fd5b50813567ffffffffffffffff811115610ed357600080fd5b6020830191508360208260051b8501011115610eee57600080fd5b9250929050565b600080600060408486031215610f0a57600080fd5b833567ffffffffffffffff80821115610f2257600080fd5b9085019060408288031215610f3657600080fd5b90935060208501359080821115610f4c57600080fd5b50610f5986828701610ea9565b9497909650939450505050565b600080600080600060608688031215610f7e57600080fd5b853567ffffffffffffffff80821115610f9657600080fd5b610fa289838a01610ea9565b90975095506020880135915080821115610fbb57600080fd5b50610fc888828901610ea9565b96999598509660400135949350505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561107e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110695783516001600160e01b0319168252928b019260019290920191908b019061103f565b50978a01979550505091870191600101611002565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e9c57878503603f19018452815180518087526110db818989018a8501610d9e565b601f01601f1916959095018601945092850192908501906001016110b4565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561112357600080fd5b823567ffffffffffffffff8082111561113b57600080fd5b818501915085601f83011261114f57600080fd5b813581811115611161576111616110fa565b604051601f8201601f19908116603f01168101908382118183101715611189576111896110fa565b816040528281528860208487010111156111a257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600181811c908216806111d957607f821691505b6020821081036111f957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f44796e616d696354797065733a20696e76616c6964206c656e67746820666f726040820152672062797465735b5d60c01b606082015260800190565b6000808335601e1984360301811261125e57600080fd5b83018035915067ffffffffffffffff82111561127957600080fd5b602001915036819003821315610eee57600080fd5b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126112d057600080fd5b9190910192915050565b6001600160e01b03198316815281516000906112fd816004850160208701610d9e565b919091016004019392505050565b600082516112d0818460208701610d9e565b60006020828403121561132f57600080fd5b8151801515811461133f57600080fd5b939250505056fea2646970667358221220d26e7f32ffa14524e239fbda92f795061c48cc30f49c5eda10022a2707967bff64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModDynamicTypesTestField

    syntax S2KtestZModDynamicTypesTestField ::= "stdstore" [symbol(), klabel(field_test%DynamicTypesTest_stdstore)]

    syntax S2KtestZModDynamicTypesTestField ::= "IS_TEST" [symbol(), klabel(field_test%DynamicTypesTest_IS_TEST)]

    syntax S2KtestZModDynamicTypesTestField ::= "_failed" [symbol(), klabel(field_test%DynamicTypesTest__failed)]

    syntax S2KtestZModDynamicTypesTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%DynamicTypesTest_stdChainsInitialized)]

    syntax S2KtestZModDynamicTypesTestField ::= "chains" [symbol(), klabel(field_test%DynamicTypesTest_chains)]

    syntax S2KtestZModDynamicTypesTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%DynamicTypesTest_defaultRpcUrls)]

    syntax S2KtestZModDynamicTypesTestField ::= "idToAlias" [symbol(), klabel(field_test%DynamicTypesTest_idToAlias)]

    syntax S2KtestZModDynamicTypesTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%DynamicTypesTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModDynamicTypesTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%DynamicTypesTest_gasMeteringOff)]

    syntax S2KtestZModDynamicTypesTestField ::= "_excludedContracts" [symbol(), klabel(field_test%DynamicTypesTest__excludedContracts)]

    syntax S2KtestZModDynamicTypesTestField ::= "_excludedSenders" [symbol(), klabel(field_test%DynamicTypesTest__excludedSenders)]

    syntax S2KtestZModDynamicTypesTestField ::= "_targetedContracts" [symbol(), klabel(field_test%DynamicTypesTest__targetedContracts)]

    syntax S2KtestZModDynamicTypesTestField ::= "_targetedSenders" [symbol(), klabel(field_test%DynamicTypesTest__targetedSenders)]

    syntax S2KtestZModDynamicTypesTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%DynamicTypesTest__excludedArtifacts)]

    syntax S2KtestZModDynamicTypesTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%DynamicTypesTest__targetedArtifacts)]

    syntax S2KtestZModDynamicTypesTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%DynamicTypesTest__targetedArtifactSelectors)]

    syntax S2KtestZModDynamicTypesTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%DynamicTypesTest__targetedSelectors)]

    syntax S2KtestZModDynamicTypesTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%DynamicTypesTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModDynamicTypesTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModDynamicTypesTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModDynamicTypesTestContract "." S2KtestZModDynamicTypesTestMethod [function(), symbol(), klabel(method_test%DynamicTypesTest)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KISZUndTEST_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KexcludeContracts_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KexcludeSenders_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2Kfailed_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtargetArtifacts_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtargetContracts_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtargetInterfaces_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtargetSelectors_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtargetSenders_)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUndcomplexZUndtype" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtestZUndcomplexZUndtype_uint256_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUndcomplexZUndtypeZUndarray" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtestZUndcomplexZUndtypeZUndarray_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_uint256)]

    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUnddynamicZUndbyteZUndread" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%DynamicTypesTest_S2KtestZUnddynamicZUndbyteZUndread_bytes_uint256)]

    rule  ( S2KtestZModDynamicTypesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUndcomplexZUndtype ( V0_id : uint256 , V1_content : bytes , V2_ba_0 : bytes , V2_ba_1 : bytes , V2_ba_2 : bytes , V2_ba_3 : bytes , V2_ba_4 : bytes , V2_ba_5 : bytes , V2_ba_6 : bytes , V2_ba_7 : bytes , V2_ba_8 : bytes , V2_ba_9 : bytes ) => #abiCallData ( "test_complex_type" , #tuple ( #uint256 ( V0_id ) , #bytes ( V1_content ) , .TypedArgs ) , #array ( #bytes ( V2_ba_0 ) , 10 , #bytes ( V2_ba_0 ) , #bytes ( V2_ba_1 ) , #bytes ( V2_ba_2 ) , #bytes ( V2_ba_3 ) , #bytes ( V2_ba_4 ) , #bytes ( V2_ba_5 ) , #bytes ( V2_ba_6 ) , #bytes ( V2_ba_7 ) , #bytes ( V2_ba_8 ) , #bytes ( V2_ba_9 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_id )
       andBool ( lengthBytes ( V1_content ) ==Int 10000
       andBool ( lengthBytes ( V2_ba_0 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_1 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_2 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_3 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_4 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_5 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_6 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_7 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_8 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_9 ) ==Int 600
               ))))))))))))


    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUndcomplexZUndtypeZUndarray ( V0_id_0 : uint256 , V1_content_0 : bytes , V0_id_1 : uint256 , V1_content_1 : bytes , V0_id_2 : uint256 , V1_content_2 : bytes , V0_id_3 : uint256 , V1_content_3 : bytes , V0_id_4 : uint256 , V1_content_4 : bytes , V0_id_5 : uint256 , V1_content_5 : bytes , V0_id_6 : uint256 , V1_content_6 : bytes , V0_id_7 : uint256 , V1_content_7 : bytes , V0_id_8 : uint256 , V1_content_8 : bytes , V0_id_9 : uint256 , V1_content_9 : bytes , V2_ba_0 : bytes , V2_ba_1 : bytes , V2_ba_2 : bytes , V2_ba_3 : bytes , V2_ba_4 : bytes , V2_ba_5 : bytes , V2_ba_6 : bytes , V2_ba_7 : bytes , V2_ba_8 : bytes , V2_ba_9 : bytes , V3_offset : uint256 ) => #abiCallData ( "test_complex_type_array" , #array ( #tuple ( #uint256 ( V0_id_0 ) , #bytes ( V1_content_0 ) , .TypedArgs ) , 10 , #tuple ( #uint256 ( V0_id_0 ) , #bytes ( V1_content_0 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_1 ) , #bytes ( V1_content_1 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_2 ) , #bytes ( V1_content_2 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_3 ) , #bytes ( V1_content_3 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_4 ) , #bytes ( V1_content_4 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_5 ) , #bytes ( V1_content_5 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_6 ) , #bytes ( V1_content_6 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_7 ) , #bytes ( V1_content_7 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_8 ) , #bytes ( V1_content_8 ) , .TypedArgs ) , #tuple ( #uint256 ( V0_id_9 ) , #bytes ( V1_content_9 ) , .TypedArgs ) , .TypedArgs ) , #array ( #bytes ( V2_ba_0 ) , 10 , #bytes ( V2_ba_0 ) , #bytes ( V2_ba_1 ) , #bytes ( V2_ba_2 ) , #bytes ( V2_ba_3 ) , #bytes ( V2_ba_4 ) , #bytes ( V2_ba_5 ) , #bytes ( V2_ba_6 ) , #bytes ( V2_ba_7 ) , #bytes ( V2_ba_8 ) , #bytes ( V2_ba_9 ) , .TypedArgs ) , #uint256 ( V3_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_id_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_0 ) )
       andBool ( #rangeUInt ( 256 , V0_id_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_1 ) )
       andBool ( #rangeUInt ( 256 , V0_id_2 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_2 ) )
       andBool ( #rangeUInt ( 256 , V0_id_3 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_3 ) )
       andBool ( #rangeUInt ( 256 , V0_id_4 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_4 ) )
       andBool ( #rangeUInt ( 256 , V0_id_5 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_5 ) )
       andBool ( #rangeUInt ( 256 , V0_id_6 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_6 ) )
       andBool ( #rangeUInt ( 256 , V0_id_7 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_7 ) )
       andBool ( #rangeUInt ( 256 , V0_id_8 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_8 ) )
       andBool ( #rangeUInt ( 256 , V0_id_9 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_9 ) )
       andBool ( lengthBytes ( V2_ba_0 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_1 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_2 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_3 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_4 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_5 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_6 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_7 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_8 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_9 ) ==Int 600
       andBool ( #rangeUInt ( 256 , V3_offset )
               )))))))))))))))))))))))))))))))


    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUnddynamicZUndbyteZUndread ( V0_data : bytes , V1_offset : uint256 ) => #abiCallData ( "test_dynamic_byte_read" , #bytes ( V0_data ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V0_data ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_complex_type((uint256,bytes),bytes[])" ) => 1163356543 )


    rule  ( selector ( "test_complex_type_array((uint256,bytes)[],bytes[],uint256)" ) => 1559836154 )


    rule  ( selector ( "test_dynamic_byte_read(bytes,uint256)" ) => 4003228173 )


endmodule

module S2KsrcZModExpectEmit-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModExpectEmitContract

    syntax S2KsrcZModExpectEmitContract ::= "S2KsrcZModExpectEmit" [symbol(), klabel(contract_src%ExpectEmit)]

    rule  ( #binRuntime ( S2KsrcZModExpectEmit ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModExpectEmit ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KsrcZModExpectEmitContract "." S2KsrcZModExpectEmitMethod [function(), symbol(), klabel(method_src%ExpectEmit)]

    syntax S2KsrcZModExpectEmitMethod ::= "S2Kt" "(" ")" [symbol(), klabel(method_src%ExpectEmit_S2Kt_)]

    rule  ( S2KsrcZModExpectEmit . S2Kt ( ) => #abiCallData ( "t" , .TypedArgs ) )


    rule  ( selector ( "t()" ) => 2463158611 )


endmodule

module S2KtestZModEmitContractTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModEmitContractTestContract

    syntax S2KtestZModEmitContractTestContract ::= "S2KtestZModEmitContractTest" [symbol(), klabel(contract_test%EmitContractTest)]

    rule  ( #binRuntime ( S2KtestZModEmitContractTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModEmitContractTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610fe18061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063e20c9f7111610066578063e20c9f711461018e578063e3d9593914610196578063fa7626d41461019e578063fd047e0d146101ab57600080fd5b8063916a17c614610166578063b5508aa91461016e578063ba414fa61461017657600080fd5b80633f7286f4116100c85780633f7286f41461012a57806366d9a9a01461013257806385226c81146101475780638e30cd391461015c57600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101b3565b6040516101049190610bbf565b60405180910390f35b610115610215565b6040516101049190610c3c565b6100f7610357565b6100f76103b7565b61013a610417565b6040516101049190610d17565b61014f6104fd565b6040516101049190610dca565b6101646105cd565b005b61013a610706565b61014f6107ec565b61017e6108bc565b6040519015158152602001610104565b6100f76109e9565b610164610a49565b60075461017e9060ff1681565b610164610ad3565b6060601480548060200260200160405190810160405280929190818152602001828054801561020b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ed575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561034e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103375783829060005260206000200180546102aa90610e37565b80601f01602080910402602001604051908101604052809291908181526020018280546102d690610e37565b80156103235780601f106102f857610100808354040283529160200191610323565b820191906000526020600020905b81548152906001019060200180831161030657829003601f168201915b50505050508152602001906001019061028b565b505050508152505081526020019060010190610239565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561034e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104e557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104a75790505b5050505050815250508152602001906001019061043b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561034e57838290600052602060002001805461054090610e37565b80601f016020809104026020016040519081016040528092919081815260200182805461056c90610e37565b80156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b505050505081526020019060010190610521565b60006040516105db90610bb3565b604051809103906000f0801580156105f7573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201819052600060448301526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c2906084015b600060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505060405161053980825292503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3806001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b5050505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561034e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156107d457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107965790505b5050505050815250508152602001906001019061072a565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561034e57838290600052602060002001805461082f90610e37565b80601f016020809104026020016040519081016040528092919081815260200182805461085b90610e37565b80156108a85780601f1061087d576101008083540402835291602001916108a8565b820191906000526020600020905b81548152906001019060200180831161088b57829003601f168201915b505050505081526020019060010190610810565b600754600090610100900460ff16156108de5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109e45760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161096c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e71565b60408051601f198184030181529082905261098691610ea2565b6000604051808303816000865af19150503d80600081146109c3576040519150601f19603f3d011682016040523d82523d6000602084013e6109c8565b606091505b50915050808060200190518101906109e09190610ebe565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b6000604051610a5790610bb3565b604051809103906000f080158015610a73573d6000803e3d6000fd5b506040516381bad6f360e01b8152600160048201819052602482018190526000604483015260648201526001600160a01b0382166084820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906381bad6f39060a401610644565b6000604051610ae190610bb3565b604051809103906000f080158015610afd573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201526000604482018190526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c290608401600060405180830381600087803b158015610b6357600080fd5b505af1158015610b77573d6000803e3d6000fd5b505060405161053a815261053992503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016106a8565b60c480610ee883390190565b6020808252825182820181905260009190848201906040850190845b81811015610c005783516001600160a01b031683529284019291840191600101610bdb565b50909695505050505050565b60005b83811015610c27578181015183820152602001610c0f565b83811115610c36576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d0a57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610cf357898403605f1901835284518051808652610cd4818e88018f8501610c0c565b958c0195601f01601f1916949094018b019350918a0191600101610cad565b509197505050938601935090850190600101610c63565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610dbb57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610da65783516001600160e01b0319168252928b019260019290920191908b0190610d7c565b50978a01979550505091870191600101610d3f565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d0a57878503603f1901845281518051808752610e18818989018a8501610c0c565b601f01601f191695909501860194509285019290850190600101610df1565b600181811c90821680610e4b57607f821691505b602082108103610e6b57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610e94816004850160208701610c0c565b919091016004019392505050565b60008251610eb4818460208701610c0c565b9190910192915050565b600060208284031215610ed057600080fd5b81518015158114610ee057600080fd5b939250505056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a2646970667358221220cdfb31e21167539a012a29f3a5f452bfb83a345e23feeba2a2c963d31f21480f64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModEmitContractTestField

    syntax S2KtestZModEmitContractTestField ::= "stdstore" [symbol(), klabel(field_test%EmitContractTest_stdstore)]

    syntax S2KtestZModEmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_test%EmitContractTest_IS_TEST)]

    syntax S2KtestZModEmitContractTestField ::= "_failed" [symbol(), klabel(field_test%EmitContractTest__failed)]

    syntax S2KtestZModEmitContractTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%EmitContractTest_stdChainsInitialized)]

    syntax S2KtestZModEmitContractTestField ::= "chains" [symbol(), klabel(field_test%EmitContractTest_chains)]

    syntax S2KtestZModEmitContractTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%EmitContractTest_defaultRpcUrls)]

    syntax S2KtestZModEmitContractTestField ::= "idToAlias" [symbol(), klabel(field_test%EmitContractTest_idToAlias)]

    syntax S2KtestZModEmitContractTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%EmitContractTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModEmitContractTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%EmitContractTest_gasMeteringOff)]

    syntax S2KtestZModEmitContractTestField ::= "_excludedContracts" [symbol(), klabel(field_test%EmitContractTest__excludedContracts)]

    syntax S2KtestZModEmitContractTestField ::= "_excludedSenders" [symbol(), klabel(field_test%EmitContractTest__excludedSenders)]

    syntax S2KtestZModEmitContractTestField ::= "_targetedContracts" [symbol(), klabel(field_test%EmitContractTest__targetedContracts)]

    syntax S2KtestZModEmitContractTestField ::= "_targetedSenders" [symbol(), klabel(field_test%EmitContractTest__targetedSenders)]

    syntax S2KtestZModEmitContractTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%EmitContractTest__excludedArtifacts)]

    syntax S2KtestZModEmitContractTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%EmitContractTest__targetedArtifacts)]

    syntax S2KtestZModEmitContractTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%EmitContractTest__targetedArtifactSelectors)]

    syntax S2KtestZModEmitContractTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%EmitContractTest__targetedSelectors)]

    syntax S2KtestZModEmitContractTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%EmitContractTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModEmitContractTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModEmitContractTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModEmitContractTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModEmitContractTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModEmitContractTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModEmitContractTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModEmitContractTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModEmitContractTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModEmitContractTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModEmitContractTestContract "." S2KtestZModEmitContractTestMethod [function(), symbol(), klabel(method_test%EmitContractTest)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KISZUndTEST_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KexcludeContracts_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KexcludeSenders_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2Kfailed_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtargetArtifacts_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtargetContracts_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtargetInterfaces_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtargetSelectors_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtargetSenders_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmit" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtestExpectEmit_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmitCheckEmitter" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtestExpectEmitCheckEmitter_)]

    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmitDoNotCheckData" "(" ")" [symbol(), klabel(method_test%EmitContractTest_S2KtestExpectEmitDoNotCheckData_)]

    rule  ( S2KtestZModEmitContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )


    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testExpectEmit()" ) => 2385562937 )


    rule  ( selector ( "testExpectEmitCheckEmitter()" ) => 3822672185 )


    rule  ( selector ( "testExpectEmitDoNotCheckData()" ) => 4244930061 )


endmodule

module S2KtestZModEnvTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModEnvTestContract

    syntax S2KtestZModEnvTestContract ::= "S2KtestZModEnvTest" [symbol(), klabel(contract_test%EnvTest)]

    rule  ( #binRuntime ( S2KtestZModEnvTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80636c627094116100de578063aaa3bd3b11610097578063c45db9c511610071578063c45db9c51461026f578063d5d0918714610277578063e20c9f711461027f578063fa7626d41461028757600080fd5b8063aaa3bd3b14610247578063b5508aa91461024f578063ba414fa61461025757600080fd5b80636c6270941461020a5780637b290a42146102125780637cebe4291461021a57806385226c8114610222578063916a17c6146102375780639a96435d1461023f57600080fd5b80633e5e3c23116101305780633e5e3c23146101cd5780633f7286f4146101d5578063416c9f6a146101dd57806355151e53146101e557806355c7785a146101ed57806366d9a9a0146101f557600080fd5b80631a9ca1b6146101785780631ed7831c1461018257806320e3be7f146101a05780632ade3880146101a8578063354e99c8146101bd5780633b4996ff146101c5575b600080fd5b610180610294565b005b61018a6103cf565b60405161019791906121e1565b60405180910390f35b610180610431565b6101b06105e8565b6040516101979190612286565b61018061072a565b61018061085b565b61018a610976565b61018a6109d6565b610180610a36565b610180610b8f565b610180610cb7565b6101fd610e12565b6040516101979190612346565b610180610ef8565b610180610fd5565b6101806110b7565b61022a61125f565b60405161019791906123f9565b6101fd61132f565b610180611415565b6101806116b6565b61022a6117fd565b61025f6118cd565b6040519015158152602001610197565b6101806119ee565b610180611b7e565b61018a611dc2565b60075461025f9060ff1681565b600060405180604001604052806009815260200168494e545f56414c554560b81b815250905060006040518060800160405280604e8152602001612d25604e9139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee9061030b908590859060040161245b565b600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b505060405163892a0c6160e01b8152600160ff1b925060009150600080516020612bd08339815191529063892a0c6190610377908790600401612489565b602060405180830381865afa158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b891906124a3565b90508181146103c9576103c96124bc565b50505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561042757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610409575b5050505050905090565b60006040518060400160405280600b81526020016a55494e545f56414c55455360a81b81525090506000604051806080016040528060448152602001612d7360449139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee906104aa908590859060040161245b565b600060405180830381600087803b1580156104c457600080fd5b505af11580156104d8573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000808252918101829052925163f3dec09960e01b8152919450919250600080516020612bd08339815191529063f3dec0999061053f908890879060040161245b565b600060405180830381865afa15801561055c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610584919081019061253d565b90508160405160200161059791906125d3565b60405160208183030381529060405280519060200120816040516020016105be9190612607565b60405160208183030381529060405280519060200120146105e1576105e16124bc565b5050505050565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561072157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561070a57838290600052602060002001805461067d9061263d565b80601f01602080910402602001604051908101604052809291908181526020018280546106a99061263d565b80156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b50505050508152602001906001019061065e565b50505050815250508152602001906001019061060c565b50505050905090565b604080518082018252600a815269424f4f4c5f56414c554560b01b602080830191909152825180840184526004808252637472756560e01b928201929092529251631eac91f760e11b8152919291600080516020612bd083398151915291633d5923ee9161079c91869186910161245b565b600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b5050604051637ed1ec7d60e01b81526001925060009150600080516020612bd083398151915290637ed1ec7d90610805908790600401612489565b602060405180830381865afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108469190612687565b9050811515811515146103c9576103c96124bc565b60006040518060400160405280600a815260200169494e545f56414c55455360b01b815250905060006040518060c0016040528060878152602001612c9e60879139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee906108d3908590859060040161245b565b600060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452600160ff1b81526001600160ff1b03918101919091529151630421811560e41b8152909350909150600090600080516020612bd08339815191529063421811509061053f908890879060040161245b565b60606016805480602002602001604051908101604052809291908181526020018280548015610427576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610409575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610427576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610409575050505050905090565b604080518082018252600c81526b535452494e475f56414c554560a01b60208083019190915282518084018452600d81526c68656c6c6f2c20776f726c642160981b918101919091529151631eac91f760e11b8152909190600080516020612bd083398151915290633d5923ee90610ab4908590859060040161245b565b600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b5050604080518082018252600d81526c68656c6c6f2c20776f726c642160981b6020820152905163f877cb1960e01b815290925060009150600080516020612bd08339815191529063f877cb1990610b3e908790600401612489565b600060405180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b83919081019061270e565b90506103c98183611e22565b60006040518060400160405280600e81526020016d425954455333325f56414c55455360901b815250905060006040518060600160405280602f8152602001612bf0602f9139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee90610c0b908590859060040161245b565b600060405180830381600087803b158015610c2557600080fd5b505af1158015610c39573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b815260009181018290529251635af231c160e01b8152919450919250600080516020612bd083398151915290635af231c19061053f908890879060040161245b565b60006040518060400160405280600b81526020016a42595445535f56414c554560a81b815250905060006040518060600160405280602a8152602001612c74602a9139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee90610d30908590859060040161245b565b600060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505060408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516326bdd78360e11b815290925060009150600080516020612bd083398151915290634d7baf0690610dc1908790600401612489565b600060405180830381865afa158015610dde573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e06919081019061270e565b90506103c98183611f63565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156107215760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610ee057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ea25790505b50505050508152505081526020019060010190610e36565b604080518082018252600d81526c425954455333325f56414c554560981b602080830191909152825180840184526004808252630307830360e41b928201929092529251631eac91f760e11b8152919291600080516020612bd083398151915291633d5923ee91610f6d91869186910161245b565b600060405180830381600087803b158015610f8757600080fd5b505af1158015610f9b573d6000803e3d6000fd5b5050604051634bca482160e11b815260009250829150600080516020612bd083398151915290639794904290610377908790600401612489565b60006040518060400160405280600a81526020016955494e545f56414c554560b01b815250905060006040518060800160405280604e8152602001612db7604e9139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee9061104d908590859060040161245b565b600060405180830381600087803b15801561106757600080fd5b505af115801561107b573d6000803e3d6000fd5b505060405163c1978d1f60e01b8152600019925060009150600080516020612bd08339815191529063c1978d1f90610377908790600401612489565b604080518082018252600b81526a424f4f4c5f56414c55455360a81b602080830191909152825180840184526015815274747275652c66616c73652c747275652c66616c736560581b918101919091529151631eac91f760e11b8152909190600080516020612bd083398151915290633d5923ee9061113c908590859060040161245b565b600060405180830381600087803b15801561115657600080fd5b505af115801561116a573d6000803e3d6000fd5b50506040805180820182526001808252600b60fa1b602080840191909152835160808101855282815260009181018290528085019290925260608201819052925163aaaddeaf60e01b81529194509250600080516020612bd08339815191529063aaaddeaf906111e0908890879060040161245b565b600060405180830381865afa1580156111fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112259190810190612743565b90508160405160200161123891906127d0565b60405160208183030381529060405280519060200120816040516020016105be9190612806565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156107215783829060005260206000200180546112a29061263d565b80601f01602080910402602001604051908101604052809291908181526020018280546112ce9061263d565b801561131b5780601f106112f05761010080835404028352916020019161131b565b820191906000526020600020905b8154815290600101906020018083116112fe57829003601f168201915b505050505081526020019060010190611283565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156107215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156113fd57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116113bf5790505b50505050508152505081526020019060010190611353565b60006040518060400160405280600c81526020016b42595445535f56414c55455360a01b815250905060006040518060600160405280602f8152602001612bf0602f9139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee9061148f908590859060040161245b565b600060405180830381600087803b1580156114a957600080fd5b505af11580156114bd573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602082015281516002808252606082019093529093506000925090816020015b60608152602001906001900390816114f1579050509050604051806040016040528060148152602001737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b8152508160008151811061154857611548612832565b602002602001018190525060405180604001604052806001815260200160008152508160018151811061157d5761157d612832565b602090810291909101015260405163ddc2651b60e01b8152600090600080516020612bd08339815191529063ddc2651b906115be908890879060040161245b565b600060405180830381865afa1580156115db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116039190810190612848565b905060005b82518110156116ae5782818151811061162357611623612832565b602002602001015160405160200161163b91906128f9565b6040516020818303038152906040528051906020012082828151811061166357611663612832565b602002602001015160405160200161167b91906128f9565b604051602081830303815290604052805190602001201461169e5761169e6124bc565b6116a781612915565b9050611608565b505050505050565b60006040518060400160405280600d81526020016c414444524553535f56414c554560981b815250905060006040518060600160405280602a8152602001612c74602a9139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee90611731908590859060040161245b565b600060405180830381600087803b15801561174b57600080fd5b505af115801561175f573d6000803e3d6000fd5b505060405163350d56bf60e01b8152600080516020612bd0833981519152925060009150829063350d56bf90611799908790600401612489565b602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da9190612953565b9050816001600160a01b0316816001600160a01b0316146103c9576103c96124bc565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156107215783829060005260206000200180546118409061263d565b80601f016020809104026020016040519081016040528092919081815260200182805461186c9061263d565b80156118b95780601f1061188e576101008083540402835291602001916118b9565b820191906000526020600020905b81548152906001019060200180831161189c57829003601f168201915b505050505081526020019060010190611821565b600754600090610100900460ff16156118ef5750600754610100900460ff1690565b6000600080516020612bd08339815191523b156119e95760408051600080516020612bd0833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611971917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161296e565b60408051601f198184030181529082905261198b916128f9565b6000604051808303816000865af19150503d80600081146119c8576040519150601f19603f3d011682016040523d82523d6000602084013e6119cd565b606091505b50915050808060200190518101906119e59190612687565b9150505b919050565b60006040518060400160405280600e81526020016d414444524553535f56414c55455360901b81525090506000604051806080016040528060558152602001612c1f60559139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee90611a6a908590859060040161245b565b600060405180830381600087803b158015611a8457600080fd5b505af1158015611a98573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452600080516020612bd083398151915280825260009282018390529351635698dcfd60e11b81529295509350919063ad31b9fa90611aff908890879060040161245b565b600060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b44919081019061299f565b905081604051602001611b579190612a2c565b60405160208183030381529060405280519060200120816040516020016105be9190612a5a565b60006040518060400160405280600d81526020016c535452494e475f56414c55455360981b81525090506000604051806060016040528060388152602001612b9860389139604051631eac91f760e11b8152909150600080516020612bd083398151915290633d5923ee90611bf9908590859060040161245b565b600060405180830381600087803b158015611c1357600080fd5b505af1158015611c27573d6000803e3d6000fd5b505050506000604051806040016040528060018152602001601f60fa1b8152509050600060405180604001604052806040518060400160405280600d81526020016c68656c6c6f2c20776f726c642160981b81525081526020016040518060600160405280602a8152602001612c74602a913990526040516314b02bc960e01b8152909150600090600080516020612bd0833981519152906314b02bc990611cd5908890879060040161245b565b600060405180830381865afa158015611cf2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d1a9190810190612a8d565b905060005b60028110156116ae57828160028110611d3a57611d3a612832565b6020020151604051602001611d4f91906128f9565b60405160208183030381529060405280519060200120828281518110611d7757611d77612832565b6020026020010151604051602001611d8f91906128f9565b6040516020818303038152906040528051906020012014611db257611db26124bc565b611dbb81612915565b9050611d1f565b60606013805480602002602001604051908101604052809291908181526020018280548015610427576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610409575050505050905090565b80604051602001611e3391906128f9565b6040516020818303038152906040528051906020012082604051602001611e5a91906128f9565b6040516020818303038152906040528051906020012014611f5f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611ee19060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382604051611f189190612b31565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051611f4f9190612b6d565b60405180910390a1611f5f611f6d565b5050565b611f5f828261206d565b600080516020612bd08339815191523b1561205c5760408051600080516020612bd0833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052611ffb929160200161296e565b60408051601f1981840301815290829052612015916128f9565b6000604051808303816000865af19150503d8060008114612052576040519150601f19603f3d011682016040523d82523d6000602084013e612057565b606091505b505050505b6007805461ff001916610100179055565b6120778282612154565b611f5f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516120e69060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161211d9190612b31565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051611f4f9190612b6d565b8051825160019190036121d75760005b83518110156121d15782818151811061217f5761217f612832565b602001015160f81c60f81b6001600160f81b0319168482815181106121a6576121a6612832565b01602001516001600160f81b031916146121bf57600091505b806121c981612915565b915050612164565b506121db565b5060005b92915050565b6020808252825182820181905260009190848201906040850190845b818110156122225783516001600160a01b0316835292840192918401916001016121fd565b50909695505050505050565b60005b83811015612249578181015183820152602001612231565b838111156103c95750506000910152565b6000815180845261227281602086016020860161222e565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561233657603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561232057605f1989850301835261230e84865161225a565b948e01949350918d01916001016122f2565b505050978a0197945050918801916001016122ad565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156123ea57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156123d55783516001600160e01b0319168252928b019260019290920191908b01906123ab565b50978a0197955050509187019160010161236e565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244e57603f1988860301845261243c85835161225a565b94509285019290850190600101612420565b5092979650505050505050565b60408152600061246e604083018561225a565b8281036020840152612480818561225a565b95945050505050565b60208152600061249c602083018461225a565b9392505050565b6000602082840312156124b557600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612511576125116124d2565b604052919050565b600067ffffffffffffffff821115612533576125336124d2565b5060051b60200190565b6000602080838503121561255057600080fd5b825167ffffffffffffffff81111561256757600080fd5b8301601f8101851361257857600080fd5b805161258b61258682612519565b6124e8565b81815260059190911b820183019083810190878311156125aa57600080fd5b928401925b828410156125c8578351825292840192908401906125af565b979650505050505050565b60008183825b60028110156125f85781518352602092830192909101906001016125d9565b50505060408201905092915050565b815160009082906020808601845b8381101561263157815185529382019390820190600101612615565b50929695505050505050565b600181811c9082168061265157607f821691505b60208210810361267157634e487b7160e01b600052602260045260246000fd5b50919050565b805180151581146119e957600080fd5b60006020828403121561269957600080fd5b61249c82612677565b600082601f8301126126b357600080fd5b815167ffffffffffffffff8111156126cd576126cd6124d2565b6126e0601f8201601f19166020016124e8565b8181528460208386010111156126f557600080fd5b61270682602083016020870161222e565b949350505050565b60006020828403121561272057600080fd5b815167ffffffffffffffff81111561273757600080fd5b612706848285016126a2565b6000602080838503121561275657600080fd5b825167ffffffffffffffff81111561276d57600080fd5b8301601f8101851361277e57600080fd5b805161278c61258682612519565b81815260059190911b820183019083810190878311156127ab57600080fd5b928401925b828410156125c8576127c184612677565b825292840192908401906127b0565b60008183825b60048110156127f757815115158352602092830192909101906001016127d6565b50505060808201905092915050565b815160009082906020808601845b83811015612631578151151585529382019390820190600101612814565b634e487b7160e01b600052603260045260246000fd5b6000602080838503121561285b57600080fd5b825167ffffffffffffffff8082111561287357600080fd5b818501915085601f83011261288757600080fd5b815161289561258682612519565b81815260059190911b830184019084810190888311156128b457600080fd5b8585015b838110156128ec578051858111156128d05760008081fd5b6128de8b89838a01016126a2565b8452509186019186016128b8565b5098975050505050505050565b6000825161290b81846020870161222e565b9190910192915050565b60006001820161293557634e487b7160e01b600052601160045260246000fd5b5060010190565b80516001600160a01b03811681146119e957600080fd5b60006020828403121561296557600080fd5b61249c8261293c565b6001600160e01b031983168152815160009061299181600485016020870161222e565b919091016004019392505050565b600060208083850312156129b257600080fd5b825167ffffffffffffffff8111156129c957600080fd5b8301601f810185136129da57600080fd5b80516129e861258682612519565b81815260059190911b82018301908381019087831115612a0757600080fd5b928401925b828410156125c857612a1d8461293c565b82529284019290840190612a0c565b60008183825b60028110156125f85781516001600160a01b0316835260209283019290910190600101612a32565b815160009082906020808601845b838110156126315781516001600160a01b031685529382019390820190600101612a68565b60006020808385031215612aa057600080fd5b825167ffffffffffffffff80821115612ab857600080fd5b818501915085601f830112612acc57600080fd5b8151612ada61258682612519565b81815260059190911b83018401908481019088831115612af957600080fd5b8585015b838110156128ec57805185811115612b155760008081fd5b612b238b89838a01016126a2565b845250918601918601612afd565b604081526000612b5b60408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152612706818561225a565b604081526000612b5b60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe68656c6c6f2c20776f726c64217c3078373130393730394543666139316138303632366646333938394436386636374635623144443132440000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d3078373130393730394543666139316138303632366646333938394436386636374635623144443132442c307830303078373130393730394543666139316138303632366646333938394436386636374635623144443132442c3078303030303030303030303030303030303030303030303030303030303030303030303030303030303078373130393730394543666139316138303632366646333938394436386636374635623144443132442d3078383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302c2b3078374646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646462d3537383936303434363138363538303937373131373835343932353034333433393533393236363334393932333332383230323832303139373238373932303033393536353634383139393638302c307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030313135373932303839323337333136313935343233353730393835303038363837393037383533323639393834363635363430353634303339343537353834303037393133313239363339393335a2646970667358221220b614a81e2701733373000258d95e8ce68b6ce6139a777340d2cda929cc66201f64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModEnvTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModEnvTestField

    syntax S2KtestZModEnvTestField ::= "stdstore" [symbol(), klabel(field_test%EnvTest_stdstore)]

    syntax S2KtestZModEnvTestField ::= "IS_TEST" [symbol(), klabel(field_test%EnvTest_IS_TEST)]

    syntax S2KtestZModEnvTestField ::= "_failed" [symbol(), klabel(field_test%EnvTest__failed)]

    syntax S2KtestZModEnvTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%EnvTest_stdChainsInitialized)]

    syntax S2KtestZModEnvTestField ::= "chains" [symbol(), klabel(field_test%EnvTest_chains)]

    syntax S2KtestZModEnvTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%EnvTest_defaultRpcUrls)]

    syntax S2KtestZModEnvTestField ::= "idToAlias" [symbol(), klabel(field_test%EnvTest_idToAlias)]

    syntax S2KtestZModEnvTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%EnvTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModEnvTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%EnvTest_gasMeteringOff)]

    syntax S2KtestZModEnvTestField ::= "_excludedContracts" [symbol(), klabel(field_test%EnvTest__excludedContracts)]

    syntax S2KtestZModEnvTestField ::= "_excludedSenders" [symbol(), klabel(field_test%EnvTest__excludedSenders)]

    syntax S2KtestZModEnvTestField ::= "_targetedContracts" [symbol(), klabel(field_test%EnvTest__targetedContracts)]

    syntax S2KtestZModEnvTestField ::= "_targetedSenders" [symbol(), klabel(field_test%EnvTest__targetedSenders)]

    syntax S2KtestZModEnvTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%EnvTest__excludedArtifacts)]

    syntax S2KtestZModEnvTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%EnvTest__targetedArtifacts)]

    syntax S2KtestZModEnvTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%EnvTest__targetedArtifactSelectors)]

    syntax S2KtestZModEnvTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%EnvTest__targetedSelectors)]

    syntax S2KtestZModEnvTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%EnvTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModEnvTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModEnvTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModEnvTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModEnvTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModEnvTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModEnvTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModEnvTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModEnvTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModEnvTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModEnvTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModEnvTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModEnvTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModEnvTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModEnvTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModEnvTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModEnvTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModEnvTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModEnvTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModEnvTestContract "." S2KtestZModEnvTestMethod [function(), symbol(), klabel(method_test%EnvTest)]

    syntax S2KtestZModEnvTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KISZUndTEST_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KexcludeContracts_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KexcludeSenders_)]

    syntax S2KtestZModEnvTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%EnvTest_S2Kfailed_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtargetArtifacts_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtargetContracts_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtargetInterfaces_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtargetSelectors_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtargetSenders_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvAddress" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvAddress_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvAddresseArray" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvAddresseArray_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBool" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvBool_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBoolArray" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvBoolArray_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytes" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvBytes_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytes32" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvBytes32_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytes32Array" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvBytes32Array_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytesArray" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvBytesArray_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvInt" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvInt_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvIntArray" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvIntArray_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvString" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvString_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvStringArray" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvStringArray_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvUInt" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvUInt_)]

    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvUIntArray" "(" ")" [symbol(), klabel(method_test%EnvTest_S2KtestEnvUIntArray_)]

    rule  ( S2KtestZModEnvTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )


    rule  ( S2KtestZModEnvTest . S2KtestEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testEnvAddress()" ) => 2862857531 )


    rule  ( selector ( "testEnvAddresseArray()" ) => 3294476741 )


    rule  ( selector ( "testEnvBool()" ) => 894343624 )


    rule  ( selector ( "testEnvBoolArray()" ) => 2095834153 )


    rule  ( selector ( "testEnvBytes()" ) => 1439135834 )


    rule  ( selector ( "testEnvBytes32()" ) => 1818390676 )


    rule  ( selector ( "testEnvBytes32Array()" ) => 1427447379 )


    rule  ( selector ( "testEnvBytesArray()" ) => 2593538909 )


    rule  ( selector ( "testEnvInt()" ) => 446472630 )


    rule  ( selector ( "testEnvIntArray()" ) => 994678527 )


    rule  ( selector ( "testEnvString()" ) => 1097637738 )


    rule  ( selector ( "testEnvStringArray()" ) => 3587215751 )


    rule  ( selector ( "testEnvUInt()" ) => 2066287170 )


    rule  ( selector ( "testEnvUIntArray()" ) => 551796351 )


endmodule

module S2KtestZModDummy-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModDummyContract

    syntax S2KtestZModDummyContract ::= "S2KtestZModDummy" [symbol(), klabel(contract_test%Dummy)]

    rule  ( #binRuntime ( S2KtestZModDummy ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063994b9d5714602d575b600080fd5b60c860405190815260200160405180910390f3fea26469706673582212209d95aa85f40403bdf4b08d05dbb643f8b2db78761c3a29d7e6f1b3bd3a80320c64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModDummy ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063994b9d5714602d575b600080fd5b60c860405190815260200160405180910390f3fea26469706673582212209d95aa85f40403bdf4b08d05dbb643f8b2db78761c3a29d7e6f1b3bd3a80320c64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModDummyContract "." S2KtestZModDummyMethod [function(), symbol(), klabel(method_test%Dummy)]

    syntax S2KtestZModDummyMethod ::= "S2KnumberA" "(" ")" [symbol(), klabel(method_test%Dummy_S2KnumberA_)]

    rule  ( S2KtestZModDummy . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )


    rule  ( selector ( "numberA()" ) => 2571869527 )


endmodule

module S2KtestZModExpectCallTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModExpectCallTestContract

    syntax S2KtestZModExpectCallTestContract ::= "S2KtestZModExpectCallTest" [symbol(), klabel(contract_test%ExpectCallTest)]

    rule  ( #binRuntime ( S2KtestZModExpectCallTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModExpectCallTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModExpectCallTestField

    syntax S2KtestZModExpectCallTestField ::= "stdstore" [symbol(), klabel(field_test%ExpectCallTest_stdstore)]

    syntax S2KtestZModExpectCallTestField ::= "IS_TEST" [symbol(), klabel(field_test%ExpectCallTest_IS_TEST)]

    syntax S2KtestZModExpectCallTestField ::= "_failed" [symbol(), klabel(field_test%ExpectCallTest__failed)]

    syntax S2KtestZModExpectCallTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ExpectCallTest_stdChainsInitialized)]

    syntax S2KtestZModExpectCallTestField ::= "chains" [symbol(), klabel(field_test%ExpectCallTest_chains)]

    syntax S2KtestZModExpectCallTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ExpectCallTest_defaultRpcUrls)]

    syntax S2KtestZModExpectCallTestField ::= "idToAlias" [symbol(), klabel(field_test%ExpectCallTest_idToAlias)]

    syntax S2KtestZModExpectCallTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ExpectCallTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModExpectCallTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ExpectCallTest_gasMeteringOff)]

    syntax S2KtestZModExpectCallTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ExpectCallTest__excludedContracts)]

    syntax S2KtestZModExpectCallTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ExpectCallTest__excludedSenders)]

    syntax S2KtestZModExpectCallTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ExpectCallTest__targetedContracts)]

    syntax S2KtestZModExpectCallTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ExpectCallTest__targetedSenders)]

    syntax S2KtestZModExpectCallTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ExpectCallTest__excludedArtifacts)]

    syntax S2KtestZModExpectCallTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ExpectCallTest__targetedArtifacts)]

    syntax S2KtestZModExpectCallTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ExpectCallTest__targetedArtifactSelectors)]

    syntax S2KtestZModExpectCallTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ExpectCallTest__targetedSelectors)]

    syntax S2KtestZModExpectCallTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ExpectCallTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModExpectCallTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModExpectCallTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModExpectCallTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModExpectCallTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModExpectCallTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModExpectCallTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModExpectCallTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModExpectCallTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModExpectCallTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModExpectCallTestContract "." S2KtestZModExpectCallTestMethod [function(), symbol(), klabel(method_test%ExpectCallTest)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KISZUndTEST_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KexcludeContracts_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KexcludeSenders_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2Kfailed_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2Kkevm_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtargetArtifacts_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtargetContracts_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtargetInterfaces_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtargetSelectors_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtargetSenders_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtestExpectRegularCall" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtestExpectRegularCall_)]

    syntax S2KtestZModExpectCallTestMethod ::= "S2KtestExpectStaticCall" "(" ")" [symbol(), klabel(method_test%ExpectCallTest_S2KtestExpectStaticCall_)]

    rule  ( S2KtestZModExpectCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtestExpectRegularCall ( ) => #abiCallData ( "testExpectRegularCall" , .TypedArgs ) )


    rule  ( S2KtestZModExpectCallTest . S2KtestExpectStaticCall ( ) => #abiCallData ( "testExpectStaticCall" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testExpectRegularCall()" ) => 676731872 )


    rule  ( selector ( "testExpectStaticCall()" ) => 3219733999 )


endmodule

module S2KtestZModDepthReverter-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModDepthReverterContract

    syntax S2KtestZModDepthReverterContract ::= "S2KtestZModDepthReverter" [symbol(), klabel(contract_test%DepthReverter)]

    rule  ( #binRuntime ( S2KtestZModDepthReverter ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea264697066735822122017f3bd3377fe364669a2afdd12b24e1d05a4583a091f2906ade2ef2a2256dc7b64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModDepthReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61028e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea264697066735822122017f3bd3377fe364669a2afdd12b24e1d05a4583a091f2906ade2ef2a2256dc7b64736f6c634300080d0033608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModDepthReverterField

    syntax S2KtestZModDepthReverterField ::= "reverter" [symbol(), klabel(field_test%DepthReverter_reverter)]

    rule  ( #loc ( S2KtestZModDepthReverter . reverter ) => 0 )


    syntax Bytes ::= S2KtestZModDepthReverterContract "." S2KtestZModDepthReverterMethod [function(), symbol(), klabel(method_test%DepthReverter)]

    syntax S2KtestZModDepthReverterMethod ::= "S2KrevertAtNextDepth" "(" ")" [symbol(), klabel(method_test%DepthReverter_S2KrevertAtNextDepth_)]

    rule  ( S2KtestZModDepthReverter . S2KrevertAtNextDepth ( ) => #abiCallData ( "revertAtNextDepth" , .TypedArgs ) )


    rule  ( selector ( "revertAtNextDepth()" ) => 332278727 )


endmodule

module S2KtestZModExpectRevertTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModExpectRevertTestContract

    syntax S2KtestZModExpectRevertTestContract ::= "S2KtestZModExpectRevertTest" [symbol(), klabel(contract_test%ExpectRevertTest)]

    rule  ( #binRuntime ( S2KtestZModExpectRevertTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638e3adec1116100de578063ba414fa611610097578063dcf0424711610071578063dcf042471461029d578063e20c9f71146102a5578063f9f4ca02146102ad578063fa7626d4146102b557600080fd5b8063ba414fa614610275578063d30bccea1461028d578063dc01ae451461029557600080fd5b80638e3adec1146102455780638fccf7181461024d578063916a17c614610255578063976363f41461025d578063aeb5731f14610265578063b5508aa91461026d57600080fd5b80633f7286f41161014b57806366d9a9a01161012557806366d9a9a01461020b578063694b370714610220578063804de4251461022857806385226c811461023057600080fd5b80633f7286f4146101f35780634d881cd5146101fb57806354e22dbb1461020357600080fd5b806301a07472146101935780631570fffb146101a85780631ed7831c146101b05780632ade3880146101ce578063364a9169146101e35780633e5e3c23146101eb575b600080fd5b6101a66101a1366004611b81565b6102c2565b005b6101a661046a565b6101b86104b7565b6040516101c59190611bb1565b60405180910390f35b6101d6610519565b6040516101c59190611c56565b6101a661065b565b6101b8610740565b6101b86107a0565b6101a6610800565b6101a66108f4565b610213610959565b6040516101c59190611d16565b6101a6610a3f565b6101a6610aad565b610238610ba4565b6040516101c59190611dc9565b6101a6610c74565b6101a6610e05565b610213610ec1565b6101a6610fa7565b6101a6611085565b6102386110fe565b61027d6111ce565b60405190151581526020016101c5565b6101a66112fb565b6101a66113da565b6101a6611426565b6101b8611531565b6101a6611591565b60075461027d9060ff1681565b60006040516102d090611b5a565b604051809103906000f0801580156102ec573d6000803e3d6000fd5b506040516303223eab60e11b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561034557600080fd5b505af1158015610359573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb39150631ded6b7360e11b90610393908690602401611e2b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526103d891600401611e68565b600060405180830381600087803b1580156103f257600080fd5b505af1158015610406573d6000803e3d6000fd5b5050604051630b7f42bb60e31b81526001600160a01b0384169250635bfa15d89150610436908590600401611e2b565b60006040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b505050505050565b60405162461bcd60e51b815260206004820152601960248201527f546869732073686f756c6420626520617420646570746820320000000000000060448201526064015b60405180910390fd5b6060601480548060200260200160405190810160405280929190818152602001828054801561050f57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104f1575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561065257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561063b5783829060005260206000200180546105ae90611e7b565b80601f01602080910402602001604051908101604052809291908181526020018280546105da90611e7b565b80156106275780601f106105fc57610100808354040283529160200191610627565b820191906000526020600020905b81548152906001019060200180831161060a57829003601f168201915b50505050508152602001906001019061058f565b50505050815250508152602001906001019061053d565b50505050905090565b600060405161066990611b67565b604051809103906000f080158015610685573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b50505050806001600160a01b03166313ce2bc76040518163ffffffff1660e01b815260040160006040518083038186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b5050505050565b6060601680548060200260200160405190810160405280929190818152602001828054801561050f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104f1575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561050f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104f1575050505050905090565b600060405161080e90611b5a565b604051809103906000f08015801561082a573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561088157600080fd5b505af1158015610895573d6000803e3d6000fd5b505060405163f7a3038160e01b81526001600160a01b038416925063f7a3038191506108dc906004016020808252600490820152631190525360e21b604082015260600190565b60006040518083038186803b15801561072557600080fd5b306001600160a01b0316631570fffb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561092f57600080fd5b505af1925050508015610940575060015b5060405162461bcd60e51b81526004016104ae90611eb5565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156106525760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a2757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109e95790505b5050505050815250508152602001906001019061097d565b6000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8b57600080fd5b505af1158015610a9f573d6000803e3d6000fd5b50505050610aab6117c9565b565b6000604051610abb90611b5a565b604051809103906000f080158015610ad7573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b2657600080fd5b505af1158015610b3a573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190611ef2565b5050565b60606018805480602002602001604051908101604052809291908181526020016000905b82821015610652578382906000526020600020018054610be790611e7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1390611e7b565b8015610c605780601f10610c3557610100808354040283529160200191610c60565b820191906000526020600020905b815481529060010190602001808311610c4357829003601f168201915b505050505081526020019060010190610bc8565b6000604051610c8290611b5a565b604051809103906000f080158015610c9e573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190611ef2565b506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561072557600080fd5b60405163f28dceb360e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390610e3a90600401611eb5565b600060405180830381600087803b158015610e5457600080fd5b505af1158015610e68573d6000803e3d6000fd5b50505050306001600160a01b03166354e22dbb6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ea757600080fd5b505af1158015610ebb573d6000803e3d6000fd5b50505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156106525760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610f8f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610f515790505b50505050508152505081526020019060010190610ee5565b6000604051610fb590611b5a565b604051809103906000f080158015610fd1573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561102057600080fd5b505af1158015611034573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561107157600080fd5b505afa158015610dc8573d6000803e3d6000fd5b600060405161109390611b5a565b604051809103906000f0801580156110af573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610db457600080fd5b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561065257838290600052602060002001805461114190611e7b565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90611e7b565b80156111ba5780601f1061118f576101008083540402835291602001916111ba565b820191906000526020600020905b81548152906001019060200180831161119d57829003601f168201915b505050505081526020019060010190611122565b600754600090610100900460ff16156111f05750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156112f65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161127e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611f14565b60408051601f198184030181529082905261129891611f45565b6000604051808303816000865af19150503d80600081146112d5576040519150601f19603f3d011682016040523d82523d6000602084013e6112da565b606091505b50915050808060200190518101906112f29190611ef2565b9150505b919050565b600060405161130990611b5a565b604051809103906000f080158015611325573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561137c57600080fd5b505af1158015611390573d6000803e3d6000fd5b505060405163f7a3038160e01b8152602060048201526009602482015268213aba103330b4b61760b91b60448201526001600160a01b038416925063f7a3038191506064016108dc565b6000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ea757600080fd5b600060405161143490611b5a565b604051809103906000f080158015611450573d6000803e3d6000fd5b50604080518082018252601281527152657665727420526561736f6e204865726560701b6020820152905163f28dceb360e01b8152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9163f28dceb3916114b091600401611e68565b600060405180830381600087803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b505060405163f7a3038160e01b815260206004820152601260248201527152657665727420526561736f6e204865726560701b60448201526001600160a01b038416925063f7a3038191506064016108dc565b6060601380548060200260200160405190810160405280929190818152602001828054801561050f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104f1575050505050905090565b600060405161159f90611b74565b604051809103906000f0801580156115bb573d6000803e3d6000fd5b5060405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b15801561162157600080fd5b505af1158015611635573d6000803e3d6000fd5b5050604051633452efc960e21b815260016004820152600092506001600160a01b038416915063d14bbf24906024016000604051808303816000875af1158015611683573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ab9190810190611f77565b90506116c681604051806020016040528060008152506117eb565b60405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b15801561172857600080fd5b505af115801561173c573d6000803e3d6000fd5b505060405163752795a160e11b815260016004820152600092508291506001600160a01b0385169063ea4f2b429060240160408051808303816000875af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190612024565b915091506117be8260006118e2565b610ebb8160006118e2565b60405162461bcd60e51b815260206004820152600060248201526044016104ae565b6117f582826119c1565b610ba0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516118649060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161189b9190612048565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516118d2919061208c565b60405180910390a1610ba0611a4e565b808214610ba0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516119539060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161198a91906120b6565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516118d291906120ee565b805182516001919003611a445760005b8351811015611a3e578281815181106119ec576119ec612118565b602001015160f81c60f81b6001600160f81b031916848281518110611a1357611a13612118565b01602001516001600160f81b03191614611a2c57600091505b80611a368161212e565b9150506119d1565b50611a48565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15611b495760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052611ae89291602001611f14565b60408051601f1981840301815290829052611b0291611f45565b6000604051808303816000865af19150503d8060008114611b3f576040519150601f19603f3d011682016040523d82523d6000602084013e611b44565b606091505b505050505b6007805461ff001916610100179055565b61028e8061215683390190565b6103cb806123e483390190565b61020b806127af83390190565b600060208284031215611b9357600080fd5b81356001600160a01b0381168114611baa57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611bf25783516001600160a01b031683529284019291840191600101611bcd565b50909695505050505050565b60005b83811015611c19578181015183820152602001611c01565b83811115610ebb5750506000910152565b60008151808452611c42816020860160208601611bfe565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611d0657603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611cf057605f19898503018352611cde848651611c2a565b948e01949350918d0191600101611cc2565b505050978a019794505091880191600101611c7d565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611dba57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611da55783516001600160e01b0319168252928b019260019290920191908b0190611d7b565b50978a01979550505091870191600101611d3e565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611e1e57603f19888603018452611e0c858351611c2a565b94509285019290850190600101611df0565b5092979650505050505050565b6001600160a01b039190911681526040602082018190526011908201527005452414e534645524f574e45525348495607c1b606082015260800190565b602081526000611baa6020830184611c2a565b600181811c90821680611e8f57607f821691505b602082108103611eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000611a4860208301601981527f546869732073686f756c64206265206174206465707468203100000000000000602082015260400190565b600060208284031215611f0457600080fd5b81518015158114611baa57600080fd5b6001600160e01b0319831681528151600090611f37816004850160208701611bfe565b919091016004019392505050565b60008251611f57818460208701611bfe565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611f8957600080fd5b815167ffffffffffffffff80821115611fa157600080fd5b818401915084601f830112611fb557600080fd5b815181811115611fc757611fc7611f61565b604051601f8201601f19908116603f01168101908382118183101715611fef57611fef611f61565b8160405282815287602084870101111561200857600080fd5b612019836020830160208801611bfe565b979650505050505050565b6000806040838503121561203757600080fd5b505080516020909101519092909150565b60408152600061207260408301600a8152690808080808081319599d60b21b602082015260400190565b82810360208401526120848185611c2a565b949350505050565b60408152600061207260408301600a8152690808080808149a59da1d60b21b602082015260400190565b6040815260006120e060408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b6040815260006120e060408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006001820161214e57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61028e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea264697066735822122017f3bd3377fe364669a2afdd12b24e1d05a4583a091f2906ade2ef2a2256dc7b64736f6c634300080d0033608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212206c561b003c49055f3368a9cf557460b3bd457b60acb186ca672b76fbb63134d364736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220e2e166fe1acbf218d31101b87fcbdc59503184efd474fc047a4d29e5ca079af564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModExpectRevertTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50612a0f8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638e3adec1116100de578063ba414fa611610097578063dcf0424711610071578063dcf042471461029d578063e20c9f71146102a5578063f9f4ca02146102ad578063fa7626d4146102b557600080fd5b8063ba414fa614610275578063d30bccea1461028d578063dc01ae451461029557600080fd5b80638e3adec1146102455780638fccf7181461024d578063916a17c614610255578063976363f41461025d578063aeb5731f14610265578063b5508aa91461026d57600080fd5b80633f7286f41161014b57806366d9a9a01161012557806366d9a9a01461020b578063694b370714610220578063804de4251461022857806385226c811461023057600080fd5b80633f7286f4146101f35780634d881cd5146101fb57806354e22dbb1461020357600080fd5b806301a07472146101935780631570fffb146101a85780631ed7831c146101b05780632ade3880146101ce578063364a9169146101e35780633e5e3c23146101eb575b600080fd5b6101a66101a1366004611b81565b6102c2565b005b6101a661046a565b6101b86104b7565b6040516101c59190611bb1565b60405180910390f35b6101d6610519565b6040516101c59190611c56565b6101a661065b565b6101b8610740565b6101b86107a0565b6101a6610800565b6101a66108f4565b610213610959565b6040516101c59190611d16565b6101a6610a3f565b6101a6610aad565b610238610ba4565b6040516101c59190611dc9565b6101a6610c74565b6101a6610e05565b610213610ec1565b6101a6610fa7565b6101a6611085565b6102386110fe565b61027d6111ce565b60405190151581526020016101c5565b6101a66112fb565b6101a66113da565b6101a6611426565b6101b8611531565b6101a6611591565b60075461027d9060ff1681565b60006040516102d090611b5a565b604051809103906000f0801580156102ec573d6000803e3d6000fd5b506040516303223eab60e11b81526001600160a01b0384166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561034557600080fd5b505af1158015610359573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb39150631ded6b7360e11b90610393908690602401611e2b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526103d891600401611e68565b600060405180830381600087803b1580156103f257600080fd5b505af1158015610406573d6000803e3d6000fd5b5050604051630b7f42bb60e31b81526001600160a01b0384169250635bfa15d89150610436908590600401611e2b565b60006040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b505050505050565b60405162461bcd60e51b815260206004820152601960248201527f546869732073686f756c6420626520617420646570746820320000000000000060448201526064015b60405180910390fd5b6060601480548060200260200160405190810160405280929190818152602001828054801561050f57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104f1575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561065257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561063b5783829060005260206000200180546105ae90611e7b565b80601f01602080910402602001604051908101604052809291908181526020018280546105da90611e7b565b80156106275780601f106105fc57610100808354040283529160200191610627565b820191906000526020600020905b81548152906001019060200180831161060a57829003601f168201915b50505050508152602001906001019061058f565b50505050815250508152602001906001019061053d565b50505050905090565b600060405161066990611b67565b604051809103906000f080158015610685573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b50505050806001600160a01b03166313ce2bc76040518163ffffffff1660e01b815260040160006040518083038186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b5050505050565b6060601680548060200260200160405190810160405280929190818152602001828054801561050f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104f1575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561050f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104f1575050505050905090565b600060405161080e90611b5a565b604051809103906000f08015801561082a573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561088157600080fd5b505af1158015610895573d6000803e3d6000fd5b505060405163f7a3038160e01b81526001600160a01b038416925063f7a3038191506108dc906004016020808252600490820152631190525360e21b604082015260600190565b60006040518083038186803b15801561072557600080fd5b306001600160a01b0316631570fffb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561092f57600080fd5b505af1925050508015610940575060015b5060405162461bcd60e51b81526004016104ae90611eb5565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156106525760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a2757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109e95790505b5050505050815250508152602001906001019061097d565b6000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8b57600080fd5b505af1158015610a9f573d6000803e3d6000fd5b50505050610aab6117c9565b565b6000604051610abb90611b5a565b604051809103906000f080158015610ad7573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b2657600080fd5b505af1158015610b3a573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190611ef2565b5050565b60606018805480602002602001604051908101604052809291908181526020016000905b82821015610652578382906000526020600020018054610be790611e7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1390611e7b565b8015610c605780601f10610c3557610100808354040283529160200191610c60565b820191906000526020600020905b815481529060010190602001808311610c4357829003601f168201915b505050505081526020019060010190610bc8565b6000604051610c8290611b5a565b604051809103906000f080158015610c9e573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b50505050806001600160a01b031663b7246fc16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190611ef2565b506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561072557600080fd5b60405163f28dceb360e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390610e3a90600401611eb5565b600060405180830381600087803b158015610e5457600080fd5b505af1158015610e68573d6000803e3d6000fd5b50505050306001600160a01b03166354e22dbb6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ea757600080fd5b505af1158015610ebb573d6000803e3d6000fd5b50505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156106525760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610f8f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610f515790505b50505050508152505081526020019060010190610ee5565b6000604051610fb590611b5a565b604051809103906000f080158015610fd1573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561102057600080fd5b505af1158015611034573d6000803e3d6000fd5b50505050806001600160a01b0316634167168d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561107157600080fd5b505afa158015610dc8573d6000803e3d6000fd5b600060405161109390611b5a565b604051809103906000f0801580156110af573d6000803e3d6000fd5b5090506000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610db457600080fd5b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561065257838290600052602060002001805461114190611e7b565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90611e7b565b80156111ba5780601f1061118f576101008083540402835291602001916111ba565b820191906000526020600020905b81548152906001019060200180831161119d57829003601f168201915b505050505081526020019060010190611122565b600754600090610100900460ff16156111f05750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156112f65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161127e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611f14565b60408051601f198184030181529082905261129891611f45565b6000604051808303816000865af19150503d80600081146112d5576040519150601f19603f3d011682016040523d82523d6000602084013e6112da565b606091505b50915050808060200190518101906112f29190611ef2565b9150505b919050565b600060405161130990611b5a565b604051809103906000f080158015611325573d6000803e3d6000fd5b50604051630618f58760e51b8152631190525360e21b6004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561137c57600080fd5b505af1158015611390573d6000803e3d6000fd5b505060405163f7a3038160e01b8152602060048201526009602482015268213aba103330b4b61760b91b60448201526001600160a01b038416925063f7a3038191506064016108dc565b6000805160206129ba83398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ea757600080fd5b600060405161143490611b5a565b604051809103906000f080158015611450573d6000803e3d6000fd5b50604080518082018252601281527152657665727420526561736f6e204865726560701b6020820152905163f28dceb360e01b8152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9163f28dceb3916114b091600401611e68565b600060405180830381600087803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b505060405163f7a3038160e01b815260206004820152601260248201527152657665727420526561736f6e204865726560701b60448201526001600160a01b038416925063f7a3038191506064016108dc565b6060601380548060200260200160405190810160405280929190818152602001828054801561050f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104f1575050505050905090565b600060405161159f90611b74565b604051809103906000f0801580156115bb573d6000803e3d6000fd5b5060405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b15801561162157600080fd5b505af1158015611635573d6000803e3d6000fd5b5050604051633452efc960e21b815260016004820152600092506001600160a01b038416915063d14bbf24906024016000604051808303816000875af1158015611683573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ab9190810190611f77565b90506116c681604051806020016040528060008152506117eb565b60405163f28dceb360e01b815260206004820152600560248201526422b93937b960d91b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b15801561172857600080fd5b505af115801561173c573d6000803e3d6000fd5b505060405163752795a160e11b815260016004820152600092508291506001600160a01b0385169063ea4f2b429060240160408051808303816000875af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190612024565b915091506117be8260006118e2565b610ebb8160006118e2565b60405162461bcd60e51b815260206004820152600060248201526044016104ae565b6117f582826119c1565b610ba0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516118649060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161189b9190612048565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516118d2919061208c565b60405180910390a1610ba0611a4e565b808214610ba0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516119539060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161198a91906120b6565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516118d291906120ee565b805182516001919003611a445760005b8351811015611a3e578281815181106119ec576119ec612118565b602001015160f81c60f81b6001600160f81b031916848281518110611a1357611a13612118565b01602001516001600160f81b03191614611a2c57600091505b80611a368161212e565b9150506119d1565b50611a48565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15611b495760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052611ae89291602001611f14565b60408051601f1981840301815290829052611b0291611f45565b6000604051808303816000865af19150503d8060008114611b3f576040519150601f19603f3d011682016040523d82523d6000602084013e611b44565b606091505b505050505b6007805461ff001916610100179055565b61028e8061215683390190565b6103cb806123e483390190565b61020b806127af83390190565b600060208284031215611b9357600080fd5b81356001600160a01b0381168114611baa57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611bf25783516001600160a01b031683529284019291840191600101611bcd565b50909695505050505050565b60005b83811015611c19578181015183820152602001611c01565b83811115610ebb5750506000910152565b60008151808452611c42816020860160208601611bfe565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611d0657603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611cf057605f19898503018352611cde848651611c2a565b948e01949350918d0191600101611cc2565b505050978a019794505091880191600101611c7d565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611dba57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611da55783516001600160e01b0319168252928b019260019290920191908b0190611d7b565b50978a01979550505091870191600101611d3e565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611e1e57603f19888603018452611e0c858351611c2a565b94509285019290850190600101611df0565b5092979650505050505050565b6001600160a01b039190911681526040602082018190526011908201527005452414e534645524f574e45525348495607c1b606082015260800190565b602081526000611baa6020830184611c2a565b600181811c90821680611e8f57607f821691505b602082108103611eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000611a4860208301601981527f546869732073686f756c64206265206174206465707468203100000000000000602082015260400190565b600060208284031215611f0457600080fd5b81518015158114611baa57600080fd5b6001600160e01b0319831681528151600090611f37816004850160208701611bfe565b919091016004019392505050565b60008251611f57818460208701611bfe565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611f8957600080fd5b815167ffffffffffffffff80821115611fa157600080fd5b818401915084601f830112611fb557600080fd5b815181811115611fc757611fc7611f61565b604051601f8201601f19908116603f01168101908382118183101715611fef57611fef611f61565b8160405282815287602084870101111561200857600080fd5b612019836020830160208801611bfe565b979650505050505050565b6000806040838503121561203757600080fd5b505080516020909101519092909150565b60408152600061207260408301600a8152690808080808081319599d60b21b602082015260400190565b82810360208401526120848185611c2a565b949350505050565b60408152600061207260408301600a8152690808080808149a59da1d60b21b602082015260400190565b6040815260006120e060408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b6040815260006120e060408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006001820161214e57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61028e8061013d83390190565b60c38061007a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806313ce2bc714602d575b600080fd5b60336035565b005b6000805460408051634167168d60e01b815290516001600160a01b0390921692634167168d92600480840193829003018186803b158015607457600080fd5b505afa1580156087573d6000803e3d6000fd5b5050505056fea264697066735822122017f3bd3377fe364669a2afdd12b24e1d05a4583a091f2906ade2ef2a2256dc7b64736f6c634300080d0033608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212206c561b003c49055f3368a9cf557460b3bd457b60acb186ca672b76fbb63134d364736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220e2e166fe1acbf218d31101b87fcbdc59503184efd474fc047a4d29e5ca079af564736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModExpectRevertTestField

    syntax S2KtestZModExpectRevertTestField ::= "stdstore" [symbol(), klabel(field_test%ExpectRevertTest_stdstore)]

    syntax S2KtestZModExpectRevertTestField ::= "IS_TEST" [symbol(), klabel(field_test%ExpectRevertTest_IS_TEST)]

    syntax S2KtestZModExpectRevertTestField ::= "_failed" [symbol(), klabel(field_test%ExpectRevertTest__failed)]

    syntax S2KtestZModExpectRevertTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ExpectRevertTest_stdChainsInitialized)]

    syntax S2KtestZModExpectRevertTestField ::= "chains" [symbol(), klabel(field_test%ExpectRevertTest_chains)]

    syntax S2KtestZModExpectRevertTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ExpectRevertTest_defaultRpcUrls)]

    syntax S2KtestZModExpectRevertTestField ::= "idToAlias" [symbol(), klabel(field_test%ExpectRevertTest_idToAlias)]

    syntax S2KtestZModExpectRevertTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ExpectRevertTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModExpectRevertTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ExpectRevertTest_gasMeteringOff)]

    syntax S2KtestZModExpectRevertTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ExpectRevertTest__excludedContracts)]

    syntax S2KtestZModExpectRevertTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ExpectRevertTest__excludedSenders)]

    syntax S2KtestZModExpectRevertTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ExpectRevertTest__targetedContracts)]

    syntax S2KtestZModExpectRevertTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ExpectRevertTest__targetedSenders)]

    syntax S2KtestZModExpectRevertTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ExpectRevertTest__excludedArtifacts)]

    syntax S2KtestZModExpectRevertTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ExpectRevertTest__targetedArtifacts)]

    syntax S2KtestZModExpectRevertTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ExpectRevertTest__targetedArtifactSelectors)]

    syntax S2KtestZModExpectRevertTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ExpectRevertTest__targetedSelectors)]

    syntax S2KtestZModExpectRevertTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ExpectRevertTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModExpectRevertTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModExpectRevertTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModExpectRevertTestContract "." S2KtestZModExpectRevertTestMethod [function(), symbol(), klabel(method_test%ExpectRevertTest)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KISZUndTEST_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KexcludeContracts_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KexcludeSenders_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2Kfailed_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KrevertDepth1" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KrevertDepth1_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KrevertDepth2" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KrevertDepth2_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtargetArtifacts_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtargetContracts_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtargetInterfaces_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtargetSelectors_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtargetSenders_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndExpectRevertZUndfailAndSuccess" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestFailZUndExpectRevertZUndfailAndSuccess_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndbytes4_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndempty" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndempty_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndfalse" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndfalse_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndmultipleReverts" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndmultipleReverts_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndExpectRevertZUndincreasedDepth" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndExpectRevertZUndincreasedDepth_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndbytes4" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndbytes4_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndencodedSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndencodedSymbolic_address)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinDepth" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndinDepth_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinternalCall" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndinternalCall_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndmessage" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndmessage_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndreturnValue" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndreturnValue_)]

    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndtrue" "(" ")" [symbol(), klabel(method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndtrue_)]

    rule  ( S2KtestZModExpectRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KrevertDepth1 ( ) => #abiCallData ( "revertDepth1" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KrevertDepth2 ( ) => #abiCallData ( "revertDepth2" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndExpectRevertZUndfailAndSuccess ( ) => #abiCallData ( "testFail_ExpectRevert_failAndSuccess" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "testFail_expectRevert_bytes4" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndempty ( ) => #abiCallData ( "testFail_expectRevert_empty" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndfalse ( ) => #abiCallData ( "testFail_expectRevert_false" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndmultipleReverts ( ) => #abiCallData ( "testFail_expectRevert_multipleReverts" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndExpectRevertZUndincreasedDepth ( ) => #abiCallData ( "test_ExpectRevert_increasedDepth" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "test_expectRevert_bytes4" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndencodedSymbolic ( V0_controller : address ) => #abiCallData ( "test_expectRevert_encodedSymbolic" , #address ( V0_controller ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndinDepth ( ) => #abiCallData ( "test_expectRevert_inDepth" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndinternalCall ( ) => #abiCallData ( "test_expectRevert_internalCall" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndmessage ( ) => #abiCallData ( "test_expectRevert_message" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndreturnValue ( ) => #abiCallData ( "test_expectRevert_returnValue" , .TypedArgs ) )


    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndtrue ( ) => #abiCallData ( "test_expectRevert_true" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "revertDepth1()" ) => 1424108987 )


    rule  ( selector ( "revertDepth2()" ) => 359727099 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_ExpectRevert_failAndSuccess()" ) => 2386222785 )


    rule  ( selector ( "testFail_expectRevert_bytes4()" ) => 3540765930 )


    rule  ( selector ( "testFail_expectRevert_empty()" ) => 3691097669 )


    rule  ( selector ( "testFail_expectRevert_false()" ) => 2152588325 )


    rule  ( selector ( "testFail_expectRevert_multipleReverts()" ) => 2539873268 )


    rule  ( selector ( "test_ExpectRevert_increasedDepth()" ) => 910856553 )


    rule  ( selector ( "test_expectRevert_bytes4()" ) => 1300765909 )


    rule  ( selector ( "test_expectRevert_encodedSymbolic(address)" ) => 27292786 )


    rule  ( selector ( "test_expectRevert_inDepth()" ) => 2412574488 )


    rule  ( selector ( "test_expectRevert_internalCall()" ) => 1766536967 )


    rule  ( selector ( "test_expectRevert_message()" ) => 3706733127 )


    rule  ( selector ( "test_expectRevert_returnValue()" ) => 4193569282 )


    rule  ( selector ( "test_expectRevert_true()" ) => 2931127071 )


endmodule

module S2KtestZModReverter-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModReverterContract

    syntax S2KtestZModReverterContract ::= "S2KtestZModReverter" [symbol(), klabel(contract_test%Reverter)]

    rule  ( #binRuntime ( S2KtestZModReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModReverter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634167168d146100515780635bfa15d81461005b578063b7246fc11461006e578063f7a3038114610082575b600080fd5b610059600080fd5b005b610059610069366004610122565b610095565b604080516001815290519081900360200190f35b610059610090366004610183565b6100bd565b828282604051631ded6b7360e11b81526004016100b4939291906101ee565b60405180910390fd5b818160405162461bcd60e51b81526004016100b492919061021c565b60008083601f8401126100eb57600080fd5b50813567ffffffffffffffff81111561010357600080fd5b60208301915083602082850101111561011b57600080fd5b9250929050565b60008060006040848603121561013757600080fd5b83356001600160a01b038116811461014e57600080fd5b9250602084013567ffffffffffffffff81111561016a57600080fd5b610176868287016100d9565b9497909650939450505050565b6000806020838503121561019657600080fd5b823567ffffffffffffffff8111156101ad57600080fd5b6101b9858286016100d9565b90969095509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061021390830184866101c5565b95945050505050565b6020815260006102306020830184866101c5565b94935050505056fea2646970667358221220f71b1bdc6d115d77b05ccf073cf2924bec0a147a99e08f70bdde8d2910037b4464736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModReverterContract "." S2KtestZModReverterMethod [function(), symbol(), klabel(method_test%Reverter)]

    syntax S2KtestZModReverterMethod ::= "S2KnoRevert" "(" ")" [symbol(), klabel(method_test%Reverter_S2KnoRevert_)]

    syntax S2KtestZModReverterMethod ::= "S2KrevertWithError" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_test%Reverter_S2KrevertWithError_address_string)]

    syntax S2KtestZModReverterMethod ::= "S2KrevertWithReason" "(" String ":" "string" ")" [symbol(), klabel(method_test%Reverter_S2KrevertWithReason_string)]

    syntax S2KtestZModReverterMethod ::= "S2KrevertWithoutReason" "(" ")" [symbol(), klabel(method_test%Reverter_S2KrevertWithoutReason_)]

    rule  ( S2KtestZModReverter . S2KnoRevert ( ) => #abiCallData ( "noRevert" , .TypedArgs ) )


    rule  ( S2KtestZModReverter . S2KrevertWithError ( V0_controller : address , V1_message : string ) => #abiCallData ( "revertWithError" , #address ( V0_controller ) , #string ( V1_message ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )


    rule  ( S2KtestZModReverter . S2KrevertWithReason ( V0__a : string ) => #abiCallData ( "revertWithReason" , #string ( V0__a ) , .TypedArgs ) )


    rule  ( S2KtestZModReverter . S2KrevertWithoutReason ( ) => #abiCallData ( "revertWithoutReason" , .TypedArgs ) )


    rule  ( selector ( "noRevert()" ) => 3072618433 )


    rule  ( selector ( "revertWithError(address,string)" ) => 1543116248 )


    rule  ( selector ( "revertWithReason(string)" ) => 4154655617 )


    rule  ( selector ( "revertWithoutReason()" ) => 1097275021 )


endmodule

module S2KtestZModReverterWithReturn-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModReverterWithReturnContract

    syntax S2KtestZModReverterWithReturnContract ::= "S2KtestZModReverterWithReturn" [symbol(), klabel(contract_test%ReverterWithReturn)]

    rule  ( #binRuntime ( S2KtestZModReverterWithReturn ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212206c561b003c49055f3368a9cf557460b3bd457b60acb186ca672b76fbb63134d364736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModReverterWithReturn ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d14bbf241461003b578063ea4f2b4214610064575b600080fd5b61004e610049366004610137565b61008c565b60405161005b9190610160565b60405180910390f35b610077610072366004610137565b6100f2565b6040805192835260208301919091520161005b565b606081156100c95760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064015b60405180910390fd5b60405163deadbeef60e01b60208201526024016040516020818303038152906040529050919050565b600080821561012b5760405162461bcd60e51b815260206004820152600560248201526422b93937b960d91b60448201526064016100c0565b50600192600292509050565b60006020828403121561014957600080fd5b8135801515811461015957600080fd5b9392505050565b600060208083528351808285015260005b8181101561018d57858101830151858201604001528201610171565b8181111561019f576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212206c561b003c49055f3368a9cf557460b3bd457b60acb186ca672b76fbb63134d364736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModReverterWithReturnContract "." S2KtestZModReverterWithReturnMethod [function(), symbol(), klabel(method_test%ReverterWithReturn)]

    syntax S2KtestZModReverterWithReturnMethod ::= "S2KreturnBytesUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_test%ReverterWithReturn_S2KreturnBytesUnless_bool)]

    syntax S2KtestZModReverterWithReturnMethod ::= "S2KreturnTupleUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_test%ReverterWithReturn_S2KreturnTupleUnless_bool)]

    rule  ( S2KtestZModReverterWithReturn . S2KreturnBytesUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnBytesUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )


    rule  ( S2KtestZModReverterWithReturn . S2KreturnTupleUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnTupleUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )


    rule  ( selector ( "returnBytesUnless(bool)" ) => 3511402276 )


    rule  ( selector ( "returnTupleUnless(bool)" ) => 3931056962 )


endmodule

module S2KtestZModFfiTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModFfiTestContract

    syntax S2KtestZModFfiTestContract ::= "S2KtestZModFfiTest" [symbol(), klabel(contract_test%FfiTest)]

    rule  ( #binRuntime ( S2KtestZModFfiTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModFfiTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModFfiTestField

    syntax S2KtestZModFfiTestField ::= "stdstore" [symbol(), klabel(field_test%FfiTest_stdstore)]

    syntax S2KtestZModFfiTestField ::= "IS_TEST" [symbol(), klabel(field_test%FfiTest_IS_TEST)]

    syntax S2KtestZModFfiTestField ::= "_failed" [symbol(), klabel(field_test%FfiTest__failed)]

    syntax S2KtestZModFfiTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%FfiTest_stdChainsInitialized)]

    syntax S2KtestZModFfiTestField ::= "chains" [symbol(), klabel(field_test%FfiTest_chains)]

    syntax S2KtestZModFfiTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%FfiTest_defaultRpcUrls)]

    syntax S2KtestZModFfiTestField ::= "idToAlias" [symbol(), klabel(field_test%FfiTest_idToAlias)]

    syntax S2KtestZModFfiTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%FfiTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModFfiTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%FfiTest_gasMeteringOff)]

    syntax S2KtestZModFfiTestField ::= "_excludedContracts" [symbol(), klabel(field_test%FfiTest__excludedContracts)]

    syntax S2KtestZModFfiTestField ::= "_excludedSenders" [symbol(), klabel(field_test%FfiTest__excludedSenders)]

    syntax S2KtestZModFfiTestField ::= "_targetedContracts" [symbol(), klabel(field_test%FfiTest__targetedContracts)]

    syntax S2KtestZModFfiTestField ::= "_targetedSenders" [symbol(), klabel(field_test%FfiTest__targetedSenders)]

    syntax S2KtestZModFfiTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%FfiTest__excludedArtifacts)]

    syntax S2KtestZModFfiTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%FfiTest__targetedArtifacts)]

    syntax S2KtestZModFfiTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%FfiTest__targetedArtifactSelectors)]

    syntax S2KtestZModFfiTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%FfiTest__targetedSelectors)]

    syntax S2KtestZModFfiTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%FfiTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModFfiTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModFfiTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModFfiTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModFfiTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModFfiTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModFfiTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModFfiTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModFfiTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModFfiTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModFfiTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModFfiTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModFfiTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModFfiTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModFfiTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModFfiTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModFfiTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModFfiTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModFfiTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModFfiTestContract "." S2KtestZModFfiTestMethod [function(), symbol(), klabel(method_test%FfiTest)]

    syntax S2KtestZModFfiTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KISZUndTEST_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KexcludeContracts_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KexcludeSenders_)]

    syntax S2KtestZModFfiTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%FfiTest_S2Kfailed_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KsetUp_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtargetArtifacts_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtargetContracts_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtargetInterfaces_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtargetSelectors_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtargetSenders_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtestFFIFOO" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtestFFIFOO_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtestFFIScript" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtestFFIScript_)]

    syntax S2KtestZModFfiTestMethod ::= "S2KtestFFIScript2" "(" ")" [symbol(), klabel(method_test%FfiTest_S2KtestFFIScript2_)]

    syntax S2KtestZModFfiTestMethod ::= "S2Ktestffi" "(" ")" [symbol(), klabel(method_test%FfiTest_S2Ktestffi_)]

    rule  ( S2KtestZModFfiTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtestFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtestFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2KtestFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )


    rule  ( S2KtestZModFfiTest . S2Ktestffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFFIFOO()" ) => 2415994822 )


    rule  ( selector ( "testFFIScript()" ) => 2734086837 )


    rule  ( selector ( "testFFIScript2()" ) => 4125794598 )


    rule  ( selector ( "testffi()" ) => 4068116 )


endmodule

module S2KtestZModFilesTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModFilesTestContract

    syntax S2KtestZModFilesTestContract ::= "S2KtestZModFilesTest" [symbol(), klabel(contract_test%FilesTest)]

    rule  ( #binRuntime ( S2KtestZModFilesTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a5be82461161008c578063ba414fa611610066578063ba414fa61461017e578063e20c9f7114610196578063e7515e591461019e578063fa7626d4146101a657600080fd5b8063a5be824614610164578063b52803ed1461016e578063b5508aa91461017657600080fd5b80633f7286f4116100c85780633f7286f41461012a57806366d9a9a01461013257806385226c8114610147578063916a17c61461015c57600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101b3565b60405161010491906110d8565b60405180910390f35b610115610215565b6040516101049190611181565b6100f7610357565b6100f76103b7565b61013a610417565b6040516101049190611241565b61014f6104fd565b60405161010491906112f4565b61013a6105cd565b61016c6106b3565b005b61016c610869565b61014f610af3565b610186610bc3565b6040519015158152602001610104565b6100f7610ce4565b61016c610d44565b6007546101869060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561020b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ed575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561034e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103375783829060005260206000200180546102aa90611356565b80601f01602080910402602001604051908101604052809291908181526020018280546102d690611356565b80156103235780601f106102f857610100808354040283529160200191610323565b820191906000526020600020905b81548152906001019060200180831161030657829003601f168201915b50505050508152602001906001019061028b565b505050508152505081526020019060010190610239565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561034e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104e557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104a75790505b5050505050815250508152602001906001019061043b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561034e57838290600052602060002001805461054090611356565b80601f016020809104026020016040519081016040528092919081815260200182805461056c90611356565b80156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b505050505081526020019060010190610521565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561034e5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561069b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161065d5790505b505050505081525050815260200190600101906105f1565b6040516360f9bb1160e01b8152600090600080516020611686833981519152906360f9bb11906106e590600401611390565b600060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072a91908101906113cf565b60405163897e0a9760e01b81529091506000805160206116868339815191529063897e0a979061075e90849060040161147c565b600060405180830381600087803b15801561077857600080fd5b505af115801561078c573d6000803e3d6000fd5b505060405163f1afe04d60e01b8152600080516020611686833981519152925063f1afe04d91506107bf906004016114ca565b600060405180830381600087803b1580156107d957600080fd5b505af11580156107ed573d6000803e3d6000fd5b50506040516360f9bb1160e01b815260008051602061168683398151915292506360f9bb119150610820906004016114ca565b600060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086591908101906113cf565b5050565b604051630e1eaae560e31b8152600090600080516020611686833981519152906370f557289061089b90600401611390565b600060405180830381865afa1580156108b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e091908101906113cf565b60405163619d897f60e01b81529091506000805160206116868339815191529063619d897f90610914908490600401611504565b600060405180830381600087803b15801561092e57600080fd5b505af1158015610942573d6000803e3d6000fd5b5050604051630e1eaae560e31b815260008051602061168683398151915292506370f55728915061097590600401611390565b600060405180830381865afa158015610992573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ba91908101906113cf565b90506109e9816040518060400160405280600b81526020016a666f722074657374696e6760a81b815250610ea0565b6040516348c3241f60e01b8152600080516020611686833981519152906348c3241f90610a1890600401611390565b600060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b5050604051630e1eaae560e31b815260008051602061168683398151915292506370f557289150610a7990600401611390565b600060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610abe91908101906113cf565b9050610af0816040518060400160405280600e81526020016d5468697320697320612066696c6560901b815250610ea0565b50565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561034e578382906000526020600020018054610b3690611356565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6290611356565b8015610baf5780601f10610b8457610100808354040283529160200191610baf565b820191906000526020600020905b815481529060010190602001808311610b9257829003601f168201915b505050505081526020019060010190610b17565b600754600090610100900460ff1615610be55750600754610100900460ff1690565b60006000805160206116868339815191523b15610cdf5760408051600080516020611686833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610c67917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611548565b60408051601f1981840301815290829052610c8191611579565b6000604051808303816000865af19150503d8060008114610cbe576040519150601f19603f3d011682016040523d82523d6000602084013e610cc3565b606091505b5091505080806020019051810190610cdb9190611595565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b6040516360f9bb1160e01b8152600090600080516020611686833981519152906360f9bb1190610d7690600401611390565b600060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbb91908101906113cf565b60405163897e0a9760e01b81529091506000805160206116868339815191529063897e0a9790610def9084906004016115b7565b600060405180830381600087803b158015610e0957600080fd5b505af1158015610e1d573d6000803e3d6000fd5b50506040516360f9bb1160e01b81526000925060008051602061168683398151915291506360f9bb1190610e53906004016115ea565b600060405180830381865afa158015610e70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9891908101906113cf565b905061086582825b80604051602001610eb19190611579565b6040516020818303038152906040528051906020012082604051602001610ed89190611579565b6040516020818303038152906040528051906020012014610865577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610f5f9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382604051610f96919061161d565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610fcd9190611651565b60405180910390a16108656000805160206116868339815191523b156110c75760408051600080516020611686833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526110669291602001611548565b60408051601f198184030181529082905261108091611579565b6000604051808303816000865af19150503d80600081146110bd576040519150601f19603f3d011682016040523d82523d6000602084013e6110c2565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156111195783516001600160a01b0316835292840192918401916001016110f4565b50909695505050505050565b60005b83811015611140578181015183820152602001611128565b8381111561114f576000848401525b50505050565b6000815180845261116d816020860160208601611125565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561123157603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561121b57605f19898503018352611209848651611155565b948e01949350918d01916001016111ed565b505050978a0197945050918801916001016111a8565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156112e557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112d05783516001600160e01b0319168252928b019260019290920191908b01906112a6565b50978a01979550505091870191600101611269565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561134957603f19888603018452611337858351611155565b9450928501929085019060010161131b565b5092979650505050505050565b600181811c9082168061136a57607f821691505b60208210810361138a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600f908201526e0b8bdd195cdd0bd99a5b194b9d1e1d608a1b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156113e157600080fd5b815167ffffffffffffffff808211156113f957600080fd5b818401915084601f83011261140d57600080fd5b81518181111561141f5761141f6113b9565b604051601f8201601f19908116603f01168101908382118183101715611447576114476113b9565b8160405282815287602084870101111561146057600080fd5b611471836020830160208801611125565b979650505050505050565b6040815260006114b06040830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b82810360208401526114c28185611155565b949350505050565b6020815260006114fe6020830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b92915050565b6040815260136040820152720b8bdd195cdd0bd99a5b195b1a5b994b9d1e1d606a1b60608201526080602082015260006115416080830184611155565b9392505050565b6001600160e01b031983168152815160009061156b816004850160208701611125565b919091016004019392505050565b6000825161158b818460208701611125565b9190910192915050565b6000602082840312156115a757600080fd5b8151801515811461154157600080fd5b6040815260006114b06040830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b6020815260006114fe6020830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b60408152600a6040820152690808080808081319599d60b21b60608201526080602082015260006115416080830184611155565b60408152600a6040820152690808080808149a59da1d60b21b6060820152608060208201526000611541608083018461115556fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212200e9dc517d63a157103a04c8ce856deedac9200101feaf52708835f7fb06210a564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModFilesTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModFilesTestField

    syntax S2KtestZModFilesTestField ::= "stdstore" [symbol(), klabel(field_test%FilesTest_stdstore)]

    syntax S2KtestZModFilesTestField ::= "IS_TEST" [symbol(), klabel(field_test%FilesTest_IS_TEST)]

    syntax S2KtestZModFilesTestField ::= "_failed" [symbol(), klabel(field_test%FilesTest__failed)]

    syntax S2KtestZModFilesTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%FilesTest_stdChainsInitialized)]

    syntax S2KtestZModFilesTestField ::= "chains" [symbol(), klabel(field_test%FilesTest_chains)]

    syntax S2KtestZModFilesTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%FilesTest_defaultRpcUrls)]

    syntax S2KtestZModFilesTestField ::= "idToAlias" [symbol(), klabel(field_test%FilesTest_idToAlias)]

    syntax S2KtestZModFilesTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%FilesTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModFilesTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%FilesTest_gasMeteringOff)]

    syntax S2KtestZModFilesTestField ::= "_excludedContracts" [symbol(), klabel(field_test%FilesTest__excludedContracts)]

    syntax S2KtestZModFilesTestField ::= "_excludedSenders" [symbol(), klabel(field_test%FilesTest__excludedSenders)]

    syntax S2KtestZModFilesTestField ::= "_targetedContracts" [symbol(), klabel(field_test%FilesTest__targetedContracts)]

    syntax S2KtestZModFilesTestField ::= "_targetedSenders" [symbol(), klabel(field_test%FilesTest__targetedSenders)]

    syntax S2KtestZModFilesTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%FilesTest__excludedArtifacts)]

    syntax S2KtestZModFilesTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%FilesTest__targetedArtifacts)]

    syntax S2KtestZModFilesTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%FilesTest__targetedArtifactSelectors)]

    syntax S2KtestZModFilesTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%FilesTest__targetedSelectors)]

    syntax S2KtestZModFilesTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%FilesTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModFilesTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModFilesTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModFilesTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModFilesTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModFilesTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModFilesTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModFilesTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModFilesTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModFilesTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModFilesTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModFilesTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModFilesTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModFilesTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModFilesTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModFilesTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModFilesTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModFilesTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModFilesTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModFilesTestContract "." S2KtestZModFilesTestMethod [function(), symbol(), klabel(method_test%FilesTest)]

    syntax S2KtestZModFilesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KISZUndTEST_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KexcludeContracts_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KexcludeSenders_)]

    syntax S2KtestZModFilesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%FilesTest_S2Kfailed_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtargetArtifacts_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtargetContracts_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtargetInterfaces_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtargetSelectors_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtargetSenders_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtestFailRemoveFile" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtestFailRemoveFile_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtestReadWriteFile" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtestReadWriteFile_)]

    syntax S2KtestZModFilesTestMethod ::= "S2KtestReadWriteLine" "(" ")" [symbol(), klabel(method_test%FilesTest_S2KtestReadWriteLine_)]

    rule  ( S2KtestZModFilesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtestFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtestReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )


    rule  ( S2KtestZModFilesTest . S2KtestReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFailRemoveFile()" ) => 2780725830 )


    rule  ( selector ( "testReadWriteFile()" ) => 3880869465 )


    rule  ( selector ( "testReadWriteLine()" ) => 3039298541 )


endmodule

module S2KtestZModForkTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModForkTestContract

    syntax S2KtestZModForkTestContract ::= "S2KtestZModForkTest" [symbol(), klabel(contract_test%ForkTest)]

    rule  ( #binRuntime ( S2KtestZModForkTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101365760003560e01c806389837aa6116100b8578063ba414fa61161007c578063ba414fa6146101f2578063bfb0378d1461020a578063c011418914610212578063e20c9f711461021a578063eabff92014610222578063fa7626d41461022a57600080fd5b806389837aa6146101ca578063916a17c6146101d2578063a822dbe3146101da578063b1aed322146101e2578063b5508aa9146101ea57600080fd5b80632ade3880116100ff5780632ade38801461017b5780633e5e3c23146101905780633f7286f41461019857806366d9a9a0146101a057806385226c81146101b557600080fd5b80629645451461013b57806310133ad4146101455780631c105cc51461014d5780631ed7831c146101555780632a2b70e314610173575b600080fd5b610143610237565b005b61014361031e565b6101436103a5565b61015d61048f565b60405161016a919061199d565b60405180910390f35b6101436104f1565b6101836106af565b60405161016a9190611a46565b61015d6107f1565b61015d610851565b6101a86108b1565b60405161016a9190611b06565b6101bd610997565b60405161016a9190611bb9565b610143610a67565b6101a8610ae7565b610143610bcd565b610143610cb6565b6101bd610fb2565b6101fa611082565b604051901515815260200161016a565b6101436111a3565b61014361132a565b61015d61149f565b6101436114ff565b6007546101fa9060ff1681565b604051630637469360e31b81526000906000805160206120da833981519152906331ba34989061026990600401611c5a565b6020604051808303816000875af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac9190611c72565b604051639ebf682760e01b8152600481018290529091506000805160206120da83398151915290639ebf682790602401600060405180830381600087803b1580156102f657600080fd5b505af115801561030a573d6000803e3d6000fd5b5050505061031b4362e84c2e6115b0565b50565b6040516371ee464d60e01b81526000805160206120da833981519152906371ee464d906103529062e84c2990600401611c8b565b6020604051808303816000875af1158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190611c72565b506103a34362e84c296116b5565b565b60405163f28dceb360e01b81526000805160206120da8339815191529063f28dceb3906103d490600401611cab565b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505060405163975a6ce960e01b81526020600482015260076024820152661b585a5b9b995d60ca1b60448201526000805160206120da833981519152925063975a6ce99150606401600060405180830381865afa158015610467573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031b9190810190611df4565b606060148054806020026020016040519081016040528092919081815260200182805480156104e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104c9575b5050505050905090565b60405163f28dceb360e01b81526000805160206120da8339815191529063f28dceb39061052090600401611cab565b600060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663a85a84186040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105dd9190810190611e29565b90506105eb815160026116b5565b60008160008151811061060057610600611f43565b6020026020010151905061064a8160006002811061062057610620611f43565b6020020151604051806040016040528060078152602001661b585a5b9b995d60ca1b815250611770565b60008260018151811061065f5761065f611f43565b602002602001015190506106aa8160006002811061067f5761067f611f43565b6020020151604051806040016040528060088152602001676f7074696d69736d60c01b815250611770565b505050565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156107e857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156107d157838290600052602060002001805461074490611f59565b80601f016020809104026020016040519081016040528092919081815260200182805461077090611f59565b80156107bd5780601f10610792576101008083540402835291602001916107bd565b820191906000526020600020905b8154815290600101906020018083116107a057829003601f168201915b505050505081526020019060010190610725565b5050505081525050815260200190600101906106d3565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156107e85760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561097f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109415790505b505050505081525050815260200190600101906108d5565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156107e85783829060005260206000200180546109da90611f59565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0690611f59565b8015610a535780601f10610a2857610100808354040283529160200191610a53565b820191906000526020600020905b815481529060010190602001808311610a3657829003601f168201915b5050505050815260200190600101906109bb565b60405163261a000d60e21b81526000805160206120da83398151915290639868003490610a9690600401611c5a565b6020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190611c72565b506103a34362e84c2e6115b0565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156107e85760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610bb557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610b775790505b50505050508152505081526020019060010190610b0b565b604051636ba3ba2b60e01b81526000906000805160206120da83398151915290636ba3ba2b90610c049062e84c2990600401611c8b565b6020604051808303816000875af1158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190611c72565b604051639ebf682760e01b8152600481018290529091506000805160206120da83398151915290639ebf682790602401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b5050505061031b4362e84c296116b5565b604051630637469360e31b81526000906000805160206120da833981519152906331ba349890610ce890600401611c5a565b6020604051808303816000875af1158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190611c72565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b60448201529091506000906000805160206120da833981519152906331ba3498906064016020604051808303816000875af1158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611c72565b9050808203610dd457610dd4611f93565b604051639ebf682760e01b8152600481018390526000805160206120da83398151915290639ebf682790602401600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b50505050610ec17f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316632f103f226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebb9190611c72565b836116b5565b604051639ebf682760e01b8152600481018290526000805160206120da83398151915290639ebf682790602401600060405180830381600087803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b50505050610fae7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316632f103f226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190611c72565b826116b5565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156107e8578382906000526020600020018054610ff590611f59565b80601f016020809104026020016040519081016040528092919081815260200182805461102190611f59565b801561106e5780601f106110435761010080835404028352916020019161106e565b820191906000526020600020905b81548152906001019060200180831161105157829003601f168201915b505050505081526020019060010190610fd6565b600754600090610100900460ff16156110a45750600754610100900460ff1690565b60006000805160206120da8339815191523b1561119e57604080516000805160206120da833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611126917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611fa9565b60408051601f198184030181529082905261114091611fda565b6000604051808303816000865af19150503d806000811461117d576040519150601f19603f3d011682016040523d82523d6000602084013e611182565b606091505b509150508080602001905181019061119a9190611ff6565b9150505b919050565b604051630637469360e31b815260206004820152602560248201527f68747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f604482015264432f72706360d81b60648201526000906000805160206120da833981519152906331ba3498906084016020604051808303816000875af115801561122d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112519190611c72565b6040516335d320e960e21b815260048101829052630110b11e60248201529091506000805160206120da8339815191529063d74c83a490604401600060405180830381600087803b1580156112a557600080fd5b505af11580156112b9573d6000803e3d6000fd5b5050604051639ebf682760e01b8152600481018490526000805160206120da8339815191529250639ebf68279150602401600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b5050505061031b43630110b11e6116b5565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b60448201526000906000805160206120da833981519152906331ba3498906064016020604051808303816000875af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190611c72565b604051639ebf682760e01b8152600481018290529091506000805160206120da83398151915290639ebf682790602401600060405180830381600087803b15801561140957600080fd5b505af115801561141d573d6000803e3d6000fd5b5050505061142f4363012ff0556115b0565b60405163d9bbf3a160e01b815263012fefb960048201526000805160206120da8339815191529063d9bbf3a190602401600060405180830381600087803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b5050505061031b4363012fefb96116b5565b606060138054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b60405163975a6ce960e01b81526020600482015260086024820152676f7074696d69736d60c01b60448201526000906000805160206120da8339815191529063975a6ce990606401600060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261158c9190810190611df4565b905061031b816040518060600160405280602581526020016120fa60259139611770565b808211610fae577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516116209060208082526021908201527f4572726f723a2061203e2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b606082015260208101849052905160008051602061211f8339815191529181900360800190a1604080518181526009918101919091526810102b30b63ab2903160b91b60608201526020810182905260008051602061211f833981519152906080015b60405180910390a1610fae61189d565b808214610fae577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516117269060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160008051602061211f8339815191528260405161174b919061201f565b60405180910390a160008051602061211f833981519152816040516116a59190612049565b806040516020016117819190611fda565b60405160208183030381529060405280519060200120826040516020016117a89190611fda565b6040516020818303038152906040528051906020012014610fae577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161182f9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516118669190612073565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516116a591906120af565b6000805160206120da8339815191523b1561198c57604080516000805160206120da833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261192b9291602001611fa9565b60408051601f198184030181529082905261194591611fda565b6000604051808303816000865af19150503d8060008114611982576040519150601f19603f3d011682016040523d82523d6000602084013e611987565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156119de5783516001600160a01b0316835292840192918401916001016119b9565b50909695505050505050565b60005b83811015611a055781810151838201526020016119ed565b83811115611a14576000848401525b50505050565b60008151808452611a328160208601602086016119ea565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611af657603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611ae057605f19898503018352611ace848651611a1a565b948e01949350918d0191600101611ab2565b505050978a019794505091880191600101611a6d565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611baa57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611b955783516001600160e01b0319168252928b019260019290920191908b0190611b6b565b50978a01979550505091870191600101611b2e565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611c0e57603f19888603018452611bfc858351611a1a565b94509285019290850190600101611be0565b5092979650505050505050565b602681527f68747470733a2f2f6574682d6d61696e6e65742e7075626c69632e626c6173746020820152656170692e696f60d01b604082015260600190565b602081526000611c6c60208301611c1b565b92915050565b600060208284031215611c8457600080fd5b5051919050565b604081526000611c9d60408301611c1b565b905082602083015292915050565b60208082526047908201527f4661696c656420746f207265736f6c766520656e762076617220605250435f4d60408201527f41494e4e4554603a20656e7669726f6e6d656e74207661726961626c65206e6f6060820152661d08199bdd5b9960ca1b608082015260a00190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d5157611d51611d18565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8057611d80611d18565b604052919050565b600082601f830112611d9957600080fd5b815167ffffffffffffffff811115611db357611db3611d18565b611dc6601f8201601f1916602001611d57565b818152846020838601011115611ddb57600080fd5b611dec8260208301602087016119ea565b949350505050565b600060208284031215611e0657600080fd5b815167ffffffffffffffff811115611e1d57600080fd5b611dec84828501611d88565b60006020808385031215611e3c57600080fd5b825167ffffffffffffffff80821115611e5457600080fd5b818501915085601f830112611e6857600080fd5b815181811115611e7a57611e7a611d18565b611e88848260051b01611d57565b81815260059190911b83018401908481019088831115611ea757600080fd5b8585015b83811015611f3657805185811115611ec257600080fd5b8601603f81018b13611ed357600080fd5b611edb611d2e565b808c606084011115611eec57600080fd5b8983015b60608401811015611f2657805189811115611f0a57600080fd5b611f188f8d83880101611d88565b845250918a01918a01611ef0565b5085525050918601918601611eab565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f6d57607f821691505b602082108103611f8d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090611fcc8160048501602087016119ea565b919091016004019392505050565b60008251611fec8184602087016119ea565b9190910192915050565b60006020828403121561200857600080fd5b8151801515811461201857600080fd5b9392505050565b604081526000611c9d60408301600a8152690808080808081319599d60b21b602082015260400190565b604081526000611c9d60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061209d60408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611dec8185611a1a565b60408152600061209d60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f6f7074696d69736d2e616c6368656d796170692e696f2f76322f2e2e2eb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8a264697066735822122080535057fe7bb5794a4398b98cede5af08a9c31965b6c06545264c34a61040ca64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModForkTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506121748061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806389837aa6116100b8578063ba414fa61161007c578063ba414fa6146101f2578063bfb0378d1461020a578063c011418914610212578063e20c9f711461021a578063eabff92014610222578063fa7626d41461022a57600080fd5b806389837aa6146101ca578063916a17c6146101d2578063a822dbe3146101da578063b1aed322146101e2578063b5508aa9146101ea57600080fd5b80632ade3880116100ff5780632ade38801461017b5780633e5e3c23146101905780633f7286f41461019857806366d9a9a0146101a057806385226c81146101b557600080fd5b80629645451461013b57806310133ad4146101455780631c105cc51461014d5780631ed7831c146101555780632a2b70e314610173575b600080fd5b610143610237565b005b61014361031e565b6101436103a5565b61015d61048f565b60405161016a919061199d565b60405180910390f35b6101436104f1565b6101836106af565b60405161016a9190611a46565b61015d6107f1565b61015d610851565b6101a86108b1565b60405161016a9190611b06565b6101bd610997565b60405161016a9190611bb9565b610143610a67565b6101a8610ae7565b610143610bcd565b610143610cb6565b6101bd610fb2565b6101fa611082565b604051901515815260200161016a565b6101436111a3565b61014361132a565b61015d61149f565b6101436114ff565b6007546101fa9060ff1681565b604051630637469360e31b81526000906000805160206120da833981519152906331ba34989061026990600401611c5a565b6020604051808303816000875af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac9190611c72565b604051639ebf682760e01b8152600481018290529091506000805160206120da83398151915290639ebf682790602401600060405180830381600087803b1580156102f657600080fd5b505af115801561030a573d6000803e3d6000fd5b5050505061031b4362e84c2e6115b0565b50565b6040516371ee464d60e01b81526000805160206120da833981519152906371ee464d906103529062e84c2990600401611c8b565b6020604051808303816000875af1158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190611c72565b506103a34362e84c296116b5565b565b60405163f28dceb360e01b81526000805160206120da8339815191529063f28dceb3906103d490600401611cab565b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505060405163975a6ce960e01b81526020600482015260076024820152661b585a5b9b995d60ca1b60448201526000805160206120da833981519152925063975a6ce99150606401600060405180830381865afa158015610467573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031b9190810190611df4565b606060148054806020026020016040519081016040528092919081815260200182805480156104e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104c9575b5050505050905090565b60405163f28dceb360e01b81526000805160206120da8339815191529063f28dceb39061052090600401611cab565b600060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663a85a84186040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105dd9190810190611e29565b90506105eb815160026116b5565b60008160008151811061060057610600611f43565b6020026020010151905061064a8160006002811061062057610620611f43565b6020020151604051806040016040528060078152602001661b585a5b9b995d60ca1b815250611770565b60008260018151811061065f5761065f611f43565b602002602001015190506106aa8160006002811061067f5761067f611f43565b6020020151604051806040016040528060088152602001676f7074696d69736d60c01b815250611770565b505050565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156107e857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156107d157838290600052602060002001805461074490611f59565b80601f016020809104026020016040519081016040528092919081815260200182805461077090611f59565b80156107bd5780601f10610792576101008083540402835291602001916107bd565b820191906000526020600020905b8154815290600101906020018083116107a057829003601f168201915b505050505081526020019060010190610725565b5050505081525050815260200190600101906106d3565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156107e85760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561097f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109415790505b505050505081525050815260200190600101906108d5565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156107e85783829060005260206000200180546109da90611f59565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0690611f59565b8015610a535780601f10610a2857610100808354040283529160200191610a53565b820191906000526020600020905b815481529060010190602001808311610a3657829003601f168201915b5050505050815260200190600101906109bb565b60405163261a000d60e21b81526000805160206120da83398151915290639868003490610a9690600401611c5a565b6020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190611c72565b506103a34362e84c2e6115b0565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156107e85760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610bb557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610b775790505b50505050508152505081526020019060010190610b0b565b604051636ba3ba2b60e01b81526000906000805160206120da83398151915290636ba3ba2b90610c049062e84c2990600401611c8b565b6020604051808303816000875af1158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190611c72565b604051639ebf682760e01b8152600481018290529091506000805160206120da83398151915290639ebf682790602401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b5050505061031b4362e84c296116b5565b604051630637469360e31b81526000906000805160206120da833981519152906331ba349890610ce890600401611c5a565b6020604051808303816000875af1158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190611c72565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b60448201529091506000906000805160206120da833981519152906331ba3498906064016020604051808303816000875af1158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611c72565b9050808203610dd457610dd4611f93565b604051639ebf682760e01b8152600481018390526000805160206120da83398151915290639ebf682790602401600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b50505050610ec17f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316632f103f226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebb9190611c72565b836116b5565b604051639ebf682760e01b8152600481018290526000805160206120da83398151915290639ebf682790602401600060405180830381600087803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b50505050610fae7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316632f103f226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190611c72565b826116b5565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156107e8578382906000526020600020018054610ff590611f59565b80601f016020809104026020016040519081016040528092919081815260200182805461102190611f59565b801561106e5780601f106110435761010080835404028352916020019161106e565b820191906000526020600020905b81548152906001019060200180831161105157829003601f168201915b505050505081526020019060010190610fd6565b600754600090610100900460ff16156110a45750600754610100900460ff1690565b60006000805160206120da8339815191523b1561119e57604080516000805160206120da833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611126917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611fa9565b60408051601f198184030181529082905261114091611fda565b6000604051808303816000865af19150503d806000811461117d576040519150601f19603f3d011682016040523d82523d6000602084013e611182565b606091505b509150508080602001905181019061119a9190611ff6565b9150505b919050565b604051630637469360e31b815260206004820152602560248201527f68747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f604482015264432f72706360d81b60648201526000906000805160206120da833981519152906331ba3498906084016020604051808303816000875af115801561122d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112519190611c72565b6040516335d320e960e21b815260048101829052630110b11e60248201529091506000805160206120da8339815191529063d74c83a490604401600060405180830381600087803b1580156112a557600080fd5b505af11580156112b9573d6000803e3d6000fd5b5050604051639ebf682760e01b8152600481018490526000805160206120da8339815191529250639ebf68279150602401600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b5050505061031b43630110b11e6116b5565b604051630637469360e31b815260206004820152601260248201527168747470733a2f2f6273637270632e636f6d60701b60448201526000906000805160206120da833981519152906331ba3498906064016020604051808303816000875af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190611c72565b604051639ebf682760e01b8152600481018290529091506000805160206120da83398151915290639ebf682790602401600060405180830381600087803b15801561140957600080fd5b505af115801561141d573d6000803e3d6000fd5b5050505061142f4363012ff0556115b0565b60405163d9bbf3a160e01b815263012fefb960048201526000805160206120da8339815191529063d9bbf3a190602401600060405180830381600087803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b5050505061031b4363012fefb96116b5565b606060138054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b60405163975a6ce960e01b81526020600482015260086024820152676f7074696d69736d60c01b60448201526000906000805160206120da8339815191529063975a6ce990606401600060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261158c9190810190611df4565b905061031b816040518060600160405280602581526020016120fa60259139611770565b808211610fae577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516116209060208082526021908201527f4572726f723a2061203e2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b606082015260208101849052905160008051602061211f8339815191529181900360800190a1604080518181526009918101919091526810102b30b63ab2903160b91b60608201526020810182905260008051602061211f833981519152906080015b60405180910390a1610fae61189d565b808214610fae577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516117269060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160008051602061211f8339815191528260405161174b919061201f565b60405180910390a160008051602061211f833981519152816040516116a59190612049565b806040516020016117819190611fda565b60405160208183030381529060405280519060200120826040516020016117a89190611fda565b6040516020818303038152906040528051906020012014610fae577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161182f9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516118669190612073565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516116a591906120af565b6000805160206120da8339815191523b1561198c57604080516000805160206120da833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261192b9291602001611fa9565b60408051601f198184030181529082905261194591611fda565b6000604051808303816000865af19150503d8060008114611982576040519150601f19603f3d011682016040523d82523d6000602084013e611987565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156119de5783516001600160a01b0316835292840192918401916001016119b9565b50909695505050505050565b60005b83811015611a055781810151838201526020016119ed565b83811115611a14576000848401525b50505050565b60008151808452611a328160208601602086016119ea565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611af657603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611ae057605f19898503018352611ace848651611a1a565b948e01949350918d0191600101611ab2565b505050978a019794505091880191600101611a6d565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611baa57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611b955783516001600160e01b0319168252928b019260019290920191908b0190611b6b565b50978a01979550505091870191600101611b2e565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611c0e57603f19888603018452611bfc858351611a1a565b94509285019290850190600101611be0565b5092979650505050505050565b602681527f68747470733a2f2f6574682d6d61696e6e65742e7075626c69632e626c6173746020820152656170692e696f60d01b604082015260600190565b602081526000611c6c60208301611c1b565b92915050565b600060208284031215611c8457600080fd5b5051919050565b604081526000611c9d60408301611c1b565b905082602083015292915050565b60208082526047908201527f4661696c656420746f207265736f6c766520656e762076617220605250435f4d60408201527f41494e4e4554603a20656e7669726f6e6d656e74207661726961626c65206e6f6060820152661d08199bdd5b9960ca1b608082015260a00190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d5157611d51611d18565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8057611d80611d18565b604052919050565b600082601f830112611d9957600080fd5b815167ffffffffffffffff811115611db357611db3611d18565b611dc6601f8201601f1916602001611d57565b818152846020838601011115611ddb57600080fd5b611dec8260208301602087016119ea565b949350505050565b600060208284031215611e0657600080fd5b815167ffffffffffffffff811115611e1d57600080fd5b611dec84828501611d88565b60006020808385031215611e3c57600080fd5b825167ffffffffffffffff80821115611e5457600080fd5b818501915085601f830112611e6857600080fd5b815181811115611e7a57611e7a611d18565b611e88848260051b01611d57565b81815260059190911b83018401908481019088831115611ea757600080fd5b8585015b83811015611f3657805185811115611ec257600080fd5b8601603f81018b13611ed357600080fd5b611edb611d2e565b808c606084011115611eec57600080fd5b8983015b60608401811015611f2657805189811115611f0a57600080fd5b611f188f8d83880101611d88565b845250918a01918a01611ef0565b5085525050918601918601611eab565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f6d57607f821691505b602082108103611f8d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090611fcc8160048501602087016119ea565b919091016004019392505050565b60008251611fec8184602087016119ea565b9190910192915050565b60006020828403121561200857600080fd5b8151801515811461201857600080fd5b9392505050565b604081526000611c9d60408301600a8152690808080808081319599d60b21b602082015260400190565b604081526000611c9d60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061209d60408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611dec8185611a1a565b60408152600061209d60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f6f7074696d69736d2e616c6368656d796170692e696f2f76322f2e2e2eb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8a264697066735822122080535057fe7bb5794a4398b98cede5af08a9c31965b6c06545264c34a61040ca64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModForkTestField

    syntax S2KtestZModForkTestField ::= "stdstore" [symbol(), klabel(field_test%ForkTest_stdstore)]

    syntax S2KtestZModForkTestField ::= "IS_TEST" [symbol(), klabel(field_test%ForkTest_IS_TEST)]

    syntax S2KtestZModForkTestField ::= "_failed" [symbol(), klabel(field_test%ForkTest__failed)]

    syntax S2KtestZModForkTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ForkTest_stdChainsInitialized)]

    syntax S2KtestZModForkTestField ::= "chains" [symbol(), klabel(field_test%ForkTest_chains)]

    syntax S2KtestZModForkTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ForkTest_defaultRpcUrls)]

    syntax S2KtestZModForkTestField ::= "idToAlias" [symbol(), klabel(field_test%ForkTest_idToAlias)]

    syntax S2KtestZModForkTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ForkTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModForkTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ForkTest_gasMeteringOff)]

    syntax S2KtestZModForkTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ForkTest__excludedContracts)]

    syntax S2KtestZModForkTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ForkTest__excludedSenders)]

    syntax S2KtestZModForkTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ForkTest__targetedContracts)]

    syntax S2KtestZModForkTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ForkTest__targetedSenders)]

    syntax S2KtestZModForkTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ForkTest__excludedArtifacts)]

    syntax S2KtestZModForkTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ForkTest__targetedArtifacts)]

    syntax S2KtestZModForkTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ForkTest__targetedArtifactSelectors)]

    syntax S2KtestZModForkTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ForkTest__targetedSelectors)]

    syntax S2KtestZModForkTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ForkTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModForkTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModForkTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModForkTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModForkTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModForkTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModForkTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModForkTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModForkTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModForkTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModForkTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModForkTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModForkTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModForkTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModForkTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModForkTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModForkTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModForkTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModForkTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModForkTestContract "." S2KtestZModForkTestMethod [function(), symbol(), klabel(method_test%ForkTest)]

    syntax S2KtestZModForkTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KISZUndTEST_)]

    syntax S2KtestZModForkTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModForkTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KexcludeContracts_)]

    syntax S2KtestZModForkTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KexcludeSenders_)]

    syntax S2KtestZModForkTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ForkTest_S2Kfailed_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtargetArtifacts_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtargetContracts_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtargetInterfaces_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtargetSelectors_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtargetSenders_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestActiveFork" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestActiveFork_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestAllRPCUrl" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestAllRPCUrl_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateFork" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestCreateFork_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateForkBlock" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestCreateForkBlock_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateSelectFork" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestCreateSelectFork_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateSelectForkBlock" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestCreateSelectForkBlock_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestRPCUrl" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestRPCUrl_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestRPCUrlRevert" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestRPCUrlRevert_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestRollFork" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestRollFork_)]

    syntax S2KtestZModForkTestMethod ::= "S2KtestRollForkId" "(" ")" [symbol(), klabel(method_test%ForkTest_S2KtestRollForkId_)]

    rule  ( S2KtestZModForkTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestActiveFork ( ) => #abiCallData ( "testActiveFork" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestAllRPCUrl ( ) => #abiCallData ( "testAllRPCUrl" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestCreateFork ( ) => #abiCallData ( "testCreateFork" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestCreateForkBlock ( ) => #abiCallData ( "testCreateForkBlock" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestCreateSelectFork ( ) => #abiCallData ( "testCreateSelectFork" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestCreateSelectForkBlock ( ) => #abiCallData ( "testCreateSelectForkBlock" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestRPCUrl ( ) => #abiCallData ( "testRPCUrl" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestRPCUrlRevert ( ) => #abiCallData ( "testRPCUrlRevert" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestRollFork ( ) => #abiCallData ( "testRollFork" , .TypedArgs ) )


    rule  ( S2KtestZModForkTest . S2KtestRollForkId ( ) => #abiCallData ( "testRollForkId" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testActiveFork()" ) => 2981024546 )


    rule  ( selector ( "testAllRPCUrl()" ) => 707490019 )


    rule  ( selector ( "testCreateFork()" ) => 9848133 )


    rule  ( selector ( "testCreateForkBlock()" ) => 2820856803 )


    rule  ( selector ( "testCreateSelectFork()" ) => 2307095206 )


    rule  ( selector ( "testCreateSelectForkBlock()" ) => 269695700 )


    rule  ( selector ( "testRPCUrl()" ) => 3938449696 )


    rule  ( selector ( "testRPCUrlRevert()" ) => 470834373 )


    rule  ( selector ( "testRollFork()" ) => 3222356361 )


    rule  ( selector ( "testRollForkId()" ) => 3215996813 )


endmodule

module S2KtestZModFreshBytesTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModFreshBytesTestContract

    syntax S2KtestZModFreshBytesTestContract ::= "S2KtestZModFreshBytesTest" [symbol(), klabel(contract_test%FreshBytesTest)]

    rule  ( #binRuntime ( S2KtestZModFreshBytesTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806366d9a9a0116100a2578063b5508aa911610071578063b5508aa9146101c5578063ba414fa6146101cd578063d6a2ec76146101e5578063e20c9f7114610224578063fa7626d41461022c57600080fd5b806366d9a9a014610180578063701866141461019557806385226c81146101a8578063916a17c6146101bd57600080fd5b806353e0ea5c116100de57806353e0ea5c1461015357806356d5b02f1461015d5780635794f5921461017057806361a7c8bb1461017857600080fd5b80631ed7831c146101105780632ade38801461012e5780633e5e3c23146101435780633f7286f41461014b575b600080fd5b610118610239565b604051610125919061172b565b60405180910390f35b61013661029b565b60405161012591906117d4565b6101186103dd565b61011861043d565b61015b61049d565b005b61015b61016b366004611903565b6106f7565b61015b61073b565b61015b610a26565b610188610c14565b6040516101259190611983565b61015b6101a3366004611a36565b610cfa565b6101b0610e3c565b6040516101259190611a4f565b610188610f0c565b6101b0610ff2565b6101d56110c2565b6040519015158152602001610125565b61020c7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610125565b6101186111e3565b6007546101d59060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561029157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610273575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103d457600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103bd57838290600052602060002001805461033090611ab1565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90611ab1565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b505050505081526020019060010190610311565b5050505081525050815260200190600101906102bf565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610291576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610273575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610291576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610273575050505050905090565b604051630951275960e21b815260016004820152600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af11580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190611aeb565b604051632631f2b160e11b81528115156004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b1580156105b957600080fd5b505afa1580156105cd573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106489190810190611b04565b805190915061065e90601d906020840190611692565b506106f381601d805461067090611ab1565b80601f016020809104026020016040519081016040528092919081815260200182805461069c90611ab1565b80156106e95780601f106106be576101008083540402835291602001916106e9565b820191906000526020600020905b8154815290600101906020018083116106cc57829003601f168201915b5050505050611243565b5050565b6000600282516107079190611b7b565b9050605560f91b82828151811061072057610720611b9d565b60200101906001600160f81b031916908160001a9053505050565b604051630951275960e21b815260016004820152600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af115801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190611aeb565b604051632631f2b160e11b81528115156004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b15801561085757600080fd5b505afa15801561086b573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af11580156108be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e69190810190611b04565b604051630951275960e21b815260016004820152909150600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611aeb565b604051632631f2b160e11b81528482106004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050508181815181106109cf576109cf611b9d565b0160200151601c805460ff191660f89290921c9190911790558151610a2190839083908110610a0057610a00611b9d565b0160200151601c546001600160f81b03199182169160f89190911b1661124d565b505050565b604051630951275960e21b815260016004820152600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a999190611aeb565b604051632631f2b160e11b81528115156004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd19190810190611b04565b9050610bdc816106f7565b6106f3605560f91b82610bf0600286611b7b565b81518110610c0057610c00611b9d565b01602001516001600160f81b03191661124d565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103d45760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610ce257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ca45790505b50505050508152505081526020019060010190610c38565b604051632631f2b160e11b81528115156004820152600080516020611d2183398151915290634c63e5629060240160006040518083038186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b158015610da057600080fd5b505afa158015610db4573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af1158015610e07573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2f9190810190611b04565b90506106f381518361133f565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103d4578382906000526020600020018054610e7f90611ab1565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90611ab1565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b505050505081526020019060010190610e60565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103d45760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610fda57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610f9c5790505b50505050508152505081526020019060010190610f30565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103d457838290600052602060002001805461103590611ab1565b80601f016020809104026020016040519081016040528092919081815260200182805461106190611ab1565b80156110ae5780601f10611083576101008083540402835291602001916110ae565b820191906000526020600020905b81548152906001019060200180831161109157829003601f168201915b505050505081526020019060010190611016565b600754600090610100900460ff16156110e45750600754610100900460ff1690565b6000600080516020611d218339815191523b156111de5760408051600080516020611d21833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611166917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611bb3565b60408051601f198184030181529082905261118091611be4565b6000604051808303816000865af19150503d80600081146111bd576040519150601f19603f3d011682016040523d82523d6000602084013e6111c2565b606091505b50915050808060200190518101906111da9190611c00565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610291576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610273575050505050905090565b6106f3828261141e565b8082146106f3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112c19060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99826040516112f89190611c29565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998160405161132f9190611c61565b60405180910390a16106f3611505565b8082146106f3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516113b09060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516113e79190611c29565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405161132f9190611c61565b6114288282611605565b6106f3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516114979060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516114ce9190611c8b565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188160405161132f9190611ccf565b600080516020611d218339815191523b156115f45760408051600080516020611d21833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526115939291602001611bb3565b60408051601f19818403018152908290526115ad91611be4565b6000604051808303816000865af19150503d80600081146115ea576040519150601f19603f3d011682016040523d82523d6000602084013e6115ef565b606091505b505050505b6007805461ff001916610100179055565b8051825160019190036116885760005b83518110156116825782818151811061163057611630611b9d565b602001015160f81c60f81b6001600160f81b03191684828151811061165757611657611b9d565b01602001516001600160f81b0319161461167057600091505b8061167a81611cf9565b915050611615565b5061168c565b5060005b92915050565b82805461169e90611ab1565b90600052602060002090601f0160209004810192826116c05760008555611706565b82601f106116d957805160ff1916838001178555611706565b82800160010185558215611706579182015b828111156117065782518255916020019190600101906116eb565b50611712929150611716565b5090565b5b808211156117125760008155600101611717565b6020808252825182820181905260009190848201906040850190845b8181101561176c5783516001600160a01b031683529284019291840191600101611747565b50909695505050505050565b60005b8381101561179357818101518382015260200161177b565b838111156117a2576000848401525b50505050565b600081518084526117c0816020860160208601611778565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561188457603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561186e57605f1989850301835261185c8486516117a8565b948e01949350918d0191600101611840565b505050978a0197945050918801916001016117fb565b50919a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118d3576118d3611894565b604052919050565b600067ffffffffffffffff8211156118f5576118f5611894565b50601f01601f191660200190565b60006020828403121561191557600080fd5b813567ffffffffffffffff81111561192c57600080fd5b8201601f8101841361193d57600080fd5b803561195061194b826118db565b6118aa565b81815285602083850101111561196557600080fd5b81602084016020830137600091810160200191909152949350505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611a2757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611a125783516001600160e01b0319168252928b019260019290920191908b01906119e8565b50978a019795505050918701916001016119ab565b50919998505050505050505050565b600060208284031215611a4857600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611aa457603f19888603018452611a928583516117a8565b94509285019290850190600101611a76565b5092979650505050505050565b600181811c90821680611ac557607f821691505b602082108103611ae557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611afd57600080fd5b5051919050565b600060208284031215611b1657600080fd5b815167ffffffffffffffff811115611b2d57600080fd5b8201601f81018413611b3e57600080fd5b8051611b4c61194b826118db565b818152856020838501011115611b6157600080fd5b611b72826020830160208601611778565b95945050505050565b600082611b9857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319831681528151600090611bd6816004850160208701611778565b919091016004019392505050565b60008251611bf6818460208701611778565b9190910192915050565b600060208284031215611c1257600080fd5b81518015158114611c2257600080fd5b9392505050565b604081526000611c5360408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611c5360408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611cb560408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611cc781856117a8565b949350505050565b604081526000611cb560408301600a8152690808080808149a59da1d60b21b602082015260400190565b600060018201611d1957634e487b7160e01b600052601160045260246000fd5b506001019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220ee840658f13031bbc734492b34abd2c7ade3f2e9252dc6e656be1b3f9bc0c39664736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModFreshBytesTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611d768061003d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806366d9a9a0116100a2578063b5508aa911610071578063b5508aa9146101c5578063ba414fa6146101cd578063d6a2ec76146101e5578063e20c9f7114610224578063fa7626d41461022c57600080fd5b806366d9a9a014610180578063701866141461019557806385226c81146101a8578063916a17c6146101bd57600080fd5b806353e0ea5c116100de57806353e0ea5c1461015357806356d5b02f1461015d5780635794f5921461017057806361a7c8bb1461017857600080fd5b80631ed7831c146101105780632ade38801461012e5780633e5e3c23146101435780633f7286f41461014b575b600080fd5b610118610239565b604051610125919061172b565b60405180910390f35b61013661029b565b60405161012591906117d4565b6101186103dd565b61011861043d565b61015b61049d565b005b61015b61016b366004611903565b6106f7565b61015b61073b565b61015b610a26565b610188610c14565b6040516101259190611983565b61015b6101a3366004611a36565b610cfa565b6101b0610e3c565b6040516101259190611a4f565b610188610f0c565b6101b0610ff2565b6101d56110c2565b6040519015158152602001610125565b61020c7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610125565b6101186111e3565b6007546101d59060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561029157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610273575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103d457600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103bd57838290600052602060002001805461033090611ab1565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90611ab1565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b505050505081526020019060010190610311565b5050505081525050815260200190600101906102bf565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610291576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610273575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610291576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610273575050505050905090565b604051630951275960e21b815260016004820152600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af11580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190611aeb565b604051632631f2b160e11b81528115156004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b1580156105b957600080fd5b505afa1580156105cd573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106489190810190611b04565b805190915061065e90601d906020840190611692565b506106f381601d805461067090611ab1565b80601f016020809104026020016040519081016040528092919081815260200182805461069c90611ab1565b80156106e95780601f106106be576101008083540402835291602001916106e9565b820191906000526020600020905b8154815290600101906020018083116106cc57829003601f168201915b5050505050611243565b5050565b6000600282516107079190611b7b565b9050605560f91b82828151811061072057610720611b9d565b60200101906001600160f81b031916908160001a9053505050565b604051630951275960e21b815260016004820152600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af115801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190611aeb565b604051632631f2b160e11b81528115156004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b15801561085757600080fd5b505afa15801561086b573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af11580156108be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e69190810190611b04565b604051630951275960e21b815260016004820152909150600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611aeb565b604051632631f2b160e11b81528482106004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050508181815181106109cf576109cf611b9d565b0160200151601c805460ff191660f89290921c9190911790558151610a2190839083908110610a0057610a00611b9d565b0160200151601c546001600160f81b03199182169160f89190911b1661124d565b505050565b604051630951275960e21b815260016004820152600090600080516020611d21833981519152906325449d64906024016020604051808303816000875af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a999190611aeb565b604051632631f2b160e11b81528115156004820152909150600080516020611d2183398151915290634c63e5629060240160006040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd19190810190611b04565b9050610bdc816106f7565b6106f3605560f91b82610bf0600286611b7b565b81518110610c0057610c00611b9d565b01602001516001600160f81b03191661124d565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103d45760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610ce257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ca45790505b50505050508152505081526020019060010190610c38565b604051632631f2b160e11b81528115156004820152600080516020611d2183398151915290634c63e5629060240160006040518083038186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b5050604051632631f2b160e11b815260488411156004820152600080516020611d218339815191529250634c63e562915060240160006040518083038186803b158015610da057600080fd5b505afa158015610db4573d6000803e3d6000fd5b50506040516352d098ef60e01b81526004810184905260009250600080516020611d2183398151915291506352d098ef906024016000604051808303816000875af1158015610e07573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2f9190810190611b04565b90506106f381518361133f565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103d4578382906000526020600020018054610e7f90611ab1565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90611ab1565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b505050505081526020019060010190610e60565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103d45760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610fda57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610f9c5790505b50505050508152505081526020019060010190610f30565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103d457838290600052602060002001805461103590611ab1565b80601f016020809104026020016040519081016040528092919081815260200182805461106190611ab1565b80156110ae5780601f10611083576101008083540402835291602001916110ae565b820191906000526020600020905b81548152906001019060200180831161109157829003601f168201915b505050505081526020019060010190611016565b600754600090610100900460ff16156110e45750600754610100900460ff1690565b6000600080516020611d218339815191523b156111de5760408051600080516020611d21833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611166917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611bb3565b60408051601f198184030181529082905261118091611be4565b6000604051808303816000865af19150503d80600081146111bd576040519150601f19603f3d011682016040523d82523d6000602084013e6111c2565b606091505b50915050808060200190518101906111da9190611c00565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610291576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610273575050505050905090565b6106f3828261141e565b8082146106f3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112c19060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99826040516112f89190611c29565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998160405161132f9190611c61565b60405180910390a16106f3611505565b8082146106f3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516113b09060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516113e79190611c29565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405161132f9190611c61565b6114288282611605565b6106f3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516114979060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516114ce9190611c8b565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188160405161132f9190611ccf565b600080516020611d218339815191523b156115f45760408051600080516020611d21833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526115939291602001611bb3565b60408051601f19818403018152908290526115ad91611be4565b6000604051808303816000865af19150503d80600081146115ea576040519150601f19603f3d011682016040523d82523d6000602084013e6115ef565b606091505b505050505b6007805461ff001916610100179055565b8051825160019190036116885760005b83518110156116825782818151811061163057611630611b9d565b602001015160f81c60f81b6001600160f81b03191684828151811061165757611657611b9d565b01602001516001600160f81b0319161461167057600091505b8061167a81611cf9565b915050611615565b5061168c565b5060005b92915050565b82805461169e90611ab1565b90600052602060002090601f0160209004810192826116c05760008555611706565b82601f106116d957805160ff1916838001178555611706565b82800160010185558215611706579182015b828111156117065782518255916020019190600101906116eb565b50611712929150611716565b5090565b5b808211156117125760008155600101611717565b6020808252825182820181905260009190848201906040850190845b8181101561176c5783516001600160a01b031683529284019291840191600101611747565b50909695505050505050565b60005b8381101561179357818101518382015260200161177b565b838111156117a2576000848401525b50505050565b600081518084526117c0816020860160208601611778565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561188457603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561186e57605f1989850301835261185c8486516117a8565b948e01949350918d0191600101611840565b505050978a0197945050918801916001016117fb565b50919a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118d3576118d3611894565b604052919050565b600067ffffffffffffffff8211156118f5576118f5611894565b50601f01601f191660200190565b60006020828403121561191557600080fd5b813567ffffffffffffffff81111561192c57600080fd5b8201601f8101841361193d57600080fd5b803561195061194b826118db565b6118aa565b81815285602083850101111561196557600080fd5b81602084016020830137600091810160200191909152949350505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611a2757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611a125783516001600160e01b0319168252928b019260019290920191908b01906119e8565b50978a019795505050918701916001016119ab565b50919998505050505050505050565b600060208284031215611a4857600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611aa457603f19888603018452611a928583516117a8565b94509285019290850190600101611a76565b5092979650505050505050565b600181811c90821680611ac557607f821691505b602082108103611ae557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611afd57600080fd5b5051919050565b600060208284031215611b1657600080fd5b815167ffffffffffffffff811115611b2d57600080fd5b8201601f81018413611b3e57600080fd5b8051611b4c61194b826118db565b818152856020838501011115611b6157600080fd5b611b72826020830160208601611778565b95945050505050565b600082611b9857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319831681528151600090611bd6816004850160208701611778565b919091016004019392505050565b60008251611bf6818460208701611778565b9190910192915050565b600060208284031215611c1257600080fd5b81518015158114611c2257600080fd5b9392505050565b604081526000611c5360408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611c5360408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611cb560408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611cc781856117a8565b949350505050565b604081526000611cb560408301600a8152690808080808149a59da1d60b21b602082015260400190565b600060018201611d1957634e487b7160e01b600052601160045260246000fd5b506001019056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220ee840658f13031bbc734492b34abd2c7ade3f2e9252dc6e656be1b3f9bc0c39664736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModFreshBytesTestField

    syntax S2KtestZModFreshBytesTestField ::= "stdstore" [symbol(), klabel(field_test%FreshBytesTest_stdstore)]

    syntax S2KtestZModFreshBytesTestField ::= "IS_TEST" [symbol(), klabel(field_test%FreshBytesTest_IS_TEST)]

    syntax S2KtestZModFreshBytesTestField ::= "_failed" [symbol(), klabel(field_test%FreshBytesTest__failed)]

    syntax S2KtestZModFreshBytesTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%FreshBytesTest_stdChainsInitialized)]

    syntax S2KtestZModFreshBytesTestField ::= "chains" [symbol(), klabel(field_test%FreshBytesTest_chains)]

    syntax S2KtestZModFreshBytesTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%FreshBytesTest_defaultRpcUrls)]

    syntax S2KtestZModFreshBytesTestField ::= "idToAlias" [symbol(), klabel(field_test%FreshBytesTest_idToAlias)]

    syntax S2KtestZModFreshBytesTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%FreshBytesTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModFreshBytesTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%FreshBytesTest_gasMeteringOff)]

    syntax S2KtestZModFreshBytesTestField ::= "_excludedContracts" [symbol(), klabel(field_test%FreshBytesTest__excludedContracts)]

    syntax S2KtestZModFreshBytesTestField ::= "_excludedSenders" [symbol(), klabel(field_test%FreshBytesTest__excludedSenders)]

    syntax S2KtestZModFreshBytesTestField ::= "_targetedContracts" [symbol(), klabel(field_test%FreshBytesTest__targetedContracts)]

    syntax S2KtestZModFreshBytesTestField ::= "_targetedSenders" [symbol(), klabel(field_test%FreshBytesTest__targetedSenders)]

    syntax S2KtestZModFreshBytesTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%FreshBytesTest__excludedArtifacts)]

    syntax S2KtestZModFreshBytesTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%FreshBytesTest__targetedArtifacts)]

    syntax S2KtestZModFreshBytesTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%FreshBytesTest__targetedArtifactSelectors)]

    syntax S2KtestZModFreshBytesTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%FreshBytesTest__targetedSelectors)]

    syntax S2KtestZModFreshBytesTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%FreshBytesTest__targetedInterfaces)]

    syntax S2KtestZModFreshBytesTestField ::= "local_byte" [symbol(), klabel(field_test%FreshBytesTest_local_byte)]

    syntax S2KtestZModFreshBytesTestField ::= "local_bytes" [symbol(), klabel(field_test%FreshBytesTest_local_bytes)]

    rule  ( #loc ( S2KtestZModFreshBytesTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . local_byte ) => 28 )


    rule  ( #loc ( S2KtestZModFreshBytesTest . local_bytes ) => 29 )


    syntax Bytes ::= S2KtestZModFreshBytesTestContract "." S2KtestZModFreshBytesTestMethod [function(), symbol(), klabel(method_test%FreshBytesTest)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KISZUndTEST_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KexcludeContracts_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KexcludeSenders_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2Kfailed_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2Kkevm_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KmanipZUndsymbolicZUndbytes" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KmanipZUndsymbolicZUndbytes_bytes)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtargetArtifacts_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtargetContracts_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtargetInterfaces_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtargetSelectors_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtargetSenders_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUnd1" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUnd1_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUnd2" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUnd2_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUnd3" "(" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUnd3_)]

    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUndlength" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUndlength_uint256)]

    rule  ( S2KtestZModFreshBytesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KmanipZUndsymbolicZUndbytes ( V0_b : bytes ) => #abiCallData ( "manip_symbolic_bytes" , #bytes ( V0_b ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_b ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUnd1 ( ) => #abiCallData ( "test_symbolic_bytes_1" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUnd2 ( ) => #abiCallData ( "test_symbolic_bytes_2" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUnd3 ( ) => #abiCallData ( "test_symbolic_bytes_3" , .TypedArgs ) )


    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUndlength ( V0_l : uint256 ) => #abiCallData ( "test_symbolic_bytes_length" , #uint256 ( V0_l ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_l )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "manip_symbolic_bytes(bytes)" ) => 1456844847 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_symbolic_bytes_1()" ) => 1469379986 )


    rule  ( selector ( "test_symbolic_bytes_2()" ) => 1407248988 )


    rule  ( selector ( "test_symbolic_bytes_3()" ) => 1638385851 )


    rule  ( selector ( "test_symbolic_bytes_length(uint256)" ) => 1880647188 )


endmodule

module S2KtestZModFreshIntTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModFreshIntTestContract

    syntax S2KtestZModFreshIntTestContract ::= "S2KtestZModFreshIntTest" [symbol(), klabel(contract_test%FreshIntTest)]

    rule  ( #binRuntime ( S2KtestZModFreshIntTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063916a17c611610097578063c8e6026a11610066578063c8e6026a146101b4578063d6a2ec76146101bc578063e20c9f71146101fb578063fa7626d41461020357600080fd5b8063916a17c614610184578063b3b3134a1461018c578063b5508aa914610194578063ba414fa61461019c57600080fd5b806347d80146116100d357806347d801461461014857806366d9a9a01461015257806373b8fc311461016757806385226c811461016f57600080fd5b80631ed7831c146101055780632ade3880146101235780633e5e3c23146101385780633f7286f414610140575b600080fd5b61010d610210565b60405161011a9190610fbc565b60405180910390f35b61012b610272565b60405161011a9190611039565b61010d6103b4565b61010d610414565b610150610474565b005b61015a610518565b60405161011a9190611114565b6101506105fe565b61017761069e565b60405161011a91906111c7565b61015a61076e565b610150610854565b610177610903565b6101a46109d3565b604051901515815260200161011a565b610150610b00565b6101e37f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161011a565b61010d610b90565b6007546101a49060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561026857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161024a575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103ab57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561039457838290600052602060002001805461030790611234565b80601f016020809104026020016040519081016040528092919081815260200182805461033390611234565b80156103805780601f1061035557610100808354040283529160200191610380565b820191906000526020600020905b81548152906001019060200180831161036357829003601f168201915b5050505050815260200190600101906102e8565b505050508152505081526020019060010190610296565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610268576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024a575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610268576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024a575050505050905090565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663aefb89696040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd919061126e565b905061050a816000610bf0565b610515816001610cd2565b50565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103ab5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105e657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105a85790505b5050505050815250508152602001906001019061053c565b604051630951275960e21b815260206004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906325449d64906024016020604051808303816000875af1158015610653573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610677919061126e565b9050610684816000610bf0565b610515816fffffffffffffffffffffffffffffffff610cd2565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103ab5783829060005260206000200180546106e190611234565b80601f016020809104026020016040519081016040528092919081815260200182805461070d90611234565b801561075a5780601f1061072f5761010080835404028352916020019161075a565b820191906000526020600020905b81548152906001019060200180831161073d57829003601f168201915b5050505050815260200190600101906106c2565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103ab5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561083c57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107fe5790505b50505050508152505081526020019060010190610792565b604051630951275960e21b815260106004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906325449d64906024016020604051808303816000875af11580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd919061126e565b90506108ee600f82900b6f7fffffffffffffffffffffffffffffff19610d32565b610515600f82900b60016001607f1b03610dff565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103ab57838290600052602060002001805461094690611234565b80601f016020809104026020016040519081016040528092919081815260200182805461097290611234565b80156109bf5780601f10610994576101008083540402835291602001916109bf565b820191906000526020600020905b8154815290600101906020018083116109a257829003601f168201915b505050505081526020019060010190610927565b600754600090610100900460ff16156109f55750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610afb5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a83917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611287565b60408051601f1981840301815290829052610a9d916112b8565b6000604051808303816000865af19150503d8060008114610ada576040519150601f19603f3d011682016040523d82523d6000602084013e610adf565b606091505b5091505080806020019051810190610af791906112d4565b9150505b919050565b604051630951275960e21b815260106004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906325449d64906024016020604051808303816000875af1158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b79919061126e565b9050610515600f82900b60016001607f1b03610e5e565b60606013805480602002602001604051908101604052809291908181526020018280548015610268576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161024a575050505050905090565b80821015610cce5760008051602061135e833981519152604051610c509060208082526022908201527f4572726f723a2061203e3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610c8791906112fd565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610cbe9190611334565b60405180910390a1610cce610eb0565b5050565b80821115610cce5760008051602061135e833981519152604051610c509060208082526022908201527f4572726f723a2061203c3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b80821215610cce5760008051602061135e833981519152604051610d919060208082526021908201527f4572726f723a2061203e3d2062206e6f7420736174697366696564205b696e746040820152605d60f81b606082015260800190565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16882604051610dc891906112fd565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16881604051610cbe9190611334565b80821315610cce5760008051602061135e833981519152604051610d919060208082526021908201527f4572726f723a2061203c3d2062206e6f7420736174697366696564205b696e746040820152605d60f81b606082015260800190565b808213610cce5760008051602061135e833981519152604051610d91906020808252818101527f4572726f723a2061203e2062206e6f7420736174697366696564205b696e745d604082015260600190565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610fab5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610f4a9291602001611287565b60408051601f1981840301815290829052610f64916112b8565b6000604051808303816000865af19150503d8060008114610fa1576040519150601f19603f3d011682016040523d82523d6000602084013e610fa6565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610ffd5783516001600160a01b031683529284019291840191600101610fd8565b50909695505050505050565b60005b8381101561102457818101518382015260200161100c565b83811115611033576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561110757603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156110f057898403605f19018352845180518086526110d1818e88018f8501611009565b958c0195601f01601f1916949094018b019350918a01916001016110aa565b509197505050938601935090850190600101611060565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156111b857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156111a35783516001600160e01b0319168252928b019260019290920191908b0190611179565b50978a0197955050509187019160010161113c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561110757878503603f1901845281518051808752611215818989018a8501611009565b601f01601f1916959095018601945092850192908501906001016111ee565b600181811c9082168061124857607f821691505b60208210810361126857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561128057600080fd5b5051919050565b6001600160e01b03198316815281516000906112aa816004850160208701611009565b919091016004019392505050565b600082516112ca818460208701611009565b9190910192915050565b6000602082840312156112e657600080fd5b815180151581146112f657600080fd5b9392505050565b604081526000611326604083016009815268202056616c7565206160b81b602082015260400190565b905082602083015292915050565b60408152600061132660408301600981526810102b30b63ab2903160b91b60208201526040019056fe41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50a2646970667358221220f3cc566d1334ba0ddfd0cc2db3c7aa1388791850c7257e8a90843af35b5e728864736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModFreshIntTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModFreshIntTestField

    syntax S2KtestZModFreshIntTestField ::= "stdstore" [symbol(), klabel(field_test%FreshIntTest_stdstore)]

    syntax S2KtestZModFreshIntTestField ::= "IS_TEST" [symbol(), klabel(field_test%FreshIntTest_IS_TEST)]

    syntax S2KtestZModFreshIntTestField ::= "_failed" [symbol(), klabel(field_test%FreshIntTest__failed)]

    syntax S2KtestZModFreshIntTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%FreshIntTest_stdChainsInitialized)]

    syntax S2KtestZModFreshIntTestField ::= "chains" [symbol(), klabel(field_test%FreshIntTest_chains)]

    syntax S2KtestZModFreshIntTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%FreshIntTest_defaultRpcUrls)]

    syntax S2KtestZModFreshIntTestField ::= "idToAlias" [symbol(), klabel(field_test%FreshIntTest_idToAlias)]

    syntax S2KtestZModFreshIntTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%FreshIntTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModFreshIntTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%FreshIntTest_gasMeteringOff)]

    syntax S2KtestZModFreshIntTestField ::= "_excludedContracts" [symbol(), klabel(field_test%FreshIntTest__excludedContracts)]

    syntax S2KtestZModFreshIntTestField ::= "_excludedSenders" [symbol(), klabel(field_test%FreshIntTest__excludedSenders)]

    syntax S2KtestZModFreshIntTestField ::= "_targetedContracts" [symbol(), klabel(field_test%FreshIntTest__targetedContracts)]

    syntax S2KtestZModFreshIntTestField ::= "_targetedSenders" [symbol(), klabel(field_test%FreshIntTest__targetedSenders)]

    syntax S2KtestZModFreshIntTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%FreshIntTest__excludedArtifacts)]

    syntax S2KtestZModFreshIntTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%FreshIntTest__targetedArtifacts)]

    syntax S2KtestZModFreshIntTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%FreshIntTest__targetedArtifactSelectors)]

    syntax S2KtestZModFreshIntTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%FreshIntTest__targetedSelectors)]

    syntax S2KtestZModFreshIntTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%FreshIntTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModFreshIntTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModFreshIntTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModFreshIntTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModFreshIntTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModFreshIntTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModFreshIntTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModFreshIntTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModFreshIntTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModFreshIntTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModFreshIntTestContract "." S2KtestZModFreshIntTestMethod [function(), symbol(), klabel(method_test%FreshIntTest)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KISZUndTEST_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KexcludeContracts_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KexcludeSenders_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2Kfailed_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2Kkevm_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtargetArtifacts_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtargetContracts_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtargetInterfaces_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtargetSelectors_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtargetSenders_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtestFailZUndint128" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtestFailZUndint128_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtestZUndbool" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtestZUndbool_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtestZUndint128" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtestZUndint128_)]

    syntax S2KtestZModFreshIntTestMethod ::= "S2KtestZUnduint128" "(" ")" [symbol(), klabel(method_test%FreshIntTest_S2KtestZUnduint128_)]

    rule  ( S2KtestZModFreshIntTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtestFailZUndint128 ( ) => #abiCallData ( "testFail_int128" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtestZUndbool ( ) => #abiCallData ( "test_bool" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtestZUndint128 ( ) => #abiCallData ( "test_int128" , .TypedArgs ) )


    rule  ( S2KtestZModFreshIntTest . S2KtestZUnduint128 ( ) => #abiCallData ( "test_uint128" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_int128()" ) => 3370517098 )


    rule  ( selector ( "test_bool()" ) => 1205338438 )


    rule  ( selector ( "test_int128()" ) => 3014857546 )


    rule  ( selector ( "test_uint128()" ) => 1941503025 )


endmodule

module S2KtestZModGasTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModGasTestContract

    syntax S2KtestZModGasTestContract ::= "S2KtestZModGasTest" [symbol(), klabel(contract_test%GasTest)]

    rule  ( #binRuntime ( S2KtestZModGasTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063898c61331161008c578063ba414fa611610066578063ba414fa61461017e578063d6a2ec7614610196578063e20c9f71146101d5578063fa7626d4146101dd57600080fd5b8063898c613314610166578063916a17c61461016e578063b5508aa91461017657600080fd5b80633f7286f4116100c85780633f7286f41461012a57806363fec3361461013257806366d9a9a01461013c57806385226c811461015157600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101ea565b6040516101049190610a0f565b60405180910390f35b61011561024c565b6040516101049190610a8c565b6100f761038e565b6100f76103ee565b61013a61044e565b005b610144610493565b6040516101049190610b67565b610159610579565b6040516101049190610c1a565b61013a610649565b6101446106cc565b6101596107b2565b610186610882565b6040519015158152602001610104565b6101bd7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610104565b6100f76109af565b6007546101869060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561024257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610224575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038557600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561036e5783829060005260206000200180546102e190610c87565b80601f016020809104026020016040519081016040528092919081815260200182805461030d90610c87565b801561035a5780601f1061032f5761010080835404028352916020019161035a565b820191906000526020600020905b81548152906001019060200180831161033d57829003601f168201915b5050505050815260200190600101906102c2565b505050508152505081526020019060010190610270565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610242576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610224575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610242576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610224575050505050905090565b60005a90506101596103a060006104658383610cc1565b905060005a90508085111561047c5761047c610ce6565b8481111561048c5761048c610ce6565b5050505050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103855760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561056157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105235790505b505050505081525050815260200190600101906104b7565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103855783829060005260206000200180546105bc90610c87565b80601f01602080910402602001604051908101604052809291908181526020018280546105e890610c87565b80156106355780601f1061060a57610100808354040283529160200191610635565b820191906000526020600020905b81548152906001019060200180831161061857829003601f168201915b50505050508152602001906001019061059d565b604051636ea8fd5160e11b81526180e86004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063dd51faa290602401600060405180830381600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b5050505060005a905060005a90508082116106c8576106c8610ce6565b5050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103855760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561079a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161075c5790505b505050505081525050815260200190600101906106f0565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103855783829060005260206000200180546107f590610c87565b80601f016020809104026020016040519081016040528092919081815260200182805461082190610c87565b801561086e5780601f106108435761010080835404028352916020019161086e565b820191906000526020600020905b81548152906001019060200180831161085157829003601f168201915b5050505050815260200190600101906107d6565b600754600090610100900460ff16156108a45750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109aa5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610932917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610cfc565b60408051601f198184030181529082905261094c91610d2d565b6000604051808303816000865af19150503d8060008114610989576040519150601f19603f3d011682016040523d82523d6000602084013e61098e565b606091505b50915050808060200190518101906109a69190610d49565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610242576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610224575050505050905090565b6020808252825182820181905260009190848201906040850190845b81811015610a505783516001600160a01b031683529284019291840191600101610a2b565b50909695505050505050565b60005b83811015610a77578181015183820152602001610a5f565b83811115610a86576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b5a57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610b4357898403605f1901835284518051808652610b24818e88018f8501610a5c565b958c0195601f01601f1916949094018b019350918a0191600101610afd565b509197505050938601935090850190600101610ab3565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c0b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610bf65783516001600160e01b0319168252928b019260019290920191908b0190610bcc565b50978a01979550505091870191600101610b8f565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b5a57878503603f1901845281518051808752610c68818989018a8501610a5c565b601f01601f191695909501860194509285019290850190600101610c41565b600181811c90821680610c9b57607f821691505b602082108103610cbb57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015610ce157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d1f816004850160208701610a5c565b919091016004019392505050565b60008251610d3f818460208701610a5c565b9190910192915050565b600060208284031215610d5b57600080fd5b81518015158114610d6b57600080fd5b939250505056fea26469706673582212200c0c29e6982eb692142c3fd6e2d48034cf43b7b827c165ee9563759d9b9bc90764736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModGasTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610da88061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063898c61331161008c578063ba414fa611610066578063ba414fa61461017e578063d6a2ec7614610196578063e20c9f71146101d5578063fa7626d4146101dd57600080fd5b8063898c613314610166578063916a17c61461016e578063b5508aa91461017657600080fd5b80633f7286f4116100c85780633f7286f41461012a57806363fec3361461013257806366d9a9a01461013c57806385226c811461015157600080fd5b80631ed7831c146100ef5780632ade38801461010d5780633e5e3c2314610122575b600080fd5b6100f76101ea565b6040516101049190610a0f565b60405180910390f35b61011561024c565b6040516101049190610a8c565b6100f761038e565b6100f76103ee565b61013a61044e565b005b610144610493565b6040516101049190610b67565b610159610579565b6040516101049190610c1a565b61013a610649565b6101446106cc565b6101596107b2565b610186610882565b6040519015158152602001610104565b6101bd7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610104565b6100f76109af565b6007546101869060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561024257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610224575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038557600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561036e5783829060005260206000200180546102e190610c87565b80601f016020809104026020016040519081016040528092919081815260200182805461030d90610c87565b801561035a5780601f1061032f5761010080835404028352916020019161035a565b820191906000526020600020905b81548152906001019060200180831161033d57829003601f168201915b5050505050815260200190600101906102c2565b505050508152505081526020019060010190610270565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610242576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610224575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610242576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610224575050505050905090565b60005a90506101596103a060006104658383610cc1565b905060005a90508085111561047c5761047c610ce6565b8481111561048c5761048c610ce6565b5050505050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103855760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561056157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105235790505b505050505081525050815260200190600101906104b7565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103855783829060005260206000200180546105bc90610c87565b80601f01602080910402602001604051908101604052809291908181526020018280546105e890610c87565b80156106355780601f1061060a57610100808354040283529160200191610635565b820191906000526020600020905b81548152906001019060200180831161061857829003601f168201915b50505050508152602001906001019061059d565b604051636ea8fd5160e11b81526180e86004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063dd51faa290602401600060405180830381600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b5050505060005a905060005a90508082116106c8576106c8610ce6565b5050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103855760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561079a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161075c5790505b505050505081525050815260200190600101906106f0565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103855783829060005260206000200180546107f590610c87565b80601f016020809104026020016040519081016040528092919081815260200182805461082190610c87565b801561086e5780601f106108435761010080835404028352916020019161086e565b820191906000526020600020905b81548152906001019060200180831161085157829003601f168201915b5050505050815260200190600101906107d6565b600754600090610100900460ff16156108a45750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109aa5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610932917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610cfc565b60408051601f198184030181529082905261094c91610d2d565b6000604051808303816000865af19150503d8060008114610989576040519150601f19603f3d011682016040523d82523d6000602084013e61098e565b606091505b50915050808060200190518101906109a69190610d49565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610242576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610224575050505050905090565b6020808252825182820181905260009190848201906040850190845b81811015610a505783516001600160a01b031683529284019291840191600101610a2b565b50909695505050505050565b60005b83811015610a77578181015183820152602001610a5f565b83811115610a86576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b5a57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610b4357898403605f1901835284518051808652610b24818e88018f8501610a5c565b958c0195601f01601f1916949094018b019350918a0191600101610afd565b509197505050938601935090850190600101610ab3565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c0b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610bf65783516001600160e01b0319168252928b019260019290920191908b0190610bcc565b50978a01979550505091870191600101610b8f565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b5a57878503603f1901845281518051808752610c68818989018a8501610a5c565b601f01601f191695909501860194509285019290850190600101610c41565b600181811c90821680610c9b57607f821691505b602082108103610cbb57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015610ce157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d1f816004850160208701610a5c565b919091016004019392505050565b60008251610d3f818460208701610a5c565b9190910192915050565b600060208284031215610d5b57600080fd5b81518015158114610d6b57600080fd5b939250505056fea26469706673582212200c0c29e6982eb692142c3fd6e2d48034cf43b7b827c165ee9563759d9b9bc90764736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModGasTestField

    syntax S2KtestZModGasTestField ::= "stdstore" [symbol(), klabel(field_test%GasTest_stdstore)]

    syntax S2KtestZModGasTestField ::= "IS_TEST" [symbol(), klabel(field_test%GasTest_IS_TEST)]

    syntax S2KtestZModGasTestField ::= "_failed" [symbol(), klabel(field_test%GasTest__failed)]

    syntax S2KtestZModGasTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%GasTest_stdChainsInitialized)]

    syntax S2KtestZModGasTestField ::= "chains" [symbol(), klabel(field_test%GasTest_chains)]

    syntax S2KtestZModGasTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%GasTest_defaultRpcUrls)]

    syntax S2KtestZModGasTestField ::= "idToAlias" [symbol(), klabel(field_test%GasTest_idToAlias)]

    syntax S2KtestZModGasTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%GasTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModGasTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%GasTest_gasMeteringOff)]

    syntax S2KtestZModGasTestField ::= "_excludedContracts" [symbol(), klabel(field_test%GasTest__excludedContracts)]

    syntax S2KtestZModGasTestField ::= "_excludedSenders" [symbol(), klabel(field_test%GasTest__excludedSenders)]

    syntax S2KtestZModGasTestField ::= "_targetedContracts" [symbol(), klabel(field_test%GasTest__targetedContracts)]

    syntax S2KtestZModGasTestField ::= "_targetedSenders" [symbol(), klabel(field_test%GasTest__targetedSenders)]

    syntax S2KtestZModGasTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%GasTest__excludedArtifacts)]

    syntax S2KtestZModGasTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%GasTest__targetedArtifacts)]

    syntax S2KtestZModGasTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%GasTest__targetedArtifactSelectors)]

    syntax S2KtestZModGasTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%GasTest__targetedSelectors)]

    syntax S2KtestZModGasTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%GasTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModGasTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModGasTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModGasTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModGasTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModGasTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModGasTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModGasTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModGasTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModGasTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModGasTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModGasTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModGasTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModGasTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModGasTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModGasTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModGasTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModGasTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModGasTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModGasTestContract "." S2KtestZModGasTestMethod [function(), symbol(), klabel(method_test%GasTest)]

    syntax S2KtestZModGasTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%GasTest_S2KISZUndTEST_)]

    syntax S2KtestZModGasTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%GasTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModGasTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%GasTest_S2KexcludeContracts_)]

    syntax S2KtestZModGasTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%GasTest_S2KexcludeSenders_)]

    syntax S2KtestZModGasTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%GasTest_S2Kfailed_)]

    syntax S2KtestZModGasTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%GasTest_S2Kkevm_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtargetArtifacts_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtargetContracts_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtargetInterfaces_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtargetSelectors_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtargetSenders_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtestInfiniteGas" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtestInfiniteGas_)]

    syntax S2KtestZModGasTestMethod ::= "S2KtestSetGas" "(" ")" [symbol(), klabel(method_test%GasTest_S2KtestSetGas_)]

    rule  ( S2KtestZModGasTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtestInfiniteGas ( ) => #abiCallData ( "testInfiniteGas" , .TypedArgs ) )


    rule  ( S2KtestZModGasTest . S2KtestSetGas ( ) => #abiCallData ( "testSetGas" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testInfiniteGas()" ) => 1677640502 )


    rule  ( selector ( "testSetGas()" ) => 2307678515 )


endmodule

module S2KtestZModGetCodeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModGetCodeTestContract

    syntax S2KtestZModGetCodeTestContract ::= "S2KtestZModGetCodeTest" [symbol(), klabel(contract_test%GetCodeTest)]

    rule  ( #binRuntime ( S2KtestZModGetCodeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063e20c9f7114610173578063e8d3529f1461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e66101ee565b6040516100f39190610dc5565b60405180910390f35b610104610250565b6040516100f39190610e6e565b6100e6610392565b6100e66103f2565b610129610452565b6040516100f39190610f2e565b61013e610538565b6040516100f39190610fe1565b610129610608565b61013e6106ee565b6101636107be565b60405190151581526020016100f3565b6100e66108eb565b6100dc61094b565b6007546101639060ff1681565b6104d260405161019f90610db8565b6001600160a01b039091168152602001604051809103906000f0801580156101cb573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561024657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610228575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038957600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103725783829060005260206000200180546102e590611043565b80601f016020809104026020016040519081016040528092919081815260200182805461031190611043565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b5050505050815260200190600101906102c6565b505050508152505081526020019060010190610274565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610246576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610228575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610246576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610228575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103895760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561052057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104e25790505b50505050508152505081526020019060010190610476565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038957838290600052602060002001805461057b90611043565b80601f01602080910402602001604051908101604052809291908181526020018280546105a790611043565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b50505050508152602001906001019061055c565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103895760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106d657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106985790505b5050505050815250508152602001906001019061062c565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038957838290600052602060002001805461073190611043565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90611043565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b505050505081526020019060010190610712565b600754600090610100900460ff16156107e05750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108e65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161086e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161107d565b60408051601f1981840301815290829052610888916110ae565b6000604051808303816000865af19150503d80600081146108c5576040519150601f19603f3d011682016040523d82523d6000602084013e6108ca565b606091505b50915050808060200190518101906108e291906110ca565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610246576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610228575050505050905090565b604080516104d260208201526000910160408051808303601f190181528282526318caf8e360e31b83526104d260048401526024830191909152600e60448301526d6578616d706c654164647265737360901b60648301529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b5050604051638d1cc92560e01b815260206004820152601360248201527226bcaa37b5b2b71739b7b61d26bcaa37b5b2b760691b604482015260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150638d1cc92590606401600060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a949190810190611109565b82604051602001610aa69291906111b6565b604051602081830303815290604052905060008151602083016000f0601c54604080516001600160a01b03909216803b8381016020908101909352808452939450610b1f9391600091908401903c826001600160a01b0316803b806020016040519081016040528181526000908060200190933c610b24565b505050565b610b2e8282610c1f565b610c1b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b9d9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1882604051610bd491906111e5565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051610c0b9190611219565b60405180910390a1610c1b610cac565b5050565b805182516001919003610ca25760005b8351811015610c9c57828181518110610c4a57610c4a61124d565b602001015160f81c60f81b6001600160f81b031916848281518110610c7157610c7161124d565b01602001516001600160f81b03191614610c8a57600091505b80610c9481611263565b915050610c2f565b50610ca6565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610da75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d46929160200161107d565b60408051601f1981840301815290829052610d60916110ae565b6000604051808303816000865af19150503d8060008114610d9d576040519150601f19603f3d011682016040523d82523d6000602084013e610da2565b606091505b505050505b6007805461ff001916610100179055565b61027a8061128b83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e065783516001600160a01b031683529284019291840191600101610de1565b50909695505050505050565b60005b83811015610e2d578181015183820152602001610e15565b83811115610e3c576000848401525b50505050565b60008151808452610e5a816020860160208601610e12565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610f1e57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610f0857605f19898503018352610ef6848651610e42565b948e01949350918d0191600101610eda565b505050978a019794505091880191600101610e95565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610fd257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610fbd5783516001600160e01b0319168252928b019260019290920191908b0190610f93565b50978a01979550505091870191600101610f56565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561103657603f19888603018452611024858351610e42565b94509285019290850190600101611008565b5092979650505050505050565b600181811c9082168061105757607f821691505b60208210810361107757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906110a0816004850160208701610e12565b919091016004019392505050565b600082516110c0818460208701610e12565b9190910192915050565b6000602082840312156110dc57600080fd5b815180151581146110ec57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561111b57600080fd5b815167ffffffffffffffff8082111561113357600080fd5b818401915084601f83011261114757600080fd5b815181811115611159576111596110f3565b604051601f8201601f19908116603f01168101908382118183101715611181576111816110f3565b8160405282815287602084870101111561119a57600080fd5b6111ab836020830160208801610e12565b979650505050505050565b600083516111c8818460208801610e12565b8351908301906111dc818360208801610e12565b01949350505050565b60408152600a6040820152690808080808081319599d60b21b60608201526080602082015260006110ec6080830184610e42565b60408152600a6040820152690808080808149a59da1d60b21b60608201526080602082015260006110ec6080830184610e42565b634e487b7160e01b600052603260045260246000fd5b60006001820161128357634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a264697066735822122062b77e7022981e1b00a6b06a4af06224e0f03321c3f775d1344826a39d6a9d1a64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModGetCodeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061153a8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063e20c9f7114610173578063e8d3529f1461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e66101ee565b6040516100f39190610dc5565b60405180910390f35b610104610250565b6040516100f39190610e6e565b6100e6610392565b6100e66103f2565b610129610452565b6040516100f39190610f2e565b61013e610538565b6040516100f39190610fe1565b610129610608565b61013e6106ee565b6101636107be565b60405190151581526020016100f3565b6100e66108eb565b6100dc61094b565b6007546101639060ff1681565b6104d260405161019f90610db8565b6001600160a01b039091168152602001604051809103906000f0801580156101cb573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561024657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610228575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038957600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103725783829060005260206000200180546102e590611043565b80601f016020809104026020016040519081016040528092919081815260200182805461031190611043565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b5050505050815260200190600101906102c6565b505050508152505081526020019060010190610274565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610246576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610228575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610246576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610228575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103895760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561052057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104e25790505b50505050508152505081526020019060010190610476565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038957838290600052602060002001805461057b90611043565b80601f01602080910402602001604051908101604052809291908181526020018280546105a790611043565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b50505050508152602001906001019061055c565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103895760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106d657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106985790505b5050505050815250508152602001906001019061062c565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038957838290600052602060002001805461073190611043565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90611043565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b505050505081526020019060010190610712565b600754600090610100900460ff16156107e05750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108e65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161086e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161107d565b60408051601f1981840301815290829052610888916110ae565b6000604051808303816000865af19150503d80600081146108c5576040519150601f19603f3d011682016040523d82523d6000602084013e6108ca565b606091505b50915050808060200190518101906108e291906110ca565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610246576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610228575050505050905090565b604080516104d260208201526000910160408051808303601f190181528282526318caf8e360e31b83526104d260048401526024830191909152600e60448301526d6578616d706c654164647265737360901b60648301529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b5050604051638d1cc92560e01b815260206004820152601360248201527226bcaa37b5b2b71739b7b61d26bcaa37b5b2b760691b604482015260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150638d1cc92590606401600060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a949190810190611109565b82604051602001610aa69291906111b6565b604051602081830303815290604052905060008151602083016000f0601c54604080516001600160a01b03909216803b8381016020908101909352808452939450610b1f9391600091908401903c826001600160a01b0316803b806020016040519081016040528181526000908060200190933c610b24565b505050565b610b2e8282610c1f565b610c1b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b9d9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1882604051610bd491906111e5565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051610c0b9190611219565b60405180910390a1610c1b610cac565b5050565b805182516001919003610ca25760005b8351811015610c9c57828181518110610c4a57610c4a61124d565b602001015160f81c60f81b6001600160f81b031916848281518110610c7157610c7161124d565b01602001516001600160f81b03191614610c8a57600091505b80610c9481611263565b915050610c2f565b50610ca6565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610da75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d46929160200161107d565b60408051601f1981840301815290829052610d60916110ae565b6000604051808303816000865af19150503d8060008114610d9d576040519150601f19603f3d011682016040523d82523d6000602084013e610da2565b606091505b505050505b6007805461ff001916610100179055565b61027a8061128b83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e065783516001600160a01b031683529284019291840191600101610de1565b50909695505050505050565b60005b83811015610e2d578181015183820152602001610e15565b83811115610e3c576000848401525b50505050565b60008151808452610e5a816020860160208601610e12565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610f1e57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610f0857605f19898503018352610ef6848651610e42565b948e01949350918d0191600101610eda565b505050978a019794505091880191600101610e95565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610fd257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610fbd5783516001600160e01b0319168252928b019260019290920191908b0190610f93565b50978a01979550505091870191600101610f56565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561103657603f19888603018452611024858351610e42565b94509285019290850190600101611008565b5092979650505050505050565b600181811c9082168061105757607f821691505b60208210810361107757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906110a0816004850160208701610e12565b919091016004019392505050565b600082516110c0818460208701610e12565b9190910192915050565b6000602082840312156110dc57600080fd5b815180151581146110ec57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561111b57600080fd5b815167ffffffffffffffff8082111561113357600080fd5b818401915084601f83011261114757600080fd5b815181811115611159576111596110f3565b604051601f8201601f19908116603f01168101908382118183101715611181576111816110f3565b8160405282815287602084870101111561119a57600080fd5b6111ab836020830160208801610e12565b979650505050505050565b600083516111c8818460208801610e12565b8351908301906111dc818360208801610e12565b01949350505050565b60408152600a6040820152690808080808081319599d60b21b60608201526080602082015260006110ec6080830184610e42565b60408152600a6040820152690808080808149a59da1d60b21b60608201526080602082015260006110ec6080830184610e42565b634e487b7160e01b600052603260045260246000fd5b60006001820161128357634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a264697066735822122062b77e7022981e1b00a6b06a4af06224e0f03321c3f775d1344826a39d6a9d1a64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModGetCodeTestField

    syntax S2KtestZModGetCodeTestField ::= "stdstore" [symbol(), klabel(field_test%GetCodeTest_stdstore)]

    syntax S2KtestZModGetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_test%GetCodeTest_IS_TEST)]

    syntax S2KtestZModGetCodeTestField ::= "_failed" [symbol(), klabel(field_test%GetCodeTest__failed)]

    syntax S2KtestZModGetCodeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%GetCodeTest_stdChainsInitialized)]

    syntax S2KtestZModGetCodeTestField ::= "chains" [symbol(), klabel(field_test%GetCodeTest_chains)]

    syntax S2KtestZModGetCodeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%GetCodeTest_defaultRpcUrls)]

    syntax S2KtestZModGetCodeTestField ::= "idToAlias" [symbol(), klabel(field_test%GetCodeTest_idToAlias)]

    syntax S2KtestZModGetCodeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%GetCodeTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModGetCodeTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%GetCodeTest_gasMeteringOff)]

    syntax S2KtestZModGetCodeTestField ::= "_excludedContracts" [symbol(), klabel(field_test%GetCodeTest__excludedContracts)]

    syntax S2KtestZModGetCodeTestField ::= "_excludedSenders" [symbol(), klabel(field_test%GetCodeTest__excludedSenders)]

    syntax S2KtestZModGetCodeTestField ::= "_targetedContracts" [symbol(), klabel(field_test%GetCodeTest__targetedContracts)]

    syntax S2KtestZModGetCodeTestField ::= "_targetedSenders" [symbol(), klabel(field_test%GetCodeTest__targetedSenders)]

    syntax S2KtestZModGetCodeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%GetCodeTest__excludedArtifacts)]

    syntax S2KtestZModGetCodeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%GetCodeTest__targetedArtifacts)]

    syntax S2KtestZModGetCodeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%GetCodeTest__targetedArtifactSelectors)]

    syntax S2KtestZModGetCodeTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%GetCodeTest__targetedSelectors)]

    syntax S2KtestZModGetCodeTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%GetCodeTest__targetedInterfaces)]

    syntax S2KtestZModGetCodeTestField ::= "myToken" [symbol(), klabel(field_test%GetCodeTest_myToken)]

    rule  ( #loc ( S2KtestZModGetCodeTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModGetCodeTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModGetCodeTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModGetCodeTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModGetCodeTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModGetCodeTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModGetCodeTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModGetCodeTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModGetCodeTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModGetCodeTest . myToken ) => 28 )


    syntax Bytes ::= S2KtestZModGetCodeTestContract "." S2KtestZModGetCodeTestMethod [function(), symbol(), klabel(method_test%GetCodeTest)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KISZUndTEST_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KexcludeContracts_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KexcludeSenders_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2Kfailed_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KsetUp_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtargetArtifacts_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtargetContracts_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtargetInterfaces_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtargetSelectors_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtargetSenders_)]

    syntax S2KtestZModGetCodeTestMethod ::= "S2KtestGetCode" "(" ")" [symbol(), klabel(method_test%GetCodeTest_S2KtestGetCode_)]

    rule  ( S2KtestZModGetCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModGetCodeTest . S2KtestGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testGetCode()" ) => 3906163359 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract ::= "S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3" [symbol(), klabel(contract_lib%forge-std%src%interfaces%IMulticall3)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract "." S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method [function(), symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2Kaggregate_address_bytes_address_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate3" "(" Int ":" "address" "," Int ":" "bool" "," Bytes ":" "bytes" "," Int ":" "address" "," Int ":" "bool" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2Kaggregate3_address_bool_bytes_address_bool_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate3Value" "(" Int ":" "address" "," Int ":" "bool" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "address" "," Int ":" "bool" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2Kaggregate3Value_address_bool_uint256_bytes_address_bool_uint256_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KblockAndAggregate" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KblockAndAggregate_address_bytes_address_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBasefee" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetBasefee_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBlockHash" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetBlockHash_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBlockNumber" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetBlockNumber_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetChainId" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetChainId_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockCoinbase" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockCoinbase_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockDifficulty" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockDifficulty_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockGasLimit" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockGasLimit_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockTimestamp" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockTimestamp_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetEthBalance" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetEthBalance_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetLastBlockHash" "(" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KgetLastBlockHash_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KtryAggregate" "(" Int ":" "bool" "," Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KtryAggregate_bool_address_bytes_address_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KtryBlockAndAggregate" "(" Int ":" "bool" "," Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3_S2KtryBlockAndAggregate_bool_address_bytes_address_bytes)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2Kaggregate ( V0_target_0 : address , V1_callData_0 : bytes , V0_target_1 : address , V1_callData_1 : bytes ) => #abiCallData ( "aggregate" , #array ( #tuple ( #address ( V0_target_0 ) , #bytes ( V1_callData_0 ) , .TypedArgs ) , 2 , #tuple ( #address ( V0_target_0 ) , #bytes ( V1_callData_0 ) , .TypedArgs ) , #tuple ( #address ( V0_target_1 ) , #bytes ( V1_callData_1 ) , .TypedArgs ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_1 ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2Kaggregate3 ( V0_target_0 : address , V1_allowFailure_0 : bool , V2_callData_0 : bytes , V0_target_1 : address , V1_allowFailure_1 : bool , V2_callData_1 : bytes ) => #abiCallData ( "aggregate3" , #array ( #tuple ( #address ( V0_target_0 ) , #bool ( V1_allowFailure_0 ) , #bytes ( V2_callData_0 ) , .TypedArgs ) , 2 , #tuple ( #address ( V0_target_0 ) , #bool ( V1_allowFailure_0 ) , #bytes ( V2_callData_0 ) , .TypedArgs ) , #tuple ( #address ( V0_target_1 ) , #bool ( V1_allowFailure_1 ) , #bytes ( V2_callData_1 ) , .TypedArgs ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeBool ( V1_allowFailure_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeBool ( V1_allowFailure_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_1 ) )
               ))))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2Kaggregate3Value ( V0_target_0 : address , V1_allowFailure_0 : bool , V2_value_0 : uint256 , V3_callData_0 : bytes , V0_target_1 : address , V1_allowFailure_1 : bool , V2_value_1 : uint256 , V3_callData_1 : bytes ) => #abiCallData ( "aggregate3Value" , #array ( #tuple ( #address ( V0_target_0 ) , #bool ( V1_allowFailure_0 ) , #uint256 ( V2_value_0 ) , #bytes ( V3_callData_0 ) , .TypedArgs ) , 2 , #tuple ( #address ( V0_target_0 ) , #bool ( V1_allowFailure_0 ) , #uint256 ( V2_value_0 ) , #bytes ( V3_callData_0 ) , .TypedArgs ) , #tuple ( #address ( V0_target_1 ) , #bool ( V1_allowFailure_1 ) , #uint256 ( V2_value_1 ) , #bytes ( V3_callData_1 ) , .TypedArgs ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeBool ( V1_allowFailure_0 )
       andBool ( #rangeUInt ( 256 , V2_value_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeBool ( V1_allowFailure_1 )
       andBool ( #rangeUInt ( 256 , V2_value_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_callData_1 ) )
               ))))))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KblockAndAggregate ( V0_target_0 : address , V1_callData_0 : bytes , V0_target_1 : address , V1_callData_1 : bytes ) => #abiCallData ( "blockAndAggregate" , #array ( #tuple ( #address ( V0_target_0 ) , #bytes ( V1_callData_0 ) , .TypedArgs ) , 2 , #tuple ( #address ( V0_target_0 ) , #bytes ( V1_callData_0 ) , .TypedArgs ) , #tuple ( #address ( V0_target_1 ) , #bytes ( V1_callData_1 ) , .TypedArgs ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_1 ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBasefee ( ) => #abiCallData ( "getBasefee" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBlockHash ( V0_blockNumber : uint256 ) => #abiCallData ( "getBlockHash" , #uint256 ( V0_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBlockNumber ( ) => #abiCallData ( "getBlockNumber" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetChainId ( ) => #abiCallData ( "getChainId" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockCoinbase ( ) => #abiCallData ( "getCurrentBlockCoinbase" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockDifficulty ( ) => #abiCallData ( "getCurrentBlockDifficulty" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockGasLimit ( ) => #abiCallData ( "getCurrentBlockGasLimit" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockTimestamp ( ) => #abiCallData ( "getCurrentBlockTimestamp" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetEthBalance ( V0_addr : address ) => #abiCallData ( "getEthBalance" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetLastBlockHash ( ) => #abiCallData ( "getLastBlockHash" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KtryAggregate ( V0_requireSuccess : bool , V1_target_0 : address , V2_callData_0 : bytes , V1_target_1 : address , V2_callData_1 : bytes ) => #abiCallData ( "tryAggregate" , #bool ( V0_requireSuccess ) , #array ( #tuple ( #address ( V1_target_0 ) , #bytes ( V2_callData_0 ) , .TypedArgs ) , 2 , #tuple ( #address ( V1_target_0 ) , #bytes ( V2_callData_0 ) , .TypedArgs ) , #tuple ( #address ( V1_target_1 ) , #bytes ( V2_callData_1 ) , .TypedArgs ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_requireSuccess )
       andBool ( #rangeAddress ( V1_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_0 ) )
       andBool ( #rangeAddress ( V1_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_1 ) )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KtryBlockAndAggregate ( V0_requireSuccess : bool , V1_target_0 : address , V2_callData_0 : bytes , V1_target_1 : address , V2_callData_1 : bytes ) => #abiCallData ( "tryBlockAndAggregate" , #bool ( V0_requireSuccess ) , #array ( #tuple ( #address ( V1_target_0 ) , #bytes ( V2_callData_0 ) , .TypedArgs ) , 2 , #tuple ( #address ( V1_target_0 ) , #bytes ( V2_callData_0 ) , .TypedArgs ) , #tuple ( #address ( V1_target_1 ) , #bytes ( V2_callData_1 ) , .TypedArgs ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_requireSuccess )
       andBool ( #rangeAddress ( V1_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_0 ) )
       andBool ( #rangeAddress ( V1_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_1 ) )
               )))))


    rule  ( selector ( "aggregate((address,bytes)[])" ) => 623753794 )


    rule  ( selector ( "aggregate3((address,bool,bytes)[])" ) => 2192398027 )


    rule  ( selector ( "aggregate3Value((address,bool,uint256,bytes)[])" ) => 390982257 )


    rule  ( selector ( "blockAndAggregate((address,bytes)[])" ) => 3272048553 )


    rule  ( selector ( "getBasefee()" ) => 1046783638 )


    rule  ( selector ( "getBlockHash(uint256)" ) => 4001541214 )


    rule  ( selector ( "getBlockNumber()" ) => 1120645468 )


    rule  ( selector ( "getChainId()" ) => 872998000 )


    rule  ( selector ( "getCurrentBlockCoinbase()" ) => 2830128974 )


    rule  ( selector ( "getCurrentBlockDifficulty()" ) => 1916951965 )


    rule  ( selector ( "getCurrentBlockGasLimit()" ) => 2262111976 )


    rule  ( selector ( "getCurrentBlockTimestamp()" ) => 254331261 )


    rule  ( selector ( "getEthBalance(address)" ) => 1294139852 )


    rule  ( selector ( "getLastBlockHash()" ) => 669543790 )


    rule  ( selector ( "tryAggregate(bool,(address,bytes)[])" ) => 3169029079 )


    rule  ( selector ( "tryBlockAndAggregate(bool,(address,bytes)[])" ) => 966083305 )


endmodule

module S2KtestZModInitCodeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModInitCodeTestContract

    syntax S2KtestZModInitCodeTestContract ::= "S2KtestZModInitCodeTest" [symbol(), klabel(contract_test%InitCodeTest)]

    rule  ( #binRuntime ( S2KtestZModInitCodeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063b5508aa911610066578063b5508aa914610180578063ba414fa614610188578063e20c9f71146101a0578063fa7626d4146101a857600080fd5b8063916a17c614610168578063964fb96d14610170578063b403d7e61461017857600080fd5b80633e5e3c23116100c85780633e5e3c231461012e5780633f7286f41461013657806366d9a9a01461013e57806385226c811461015357600080fd5b80630a9254e4146100ef5780631ed7831c146100fb5780632ade388014610119575b600080fd5b6100f96001601e55565b005b6101036101b5565b6040516101109190610b99565b60405180910390f35b610121610217565b6040516101109190610c16565b610103610359565b6101036103b9565b610146610419565b6040516101109190610cf1565b61015b6104ff565b6040516101109190610da4565b6101466105cf565b6100f96106b5565b6100f96106de565b61015b610705565b6101906107d5565b6040519015158152602001610110565b610103610902565b6007546101909060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561020d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ef575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561035057600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103395783829060005260206000200180546102ac90610e11565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610e11565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b50505050508152602001906001019061028d565b50505050815250508152602001906001019061023b565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561020d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ef575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561020d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ef575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103505760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104e757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104a95790505b5050505050815250508152602001906001019061043d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561035057838290600052602060002001805461054290610e11565b80601f016020809104026020016040519081016040528092919081815260200182805461056e90610e11565b80156105bb5780601f10610590576101008083540402835291602001916105bb565b820191906000526020600020905b81548152906001019060200180831161059e57829003601f168201915b505050505081526020019060010190610523565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103505760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561069d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161065f5790505b505050505081525050815260200190600101906105f3565b6106dc601e54601d54601c546106cb9190610e4b565b6106d59190610e4b565b6007610962565b565b6106dc601e54601d54601c546106f49190610e4b565b6106fe9190610e4b565b6008610962565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561035057838290600052602060002001805461074890610e11565b80601f016020809104026020016040519081016040528092919081815260200182805461077490610e11565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b505050505081526020019060010190610729565b600754600090610100900460ff16156107f75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108fd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610885917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e71565b60408051601f198184030181529082905261089f91610ea2565b6000604051808303816000865af19150503d80600081146108dc576040519150601f19603f3d011682016040523d82523d6000602084013e6108e1565b606091505b50915050808060200190518101906108f99190610ebe565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561020d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ef575050505050905090565b808214610a89577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109d39060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a89610a8d565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b885760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b279291602001610e71565b60408051601f1981840301815290829052610b4191610ea2565b6000604051808303816000865af19150503d8060008114610b7e576040519150601f19603f3d011682016040523d82523d6000602084013e610b83565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bda5783516001600160a01b031683529284019291840191600101610bb5565b50909695505050505050565b60005b83811015610c01578181015183820152602001610be9565b83811115610c10576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ce457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ccd57898403605f1901835284518051808652610cae818e88018f8501610be6565b958c0195601f01601f1916949094018b019350918a0191600101610c87565b509197505050938601935090850190600101610c3d565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d9557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d805783516001600160e01b0319168252928b019260019290920191908b0190610d56565b50978a01979550505091870191600101610d19565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ce457878503603f1901845281518051808752610df2818989018a8501610be6565b601f01601f191695909501860194509285019290850190600101610dcb565b600181811c90821680610e2557607f821691505b602082108103610e4557634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610e6c57634e487b7160e01b600052601160045260246000fd5b500190565b6001600160e01b0319831681528151600090610e94816004850160208701610be6565b919091016004019392505050565b60008251610eb4818460208701610be6565b9190910192915050565b600060208284031215610ed057600080fd5b81518015158114610ee057600080fd5b939250505056fea264697066735822122075af8cf81aa108d300967d540551e5e463b69d90b6f1be556565a4bae51912b564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModInitCodeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b805490911690911790556004601c556002601d5560c8601e55610f1d8061003f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063b5508aa911610066578063b5508aa914610180578063ba414fa614610188578063e20c9f71146101a0578063fa7626d4146101a857600080fd5b8063916a17c614610168578063964fb96d14610170578063b403d7e61461017857600080fd5b80633e5e3c23116100c85780633e5e3c231461012e5780633f7286f41461013657806366d9a9a01461013e57806385226c811461015357600080fd5b80630a9254e4146100ef5780631ed7831c146100fb5780632ade388014610119575b600080fd5b6100f96001601e55565b005b6101036101b5565b6040516101109190610b99565b60405180910390f35b610121610217565b6040516101109190610c16565b610103610359565b6101036103b9565b610146610419565b6040516101109190610cf1565b61015b6104ff565b6040516101109190610da4565b6101466105cf565b6100f96106b5565b6100f96106de565b61015b610705565b6101906107d5565b6040519015158152602001610110565b610103610902565b6007546101909060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561020d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ef575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561035057600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103395783829060005260206000200180546102ac90610e11565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610e11565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b50505050508152602001906001019061028d565b50505050815250508152602001906001019061023b565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561020d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ef575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561020d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ef575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103505760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104e757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104a95790505b5050505050815250508152602001906001019061043d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561035057838290600052602060002001805461054290610e11565b80601f016020809104026020016040519081016040528092919081815260200182805461056e90610e11565b80156105bb5780601f10610590576101008083540402835291602001916105bb565b820191906000526020600020905b81548152906001019060200180831161059e57829003601f168201915b505050505081526020019060010190610523565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103505760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561069d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161065f5790505b505050505081525050815260200190600101906105f3565b6106dc601e54601d54601c546106cb9190610e4b565b6106d59190610e4b565b6007610962565b565b6106dc601e54601d54601c546106f49190610e4b565b6106fe9190610e4b565b6008610962565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561035057838290600052602060002001805461074890610e11565b80601f016020809104026020016040519081016040528092919081815260200182805461077490610e11565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b505050505081526020019060010190610729565b600754600090610100900460ff16156107f75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108fd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610885917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e71565b60408051601f198184030181529082905261089f91610ea2565b6000604051808303816000865af19150503d80600081146108dc576040519150601f19603f3d011682016040523d82523d6000602084013e6108e1565b606091505b50915050808060200190518101906108f99190610ebe565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561020d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ef575050505050905090565b808214610a89577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109d39060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a89610a8d565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b885760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b279291602001610e71565b60408051601f1981840301815290829052610b4191610ea2565b6000604051808303816000865af19150503d8060008114610b7e576040519150601f19603f3d011682016040523d82523d6000602084013e610b83565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bda5783516001600160a01b031683529284019291840191600101610bb5565b50909695505050505050565b60005b83811015610c01578181015183820152602001610be9565b83811115610c10576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ce457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ccd57898403605f1901835284518051808652610cae818e88018f8501610be6565b958c0195601f01601f1916949094018b019350918a0191600101610c87565b509197505050938601935090850190600101610c3d565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d9557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d805783516001600160e01b0319168252928b019260019290920191908b0190610d56565b50978a01979550505091870191600101610d19565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ce457878503603f1901845281518051808752610df2818989018a8501610be6565b601f01601f191695909501860194509285019290850190600101610dcb565b600181811c90821680610e2557607f821691505b602082108103610e4557634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610e6c57634e487b7160e01b600052601160045260246000fd5b500190565b6001600160e01b0319831681528151600090610e94816004850160208701610be6565b919091016004019392505050565b60008251610eb4818460208701610be6565b9190910192915050565b600060208284031215610ed057600080fd5b81518015158114610ee057600080fd5b939250505056fea264697066735822122075af8cf81aa108d300967d540551e5e463b69d90b6f1be556565a4bae51912b564736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModInitCodeTestField

    syntax S2KtestZModInitCodeTestField ::= "stdstore" [symbol(), klabel(field_test%InitCodeTest_stdstore)]

    syntax S2KtestZModInitCodeTestField ::= "IS_TEST" [symbol(), klabel(field_test%InitCodeTest_IS_TEST)]

    syntax S2KtestZModInitCodeTestField ::= "_failed" [symbol(), klabel(field_test%InitCodeTest__failed)]

    syntax S2KtestZModInitCodeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%InitCodeTest_stdChainsInitialized)]

    syntax S2KtestZModInitCodeTestField ::= "chains" [symbol(), klabel(field_test%InitCodeTest_chains)]

    syntax S2KtestZModInitCodeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%InitCodeTest_defaultRpcUrls)]

    syntax S2KtestZModInitCodeTestField ::= "idToAlias" [symbol(), klabel(field_test%InitCodeTest_idToAlias)]

    syntax S2KtestZModInitCodeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%InitCodeTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModInitCodeTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%InitCodeTest_gasMeteringOff)]

    syntax S2KtestZModInitCodeTestField ::= "_excludedContracts" [symbol(), klabel(field_test%InitCodeTest__excludedContracts)]

    syntax S2KtestZModInitCodeTestField ::= "_excludedSenders" [symbol(), klabel(field_test%InitCodeTest__excludedSenders)]

    syntax S2KtestZModInitCodeTestField ::= "_targetedContracts" [symbol(), klabel(field_test%InitCodeTest__targetedContracts)]

    syntax S2KtestZModInitCodeTestField ::= "_targetedSenders" [symbol(), klabel(field_test%InitCodeTest__targetedSenders)]

    syntax S2KtestZModInitCodeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%InitCodeTest__excludedArtifacts)]

    syntax S2KtestZModInitCodeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%InitCodeTest__targetedArtifacts)]

    syntax S2KtestZModInitCodeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%InitCodeTest__targetedArtifactSelectors)]

    syntax S2KtestZModInitCodeTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%InitCodeTest__targetedSelectors)]

    syntax S2KtestZModInitCodeTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%InitCodeTest__targetedInterfaces)]

    syntax S2KtestZModInitCodeTestField ::= "a" [symbol(), klabel(field_test%InitCodeTest_a)]

    syntax S2KtestZModInitCodeTestField ::= "b" [symbol(), klabel(field_test%InitCodeTest_b)]

    syntax S2KtestZModInitCodeTestField ::= "c" [symbol(), klabel(field_test%InitCodeTest_c)]

    rule  ( #loc ( S2KtestZModInitCodeTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModInitCodeTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModInitCodeTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModInitCodeTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModInitCodeTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModInitCodeTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModInitCodeTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModInitCodeTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModInitCodeTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModInitCodeTest . a ) => 28 )


    rule  ( #loc ( S2KtestZModInitCodeTest . b ) => 29 )


    rule  ( #loc ( S2KtestZModInitCodeTest . c ) => 30 )


    syntax Bytes ::= S2KtestZModInitCodeTestContract "." S2KtestZModInitCodeTestMethod [function(), symbol(), klabel(method_test%InitCodeTest)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KISZUndTEST_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KexcludeContracts_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KexcludeSenders_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2Kfailed_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KsetUp_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtargetArtifacts_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtargetContracts_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtargetInterfaces_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtargetSelectors_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtargetSenders_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtestFailZUndinit" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtestFailZUndinit_)]

    syntax S2KtestZModInitCodeTestMethod ::= "S2KtestZUndinit" "(" ")" [symbol(), klabel(method_test%InitCodeTest_S2KtestZUndinit_)]

    rule  ( S2KtestZModInitCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtestFailZUndinit ( ) => #abiCallData ( "testFail_init" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeTest . S2KtestZUndinit ( ) => #abiCallData ( "test_init" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_init()" ) => 3020150758 )


    rule  ( selector ( "test_init()" ) => 2521807213 )


endmodule

module S2KtestZModInitCodeBranchTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModInitCodeBranchTestContract

    syntax S2KtestZModInitCodeBranchTestContract ::= "S2KtestZModInitCodeBranchTest" [symbol(), klabel(contract_test%InitCodeBranchTest)]

    rule  ( #binRuntime ( S2KtestZModInitCodeBranchTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063d6a2ec7614610173578063e20c9f71146101b2578063fa7626d4146101ba57600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80631197d48c146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc6101c7565b005b6100e66101d6565b6040516100f39190610b6a565b60405180910390f35b610104610238565b6040516100f39190610be7565b6100e661037a565b6100e66103da565b61012961043a565b6040516100f39190610cc2565b61013e610520565b6040516100f39190610d75565b6101296105f0565b61013e6106d6565b6101636107a6565b60405190151581526020016100f3565b61019a7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100f3565b6100e66108d3565b6007546101639060ff1681565b6101d4601d546001610933565b565b6060601480548060200260200160405190810160405280929190818152602001828054801561022e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610210575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561037157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561035a5783829060005260206000200180546102cd90610de2565b80601f01602080910402602001604051908101604052809291908181526020018280546102f990610de2565b80156103465780601f1061031b57610100808354040283529160200191610346565b820191906000526020600020905b81548152906001019060200180831161032957829003601f168201915b5050505050815260200190600101906102ae565b50505050815250508152602001906001019061025c565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610210575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610210575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103715760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ca5790505b5050505050815250508152602001906001019061045e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561037157838290600052602060002001805461056390610de2565b80601f016020809104026020016040519081016040528092919081815260200182805461058f90610de2565b80156105dc5780601f106105b1576101008083540402835291602001916105dc565b820191906000526020600020905b8154815290600101906020018083116105bf57829003601f168201915b505050505081526020019060010190610544565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103715760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106be57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106805790505b50505050508152505081526020019060010190610614565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561037157838290600052602060002001805461071990610de2565b80601f016020809104026020016040519081016040528092919081815260200182805461074590610de2565b80156107925780601f1061076757610100808354040283529160200191610792565b820191906000526020600020905b81548152906001019060200180831161077557829003601f168201915b5050505050815260200190600101906106fa565b600754600090610100900460ff16156107c85750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108ce5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610856917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e1c565b60408051601f198184030181529082905261087091610e4d565b6000604051808303816000865af19150503d80600081146108ad576040519150601f19603f3d011682016040523d82523d6000602084013e6108b2565b606091505b50915050808060200190518101906108ca9190610e69565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561022e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610210575050505050905090565b808214610a5a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109a49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a5a610a5e565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b595760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610af89291602001610e1c565b60408051601f1981840301815290829052610b1291610e4d565b6000604051808303816000865af19150503d8060008114610b4f576040519150601f19603f3d011682016040523d82523d6000602084013e610b54565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bab5783516001600160a01b031683529284019291840191600101610b86565b50909695505050505050565b60005b83811015610bd2578181015183820152602001610bba565b83811115610be1576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cb557603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610c9e57898403605f1901835284518051808652610c7f818e88018f8501610bb7565b958c0195601f01601f1916949094018b019350918a0191600101610c58565b509197505050938601935090850190600101610c0e565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d6657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d515783516001600160e01b0319168252928b019260019290920191908b0190610d27565b50978a01979550505091870191600101610cea565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cb557878503603f1901845281518051808752610dc3818989018a8501610bb7565b601f01601f191695909501860194509285019290850190600101610d9c565b600181811c90821680610df657607f821691505b602082108103610e1657634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610e3f816004850160208701610bb7565b919091016004019392505050565b60008251610e5f818460208701610bb7565b9190910192915050565b600060208284031215610e7b57600080fd5b81518015158114610e8b57600080fd5b939250505056fea26469706673582212207bd25c671013d7855f22141b6de06ddfc974b771ed80f48ccd501110814ac0ee64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModInitCodeBranchTest ) => #parseByteStack ( "0x6080604081905260078054600160ff199182168117909255600b805490911690911790556316f02cd760e11b905230608452737109709ecfa91a80626ff3989d68f67f5b1dd12d632de059ae60a4600060405180830381600087803b15801561006757600080fd5b505af115801561007b573d6000803e3d6000fd5b50505050600a601c5411610093576001601d55610099565b6002601d555b610ec8806100a86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063d6a2ec7614610173578063e20c9f71146101b2578063fa7626d4146101ba57600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80631197d48c146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc6101c7565b005b6100e66101d6565b6040516100f39190610b6a565b60405180910390f35b610104610238565b6040516100f39190610be7565b6100e661037a565b6100e66103da565b61012961043a565b6040516100f39190610cc2565b61013e610520565b6040516100f39190610d75565b6101296105f0565b61013e6106d6565b6101636107a6565b60405190151581526020016100f3565b61019a7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100f3565b6100e66108d3565b6007546101639060ff1681565b6101d4601d546001610933565b565b6060601480548060200260200160405190810160405280929190818152602001828054801561022e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610210575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561037157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561035a5783829060005260206000200180546102cd90610de2565b80601f01602080910402602001604051908101604052809291908181526020018280546102f990610de2565b80156103465780601f1061031b57610100808354040283529160200191610346565b820191906000526020600020905b81548152906001019060200180831161032957829003601f168201915b5050505050815260200190600101906102ae565b50505050815250508152602001906001019061025c565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610210575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610210575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103715760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104ca5790505b5050505050815250508152602001906001019061045e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561037157838290600052602060002001805461056390610de2565b80601f016020809104026020016040519081016040528092919081815260200182805461058f90610de2565b80156105dc5780601f106105b1576101008083540402835291602001916105dc565b820191906000526020600020905b8154815290600101906020018083116105bf57829003601f168201915b505050505081526020019060010190610544565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103715760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106be57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106805790505b50505050508152505081526020019060010190610614565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561037157838290600052602060002001805461071990610de2565b80601f016020809104026020016040519081016040528092919081815260200182805461074590610de2565b80156107925780601f1061076757610100808354040283529160200191610792565b820191906000526020600020905b81548152906001019060200180831161077557829003601f168201915b5050505050815260200190600101906106fa565b600754600090610100900460ff16156107c85750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108ce5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610856917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e1c565b60408051601f198184030181529082905261087091610e4d565b6000604051808303816000865af19150503d80600081146108ad576040519150601f19603f3d011682016040523d82523d6000602084013e6108b2565b606091505b50915050808060200190518101906108ca9190610e69565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561022e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610210575050505050905090565b808214610a5a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109a49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a5a610a5e565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b595760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610af89291602001610e1c565b60408051601f1981840301815290829052610b1291610e4d565b6000604051808303816000865af19150503d8060008114610b4f576040519150601f19603f3d011682016040523d82523d6000602084013e610b54565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bab5783516001600160a01b031683529284019291840191600101610b86565b50909695505050505050565b60005b83811015610bd2578181015183820152602001610bba565b83811115610be1576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cb557603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610c9e57898403605f1901835284518051808652610c7f818e88018f8501610bb7565b958c0195601f01601f1916949094018b019350918a0191600101610c58565b509197505050938601935090850190600101610c0e565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d6657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d515783516001600160e01b0319168252928b019260019290920191908b0190610d27565b50978a01979550505091870191600101610cea565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cb557878503603f1901845281518051808752610dc3818989018a8501610bb7565b601f01601f191695909501860194509285019290850190600101610d9c565b600181811c90821680610df657607f821691505b602082108103610e1657634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610e3f816004850160208701610bb7565b919091016004019392505050565b60008251610e5f818460208701610bb7565b9190910192915050565b600060208284031215610e7b57600080fd5b81518015158114610e8b57600080fd5b939250505056fea26469706673582212207bd25c671013d7855f22141b6de06ddfc974b771ed80f48ccd501110814ac0ee64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModInitCodeBranchTestField

    syntax S2KtestZModInitCodeBranchTestField ::= "stdstore" [symbol(), klabel(field_test%InitCodeBranchTest_stdstore)]

    syntax S2KtestZModInitCodeBranchTestField ::= "IS_TEST" [symbol(), klabel(field_test%InitCodeBranchTest_IS_TEST)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_failed" [symbol(), klabel(field_test%InitCodeBranchTest__failed)]

    syntax S2KtestZModInitCodeBranchTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%InitCodeBranchTest_stdChainsInitialized)]

    syntax S2KtestZModInitCodeBranchTestField ::= "chains" [symbol(), klabel(field_test%InitCodeBranchTest_chains)]

    syntax S2KtestZModInitCodeBranchTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%InitCodeBranchTest_defaultRpcUrls)]

    syntax S2KtestZModInitCodeBranchTestField ::= "idToAlias" [symbol(), klabel(field_test%InitCodeBranchTest_idToAlias)]

    syntax S2KtestZModInitCodeBranchTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%InitCodeBranchTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModInitCodeBranchTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%InitCodeBranchTest_gasMeteringOff)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_excludedContracts" [symbol(), klabel(field_test%InitCodeBranchTest__excludedContracts)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_excludedSenders" [symbol(), klabel(field_test%InitCodeBranchTest__excludedSenders)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_targetedContracts" [symbol(), klabel(field_test%InitCodeBranchTest__targetedContracts)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_targetedSenders" [symbol(), klabel(field_test%InitCodeBranchTest__targetedSenders)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%InitCodeBranchTest__excludedArtifacts)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%InitCodeBranchTest__targetedArtifacts)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%InitCodeBranchTest__targetedArtifactSelectors)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%InitCodeBranchTest__targetedSelectors)]

    syntax S2KtestZModInitCodeBranchTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%InitCodeBranchTest__targetedInterfaces)]

    syntax S2KtestZModInitCodeBranchTestField ::= "a" [symbol(), klabel(field_test%InitCodeBranchTest_a)]

    syntax S2KtestZModInitCodeBranchTestField ::= "b" [symbol(), klabel(field_test%InitCodeBranchTest_b)]

    rule  ( #loc ( S2KtestZModInitCodeBranchTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . a ) => 28 )


    rule  ( #loc ( S2KtestZModInitCodeBranchTest . b ) => 29 )


    syntax Bytes ::= S2KtestZModInitCodeBranchTestContract "." S2KtestZModInitCodeBranchTestMethod [function(), symbol(), klabel(method_test%InitCodeBranchTest)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KISZUndTEST_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KexcludeContracts_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KexcludeSenders_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2Kfailed_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2Kkevm_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtargetArtifacts_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtargetContracts_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtargetInterfaces_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtargetSelectors_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtargetSenders_)]

    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtestZUndbranch" "(" ")" [symbol(), klabel(method_test%InitCodeBranchTest_S2KtestZUndbranch_)]

    rule  ( S2KtestZModInitCodeBranchTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModInitCodeBranchTest . S2KtestZUndbranch ( ) => #abiCallData ( "test_branch" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_branch()" ) => 295163020 )


endmodule

module S2KsrcZModKEVMCheats-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModKEVMCheatsContract

    syntax S2KsrcZModKEVMCheatsContract ::= "S2KsrcZModKEVMCheats" [symbol(), klabel(contract_src%KEVMCheats)]

    rule  ( #binRuntime ( S2KsrcZModKEVMCheats ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KsrcZModKEVMCheats ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KsrcZModKEVMCheatsContract "." S2KsrcZModKEVMCheatsMethod [function(), symbol(), klabel(method_src%KEVMCheats)]

    syntax S2KsrcZModKEVMCheatsMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_src%KEVMCheats_S2Kkevm_)]

    rule  ( S2KsrcZModKEVMCheats . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( selector ( "kevm()" ) => 3601001590 )


endmodule

module S2KsrcZModKEVMCheatsBase-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModKEVMCheatsBaseContract

    syntax S2KsrcZModKEVMCheatsBaseContract ::= "S2KsrcZModKEVMCheatsBase" [symbol(), klabel(contract_src%KEVMCheatsBase)]

    rule  ( #binRuntime ( S2KsrcZModKEVMCheatsBase ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KsrcZModKEVMCheatsBase ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KsrcZModKEVMCheatsBaseContract "." S2KsrcZModKEVMCheatsBaseMethod [function(), symbol(), klabel(method_src%KEVMCheatsBase)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KallowCallsToAddress" "(" Int ":" "address" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KallowCallsToAddress_address)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KallowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KallowChangesToStorage_address_uint256)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectCreate_address_uint256_bytes)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectCreate2_address_uint256_bytes)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectDelegateCall_address_bytes)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectNoCall" "(" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectNoCall_)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectRegularCall_address_bytes)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectRegularCall_address_uint256_bytes)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KexpectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KexpectStaticCall_address_bytes)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KfreshBool" "(" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KfreshBool_)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KfreshBytes" "(" Int ":" "uint256" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KfreshBytes_uint256)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KfreshUInt" "(" Int ":" "uint8" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KfreshUInt_uint8)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KinfiniteGas" "(" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KinfiniteGas_)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KsetGas" "(" Int ":" "uint256" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KsetGas_uint256)]

    syntax S2KsrcZModKEVMCheatsBaseMethod ::= "S2KsymbolicStorage" "(" Int ":" "address" ")" [symbol(), klabel(method_src%KEVMCheatsBase_S2KsymbolicStorage_address)]

    rule  ( S2KsrcZModKEVMCheatsBase . S2KallowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KallowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_ ) )
               )))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_ ) )
               )))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_ ) )
               ))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_ ) )
               ))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_ ) )
               )))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KexpectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_ ) )
               ))


    rule  ( S2KsrcZModKEVMCheatsBase . S2KfreshBool ( ) => #abiCallData ( "freshBool" , .TypedArgs ) )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KfreshBytes ( V0_ : uint256 ) => #abiCallData ( "freshBytes" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KfreshUInt ( V0_ : uint8 ) => #abiCallData ( "freshUInt" , #uint8 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_ )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KinfiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KsetGas ( V0_ : uint256 ) => #abiCallData ( "setGas" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )


    rule  ( S2KsrcZModKEVMCheatsBase . S2KsymbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )


    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )


    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )


    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )


    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )


    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )


    rule  ( selector ( "expectNoCall()" ) => 3861374088 )


    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )


    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )


    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )


    rule  ( selector ( "freshBool()" ) => 2935720297 )


    rule  ( selector ( "freshBytes(uint256)" ) => 1389402351 )


    rule  ( selector ( "freshUInt(uint8)" ) => 625253732 )


    rule  ( selector ( "infiniteGas()" ) => 3986649939 )


    rule  ( selector ( "setGas(uint256)" ) => 3713137314 )


    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )


endmodule

module S2KtestZModLabelTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModLabelTestContract

    syntax S2KtestZModLabelTestContract ::= "S2KtestZModLabelTest" [symbol(), klabel(contract_test%LabelTest)]

    rule  ( #binRuntime ( S2KtestZModLabelTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461011b578063916a17c614610130578063b5508aa914610138578063ba414fa614610140578063e20c9f7114610158578063fa7626d41461016057600080fd5b80631ed7831c146100b95780632ade3880146100d75780632fa150bd146100ec5780633e5e3c23146100f65780633f7286f4146100fe57806366d9a9a014610106575b600080fd5b6100c161016d565b6040516100ce9190610964565b60405180910390f35b6100df6101cf565b6040516100ce91906109e1565b6100f4610311565b005b6100c16103ab565b6100c161040b565b61010e61046b565b6040516100ce9190610abc565b610123610551565b6040516100ce9190610b6f565b61010e610621565b610123610707565b6101486107d7565b60405190151581526020016100ce565b6100c1610904565b6007546101489060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101c557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561030857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156102f157838290600052602060002001805461026490610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610bdc565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b505050505081526020019060010190610245565b5050505081525050815260200190600101906101f3565b50505050905090565b604080516318caf8e360e31b8152600060048201526024810191909152600c60448201526b5a65726f204164647265737360a01b6064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b5050505060016103a9576103a9610c16565b565b606060168054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104fb5790505b5050505050815250508152602001906001019061048f565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561030857838290600052602060002001805461059490610bdc565b80601f01602080910402602001604051908101604052809291908181526020018280546105c090610bdc565b801561060d5780601f106105e25761010080835404028352916020019161060d565b820191906000526020600020905b8154815290600101906020018083116105f057829003601f168201915b505050505081526020019060010190610575565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ef57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b15790505b50505050508152505081526020019060010190610645565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561030857838290600052602060002001805461074a90610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461077690610bdc565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b50505050508152602001906001019061072b565b600754600090610100900460ff16156107f95750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108ff5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610887917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2c565b60408051601f19818403018152908290526108a191610c5d565b6000604051808303816000865af19150503d80600081146108de576040519150601f19603f3d011682016040523d82523d6000602084013e6108e3565b606091505b50915050808060200190518101906108fb9190610c79565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109a55783516001600160a01b031683529284019291840191600101610980565b50909695505050505050565b60005b838110156109cc5781810151838201526020016109b4565b838111156109db576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9857898403605f1901835284518051808652610a79818e88018f85016109b1565b958c0195601f01601f1916949094018b019350918a0191600101610a52565b509197505050938601935090850190600101610a08565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4b5783516001600160e01b0319168252928b019260019290920191908b0190610b21565b50978a01979550505091870191600101610ae4565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57878503603f1901845281518051808752610bbd818989018a85016109b1565b601f01601f191695909501860194509285019290850190600101610b96565b600181811c90821680610bf057607f821691505b602082108103610c1057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c4f8160048501602087016109b1565b919091016004019392505050565b60008251610c6f8184602087016109b1565b9190910192915050565b600060208284031215610c8b57600080fd5b81518015158114610c9b57600080fd5b939250505056fea26469706673582212201cccac5c5342c608d4ab96122f8a90c68e8cf6e993a62f94da151570621783fb64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModLabelTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cd88061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461011b578063916a17c614610130578063b5508aa914610138578063ba414fa614610140578063e20c9f7114610158578063fa7626d41461016057600080fd5b80631ed7831c146100b95780632ade3880146100d75780632fa150bd146100ec5780633e5e3c23146100f65780633f7286f4146100fe57806366d9a9a014610106575b600080fd5b6100c161016d565b6040516100ce9190610964565b60405180910390f35b6100df6101cf565b6040516100ce91906109e1565b6100f4610311565b005b6100c16103ab565b6100c161040b565b61010e61046b565b6040516100ce9190610abc565b610123610551565b6040516100ce9190610b6f565b61010e610621565b610123610707565b6101486107d7565b60405190151581526020016100ce565b6100c1610904565b6007546101489060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101c557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561030857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156102f157838290600052602060002001805461026490610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610bdc565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b505050505081526020019060010190610245565b5050505081525050815260200190600101906101f3565b50505050905090565b604080516318caf8e360e31b8152600060048201526024810191909152600c60448201526b5a65726f204164647265737360a01b6064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b5050505060016103a9576103a9610c16565b565b606060168054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104fb5790505b5050505050815250508152602001906001019061048f565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561030857838290600052602060002001805461059490610bdc565b80601f01602080910402602001604051908101604052809291908181526020018280546105c090610bdc565b801561060d5780601f106105e25761010080835404028352916020019161060d565b820191906000526020600020905b8154815290600101906020018083116105f057829003601f168201915b505050505081526020019060010190610575565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103085760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ef57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b15790505b50505050508152505081526020019060010190610645565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561030857838290600052602060002001805461074a90610bdc565b80601f016020809104026020016040519081016040528092919081815260200182805461077690610bdc565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b50505050508152602001906001019061072b565b600754600090610100900460ff16156107f95750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108ff5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610887917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c2c565b60408051601f19818403018152908290526108a191610c5d565b6000604051808303816000865af19150503d80600081146108de576040519150601f19603f3d011682016040523d82523d6000602084013e6108e3565b606091505b50915050808060200190518101906108fb9190610c79565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101c5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a7575050505050905090565b6020808252825182820181905260009190848201906040850190845b818110156109a55783516001600160a01b031683529284019291840191600101610980565b50909695505050505050565b60005b838110156109cc5781810151838201526020016109b4565b838111156109db576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9857898403605f1901835284518051808652610a79818e88018f85016109b1565b958c0195601f01601f1916949094018b019350918a0191600101610a52565b509197505050938601935090850190600101610a08565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b4b5783516001600160e01b0319168252928b019260019290920191908b0190610b21565b50978a01979550505091870191600101610ae4565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aaf57878503603f1901845281518051808752610bbd818989018a85016109b1565b601f01601f191695909501860194509285019290850190600101610b96565b600181811c90821680610bf057607f821691505b602082108103610c1057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c4f8160048501602087016109b1565b919091016004019392505050565b60008251610c6f8184602087016109b1565b9190910192915050565b600060208284031215610c8b57600080fd5b81518015158114610c9b57600080fd5b939250505056fea26469706673582212201cccac5c5342c608d4ab96122f8a90c68e8cf6e993a62f94da151570621783fb64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModLabelTestField

    syntax S2KtestZModLabelTestField ::= "stdstore" [symbol(), klabel(field_test%LabelTest_stdstore)]

    syntax S2KtestZModLabelTestField ::= "IS_TEST" [symbol(), klabel(field_test%LabelTest_IS_TEST)]

    syntax S2KtestZModLabelTestField ::= "_failed" [symbol(), klabel(field_test%LabelTest__failed)]

    syntax S2KtestZModLabelTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%LabelTest_stdChainsInitialized)]

    syntax S2KtestZModLabelTestField ::= "chains" [symbol(), klabel(field_test%LabelTest_chains)]

    syntax S2KtestZModLabelTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%LabelTest_defaultRpcUrls)]

    syntax S2KtestZModLabelTestField ::= "idToAlias" [symbol(), klabel(field_test%LabelTest_idToAlias)]

    syntax S2KtestZModLabelTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%LabelTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModLabelTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%LabelTest_gasMeteringOff)]

    syntax S2KtestZModLabelTestField ::= "_excludedContracts" [symbol(), klabel(field_test%LabelTest__excludedContracts)]

    syntax S2KtestZModLabelTestField ::= "_excludedSenders" [symbol(), klabel(field_test%LabelTest__excludedSenders)]

    syntax S2KtestZModLabelTestField ::= "_targetedContracts" [symbol(), klabel(field_test%LabelTest__targetedContracts)]

    syntax S2KtestZModLabelTestField ::= "_targetedSenders" [symbol(), klabel(field_test%LabelTest__targetedSenders)]

    syntax S2KtestZModLabelTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%LabelTest__excludedArtifacts)]

    syntax S2KtestZModLabelTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%LabelTest__targetedArtifacts)]

    syntax S2KtestZModLabelTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%LabelTest__targetedArtifactSelectors)]

    syntax S2KtestZModLabelTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%LabelTest__targetedSelectors)]

    syntax S2KtestZModLabelTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%LabelTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModLabelTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModLabelTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModLabelTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModLabelTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModLabelTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModLabelTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModLabelTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModLabelTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModLabelTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModLabelTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModLabelTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModLabelTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModLabelTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModLabelTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModLabelTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModLabelTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModLabelTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModLabelTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModLabelTestContract "." S2KtestZModLabelTestMethod [function(), symbol(), klabel(method_test%LabelTest)]

    syntax S2KtestZModLabelTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KISZUndTEST_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KexcludeContracts_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KexcludeSenders_)]

    syntax S2KtestZModLabelTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%LabelTest_S2Kfailed_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtargetArtifacts_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtargetContracts_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtargetInterfaces_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtargetSelectors_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtargetSenders_)]

    syntax S2KtestZModLabelTestMethod ::= "S2KtestLabel" "(" ")" [symbol(), klabel(method_test%LabelTest_S2KtestLabel_)]

    rule  ( S2KtestZModLabelTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModLabelTest . S2KtestLabel ( ) => #abiCallData ( "testLabel" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testLabel()" ) => 799101117 )


endmodule

module S2KtestZModLoopsTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModLoopsTestContract

    syntax S2KtestZModLoopsTestContract ::= "S2KtestZModLoopsTest" [symbol(), klabel(contract_test%LoopsTest)]

    rule  ( #binRuntime ( S2KtestZModLoopsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806366d9a9a0116100f9578063a118e10211610097578063d313940d11610071578063d313940d14610366578063d6a2ec7614610379578063e20c9f71146103b8578063fa7626d4146103c057600080fd5b8063a118e10214610333578063b5508aa914610346578063ba414fa61461034e57600080fd5b806385226c81116100d357806385226c81146102f0578063887e4fdb146103055780638fe34aed14610318578063916a17c61461032b57600080fd5b806366d9a9a0146102b55780636d5d39df146102ca5780637e8e23d0146102dd57600080fd5b80633e5e3c23116101665780634e94ce57116101405780634e94ce571461027457806351cdc192146102875780635a98a5c01461029a5780635de22f07146102a257600080fd5b80633e5e3c231461025c5780633f7286f41461026457806340ca711a1461026c57600080fd5b8063181f88ec116101a2578063181f88ec1461020c5780631ed7831c1461021f5780632ade38801461023457806330476e271461024957600080fd5b806306ac1530146101c95780630d472879146101de5780630de4eb16146101f9575b600080fd5b6101dc6101d7366004611977565b6103cd565b005b6101e6610426565b6040519081526020015b60405180910390f35b6101dc610207366004611999565b610438565b6101dc61021a366004611999565b610496565b6102276104b3565b6040516101f091906119b2565b61023c610515565b6040516101f09190611a57565b6101dc610257366004611999565b610657565b6102276106bb565b61022761071b565b6101e661077b565b6101dc610282366004611999565b610787565b6101dc610295366004611b2d565b61082b565b6101e661088b565b6101dc6102b0366004611b2d565b610897565b6102bd6108ed565b6040516101f09190611beb565b6101dc6102d8366004611977565b6109d3565b6101e66102eb366004611999565b6109de565b6102f8610ae6565b6040516101f09190611c9e565b6101dc610313366004611999565b610bb6565b6101dc610326366004611b2d565b610c4e565b6102bd610cc8565b6101dc610341366004611977565b610dae565b6102f8610e18565b610356610ee8565b60405190151581526020016101f0565b6101dc610374366004611b2d565b611015565b6103a07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016101f0565b61022761108f565b6007546103569060ff1681565b60006103d8836110ef565b90506103ef8115806103ea5750600184115b611140565b61042160028310806104015750838310155b8061040a575081155b806103ea575061041a8385611d16565b1515611140565b505050565b60006104336103e86109de565b905090565b6000610443826111b4565b9050600061045182836111fc565b905060008382111561046e576104678483611d40565b905061047b565b6104788383611d40565b90505b610490610489606486611d57565b8210611140565b50505050565b6104b06104a2826110ef565b6104ab83611237565b611288565b50565b6060601480548060200260200160405190810160405280929190818152602001828054801561050b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104ed575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561064e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156106375783829060005260206000200180546105aa90611d6b565b80601f01602080910402602001604051908101604052809291908181526020018280546105d690611d6b565b80156106235780601f106105f857610100808354040283529160200191610623565b820191906000526020600020905b81548152906001019060200180831161060657829003601f168201915b50505050508152602001906001019061058b565b505050508152505081526020019060010190610539565b50505050905090565b6000610662826110ef565b905080806106705750600282105b15610679575050565b60025b828110156106ac5761068e8184611d16565b60000361069a57505050565b806106a481611d9f565b91505061067c565b506106b76000611140565b5050565b6060601680548060200260200160405190810160405280929190818152602001828054801561050b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104ed575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561050b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104ed575050505050905090565b6000610433600a6109de565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b50505050600060028260016107fe9190611db8565b6108089084611dd0565b6108129190611d57565b9050600061081f83611405565b90506104218282611437565b600061083682611516565b9050600160005b83518110801561084a5750815b156108815783818151811061086157610861611def565b60200260200101518310159150808061087990611d9f565b91505061083d565b5061042181611140565b600061043360646109de565b60006108a282611575565b9050600160005b8351811080156108b65750815b15610881578381815181106108cd576108cd611def565b6020026020010151831015915080806108e590611d9f565b9150506108a9565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156109bb57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161097d5790505b50505050508152505081526020019060010190610911565b60006103d8836115d3565b604051632631f2b160e11b815266b81702e05c0b6f8211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610a3557600080fd5b505afa158015610a49573d6000803e3d6000fd5b5050604051636ea8fd5160e11b8152677ffffffffffff3d56004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063dd51faa29150602401600060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b5050505060005b8215610ae057610acc8382611db8565b9050610ad9600184611d40565b9250610abc565b92915050565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610b2990611d6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5590611d6b565b8015610ba25780601f10610b7757610100808354040283529160200191610ba2565b820191906000526020600020905b815481529060010190602001808311610b8557829003601f168201915b505050505081526020019060010190610b0a565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610c0457600080fd5b505afa158015610c18573d6000803e3d6000fd5b5050505060006002826001610c2d9190611db8565b610c379084611dd0565b610c419190611d57565b9050600061081f8361160a565b6000610c5982611634565b90506001805b825181108015610c6c5750815b1561088157838181518110610c8357610c83611def565b602002602001015184600183610c999190611d40565b81518110610ca957610ca9611def565b6020026020010151111591508080610cc090611d9f565b915050610c5f565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610d9657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d585790505b50505050508152505081526020019060010190610cec565b6000610db983611660565b905082600003610dce57610421816000611437565b610dda6103ea826110ef565b6000610def610dea600186611d40565b611660565b90506104908184111580610e035750828410155b806103ea5750610e12846110ef565b15611140565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610e5b90611d6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8790611d6b565b8015610ed45780601f10610ea957610100808354040283529160200191610ed4565b820191906000526020600020905b815481529060010190602001808311610eb757829003601f168201915b505050505081526020019060010190610e3c565b600754600090610100900460ff1615610f0a5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110105760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610f98917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611e05565b60408051601f1981840301815290829052610fb291611e36565b6000604051808303816000865af19150503d8060008114610fef576040519150601f19603f3d011682016040523d82523d6000602084013e610ff4565b606091505b509150508080602001905181019061100c9190611e52565b9150505b919050565b60006110208261169a565b90506001805b8251811080156110335750815b156108815783818151811061104a5761104a611def565b6020026020010151846001836110609190611d40565b8151811061107057611070611def565b602002602001015111159150808061108790611d9f565b915050611026565b6060601380548060200260200160405190810160405280929190818152602001828054801561050b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104ed575050505050905090565b6000600282101561110257506000919050565b60025b82811015611137576111178184611d16565b156111255750600092915050565b8061112f81611d9f565b915050611105565b50600192915050565b806104b0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516111a49060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16104b06116bc565b6000816000036111c657506000919050565b815b8091506002816111d885846117c8565b6111e29190611db8565b6111ec9190611d57565b90508181036111c8575b50919050565b6000670de0b6b3a7640000611212600282611d57565b61121c8486611dd0565b6112269190611db8565b6112309190611d57565b9392505050565b6000600282101561124a57506000919050565b60025b611258600284611d57565b8111611137576112688184611d16565b156112765750600092915050565b8061128081611d9f565b91505061124d565b801515821515146106b7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112fd9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838261134e576040518060400160405280600581526020016466616c736560d81b81525061136c565b604051806040016040528060048152602001637472756560e01b8152505b6040516113799190611e74565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816113ca576040518060400160405280600581526020016466616c736560d81b8152506113e8565b604051806040016040528060048152602001637472756560e01b8152505b6040516113f59190611eb8565b60405180910390a16106b76116bc565b600080805b838110156114305761141c8183611db8565b91508061142881611d9f565b91505061140a565b5092915050565b8082146106b7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516114a89060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516114df9190611ee2565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516113f59190611f1a565b60008060015b8351811015611430578184828151811061153857611538611def565b602002602001015111156115635783818151811061155857611558611def565b602002602001015191505b8061156d81611d9f565b91505061151c565b600080805b8351811015611430578184828151811061159657611596611def565b602002602001015111156115c1578381815181106115b6576115b6611def565b602002602001015191505b806115cb81611d9f565b91505061157a565b600060025b82811015611137576115ea8184611d16565b156115f85750600092915050565b8061160281611d9f565b9150506115d8565b600080805b838111611430576116208183611db8565b91508061162c81611d9f565b91505061160f565b60606001825111611643575090565b61165c826000600185516116579190611d40565b6117e8565b5090565b6000805b828110156111f6578161167681611d9f565b925050611682826110ef565b15611695578061169181611d9f565b9150505b611664565b606060018251116116a9575090565b61165c8260018085516116579190611d40565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156117b75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526117569291602001611e05565b60408051601f198184030181529082905261177091611e36565b6000604051808303816000865af19150503d80600081146117ad576040519150601f19603f3d011682016040523d82523d6000602084013e6117b2565b606091505b505050505b6007805461ff001916610100179055565b6000816117d6600282611d57565b61121c670de0b6b3a764000086611dd0565b8082106117f457505050565b818160008560026118058585611d40565b61180f9190611d57565b6118199087611db8565b8151811061182957611829611def565b602002602001015190505b818311611949575b8086848151811061184f5761184f611def565b6020026020010151101561186f578261186781611d9f565b93505061183c565b85828151811061188157611881611def565b6020026020010151811080156118975750600082115b156118ae57816118a681611f44565b92505061186f565b818311611944578582815181106118c7576118c7611def565b60200260200101518684815181106118e1576118e1611def565b60200260200101518785815181106118fb576118fb611def565b6020026020010188858151811061191457611914611def565b6020908102919091010191909152528261192d81611d9f565b9350508115611944578161194081611f44565b9250505b611834565b8185101561195c5761195c8686846117e8565b8383101561196f5761196f8684866117e8565b505050505050565b6000806040838503121561198a57600080fd5b50508035926020909101359150565b6000602082840312156119ab57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156119f35783516001600160a01b0316835292840192918401916001016119ce565b50909695505050505050565b60005b83811015611a1a578181015183820152602001611a02565b838111156104905750506000910152565b60008151808452611a438160208601602086016119ff565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611b0757603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611af157605f19898503018352611adf848651611a2b565b948e01949350918d0191600101611ac3565b505050978a019794505091880191600101611a7e565b50919a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611b4057600080fd5b823567ffffffffffffffff80821115611b5857600080fd5b818501915085601f830112611b6c57600080fd5b813581811115611b7e57611b7e611b17565b8060051b604051601f19603f83011681018181108582111715611ba357611ba3611b17565b604052918252848201925083810185019188831115611bc157600080fd5b938501935b82851015611bdf57843584529385019392850192611bc6565b98975050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611c8f57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611c7a5783516001600160e01b0319168252928b019260019290920191908b0190611c50565b50978a01979550505091870191600101611c13565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cf357603f19888603018452611ce1858351611a2b565b94509285019290850190600101611cc5565b5092979650505050505050565b634e487b7160e01b600052601260045260246000fd5b600082611d2557611d25611d00565b500690565b634e487b7160e01b600052601160045260246000fd5b600082821015611d5257611d52611d2a565b500390565b600082611d6657611d66611d00565b500490565b600181811c90821680611d7f57607f821691505b6020821081036111f657634e487b7160e01b600052602260045260246000fd5b600060018201611db157611db1611d2a565b5060010190565b60008219821115611dcb57611dcb611d2a565b500190565b6000816000190483118215151615611dea57611dea611d2a565b500290565b634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319831681528151600090611e288160048501602087016119ff565b919091016004019392505050565b60008251611e488184602087016119ff565b9190910192915050565b600060208284031215611e6457600080fd5b8151801515811461123057600080fd5b604081526000611e9e60408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611eb08185611a2b565b949350505050565b604081526000611e9e60408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611f0c60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611f0c60408301600a8152690808080808149a59da1d60b21b602082015260400190565b600081611f5357611f53611d2a565b50600019019056fea2646970667358221220e6f512882fece3b2629297b9b04da80c71a198c31c91c7cb79378deed64c61e064736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModLoopsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611f918061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806366d9a9a0116100f9578063a118e10211610097578063d313940d11610071578063d313940d14610366578063d6a2ec7614610379578063e20c9f71146103b8578063fa7626d4146103c057600080fd5b8063a118e10214610333578063b5508aa914610346578063ba414fa61461034e57600080fd5b806385226c81116100d357806385226c81146102f0578063887e4fdb146103055780638fe34aed14610318578063916a17c61461032b57600080fd5b806366d9a9a0146102b55780636d5d39df146102ca5780637e8e23d0146102dd57600080fd5b80633e5e3c23116101665780634e94ce57116101405780634e94ce571461027457806351cdc192146102875780635a98a5c01461029a5780635de22f07146102a257600080fd5b80633e5e3c231461025c5780633f7286f41461026457806340ca711a1461026c57600080fd5b8063181f88ec116101a2578063181f88ec1461020c5780631ed7831c1461021f5780632ade38801461023457806330476e271461024957600080fd5b806306ac1530146101c95780630d472879146101de5780630de4eb16146101f9575b600080fd5b6101dc6101d7366004611977565b6103cd565b005b6101e6610426565b6040519081526020015b60405180910390f35b6101dc610207366004611999565b610438565b6101dc61021a366004611999565b610496565b6102276104b3565b6040516101f091906119b2565b61023c610515565b6040516101f09190611a57565b6101dc610257366004611999565b610657565b6102276106bb565b61022761071b565b6101e661077b565b6101dc610282366004611999565b610787565b6101dc610295366004611b2d565b61082b565b6101e661088b565b6101dc6102b0366004611b2d565b610897565b6102bd6108ed565b6040516101f09190611beb565b6101dc6102d8366004611977565b6109d3565b6101e66102eb366004611999565b6109de565b6102f8610ae6565b6040516101f09190611c9e565b6101dc610313366004611999565b610bb6565b6101dc610326366004611b2d565b610c4e565b6102bd610cc8565b6101dc610341366004611977565b610dae565b6102f8610e18565b610356610ee8565b60405190151581526020016101f0565b6101dc610374366004611b2d565b611015565b6103a07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016101f0565b61022761108f565b6007546103569060ff1681565b60006103d8836110ef565b90506103ef8115806103ea5750600184115b611140565b61042160028310806104015750838310155b8061040a575081155b806103ea575061041a8385611d16565b1515611140565b505050565b60006104336103e86109de565b905090565b6000610443826111b4565b9050600061045182836111fc565b905060008382111561046e576104678483611d40565b905061047b565b6104788383611d40565b90505b610490610489606486611d57565b8210611140565b50505050565b6104b06104a2826110ef565b6104ab83611237565b611288565b50565b6060601480548060200260200160405190810160405280929190818152602001828054801561050b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104ed575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561064e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156106375783829060005260206000200180546105aa90611d6b565b80601f01602080910402602001604051908101604052809291908181526020018280546105d690611d6b565b80156106235780601f106105f857610100808354040283529160200191610623565b820191906000526020600020905b81548152906001019060200180831161060657829003601f168201915b50505050508152602001906001019061058b565b505050508152505081526020019060010190610539565b50505050905090565b6000610662826110ef565b905080806106705750600282105b15610679575050565b60025b828110156106ac5761068e8184611d16565b60000361069a57505050565b806106a481611d9f565b91505061067c565b506106b76000611140565b5050565b6060601680548060200260200160405190810160405280929190818152602001828054801561050b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104ed575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561050b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104ed575050505050905090565b6000610433600a6109de565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b50505050600060028260016107fe9190611db8565b6108089084611dd0565b6108129190611d57565b9050600061081f83611405565b90506104218282611437565b600061083682611516565b9050600160005b83518110801561084a5750815b156108815783818151811061086157610861611def565b60200260200101518310159150808061087990611d9f565b91505061083d565b5061042181611140565b600061043360646109de565b60006108a282611575565b9050600160005b8351811080156108b65750815b15610881578381815181106108cd576108cd611def565b6020026020010151831015915080806108e590611d9f565b9150506108a9565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156109bb57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161097d5790505b50505050508152505081526020019060010190610911565b60006103d8836115d3565b604051632631f2b160e11b815266b81702e05c0b6f8211156004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610a3557600080fd5b505afa158015610a49573d6000803e3d6000fd5b5050604051636ea8fd5160e11b8152677ffffffffffff3d56004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063dd51faa29150602401600060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b5050505060005b8215610ae057610acc8382611db8565b9050610ad9600184611d40565b9250610abc565b92915050565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610b2990611d6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5590611d6b565b8015610ba25780601f10610b7757610100808354040283529160200191610ba2565b820191906000526020600020905b815481529060010190602001808311610b8557829003601f168201915b505050505081526020019060010190610b0a565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610c0457600080fd5b505afa158015610c18573d6000803e3d6000fd5b5050505060006002826001610c2d9190611db8565b610c379084611dd0565b610c419190611d57565b9050600061081f8361160a565b6000610c5982611634565b90506001805b825181108015610c6c5750815b1561088157838181518110610c8357610c83611def565b602002602001015184600183610c999190611d40565b81518110610ca957610ca9611def565b6020026020010151111591508080610cc090611d9f565b915050610c5f565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610d9657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d585790505b50505050508152505081526020019060010190610cec565b6000610db983611660565b905082600003610dce57610421816000611437565b610dda6103ea826110ef565b6000610def610dea600186611d40565b611660565b90506104908184111580610e035750828410155b806103ea5750610e12846110ef565b15611140565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610e5b90611d6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8790611d6b565b8015610ed45780601f10610ea957610100808354040283529160200191610ed4565b820191906000526020600020905b815481529060010190602001808311610eb757829003601f168201915b505050505081526020019060010190610e3c565b600754600090610100900460ff1615610f0a5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110105760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610f98917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611e05565b60408051601f1981840301815290829052610fb291611e36565b6000604051808303816000865af19150503d8060008114610fef576040519150601f19603f3d011682016040523d82523d6000602084013e610ff4565b606091505b509150508080602001905181019061100c9190611e52565b9150505b919050565b60006110208261169a565b90506001805b8251811080156110335750815b156108815783818151811061104a5761104a611def565b6020026020010151846001836110609190611d40565b8151811061107057611070611def565b602002602001015111159150808061108790611d9f565b915050611026565b6060601380548060200260200160405190810160405280929190818152602001828054801561050b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104ed575050505050905090565b6000600282101561110257506000919050565b60025b82811015611137576111178184611d16565b156111255750600092915050565b8061112f81611d9f565b915050611105565b50600192915050565b806104b0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516111a49060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16104b06116bc565b6000816000036111c657506000919050565b815b8091506002816111d885846117c8565b6111e29190611db8565b6111ec9190611d57565b90508181036111c8575b50919050565b6000670de0b6b3a7640000611212600282611d57565b61121c8486611dd0565b6112269190611db8565b6112309190611d57565b9392505050565b6000600282101561124a57506000919050565b60025b611258600284611d57565b8111611137576112688184611d16565b156112765750600092915050565b8061128081611d9f565b91505061124d565b801515821515146106b7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112fd9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838261134e576040518060400160405280600581526020016466616c736560d81b81525061136c565b604051806040016040528060048152602001637472756560e01b8152505b6040516113799190611e74565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816113ca576040518060400160405280600581526020016466616c736560d81b8152506113e8565b604051806040016040528060048152602001637472756560e01b8152505b6040516113f59190611eb8565b60405180910390a16106b76116bc565b600080805b838110156114305761141c8183611db8565b91508061142881611d9f565b91505061140a565b5092915050565b8082146106b7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516114a89060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516114df9190611ee2565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516113f59190611f1a565b60008060015b8351811015611430578184828151811061153857611538611def565b602002602001015111156115635783818151811061155857611558611def565b602002602001015191505b8061156d81611d9f565b91505061151c565b600080805b8351811015611430578184828151811061159657611596611def565b602002602001015111156115c1578381815181106115b6576115b6611def565b602002602001015191505b806115cb81611d9f565b91505061157a565b600060025b82811015611137576115ea8184611d16565b156115f85750600092915050565b8061160281611d9f565b9150506115d8565b600080805b838111611430576116208183611db8565b91508061162c81611d9f565b91505061160f565b60606001825111611643575090565b61165c826000600185516116579190611d40565b6117e8565b5090565b6000805b828110156111f6578161167681611d9f565b925050611682826110ef565b15611695578061169181611d9f565b9150505b611664565b606060018251116116a9575090565b61165c8260018085516116579190611d40565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156117b75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526117569291602001611e05565b60408051601f198184030181529082905261177091611e36565b6000604051808303816000865af19150503d80600081146117ad576040519150601f19603f3d011682016040523d82523d6000602084013e6117b2565b606091505b505050505b6007805461ff001916610100179055565b6000816117d6600282611d57565b61121c670de0b6b3a764000086611dd0565b8082106117f457505050565b818160008560026118058585611d40565b61180f9190611d57565b6118199087611db8565b8151811061182957611829611def565b602002602001015190505b818311611949575b8086848151811061184f5761184f611def565b6020026020010151101561186f578261186781611d9f565b93505061183c565b85828151811061188157611881611def565b6020026020010151811080156118975750600082115b156118ae57816118a681611f44565b92505061186f565b818311611944578582815181106118c7576118c7611def565b60200260200101518684815181106118e1576118e1611def565b60200260200101518785815181106118fb576118fb611def565b6020026020010188858151811061191457611914611def565b6020908102919091010191909152528261192d81611d9f565b9350508115611944578161194081611f44565b9250505b611834565b8185101561195c5761195c8686846117e8565b8383101561196f5761196f8684866117e8565b505050505050565b6000806040838503121561198a57600080fd5b50508035926020909101359150565b6000602082840312156119ab57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156119f35783516001600160a01b0316835292840192918401916001016119ce565b50909695505050505050565b60005b83811015611a1a578181015183820152602001611a02565b838111156104905750506000910152565b60008151808452611a438160208601602086016119ff565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611b0757603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611af157605f19898503018352611adf848651611a2b565b948e01949350918d0191600101611ac3565b505050978a019794505091880191600101611a7e565b50919a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611b4057600080fd5b823567ffffffffffffffff80821115611b5857600080fd5b818501915085601f830112611b6c57600080fd5b813581811115611b7e57611b7e611b17565b8060051b604051601f19603f83011681018181108582111715611ba357611ba3611b17565b604052918252848201925083810185019188831115611bc157600080fd5b938501935b82851015611bdf57843584529385019392850192611bc6565b98975050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611c8f57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611c7a5783516001600160e01b0319168252928b019260019290920191908b0190611c50565b50978a01979550505091870191600101611c13565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cf357603f19888603018452611ce1858351611a2b565b94509285019290850190600101611cc5565b5092979650505050505050565b634e487b7160e01b600052601260045260246000fd5b600082611d2557611d25611d00565b500690565b634e487b7160e01b600052601160045260246000fd5b600082821015611d5257611d52611d2a565b500390565b600082611d6657611d66611d00565b500490565b600181811c90821680611d7f57607f821691505b6020821081036111f657634e487b7160e01b600052602260045260246000fd5b600060018201611db157611db1611d2a565b5060010190565b60008219821115611dcb57611dcb611d2a565b500190565b6000816000190483118215151615611dea57611dea611d2a565b500290565b634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319831681528151600090611e288160048501602087016119ff565b919091016004019392505050565b60008251611e488184602087016119ff565b9190910192915050565b600060208284031215611e6457600080fd5b8151801515811461123057600080fd5b604081526000611e9e60408301600a8152690808080808081319599d60b21b602082015260400190565b8281036020840152611eb08185611a2b565b949350505050565b604081526000611e9e60408301600a8152690808080808149a59da1d60b21b602082015260400190565b604081526000611f0c60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b604081526000611f0c60408301600a8152690808080808149a59da1d60b21b602082015260400190565b600081611f5357611f53611d2a565b50600019019056fea2646970667358221220e6f512882fece3b2629297b9b04da80c71a198c31c91c7cb79378deed64c61e064736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModLoopsTestField

    syntax S2KtestZModLoopsTestField ::= "stdstore" [symbol(), klabel(field_test%LoopsTest_stdstore)]

    syntax S2KtestZModLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_test%LoopsTest_IS_TEST)]

    syntax S2KtestZModLoopsTestField ::= "_failed" [symbol(), klabel(field_test%LoopsTest__failed)]

    syntax S2KtestZModLoopsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%LoopsTest_stdChainsInitialized)]

    syntax S2KtestZModLoopsTestField ::= "chains" [symbol(), klabel(field_test%LoopsTest_chains)]

    syntax S2KtestZModLoopsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%LoopsTest_defaultRpcUrls)]

    syntax S2KtestZModLoopsTestField ::= "idToAlias" [symbol(), klabel(field_test%LoopsTest_idToAlias)]

    syntax S2KtestZModLoopsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%LoopsTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModLoopsTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%LoopsTest_gasMeteringOff)]

    syntax S2KtestZModLoopsTestField ::= "_excludedContracts" [symbol(), klabel(field_test%LoopsTest__excludedContracts)]

    syntax S2KtestZModLoopsTestField ::= "_excludedSenders" [symbol(), klabel(field_test%LoopsTest__excludedSenders)]

    syntax S2KtestZModLoopsTestField ::= "_targetedContracts" [symbol(), klabel(field_test%LoopsTest__targetedContracts)]

    syntax S2KtestZModLoopsTestField ::= "_targetedSenders" [symbol(), klabel(field_test%LoopsTest__targetedSenders)]

    syntax S2KtestZModLoopsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%LoopsTest__excludedArtifacts)]

    syntax S2KtestZModLoopsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%LoopsTest__targetedArtifacts)]

    syntax S2KtestZModLoopsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%LoopsTest__targetedArtifactSelectors)]

    syntax S2KtestZModLoopsTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%LoopsTest__targetedSelectors)]

    syntax S2KtestZModLoopsTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%LoopsTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModLoopsTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModLoopsTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModLoopsTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModLoopsTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModLoopsTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModLoopsTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModLoopsTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModLoopsTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModLoopsTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModLoopsTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModLoopsTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModLoopsTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModLoopsTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModLoopsTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModLoopsTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModLoopsTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModLoopsTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModLoopsTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModLoopsTestContract "." S2KtestZModLoopsTestMethod [function(), symbol(), klabel(method_test%LoopsTest)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KISZUndTEST_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KexcludeContracts_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KexcludeSenders_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2Kfailed_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2Kkevm_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KsumZUndN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KsumZUndN_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtargetArtifacts_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtargetContracts_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtargetInterfaces_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtargetSelectors_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtargetSenders_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsNotPrime" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestIsNotPrime_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestIsPrime_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsPrimeBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestIsPrimeBroken_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsPrimeOpt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestIsPrimeOpt_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestMax" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestMax_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestMaxBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestMaxBroken_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestNthPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestNthPrime_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSort" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestSort_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSortBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestSortBroken_uint256_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSqrt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestSqrt_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSumToN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestSumToN_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSumToNBroken" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestSumToNBroken_uint256)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestZUndsumZUnd10" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestZUndsumZUnd10_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestZUndsumZUnd100" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestZUndsumZUnd100_)]

    syntax S2KtestZModLoopsTestMethod ::= "S2KtestZUndsumZUnd1000" "(" ")" [symbol(), klabel(method_test%LoopsTest_S2KtestZUndsumZUnd1000_)]

    rule  ( S2KtestZModLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KsumZUndN ( V0_n : uint256 ) => #abiCallData ( "sum_N" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( S2KtestZModLoopsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtestIsNotPrime ( V0_n : uint256 ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( S2KtestZModLoopsTest . S2KtestIsPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestIsPrimeBroken ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestIsPrimeOpt ( V0_n : uint256 ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( S2KtestZModLoopsTest . S2KtestMax ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testMax" , #array ( #uint256 ( V0_numbers_0 ) , 2 , #uint256 ( V0_numbers_0 ) , #uint256 ( V0_numbers_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestMaxBroken ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testMaxBroken" , #array ( #uint256 ( V0_numbers_0 ) , 2 , #uint256 ( V0_numbers_0 ) , #uint256 ( V0_numbers_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestNthPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestSort ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testSort" , #array ( #uint256 ( V0_numbers_0 ) , 2 , #uint256 ( V0_numbers_0 ) , #uint256 ( V0_numbers_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestSortBroken ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testSortBroken" , #array ( #uint256 ( V0_numbers_0 ) , 2 , #uint256 ( V0_numbers_0 ) , #uint256 ( V0_numbers_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))


    rule  ( S2KtestZModLoopsTest . S2KtestSqrt ( V0_x : uint256 ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModLoopsTest . S2KtestSumToN ( V0_n : uint256 ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( S2KtestZModLoopsTest . S2KtestSumToNBroken ( V0_n : uint256 ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )


    rule  ( S2KtestZModLoopsTest . S2KtestZUndsumZUnd10 ( ) => #abiCallData ( "test_sum_10" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtestZUndsumZUnd100 ( ) => #abiCallData ( "test_sum_100" , .TypedArgs ) )


    rule  ( S2KtestZModLoopsTest . S2KtestZUndsumZUnd1000 ( ) => #abiCallData ( "test_sum_1000" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "sum_N(uint256)" ) => 2123244496 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testIsNotPrime(uint256)" ) => 809987623 )


    rule  ( selector ( "testIsPrime(uint256,uint256)" ) => 111940912 )


    rule  ( selector ( "testIsPrimeBroken(uint256,uint256)" ) => 1834826207 )


    rule  ( selector ( "testIsPrimeOpt(uint256)" ) => 404719852 )


    rule  ( selector ( "testMax(uint256[])" ) => 1575104263 )


    rule  ( selector ( "testMaxBroken(uint256[])" ) => 1372438930 )


    rule  ( selector ( "testNthPrime(uint256,uint256)" ) => 2702762242 )


    rule  ( selector ( "testSort(uint256[])" ) => 2414037741 )


    rule  ( selector ( "testSortBroken(uint256[])" ) => 3541275661 )


    rule  ( selector ( "testSqrt(uint256)" ) => 233106198 )


    rule  ( selector ( "testSumToN(uint256)" ) => 2289979355 )


    rule  ( selector ( "testSumToNBroken(uint256)" ) => 1318374999 )


    rule  ( selector ( "test_sum_10()" ) => 1087009050 )


    rule  ( selector ( "test_sum_100()" ) => 1519953344 )


    rule  ( selector ( "test_sum_1000()" ) => 222767225 )


endmodule

module S2KtestZModMergeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModMergeTestContract

    syntax S2KtestZModMergeTestContract ::= "S2KtestZModMergeTest" [symbol(), klabel(contract_test%MergeTest)]

    rule  ( #binRuntime ( S2KtestZModMergeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610166578063d6a2ec761461017e578063e20c9f71146101bd578063fa7626d4146101c557600080fd5b806385226c8114610141578063916a17c614610156578063b5508aa91461015e57600080fd5b80631ed7831c146100d45780632ade3880146100f25780633ba4d90c146101075780633e5e3c231461011c5780633f7286f41461012457806366d9a9a01461012c575b600080fd5b6100dc6101d2565b6040516100e9919061095d565b60405180910390f35b6100fa610234565b6040516100e991906109da565b61011a610115366004610ab5565b610376565b005b6100dc6103a4565b6100dc610404565b610134610464565b6040516100e99190610ace565b61014961054a565b6040516100e99190610b81565b61013461061a565b610149610700565b61016e6107d0565b60405190151581526020016100e9565b6101a57f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100e9565b6100dc6108fd565b60075461016e9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020c575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036d57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103565783829060005260206000200180546102c990610bee565b80601f01602080910402602001604051908101604052809291908181526020018280546102f590610bee565b80156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b5050505050815260200190600101906102aa565b505050508152505081526020019060010190610258565b50505050905090565b600a811015610389576000601c5561038f565b6001601c555b6002601c54106103a1576103a1610c28565b50565b6060601680548060200260200160405190810160405280929190818152602001828054801561022a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020c575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020c575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561036d5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104f45790505b50505050508152505081526020019060010190610488565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036d57838290600052602060002001805461058d90610bee565b80601f01602080910402602001604051908101604052809291908181526020018280546105b990610bee565b80156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b50505050508152602001906001019061056e565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561036d5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106e857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106aa5790505b5050505050815250508152602001906001019061063e565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036d57838290600052602060002001805461074390610bee565b80601f016020809104026020016040519081016040528092919081815260200182805461076f90610bee565b80156107bc5780601f10610791576101008083540402835291602001916107bc565b820191906000526020600020905b81548152906001019060200180831161079f57829003601f168201915b505050505081526020019060010190610724565b600754600090610100900460ff16156107f25750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108f85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610880917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3e565b60408051601f198184030181529082905261089a91610c6f565b6000604051808303816000865af19150503d80600081146108d7576040519150601f19603f3d011682016040523d82523d6000602084013e6108dc565b606091505b50915050808060200190518101906108f49190610c8b565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561022a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020c575050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101561099e5783516001600160a01b031683529284019291840191600101610979565b50909695505050505050565b60005b838110156109c55781810151838201526020016109ad565b838111156109d4576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aa857603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9157898403605f1901835284518051808652610a72818e88018f85016109aa565b958c0195601f01601f1916949094018b019350918a0191600101610a4b565b509197505050938601935090850190600101610a01565b5092979650505050505050565b600060208284031215610ac757600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b7257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b5d5783516001600160e01b0319168252928b019260019290920191908b0190610b33565b50978a01979550505091870191600101610af6565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aa857878503603f1901845281518051808752610bcf818989018a85016109aa565b601f01601f191695909501860194509285019290850190600101610ba8565b600181811c90821680610c0257607f821691505b602082108103610c2257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c618160048501602087016109aa565b919091016004019392505050565b60008251610c818184602087016109aa565b9190910192915050565b600060208284031215610c9d57600080fd5b81518015158114610cad57600080fd5b939250505056fea26469706673582212209f4b1605b7f5af91c862b84cd9fc0ebef24335c6eccd5f5dbc41da1508d6167a64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModMergeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610cea8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610166578063d6a2ec761461017e578063e20c9f71146101bd578063fa7626d4146101c557600080fd5b806385226c8114610141578063916a17c614610156578063b5508aa91461015e57600080fd5b80631ed7831c146100d45780632ade3880146100f25780633ba4d90c146101075780633e5e3c231461011c5780633f7286f41461012457806366d9a9a01461012c575b600080fd5b6100dc6101d2565b6040516100e9919061095d565b60405180910390f35b6100fa610234565b6040516100e991906109da565b61011a610115366004610ab5565b610376565b005b6100dc6103a4565b6100dc610404565b610134610464565b6040516100e99190610ace565b61014961054a565b6040516100e99190610b81565b61013461061a565b610149610700565b61016e6107d0565b60405190151581526020016100e9565b6101a57f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100e9565b6100dc6108fd565b60075461016e9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561022a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020c575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036d57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103565783829060005260206000200180546102c990610bee565b80601f01602080910402602001604051908101604052809291908181526020018280546102f590610bee565b80156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b5050505050815260200190600101906102aa565b505050508152505081526020019060010190610258565b50505050905090565b600a811015610389576000601c5561038f565b6001601c555b6002601c54106103a1576103a1610c28565b50565b6060601680548060200260200160405190810160405280929190818152602001828054801561022a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020c575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020c575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561036d5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104f45790505b50505050508152505081526020019060010190610488565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561036d57838290600052602060002001805461058d90610bee565b80601f01602080910402602001604051908101604052809291908181526020018280546105b990610bee565b80156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b50505050508152602001906001019061056e565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561036d5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106e857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106aa5790505b5050505050815250508152602001906001019061063e565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561036d57838290600052602060002001805461074390610bee565b80601f016020809104026020016040519081016040528092919081815260200182805461076f90610bee565b80156107bc5780601f10610791576101008083540402835291602001916107bc565b820191906000526020600020905b81548152906001019060200180831161079f57829003601f168201915b505050505081526020019060010190610724565b600754600090610100900460ff16156107f25750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108f85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610880917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3e565b60408051601f198184030181529082905261089a91610c6f565b6000604051808303816000865af19150503d80600081146108d7576040519150601f19603f3d011682016040523d82523d6000602084013e6108dc565b606091505b50915050808060200190518101906108f49190610c8b565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561022a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020c575050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101561099e5783516001600160a01b031683529284019291840191600101610979565b50909695505050505050565b60005b838110156109c55781810151838201526020016109ad565b838111156109d4576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aa857603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610a9157898403605f1901835284518051808652610a72818e88018f85016109aa565b958c0195601f01601f1916949094018b019350918a0191600101610a4b565b509197505050938601935090850190600101610a01565b5092979650505050505050565b600060208284031215610ac757600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b7257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b5d5783516001600160e01b0319168252928b019260019290920191908b0190610b33565b50978a01979550505091870191600101610af6565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aa857878503603f1901845281518051808752610bcf818989018a85016109aa565b601f01601f191695909501860194509285019290850190600101610ba8565b600181811c90821680610c0257607f821691505b602082108103610c2257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c618160048501602087016109aa565b919091016004019392505050565b60008251610c818184602087016109aa565b9190910192915050565b600060208284031215610c9d57600080fd5b81518015158114610cad57600080fd5b939250505056fea26469706673582212209f4b1605b7f5af91c862b84cd9fc0ebef24335c6eccd5f5dbc41da1508d6167a64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModMergeTestField

    syntax S2KtestZModMergeTestField ::= "stdstore" [symbol(), klabel(field_test%MergeTest_stdstore)]

    syntax S2KtestZModMergeTestField ::= "IS_TEST" [symbol(), klabel(field_test%MergeTest_IS_TEST)]

    syntax S2KtestZModMergeTestField ::= "_failed" [symbol(), klabel(field_test%MergeTest__failed)]

    syntax S2KtestZModMergeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%MergeTest_stdChainsInitialized)]

    syntax S2KtestZModMergeTestField ::= "chains" [symbol(), klabel(field_test%MergeTest_chains)]

    syntax S2KtestZModMergeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%MergeTest_defaultRpcUrls)]

    syntax S2KtestZModMergeTestField ::= "idToAlias" [symbol(), klabel(field_test%MergeTest_idToAlias)]

    syntax S2KtestZModMergeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%MergeTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModMergeTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%MergeTest_gasMeteringOff)]

    syntax S2KtestZModMergeTestField ::= "_excludedContracts" [symbol(), klabel(field_test%MergeTest__excludedContracts)]

    syntax S2KtestZModMergeTestField ::= "_excludedSenders" [symbol(), klabel(field_test%MergeTest__excludedSenders)]

    syntax S2KtestZModMergeTestField ::= "_targetedContracts" [symbol(), klabel(field_test%MergeTest__targetedContracts)]

    syntax S2KtestZModMergeTestField ::= "_targetedSenders" [symbol(), klabel(field_test%MergeTest__targetedSenders)]

    syntax S2KtestZModMergeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%MergeTest__excludedArtifacts)]

    syntax S2KtestZModMergeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%MergeTest__targetedArtifacts)]

    syntax S2KtestZModMergeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%MergeTest__targetedArtifactSelectors)]

    syntax S2KtestZModMergeTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%MergeTest__targetedSelectors)]

    syntax S2KtestZModMergeTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%MergeTest__targetedInterfaces)]

    syntax S2KtestZModMergeTestField ::= "y" [symbol(), klabel(field_test%MergeTest_y)]

    rule  ( #loc ( S2KtestZModMergeTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModMergeTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModMergeTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModMergeTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModMergeTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModMergeTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModMergeTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModMergeTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModMergeTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModMergeTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModMergeTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModMergeTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModMergeTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModMergeTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModMergeTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModMergeTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModMergeTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModMergeTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModMergeTest . y ) => 28 )


    syntax Bytes ::= S2KtestZModMergeTestContract "." S2KtestZModMergeTestMethod [function(), symbol(), klabel(method_test%MergeTest)]

    syntax S2KtestZModMergeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KISZUndTEST_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KexcludeContracts_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KexcludeSenders_)]

    syntax S2KtestZModMergeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%MergeTest_S2Kfailed_)]

    syntax S2KtestZModMergeTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%MergeTest_S2Kkevm_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KtargetArtifacts_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KtargetContracts_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KtargetInterfaces_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KtargetSelectors_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%MergeTest_S2KtargetSenders_)]

    syntax S2KtestZModMergeTestMethod ::= "S2KtestZUndbranchZUndmerge" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%MergeTest_S2KtestZUndbranchZUndmerge_uint256)]

    rule  ( S2KtestZModMergeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMergeTest . S2KtestZUndbranchZUndmerge ( V0_x : uint256 ) => #abiCallData ( "test_branch_merge" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_branch_merge(uint256)" ) => 1000659212 )


endmodule

module S2KtestZModMethodDisambiguateTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModMethodDisambiguateTestContract

    syntax S2KtestZModMethodDisambiguateTestContract ::= "S2KtestZModMethodDisambiguateTest" [symbol(), klabel(contract_test%MethodDisambiguateTest)]

    rule  ( #binRuntime ( S2KtestZModMethodDisambiguateTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610193578063e20c9f71146101ab578063fa7626d4146101b3578063fc563658146101c057600080fd5b806385226c811461016e578063916a17c614610183578063b5508aa91461018b57600080fd5b80633e5e3c23116100c85780633e5e3c231461013f5780633f7286f41461014757806366d9a9a01461014f5780636b8153b01461016457600080fd5b8063089791d6146100ef5780631ed7831c146101155780632ade38801461012a575b600080fd5b6101026100fd366004610bad565b6101d3565b6040519081526020015b60405180910390f35b61011d6101ed565b60405161010c9190610bda565b61013261024f565b60405161010c9190610c57565b61011d610391565b61011d6103f1565b610157610451565b60405161010c9190610d32565b61016c610537565b005b61017661054f565b60405161010c9190610de5565b61015761061f565b610176610705565b61019b6107d5565b604051901515815260200161010c565b61011d610902565b60075461019b9060ff1681565b6101026101ce366004610e52565b610962565b60006101e563ffffffff831680610976565b506002919050565b6060601480548060200260200160405190810160405280929190818152602001828054801561024557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610227575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103715783829060005260206000200180546102e490610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461031090610e6b565b801561035d5780601f106103325761010080835404028352916020019161035d565b820191906000526020600020905b81548152906001019060200180831161034057829003601f168201915b5050505050815260200190600101906102c5565b505050508152505081526020019060010190610273565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104e15790505b50505050508152505081526020019060010190610475565b600061054c600161054783610962565b610976565b50565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461059290610e6b565b80601f01602080910402602001604051908101604052809291908181526020018280546105be90610e6b565b801561060b5780601f106105e05761010080835404028352916020019161060b565b820191906000526020600020905b8154815290600101906020018083116105ee57829003601f168201915b505050505081526020019060010190610573565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ed57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106af5790505b50505050508152505081526020019060010190610643565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461074890610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461077490610e6b565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b505050505081526020019060010190610729565b600754600090610100900460ff16156107f75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108fd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610885917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ea5565b60408051601f198184030181529082905261089f91610ed6565b6000604051808303816000865af19150503d80600081146108dc576040519150601f19603f3d011682016040523d82523d6000602084013e6108e1565b606091505b50915050808060200190518101906108f99190610ef2565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b600061096e8283610976565b506001919050565b808214610a9d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109e79060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a9d610aa1565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b9c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b3b9291602001610ea5565b60408051601f1981840301815290829052610b5591610ed6565b6000604051808303816000865af19150503d8060008114610b92576040519150601f19603f3d011682016040523d82523d6000602084013e610b97565b606091505b505050505b6007805461ff001916610100179055565b600060208284031215610bbf57600080fd5b813563ffffffff81168114610bd357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610c1b5783516001600160a01b031683529284019291840191600101610bf6565b50909695505050505050565b60005b83811015610c42578181015183820152602001610c2a565b83811115610c51576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d2557603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610d0e57898403605f1901835284518051808652610cef818e88018f8501610c27565b958c0195601f01601f1916949094018b019350918a0191600101610cc8565b509197505050938601935090850190600101610c7e565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610dd657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610dc15783516001600160e01b0319168252928b019260019290920191908b0190610d97565b50978a01979550505091870191600101610d5a565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d2557878503603f1901845281518051808752610e33818989018a8501610c27565b601f01601f191695909501860194509285019290850190600101610e0c565b600060208284031215610e6457600080fd5b5035919050565b600181811c90821680610e7f57607f821691505b602082108103610e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610ec8816004850160208701610c27565b919091016004019392505050565b60008251610ee8818460208701610c27565b9190910192915050565b600060208284031215610f0457600080fd5b81518015158114610bd357600080fdfea26469706673582212204a3939a8bd77aa765ba007672f6229b021ca838f8a6920dd7dfdf86c4c7dca1564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModMethodDisambiguateTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610f4a8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610193578063e20c9f71146101ab578063fa7626d4146101b3578063fc563658146101c057600080fd5b806385226c811461016e578063916a17c614610183578063b5508aa91461018b57600080fd5b80633e5e3c23116100c85780633e5e3c231461013f5780633f7286f41461014757806366d9a9a01461014f5780636b8153b01461016457600080fd5b8063089791d6146100ef5780631ed7831c146101155780632ade38801461012a575b600080fd5b6101026100fd366004610bad565b6101d3565b6040519081526020015b60405180910390f35b61011d6101ed565b60405161010c9190610bda565b61013261024f565b60405161010c9190610c57565b61011d610391565b61011d6103f1565b610157610451565b60405161010c9190610d32565b61016c610537565b005b61017661054f565b60405161010c9190610de5565b61015761061f565b610176610705565b61019b6107d5565b604051901515815260200161010c565b61011d610902565b60075461019b9060ff1681565b6101026101ce366004610e52565b610962565b60006101e563ffffffff831680610976565b506002919050565b6060601480548060200260200160405190810160405280929190818152602001828054801561024557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610227575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103715783829060005260206000200180546102e490610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461031090610e6b565b801561035d5780601f106103325761010080835404028352916020019161035d565b820191906000526020600020905b81548152906001019060200180831161034057829003601f168201915b5050505050815260200190600101906102c5565b505050508152505081526020019060010190610273565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561051f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104e15790505b50505050508152505081526020019060010190610475565b600061054c600161054783610962565b610976565b50565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461059290610e6b565b80601f01602080910402602001604051908101604052809291908181526020018280546105be90610e6b565b801561060b5780601f106105e05761010080835404028352916020019161060b565b820191906000526020600020905b8154815290600101906020018083116105ee57829003601f168201915b505050505081526020019060010190610573565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106ed57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106af5790505b50505050508152505081526020019060010190610643565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461074890610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461077490610e6b565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b505050505081526020019060010190610729565b600754600090610100900460ff16156107f75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108fd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610885917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ea5565b60408051601f198184030181529082905261089f91610ed6565b6000604051808303816000865af19150503d80600081146108dc576040519150601f19603f3d011682016040523d82523d6000602084013e6108e1565b606091505b50915050808060200190518101906108f99190610ef2565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b600061096e8283610976565b506001919050565b808214610a9d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109e79060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a9d610aa1565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b9c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b3b9291602001610ea5565b60408051601f1981840301815290829052610b5591610ed6565b6000604051808303816000865af19150503d8060008114610b92576040519150601f19603f3d011682016040523d82523d6000602084013e610b97565b606091505b505050505b6007805461ff001916610100179055565b600060208284031215610bbf57600080fd5b813563ffffffff81168114610bd357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610c1b5783516001600160a01b031683529284019291840191600101610bf6565b50909695505050505050565b60005b83811015610c42578181015183820152602001610c2a565b83811115610c51576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d2557603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610d0e57898403605f1901835284518051808652610cef818e88018f8501610c27565b958c0195601f01601f1916949094018b019350918a0191600101610cc8565b509197505050938601935090850190600101610c7e565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610dd657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610dc15783516001600160e01b0319168252928b019260019290920191908b0190610d97565b50978a01979550505091870191600101610d5a565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d2557878503603f1901845281518051808752610e33818989018a8501610c27565b601f01601f191695909501860194509285019290850190600101610e0c565b600060208284031215610e6457600080fd5b5035919050565b600181811c90821680610e7f57607f821691505b602082108103610e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610ec8816004850160208701610c27565b919091016004019392505050565b60008251610ee8818460208701610c27565b9190910192915050565b600060208284031215610f0457600080fd5b81518015158114610bd357600080fdfea26469706673582212204a3939a8bd77aa765ba007672f6229b021ca838f8a6920dd7dfdf86c4c7dca1564736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModMethodDisambiguateTestField

    syntax S2KtestZModMethodDisambiguateTestField ::= "stdstore" [symbol(), klabel(field_test%MethodDisambiguateTest_stdstore)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "IS_TEST" [symbol(), klabel(field_test%MethodDisambiguateTest_IS_TEST)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_failed" [symbol(), klabel(field_test%MethodDisambiguateTest__failed)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%MethodDisambiguateTest_stdChainsInitialized)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "chains" [symbol(), klabel(field_test%MethodDisambiguateTest_chains)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%MethodDisambiguateTest_defaultRpcUrls)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "idToAlias" [symbol(), klabel(field_test%MethodDisambiguateTest_idToAlias)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%MethodDisambiguateTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%MethodDisambiguateTest_gasMeteringOff)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_excludedContracts" [symbol(), klabel(field_test%MethodDisambiguateTest__excludedContracts)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_excludedSenders" [symbol(), klabel(field_test%MethodDisambiguateTest__excludedSenders)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_targetedContracts" [symbol(), klabel(field_test%MethodDisambiguateTest__targetedContracts)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_targetedSenders" [symbol(), klabel(field_test%MethodDisambiguateTest__targetedSenders)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%MethodDisambiguateTest__excludedArtifacts)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%MethodDisambiguateTest__targetedArtifacts)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%MethodDisambiguateTest__targetedArtifactSelectors)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%MethodDisambiguateTest__targetedSelectors)]

    syntax S2KtestZModMethodDisambiguateTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%MethodDisambiguateTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModMethodDisambiguateTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModMethodDisambiguateTestContract "." S2KtestZModMethodDisambiguateTestMethod [function(), symbol(), klabel(method_test%MethodDisambiguateTest)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KISZUndTEST_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KexcludeContracts_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KexcludeSenders_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2Kfailed_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KgetNumber_uint256)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint32" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KgetNumber_uint32)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtargetArtifacts_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtargetContracts_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtargetInterfaces_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtargetSelectors_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtargetSenders_)]

    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtestZUndmethodZUndcall" "(" ")" [symbol(), klabel(method_test%MethodDisambiguateTest_S2KtestZUndmethodZUndcall_)]

    rule  ( S2KtestZModMethodDisambiguateTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KgetNumber ( V0_x : uint256 ) => #abiCallData ( "getNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KgetNumber ( V0_x : uint32 ) => #abiCallData ( "getNumber" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMethodDisambiguateTest . S2KtestZUndmethodZUndcall ( ) => #abiCallData ( "test_method_call" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "getNumber(uint256)" ) => 4233508440 )


    rule  ( selector ( "getNumber(uint32)" ) => 144150998 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_method_call()" ) => 1803637680 )


endmodule

module S2KsrcZModMock-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModMockContract

    syntax S2KsrcZModMockContract ::= "S2KsrcZModMock" [symbol(), klabel(contract_src%Mock)]

    rule  ( #binRuntime ( S2KsrcZModMock ) => #parseByteStack ( "0x6080604052600436106100555760003560e01c80633fc7c6981461005a578063771602f71461007c578063994b9d571461009c578063c290d691146100b0578063c41d4788146100c1578063cf3ecfb0146100d8575b600080fd5b34801561006657600080fd5b5060025b60405190815260200160405180910390f35b34801561008857600080fd5b5061006a610097366004610164565b6100ed565b3480156100a857600080fd5b50600161006a565b61006a6100be366004610186565b90565b3480156100cd57600080fd5b506100d6610100565b005b3480156100e457600080fd5b5061006a610119565b60006100f9828461019f565b9392505050565b6001600080828254610112919061019f565b9091555050565b6000805460000361015d5760405162461bcd60e51b815260206004820152600a6024820152690537461746520697320360b41b604482015260640160405180910390fd5b5060005490565b6000806040838503121561017757600080fd5b50508035926020909101359150565b60006020828403121561019857600080fd5b5035919050565b600082198211156101c057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220da70b24581f870923b67aacd0c1f45d4e4f76246353c4f39f7be49a2b5e86c1464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModMock ) => #parseByteStack ( "0x60806040526000805534801561001457600080fd5b506101fb806100246000396000f3fe6080604052600436106100555760003560e01c80633fc7c6981461005a578063771602f71461007c578063994b9d571461009c578063c290d691146100b0578063c41d4788146100c1578063cf3ecfb0146100d8575b600080fd5b34801561006657600080fd5b5060025b60405190815260200160405180910390f35b34801561008857600080fd5b5061006a610097366004610164565b6100ed565b3480156100a857600080fd5b50600161006a565b61006a6100be366004610186565b90565b3480156100cd57600080fd5b506100d6610100565b005b3480156100e457600080fd5b5061006a610119565b60006100f9828461019f565b9392505050565b6001600080828254610112919061019f565b9091555050565b6000805460000361015d5760405162461bcd60e51b815260206004820152600a6024820152690537461746520697320360b41b604482015260640160405180910390fd5b5060005490565b6000806040838503121561017757600080fd5b50508035926020909101359150565b60006020828403121561019857600080fd5b5035919050565b600082198211156101c057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220da70b24581f870923b67aacd0c1f45d4e4f76246353c4f39f7be49a2b5e86c1464736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModMockField

    syntax S2KsrcZModMockField ::= "state" [symbol(), klabel(field_src%Mock_state)]

    rule  ( #loc ( S2KsrcZModMock . state ) => 0 )


    syntax Bytes ::= S2KsrcZModMockContract "." S2KsrcZModMockMethod [function(), symbol(), klabel(method_src%Mock)]

    syntax S2KsrcZModMockMethod ::= "S2Kadd" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%Mock_S2Kadd_uint256_uint256)]

    syntax S2KsrcZModMockMethod ::= "S2KgetRevert" "(" ")" [symbol(), klabel(method_src%Mock_S2KgetRevert_)]

    syntax S2KsrcZModMockMethod ::= "S2KnoReturnValue" "(" ")" [symbol(), klabel(method_src%Mock_S2KnoReturnValue_)]

    syntax S2KsrcZModMockMethod ::= "S2KnumberA" "(" ")" [symbol(), klabel(method_src%Mock_S2KnumberA_)]

    syntax S2KsrcZModMockMethod ::= "S2KnumberB" "(" ")" [symbol(), klabel(method_src%Mock_S2KnumberB_)]

    syntax S2KsrcZModMockMethod ::= "S2Kpay" "(" Int ":" "uint256" ")" [symbol(), klabel(method_src%Mock_S2Kpay_uint256)]

    rule  ( S2KsrcZModMock . S2Kadd ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))


    rule  ( S2KsrcZModMock . S2KgetRevert ( ) => #abiCallData ( "getRevert" , .TypedArgs ) )


    rule  ( S2KsrcZModMock . S2KnoReturnValue ( ) => #abiCallData ( "noReturnValue" , .TypedArgs ) )


    rule  ( S2KsrcZModMock . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )


    rule  ( S2KsrcZModMock . S2KnumberB ( ) => #abiCallData ( "numberB" , .TypedArgs ) )


    rule  ( S2KsrcZModMock . S2Kpay ( V0_a : uint256 ) => #abiCallData ( "pay" , #uint256 ( V0_a ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_a )


    rule  ( selector ( "add(uint256,uint256)" ) => 1997931255 )


    rule  ( selector ( "getRevert()" ) => 3477000112 )


    rule  ( selector ( "noReturnValue()" ) => 3290253192 )


    rule  ( selector ( "numberA()" ) => 2571869527 )


    rule  ( selector ( "numberB()" ) => 1070057112 )


    rule  ( selector ( "pay(uint256)" ) => 3264272017 )


endmodule

module S2KsrcZModNestedMock-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModNestedMockContract

    syntax S2KsrcZModNestedMockContract ::= "S2KsrcZModNestedMock" [symbol(), klabel(contract_src%NestedMock)]

    rule  ( #binRuntime ( S2KsrcZModNestedMock ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063853255cc14610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b60008060009054906101000a90046001600160a01b03166001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c29190610146565b60008054906101000a90046001600160a01b03166001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101379190610146565b610141919061015f565b905090565b60006020828403121561015857600080fd5b5051919050565b6000821982111561018057634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204cc2a81ebec788f17a7fbef00a6e2f8daef630bb3ab03e7cbf611eb9c8e88bf864736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModNestedMock ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161024e38038061024e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101bb806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063853255cc14610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b60008060009054906101000a90046001600160a01b03166001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c29190610146565b60008054906101000a90046001600160a01b03166001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101379190610146565b610141919061015f565b905090565b60006020828403121561015857600080fd5b5051919050565b6000821982111561018057634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204cc2a81ebec788f17a7fbef00a6e2f8daef630bb3ab03e7cbf611eb9c8e88bf864736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModNestedMockField

    syntax S2KsrcZModNestedMockField ::= "inner" [symbol(), klabel(field_src%NestedMock_inner)]

    rule  ( #loc ( S2KsrcZModNestedMock . inner ) => 0 )


    syntax Bytes ::= S2KsrcZModNestedMockContract "." S2KsrcZModNestedMockMethod [function(), symbol(), klabel(method_src%NestedMock)]

    syntax S2KsrcZModNestedMockMethod ::= "S2Ksum" "(" ")" [symbol(), klabel(method_src%NestedMock_S2Ksum_)]

    rule  ( S2KsrcZModNestedMock . S2Ksum ( ) => #abiCallData ( "sum" , .TypedArgs ) )


    rule  ( selector ( "sum()" ) => 2234668492 )


endmodule

module S2KtestZModMockCallRevertTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModMockCallRevertTestContract

    syntax S2KtestZModMockCallRevertTestContract ::= "S2KtestZModMockCallRevertTest" [symbol(), klabel(contract_test%MockCallRevertTest)]

    rule  ( #binRuntime ( S2KtestZModMockCallRevertTest ) => #parseByteStack ( "0x60806040523480156200001157600080fd5b50600436106200015d5760003560e01c806366d9a9a011620000c7578063b5508aa91162000086578063b5508aa91462000249578063ba414fa61462000253578063c2a3e1ec146200026e578063e20c9f711462000278578063ee644aaf1462000282578063fa7626d4146200028c57600080fd5b806366d9a9a014620001f95780636b0a4ab0146200021257806385226c81146200021c5780638ecd9af91462000235578063916a17c6146200023f57600080fd5b806333f59013116200012057806333f5901314620001bd5780633c5d181c14620001c75780633e5e3c2314620001d15780633f7286f414620001db5780635a3a7e1714620001e557806365d738d414620001ef57600080fd5b80630114558614620001625780631ecebe7a146200016e5780631ed7831c14620001785780632749fa4f146200019a5780632ade388014620001a4575b600080fd5b6200016c6200029a565b005b6200016c62000451565b6200018262000688565b60405162000191919062002837565b60405180910390f35b6200016c620006ec565b620001ae620009c5565b604051620001919190620028e3565b6200016c62000b13565b6200016c62000d26565b6200018262000ff1565b6200018262001053565b6200016c620010b5565b6200016c620012d4565b6200020362001589565b604051620001919190620029a9565b6200016c62001673565b6200022662001856565b60405162000191919062002a60565b6200016c62001930565b6200020362001b61565b6200022662001c4b565b6200025d62001d25565b604051901515815260200162000191565b6200016c62001e52565b6200018262002048565b6200016c620020aa565b6007546200025d9060ff1681565b604080516004808252602482018352602080830180516001600160e01b031663771602f760e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152606493600080516020620031bb8339815191529363dbaad147936200031c938793910162002ac6565b600060405180830381600087803b1580156200033757600080fd5b505af11580156200034c573d6000803e3d6000fd5b5050604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb833981519152935063f28dceb39250620003a5919060040162002b0a565b600060405180830381600087803b158015620003c057600080fd5b505af1158015620003d5573d6000803e3d6000fd5b505060405163771602f760e01b815260016004820152600260248201526001600160a01b038416925063771602f791506044015b602060405180830381865afa15801562000427573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044d919062002b26565b5050565b600060405162000461906200281b565b604051809103906000f0801580156200047e573d6000803e3d6000fd5b506040805160026024808301919091528251808303909101815260449091018252602080820180516001600160e01b031663771602f760e01b17905282518084018452600d81526c4552524f525f4d45535341474560981b91810191909152915163dbaad14760e01b8152929350600080516020620031bb8339815191529263dbaad147926200051692869290919060040162002ac6565b600060405180830381600087803b1580156200053157600080fd5b505af115801562000546573d6000803e3d6000fd5b505060405163771602f760e01b81526001600482015260026024820152620005ca92506001600160a01b038416915063771602f790604401602060405180830381865afa1580156200059c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c2919062002b26565b60036200230f565b604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb8339815191529163f28dceb3916200061f919060040162002b0a565b600060405180830381600087803b1580156200063a57600080fd5b505af11580156200064f573d6000803e3d6000fd5b505060405163771602f760e01b815260026004820152600360248201526001600160a01b038416925063771602f7915060440162000409565b60606014805480602002602001604051908101604052809291908181526020018280548015620006e257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620006c3575b5050505050905090565b6000604051620006fc906200281b565b604051809103906000f08015801562000719573d6000803e3d6000fd5b50604080516004808252602482018352602080830180516001600160e01b031663c290d69160e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163d23cd03760e01b8152939450600080516020620031bb8339815191529363d23cd03793620007a1938793600a939192910162002b40565b600060405180830381600087803b158015620007bc57600080fd5b505af1158015620007d1573d6000803e3d6000fd5b505060405163c290d69160e01b8152600160048201526200085092506001600160a01b038416915063c290d691906024016020604051808303816000875af115801562000822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000848919062002b26565b60016200230f565b60405163c290d69160e01b815260026004820152620008cb906001600160a01b0383169063c290d691906024016020604051808303816000875af11580156200089d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008c3919062002b26565b60026200230f565b604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb8339815191529163f28dceb39162000920919060040162002b0a565b600060405180830381600087803b1580156200093b57600080fd5b505af115801562000950573d6000803e3d6000fd5b505060405163c290d69160e01b8152600160048201526001600160a01b038416925063c290d6919150600a9060240160206040518083038185885af11580156200099e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200044d919062002b26565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562000af257838290600052602060002001805462000a5e9062002b88565b80601f016020809104026020016040519081016040528092919081815260200182805462000a8c9062002b88565b801562000add5780601f1062000ab15761010080835404028352916020019162000add565b820191906000526020600020905b81548152906001019060200180831162000abf57829003601f168201915b50505050508152602001906001019062000a3c565b505050508152505081526020019060010190620009e9565b50505050905090565b600060405162000b23906200281b565b604051809103906000f08015801562000b40573d6000803e3d6000fd5b50604080516004808252602482018352602080830180516001600160e01b031663771602f760e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152939450600080516020620031bb8339815191529363dbaad1479362000bc493879390920162002ac6565b600060405180830381600087803b15801562000bdf57600080fd5b505af115801562000bf4573d6000803e3d6000fd5b50506040805160048152602481018252602080820180516001600160e01b031663771602f760e01b17905282516005818301528351808203909201825280840193849052632e5884f960e21b909352600080516020620031bb833981519152945063b96213e4935062000c6e928692919060440162002ac6565b600060405180830381600087803b15801562000c8957600080fd5b505af115801562000c9e573d6000803e3d6000fd5b505060405163771602f760e01b8152600260048201526003602482015262000d2392506001600160a01b038416915063771602f7906044015b602060405180830381865afa15801562000cf5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d1b919062002b26565b60056200230f565b50565b600060405162000d36906200281b565b604051809103906000f08015801562000d53573d6000803e3d6000fd5b50905062000d99816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b62000ddc816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200089d573d6000803e3d6000fd5b604080518082018252600d81526c4552524f525f4d45535341474560981b602082015290516000916306a7b19760e31b9162000e1c919060240162002b0a565b60408051601f19818403018152918152602080830180516001600160e01b039081166001600160e01b03199096169590951790528151600480825260248201845291810180519095166307f8f8d360e31b17909452905163dbaad14760e01b8152919350600080516020620031bb8339815191529263dbaad1479262000ea89287929187910162002ac6565b600060405180830381600087803b15801562000ec357600080fd5b505af115801562000ed8573d6000803e3d6000fd5b5050505062000f1f826001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b60405163f28dceb360e01b8152600080516020620031bb8339815191529063f28dceb39062000f5390849060040162002b0a565b600060405180830381600087803b15801562000f6e57600080fd5b505af115801562000f83573d6000803e3d6000fd5b50505050816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fc6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fec919062002b26565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015620006e2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311620006c3575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015620006e2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311620006c3575050505050905090565b6000604051620010c5906200281b565b604051809103906000f080158015620010e2573d6000803e3d6000fd5b506040805160048152602481018252602080820180516001600160e01b031663771602f760e01b17905282516005818301528351808203909201825280840193849052632e5884f960e21b909352929350600080516020620031bb8339815191529263b96213e4926200115c928692909160440162002ac6565b600060405180830381600087803b1580156200117757600080fd5b505af11580156200118c573d6000803e3d6000fd5b505060405163771602f760e01b81526002600482015260036024820152620011ca92506001600160a01b038416915063771602f79060440162000cd7565b604080516004808252602482018352602080830180516001600160e01b031663771602f760e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152600080516020620031bb8339815191529363dbaad147936200124b9387939192910162002ac6565b600060405180830381600087803b1580156200126657600080fd5b505af11580156200127b573d6000803e3d6000fd5b5050604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb833981519152935063f28dceb392506200061f919060040162002b0a565b6000604051620012e4906200281b565b604051809103906000f08015801562001301573d6000803e3d6000fd5b5060405163771602f760e01b8152600560048201819052602482015290915062001386906001600160a01b0383169063771602f7906044015b602060405180830381865afa15801562001358573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137e919062002b26565b600a6200230f565b60405163771602f760e01b815260066004808301919091526024820152620013c2906001600160a01b0383169063771602f7906044016200133a565b604080516005602482018190526044808301919091528251808303909101815260649091018252602080820180516001600160e01b031663771602f760e01b17905282518084018452600d81526c4552524f525f4d45535341474560981b91810191909152915163dbaad14760e01b8152600080516020620031bb8339815191529263dbaad147926200145b9286929060040162002ac6565b600060405180830381600087803b1580156200147657600080fd5b505af11580156200148b573d6000803e3d6000fd5b505060405163771602f760e01b815260066004808301919091526024820152620014cb92506001600160a01b038416915063771602f7906044016200133a565b604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb8339815191529163f28dceb39162001520919060040162002b0a565b600060405180830381600087803b1580156200153b57600080fd5b505af115801562001550573d6000803e3d6000fd5b505060405163771602f760e01b815260056004820181905260248201526001600160a01b038416925063771602f7915060440162000409565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200165a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116200161b5790505b50505050508152505081526020019060010190620015ad565b600060405162001683906200281b565b604051809103906000f080158015620016a0573d6000803e3d6000fd5b50604080516004808252602482018352602080830180516001600160e01b03166307f8f8d360e31b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152939450600080516020620031bb8339815191529363dbaad147936200172493879390920162002ac6565b600060405180830381600087803b1580156200173f57600080fd5b505af115801562001754573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316633fdf4e156040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620017b757600080fd5b505af1158015620017cc573d6000803e3d6000fd5b5050505062001813816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b62000d23816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200089d573d6000803e3d6000fd5b60606018805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a5783829060005260206000200180546200189c9062002b88565b80601f0160208091040260200160405190810160405280929190818152602001828054620018ca9062002b88565b80156200191b5780601f10620018ef576101008083540402835291602001916200191b565b820191906000526020600020905b815481529060010190602001808311620018fd57829003601f168201915b5050505050815260200190600101906200187a565b600060405162001940906200281b565b604051809103906000f0801580156200195d573d6000803e3d6000fd5b509050600081604051620019719062002829565b6001600160a01b039091168152602001604051809103906000f0801580156200199e573d6000803e3d6000fd5b509050620019e4816001600160a01b031663853255cc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200059c573d6000803e3d6000fd5b604080516004808252602482018352602080830180516001600160e01b03166307f8f8d360e31b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152600080516020620031bb8339815191529363dbaad1479362001a659388939192910162002ac6565b600060405180830381600087803b15801562001a8057600080fd5b505af115801562001a95573d6000803e3d6000fd5b5050604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb833981519152935063f28dceb3925062001aee919060040162002b0a565b600060405180830381600087803b15801562001b0957600080fd5b505af115801562001b1e573d6000803e3d6000fd5b50505050806001600160a01b031663853255cc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fc6573d6000803e3d6000fd5b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562001c3257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162001bf35790505b5050505050815250508152602001906001019062001b85565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a57838290600052602060002001805462001c919062002b88565b80601f016020809104026020016040519081016040528092919081815260200182805462001cbf9062002b88565b801562001d105780601f1062001ce45761010080835404028352916020019162001d10565b820191906000526020600020905b81548152906001019060200180831162001cf257829003601f168201915b50505050508152602001906001019062001c6f565b600754600090610100900460ff161562001d485750600754610100900460ff1690565b6000600080516020620031bb8339815191523b1562001e4d5760408051600080516020620031bb833981519152602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909162001dcf917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800162002bc4565b60408051601f198184030181529082905262001deb9162002bf7565b6000604051808303816000865af19150503d806000811462001e2a576040519150601f19603f3d011682016040523d82523d6000602084013e62001e2f565b606091505b509150508080602001905181019062001e49919062002c15565b9150505b919050565b600060405162001e62906200281b565b604051809103906000f08015801562001e7f573d6000803e3d6000fd5b50604080518082018252600d81526c4552524f525f4d45535341474560981b602082015290519192506000916306a7b19760e31b9162001ec29160240162002b0a565b60408051601f19818403018152918152602080830180516001600160e01b039081166001600160e01b031990961695909517905281516004808252602482018452918101805190951663771602f760e01b17909452905163dbaad14760e01b8152919350600080516020620031bb8339815191529263dbaad1479262001f4e9287929187910162002ac6565b600060405180830381600087803b15801562001f6957600080fd5b505af115801562001f7e573d6000803e3d6000fd5b50506040805160026024820152600360448083019190915282518083039091018152606490910182526020810180516001600160e01b031663771602f760e01b1790529051600093508392506001600160a01b0386169162001fe09162002bf7565b6000604051808303816000865af19150503d80600081146200201f576040519150601f19603f3d011682016040523d82523d6000602084013e62002024565b606091505b50915091506200203682600062002406565b6200204281846200257d565b50505050565b60606013805480602002602001604051908101604052809291908181526020018280548015620006e2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311620006c3575050505050905090565b6000604051620020ba906200281b565b604051809103906000f080158015620020d7573d6000803e3d6000fd5b5090506200211d816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b62002160816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200089d573d6000803e3d6000fd5b604080516004808252602482018352602080830180516001600160e01b03166307f8f8d360e31b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152600080516020620031bb8339815191529363dbaad14793620021e19387939192910162002ac6565b600060405180830381600087803b158015620021fc57600080fd5b505af115801562002211573d6000803e3d6000fd5b5050505062002258816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620022b757600080fd5b505af1158015620022cc573d6000803e3d6000fd5b50505050806001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000427573d6000803e3d6000fd5b8082146200044d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620023829060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051620023bb919062002c39565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051620023f4919062002c72565b60405180910390a16200044d62002589565b801515821515146200044d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200247d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382620024d0576040518060400160405280600581526020016466616c736560d81b815250620024ee565b604051806040016040528060048152602001637472756560e01b8152505b604051620024fd919062002c9d565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838162002550576040518060400160405280600581526020016466616c736560d81b8152506200256e565b604051806040016040528060048152602001637472756560e01b8152505b604051620023f4919062002ce4565b6200044d828262002692565b600080516020620031bb8339815191523b15620026815760408051600080516020620031bb833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526200261c929160200162002bc4565b60408051601f1981840301815290829052620026389162002bf7565b6000604051808303816000865af19150503d806000811462002677576040519150601f19603f3d011682016040523d82523d6000602084013e6200267c565b606091505b505050505b6007805461ff001916610100179055565b6200269e828262002781565b6200044d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200270f9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405162002748919062002c9d565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051620023f4919062002ce4565b805182516001919003620028115760005b83518110156200280a57828181518110620027b157620027b162002d0f565b602001015160f81c60f81b6001600160f81b031916848281518110620027db57620027db62002d0f565b01602001516001600160f81b03191614620027f557600091505b80620028018162002d25565b91505062002792565b5062002815565b5060005b92915050565b61021f8062002d4e83390190565b61024e8062002f6d83390190565b6020808252825182820181905260009190848201906040850190845b818110156200287a5783516001600160a01b03168352928401929184019160010162002853565b50909695505050505050565b60005b83811015620028a357818101518382015260200162002889565b83811115620020425750506000910152565b60008151808452620028cf81602086016020860162002886565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156200299957603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156200298257605f198985030183526200296f848651620028b5565b948e01949350918d019160010162002950565b505050978a0197945050918801916001016200290a565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101562002a5157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562002a3b5783516001600160e01b0319168252928b019260019290920191908b019062002a0f565b50978a01979550505091870191600101620029d1565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562002ab957603f1988860301845262002aa6858351620028b5565b9450928501929085019060010162002a87565b5092979650505050505050565b6001600160a01b038416815260606020820181905260009062002aec90830185620028b5565b828103604084015262002b008185620028b5565b9695505050505050565b60208152600062002b1f6020830184620028b5565b9392505050565b60006020828403121562002b3957600080fd5b5051919050565b60018060a01b038516815283602082015260806040820152600062002b696080830185620028b5565b828103606084015262002b7d8185620028b5565b979650505050505050565b600181811c9082168062002b9d57607f821691505b60208210810362002bbe57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b031983168152815160009062002be981600485016020870162002886565b919091016004019392505050565b6000825162002c0b81846020870162002886565b9190910192915050565b60006020828403121562002c2857600080fd5b8151801515811462002b1f57600080fd5b60408152600062002c6460408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600062002c6460408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600062002cc860408301600a8152690808080808081319599d60b21b602082015260400190565b828103602084015262002cdc8185620028b5565b949350505050565b60408152600062002cc860408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006001820162002d4657634e487b7160e01b600052601160045260246000fd5b506001019056fe60806040526000805534801561001457600080fd5b506101fb806100246000396000f3fe6080604052600436106100555760003560e01c80633fc7c6981461005a578063771602f71461007c578063994b9d571461009c578063c290d691146100b0578063c41d4788146100c1578063cf3ecfb0146100d8575b600080fd5b34801561006657600080fd5b5060025b60405190815260200160405180910390f35b34801561008857600080fd5b5061006a610097366004610164565b6100ed565b3480156100a857600080fd5b50600161006a565b61006a6100be366004610186565b90565b3480156100cd57600080fd5b506100d6610100565b005b3480156100e457600080fd5b5061006a610119565b60006100f9828461019f565b9392505050565b6001600080828254610112919061019f565b9091555050565b6000805460000361015d5760405162461bcd60e51b815260206004820152600a6024820152690537461746520697320360b41b604482015260640160405180910390fd5b5060005490565b6000806040838503121561017757600080fd5b50508035926020909101359150565b60006020828403121561019857600080fd5b5035919050565b600082198211156101c057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220da70b24581f870923b67aacd0c1f45d4e4f76246353c4f39f7be49a2b5e86c1464736f6c634300080d0033608060405234801561001057600080fd5b5060405161024e38038061024e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101bb806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063853255cc14610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b60008060009054906101000a90046001600160a01b03166001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c29190610146565b60008054906101000a90046001600160a01b03166001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101379190610146565b610141919061015f565b905090565b60006020828403121561015857600080fd5b5051919050565b6000821982111561018057634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204cc2a81ebec788f17a7fbef00a6e2f8daef630bb3ab03e7cbf611eb9c8e88bf864736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212202b3eaf99bfbb87451149f3291417691a7f3668ff72004fd4bd3eb48a5432cdb364736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModMockCallRevertTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506132108061003d6000396000f3fe60806040523480156200001157600080fd5b50600436106200015d5760003560e01c806366d9a9a011620000c7578063b5508aa91162000086578063b5508aa91462000249578063ba414fa61462000253578063c2a3e1ec146200026e578063e20c9f711462000278578063ee644aaf1462000282578063fa7626d4146200028c57600080fd5b806366d9a9a014620001f95780636b0a4ab0146200021257806385226c81146200021c5780638ecd9af91462000235578063916a17c6146200023f57600080fd5b806333f59013116200012057806333f5901314620001bd5780633c5d181c14620001c75780633e5e3c2314620001d15780633f7286f414620001db5780635a3a7e1714620001e557806365d738d414620001ef57600080fd5b80630114558614620001625780631ecebe7a146200016e5780631ed7831c14620001785780632749fa4f146200019a5780632ade388014620001a4575b600080fd5b6200016c6200029a565b005b6200016c62000451565b6200018262000688565b60405162000191919062002837565b60405180910390f35b6200016c620006ec565b620001ae620009c5565b604051620001919190620028e3565b6200016c62000b13565b6200016c62000d26565b6200018262000ff1565b6200018262001053565b6200016c620010b5565b6200016c620012d4565b6200020362001589565b604051620001919190620029a9565b6200016c62001673565b6200022662001856565b60405162000191919062002a60565b6200016c62001930565b6200020362001b61565b6200022662001c4b565b6200025d62001d25565b604051901515815260200162000191565b6200016c62001e52565b6200018262002048565b6200016c620020aa565b6007546200025d9060ff1681565b604080516004808252602482018352602080830180516001600160e01b031663771602f760e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152606493600080516020620031bb8339815191529363dbaad147936200031c938793910162002ac6565b600060405180830381600087803b1580156200033757600080fd5b505af11580156200034c573d6000803e3d6000fd5b5050604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb833981519152935063f28dceb39250620003a5919060040162002b0a565b600060405180830381600087803b158015620003c057600080fd5b505af1158015620003d5573d6000803e3d6000fd5b505060405163771602f760e01b815260016004820152600260248201526001600160a01b038416925063771602f791506044015b602060405180830381865afa15801562000427573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044d919062002b26565b5050565b600060405162000461906200281b565b604051809103906000f0801580156200047e573d6000803e3d6000fd5b506040805160026024808301919091528251808303909101815260449091018252602080820180516001600160e01b031663771602f760e01b17905282518084018452600d81526c4552524f525f4d45535341474560981b91810191909152915163dbaad14760e01b8152929350600080516020620031bb8339815191529263dbaad147926200051692869290919060040162002ac6565b600060405180830381600087803b1580156200053157600080fd5b505af115801562000546573d6000803e3d6000fd5b505060405163771602f760e01b81526001600482015260026024820152620005ca92506001600160a01b038416915063771602f790604401602060405180830381865afa1580156200059c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c2919062002b26565b60036200230f565b604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb8339815191529163f28dceb3916200061f919060040162002b0a565b600060405180830381600087803b1580156200063a57600080fd5b505af11580156200064f573d6000803e3d6000fd5b505060405163771602f760e01b815260026004820152600360248201526001600160a01b038416925063771602f7915060440162000409565b60606014805480602002602001604051908101604052809291908181526020018280548015620006e257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620006c3575b5050505050905090565b6000604051620006fc906200281b565b604051809103906000f08015801562000719573d6000803e3d6000fd5b50604080516004808252602482018352602080830180516001600160e01b031663c290d69160e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163d23cd03760e01b8152939450600080516020620031bb8339815191529363d23cd03793620007a1938793600a939192910162002b40565b600060405180830381600087803b158015620007bc57600080fd5b505af1158015620007d1573d6000803e3d6000fd5b505060405163c290d69160e01b8152600160048201526200085092506001600160a01b038416915063c290d691906024016020604051808303816000875af115801562000822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000848919062002b26565b60016200230f565b60405163c290d69160e01b815260026004820152620008cb906001600160a01b0383169063c290d691906024016020604051808303816000875af11580156200089d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008c3919062002b26565b60026200230f565b604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb8339815191529163f28dceb39162000920919060040162002b0a565b600060405180830381600087803b1580156200093b57600080fd5b505af115801562000950573d6000803e3d6000fd5b505060405163c290d69160e01b8152600160048201526001600160a01b038416925063c290d6919150600a9060240160206040518083038185885af11580156200099e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200044d919062002b26565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562000af257838290600052602060002001805462000a5e9062002b88565b80601f016020809104026020016040519081016040528092919081815260200182805462000a8c9062002b88565b801562000add5780601f1062000ab15761010080835404028352916020019162000add565b820191906000526020600020905b81548152906001019060200180831162000abf57829003601f168201915b50505050508152602001906001019062000a3c565b505050508152505081526020019060010190620009e9565b50505050905090565b600060405162000b23906200281b565b604051809103906000f08015801562000b40573d6000803e3d6000fd5b50604080516004808252602482018352602080830180516001600160e01b031663771602f760e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152939450600080516020620031bb8339815191529363dbaad1479362000bc493879390920162002ac6565b600060405180830381600087803b15801562000bdf57600080fd5b505af115801562000bf4573d6000803e3d6000fd5b50506040805160048152602481018252602080820180516001600160e01b031663771602f760e01b17905282516005818301528351808203909201825280840193849052632e5884f960e21b909352600080516020620031bb833981519152945063b96213e4935062000c6e928692919060440162002ac6565b600060405180830381600087803b15801562000c8957600080fd5b505af115801562000c9e573d6000803e3d6000fd5b505060405163771602f760e01b8152600260048201526003602482015262000d2392506001600160a01b038416915063771602f7906044015b602060405180830381865afa15801562000cf5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d1b919062002b26565b60056200230f565b50565b600060405162000d36906200281b565b604051809103906000f08015801562000d53573d6000803e3d6000fd5b50905062000d99816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b62000ddc816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200089d573d6000803e3d6000fd5b604080518082018252600d81526c4552524f525f4d45535341474560981b602082015290516000916306a7b19760e31b9162000e1c919060240162002b0a565b60408051601f19818403018152918152602080830180516001600160e01b039081166001600160e01b03199096169590951790528151600480825260248201845291810180519095166307f8f8d360e31b17909452905163dbaad14760e01b8152919350600080516020620031bb8339815191529263dbaad1479262000ea89287929187910162002ac6565b600060405180830381600087803b15801562000ec357600080fd5b505af115801562000ed8573d6000803e3d6000fd5b5050505062000f1f826001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b60405163f28dceb360e01b8152600080516020620031bb8339815191529063f28dceb39062000f5390849060040162002b0a565b600060405180830381600087803b15801562000f6e57600080fd5b505af115801562000f83573d6000803e3d6000fd5b50505050816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fc6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fec919062002b26565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015620006e2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311620006c3575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015620006e2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311620006c3575050505050905090565b6000604051620010c5906200281b565b604051809103906000f080158015620010e2573d6000803e3d6000fd5b506040805160048152602481018252602080820180516001600160e01b031663771602f760e01b17905282516005818301528351808203909201825280840193849052632e5884f960e21b909352929350600080516020620031bb8339815191529263b96213e4926200115c928692909160440162002ac6565b600060405180830381600087803b1580156200117757600080fd5b505af11580156200118c573d6000803e3d6000fd5b505060405163771602f760e01b81526002600482015260036024820152620011ca92506001600160a01b038416915063771602f79060440162000cd7565b604080516004808252602482018352602080830180516001600160e01b031663771602f760e01b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152600080516020620031bb8339815191529363dbaad147936200124b9387939192910162002ac6565b600060405180830381600087803b1580156200126657600080fd5b505af11580156200127b573d6000803e3d6000fd5b5050604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb833981519152935063f28dceb392506200061f919060040162002b0a565b6000604051620012e4906200281b565b604051809103906000f08015801562001301573d6000803e3d6000fd5b5060405163771602f760e01b8152600560048201819052602482015290915062001386906001600160a01b0383169063771602f7906044015b602060405180830381865afa15801562001358573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137e919062002b26565b600a6200230f565b60405163771602f760e01b815260066004808301919091526024820152620013c2906001600160a01b0383169063771602f7906044016200133a565b604080516005602482018190526044808301919091528251808303909101815260649091018252602080820180516001600160e01b031663771602f760e01b17905282518084018452600d81526c4552524f525f4d45535341474560981b91810191909152915163dbaad14760e01b8152600080516020620031bb8339815191529263dbaad147926200145b9286929060040162002ac6565b600060405180830381600087803b1580156200147657600080fd5b505af11580156200148b573d6000803e3d6000fd5b505060405163771602f760e01b815260066004808301919091526024820152620014cb92506001600160a01b038416915063771602f7906044016200133a565b604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb8339815191529163f28dceb39162001520919060040162002b0a565b600060405180830381600087803b1580156200153b57600080fd5b505af115801562001550573d6000803e3d6000fd5b505060405163771602f760e01b815260056004820181905260248201526001600160a01b038416925063771602f7915060440162000409565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200165a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116200161b5790505b50505050508152505081526020019060010190620015ad565b600060405162001683906200281b565b604051809103906000f080158015620016a0573d6000803e3d6000fd5b50604080516004808252602482018352602080830180516001600160e01b03166307f8f8d360e31b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152939450600080516020620031bb8339815191529363dbaad147936200172493879390920162002ac6565b600060405180830381600087803b1580156200173f57600080fd5b505af115801562001754573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316633fdf4e156040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620017b757600080fd5b505af1158015620017cc573d6000803e3d6000fd5b5050505062001813816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b62000d23816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200089d573d6000803e3d6000fd5b60606018805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a5783829060005260206000200180546200189c9062002b88565b80601f0160208091040260200160405190810160405280929190818152602001828054620018ca9062002b88565b80156200191b5780601f10620018ef576101008083540402835291602001916200191b565b820191906000526020600020905b815481529060010190602001808311620018fd57829003601f168201915b5050505050815260200190600101906200187a565b600060405162001940906200281b565b604051809103906000f0801580156200195d573d6000803e3d6000fd5b509050600081604051620019719062002829565b6001600160a01b039091168152602001604051809103906000f0801580156200199e573d6000803e3d6000fd5b509050620019e4816001600160a01b031663853255cc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200059c573d6000803e3d6000fd5b604080516004808252602482018352602080830180516001600160e01b03166307f8f8d360e31b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152600080516020620031bb8339815191529363dbaad1479362001a659388939192910162002ac6565b600060405180830381600087803b15801562001a8057600080fd5b505af115801562001a95573d6000803e3d6000fd5b5050604080518082018252600d81526c4552524f525f4d45535341474560981b6020820152905163f28dceb360e01b8152600080516020620031bb833981519152935063f28dceb3925062001aee919060040162002b0a565b600060405180830381600087803b15801562001b0957600080fd5b505af115801562001b1e573d6000803e3d6000fd5b50505050806001600160a01b031663853255cc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fc6573d6000803e3d6000fd5b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562001c3257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162001bf35790505b5050505050815250508152602001906001019062001b85565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101562000b0a57838290600052602060002001805462001c919062002b88565b80601f016020809104026020016040519081016040528092919081815260200182805462001cbf9062002b88565b801562001d105780601f1062001ce45761010080835404028352916020019162001d10565b820191906000526020600020905b81548152906001019060200180831162001cf257829003601f168201915b50505050508152602001906001019062001c6f565b600754600090610100900460ff161562001d485750600754610100900460ff1690565b6000600080516020620031bb8339815191523b1562001e4d5760408051600080516020620031bb833981519152602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909162001dcf917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800162002bc4565b60408051601f198184030181529082905262001deb9162002bf7565b6000604051808303816000865af19150503d806000811462001e2a576040519150601f19603f3d011682016040523d82523d6000602084013e62001e2f565b606091505b509150508080602001905181019062001e49919062002c15565b9150505b919050565b600060405162001e62906200281b565b604051809103906000f08015801562001e7f573d6000803e3d6000fd5b50604080518082018252600d81526c4552524f525f4d45535341474560981b602082015290519192506000916306a7b19760e31b9162001ec29160240162002b0a565b60408051601f19818403018152918152602080830180516001600160e01b039081166001600160e01b031990961695909517905281516004808252602482018452918101805190951663771602f760e01b17909452905163dbaad14760e01b8152919350600080516020620031bb8339815191529263dbaad1479262001f4e9287929187910162002ac6565b600060405180830381600087803b15801562001f6957600080fd5b505af115801562001f7e573d6000803e3d6000fd5b50506040805160026024820152600360448083019190915282518083039091018152606490910182526020810180516001600160e01b031663771602f760e01b1790529051600093508392506001600160a01b0386169162001fe09162002bf7565b6000604051808303816000865af19150503d80600081146200201f576040519150601f19603f3d011682016040523d82523d6000602084013e62002024565b606091505b50915091506200203682600062002406565b6200204281846200257d565b50505050565b60606013805480602002602001604051908101604052809291908181526020018280548015620006e2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311620006c3575050505050905090565b6000604051620020ba906200281b565b604051809103906000f080158015620020d7573d6000803e3d6000fd5b5090506200211d816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b62002160816001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200089d573d6000803e3d6000fd5b604080516004808252602482018352602080830180516001600160e01b03166307f8f8d360e31b17905283518085018552600d81526c4552524f525f4d45535341474560981b91810191909152925163dbaad14760e01b8152600080516020620031bb8339815191529363dbaad14793620021e19387939192910162002ac6565b600060405180830381600087803b158015620021fc57600080fd5b505af115801562002211573d6000803e3d6000fd5b5050505062002258816001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000822573d6000803e3d6000fd5b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620022b757600080fd5b505af1158015620022cc573d6000803e3d6000fd5b50505050806001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000427573d6000803e3d6000fd5b8082146200044d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620023829060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051620023bb919062002c39565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051620023f4919062002c72565b60405180910390a16200044d62002589565b801515821515146200044d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200247d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382620024d0576040518060400160405280600581526020016466616c736560d81b815250620024ee565b604051806040016040528060048152602001637472756560e01b8152505b604051620024fd919062002c9d565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838162002550576040518060400160405280600581526020016466616c736560d81b8152506200256e565b604051806040016040528060048152602001637472756560e01b8152505b604051620023f4919062002ce4565b6200044d828262002692565b600080516020620031bb8339815191523b15620026815760408051600080516020620031bb833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526200261c929160200162002bc4565b60408051601f1981840301815290829052620026389162002bf7565b6000604051808303816000865af19150503d806000811462002677576040519150601f19603f3d011682016040523d82523d6000602084013e6200267c565b606091505b505050505b6007805461ff001916610100179055565b6200269e828262002781565b6200044d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200270f9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405162002748919062002c9d565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051620023f4919062002ce4565b805182516001919003620028115760005b83518110156200280a57828181518110620027b157620027b162002d0f565b602001015160f81c60f81b6001600160f81b031916848281518110620027db57620027db62002d0f565b01602001516001600160f81b03191614620027f557600091505b80620028018162002d25565b91505062002792565b5062002815565b5060005b92915050565b61021f8062002d4e83390190565b61024e8062002f6d83390190565b6020808252825182820181905260009190848201906040850190845b818110156200287a5783516001600160a01b03168352928401929184019160010162002853565b50909695505050505050565b60005b83811015620028a357818101518382015260200162002889565b83811115620020425750506000910152565b60008151808452620028cf81602086016020860162002886565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156200299957603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156200298257605f198985030183526200296f848651620028b5565b948e01949350918d019160010162002950565b505050978a0197945050918801916001016200290a565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101562002a5157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562002a3b5783516001600160e01b0319168252928b019260019290920191908b019062002a0f565b50978a01979550505091870191600101620029d1565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562002ab957603f1988860301845262002aa6858351620028b5565b9450928501929085019060010162002a87565b5092979650505050505050565b6001600160a01b038416815260606020820181905260009062002aec90830185620028b5565b828103604084015262002b008185620028b5565b9695505050505050565b60208152600062002b1f6020830184620028b5565b9392505050565b60006020828403121562002b3957600080fd5b5051919050565b60018060a01b038516815283602082015260806040820152600062002b696080830185620028b5565b828103606084015262002b7d8185620028b5565b979650505050505050565b600181811c9082168062002b9d57607f821691505b60208210810362002bbe57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b031983168152815160009062002be981600485016020870162002886565b919091016004019392505050565b6000825162002c0b81846020870162002886565b9190910192915050565b60006020828403121562002c2857600080fd5b8151801515811462002b1f57600080fd5b60408152600062002c6460408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600062002c6460408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600062002cc860408301600a8152690808080808081319599d60b21b602082015260400190565b828103602084015262002cdc8185620028b5565b949350505050565b60408152600062002cc860408301600a8152690808080808149a59da1d60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006001820162002d4657634e487b7160e01b600052601160045260246000fd5b506001019056fe60806040526000805534801561001457600080fd5b506101fb806100246000396000f3fe6080604052600436106100555760003560e01c80633fc7c6981461005a578063771602f71461007c578063994b9d571461009c578063c290d691146100b0578063c41d4788146100c1578063cf3ecfb0146100d8575b600080fd5b34801561006657600080fd5b5060025b60405190815260200160405180910390f35b34801561008857600080fd5b5061006a610097366004610164565b6100ed565b3480156100a857600080fd5b50600161006a565b61006a6100be366004610186565b90565b3480156100cd57600080fd5b506100d6610100565b005b3480156100e457600080fd5b5061006a610119565b60006100f9828461019f565b9392505050565b6001600080828254610112919061019f565b9091555050565b6000805460000361015d5760405162461bcd60e51b815260206004820152600a6024820152690537461746520697320360b41b604482015260640160405180910390fd5b5060005490565b6000806040838503121561017757600080fd5b50508035926020909101359150565b60006020828403121561019857600080fd5b5035919050565b600082198211156101c057634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220da70b24581f870923b67aacd0c1f45d4e4f76246353c4f39f7be49a2b5e86c1464736f6c634300080d0033608060405234801561001057600080fd5b5060405161024e38038061024e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101bb806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063853255cc14610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b60008060009054906101000a90046001600160a01b03166001600160a01b0316633fc7c6986040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c29190610146565b60008054906101000a90046001600160a01b03166001600160a01b031663994b9d576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101379190610146565b610141919061015f565b905090565b60006020828403121561015857600080fd5b5051919050565b6000821982111561018057634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204cc2a81ebec788f17a7fbef00a6e2f8daef630bb3ab03e7cbf611eb9c8e88bf864736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212202b3eaf99bfbb87451149f3291417691a7f3668ff72004fd4bd3eb48a5432cdb364736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModMockCallRevertTestField

    syntax S2KtestZModMockCallRevertTestField ::= "stdstore" [symbol(), klabel(field_test%MockCallRevertTest_stdstore)]

    syntax S2KtestZModMockCallRevertTestField ::= "IS_TEST" [symbol(), klabel(field_test%MockCallRevertTest_IS_TEST)]

    syntax S2KtestZModMockCallRevertTestField ::= "_failed" [symbol(), klabel(field_test%MockCallRevertTest__failed)]

    syntax S2KtestZModMockCallRevertTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%MockCallRevertTest_stdChainsInitialized)]

    syntax S2KtestZModMockCallRevertTestField ::= "chains" [symbol(), klabel(field_test%MockCallRevertTest_chains)]

    syntax S2KtestZModMockCallRevertTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%MockCallRevertTest_defaultRpcUrls)]

    syntax S2KtestZModMockCallRevertTestField ::= "idToAlias" [symbol(), klabel(field_test%MockCallRevertTest_idToAlias)]

    syntax S2KtestZModMockCallRevertTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%MockCallRevertTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModMockCallRevertTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%MockCallRevertTest_gasMeteringOff)]

    syntax S2KtestZModMockCallRevertTestField ::= "_excludedContracts" [symbol(), klabel(field_test%MockCallRevertTest__excludedContracts)]

    syntax S2KtestZModMockCallRevertTestField ::= "_excludedSenders" [symbol(), klabel(field_test%MockCallRevertTest__excludedSenders)]

    syntax S2KtestZModMockCallRevertTestField ::= "_targetedContracts" [symbol(), klabel(field_test%MockCallRevertTest__targetedContracts)]

    syntax S2KtestZModMockCallRevertTestField ::= "_targetedSenders" [symbol(), klabel(field_test%MockCallRevertTest__targetedSenders)]

    syntax S2KtestZModMockCallRevertTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%MockCallRevertTest__excludedArtifacts)]

    syntax S2KtestZModMockCallRevertTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%MockCallRevertTest__targetedArtifacts)]

    syntax S2KtestZModMockCallRevertTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%MockCallRevertTest__targetedArtifactSelectors)]

    syntax S2KtestZModMockCallRevertTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%MockCallRevertTest__targetedSelectors)]

    syntax S2KtestZModMockCallRevertTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%MockCallRevertTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModMockCallRevertTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModMockCallRevertTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModMockCallRevertTestContract "." S2KtestZModMockCallRevertTestMethod [function(), symbol(), klabel(method_test%MockCallRevertTest)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KISZUndTEST_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KexcludeContracts_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KexcludeSenders_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2Kfailed_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtargetArtifacts_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtargetContracts_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtargetInterfaces_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtargetSelectors_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtargetSenders_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestClearMockRevertedCalls" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestClearMockRevertedCalls_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallEmptyAccount" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCallEmptyAccount_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallResetsMockCallRevert" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCallResetsMockCallRevert_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertPartialMatch" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCallRevertPartialMatch_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertResetsMockCall" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCallRevertResetsMockCall_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertWithCall" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCallRevertWithCall_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertWithValue" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCallRevertWithValue_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCalldataRevert" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockCalldataRevert_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockGettersRevert" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockGettersRevert_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockNestedRevert" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockNestedRevert_)]

    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockRevertWithCustomError" "(" ")" [symbol(), klabel(method_test%MockCallRevertTest_S2KtestMockRevertWithCustomError_)]

    rule  ( S2KtestZModMockCallRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestClearMockRevertedCalls ( ) => #abiCallData ( "testClearMockRevertedCalls" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallEmptyAccount ( ) => #abiCallData ( "testMockCallEmptyAccount" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallResetsMockCallRevert ( ) => #abiCallData ( "testMockCallResetsMockCallRevert" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertPartialMatch ( ) => #abiCallData ( "testMockCallRevertPartialMatch" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertResetsMockCall ( ) => #abiCallData ( "testMockCallRevertResetsMockCall" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertWithCall ( ) => #abiCallData ( "testMockCallRevertWithCall" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertWithValue ( ) => #abiCallData ( "testMockCallRevertWithValue" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCalldataRevert ( ) => #abiCallData ( "testMockCalldataRevert" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockGettersRevert ( ) => #abiCallData ( "testMockGettersRevert" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockNestedRevert ( ) => #abiCallData ( "testMockNestedRevert" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockRevertWithCustomError ( ) => #abiCallData ( "testMockRevertWithCustomError" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testClearMockRevertedCalls()" ) => 1795836592 )


    rule  ( selector ( "testMockCallEmptyAccount()" ) => 18109830 )


    rule  ( selector ( "testMockCallResetsMockCallRevert()" ) => 871731219 )


    rule  ( selector ( "testMockCallRevertPartialMatch()" ) => 516865658 )


    rule  ( selector ( "testMockCallRevertResetsMockCall()" ) => 1513782807 )


    rule  ( selector ( "testMockCallRevertWithCall()" ) => 3265520108 )


    rule  ( selector ( "testMockCallRevertWithValue()" ) => 659159631 )


    rule  ( selector ( "testMockCalldataRevert()" ) => 1708603604 )


    rule  ( selector ( "testMockGettersRevert()" ) => 3999550127 )


    rule  ( selector ( "testMockNestedRevert()" ) => 2395839225 )


    rule  ( selector ( "testMockRevertWithCustomError()" ) => 1012733980 )


endmodule

module S2KtestZModMockCallTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModMockCallTestContract

    syntax S2KtestZModMockCallTestContract ::= "S2KtestZModMockCallTest" [symbol(), klabel(contract_test%MockCallTest)]

    rule  ( #binRuntime ( S2KtestZModMockCallTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461017e578063ba414fa614610186578063e20c9f711461019e578063fa7626d4146101a657600080fd5b806366d9a9a01461014c57806385226c8114610161578063916a17c61461017657600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f414610134578063480a69961461013c578063529c71b51461014457600080fd5b80631ed7831c146100ef5780632ade38801461010d57806339188d4e14610122575b600080fd5b6100f76101b3565b60405161010491906110c2565b60405180910390f35b610115610215565b6040516101049190611167565b61012a610357565b005b6100f761050f565b6100f761056f565b61012a6105cf565b61012a61089c565b610154610985565b6040516101049190611227565b610169610a6b565b60405161010491906112da565b610154610b3b565b610169610c21565b61018e610cf1565b6040519015158152602001610104565b6100f7610e1e565b60075461018e9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561020b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ed575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561034e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103375783829060005260206000200180546102aa9061133c565b80601f01602080910402602001604051908101604052809291908181526020018280546102d69061133c565b80156103235780601f106102f857610100808354040283529160200191610323565b820191906000526020600020905b81548152906001019060200180831161030657829003601f168201915b50505050508152602001906001019061028b565b505050508152505081526020019060010190610239565b50505050905090565b6040805160048152602481018252602080820180516001600160e01b03166370a0823160e01b1790528251600a818301528351808203909201825280840193849052632e5884f960e21b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d9263b96213e4926103cf92600092604401611376565b600060405180830381600087803b1580156103e957600080fd5b505af11580156103fd573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600482015261046e9250600091506370a08231906024015b602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046791906113b6565b600a610e7e565b6040516370a0823160e01b815260026004820152610497906000906370a0823190602401610426565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316633fdf4e156040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104f557600080fd5b505af1158015610509573d6000803e3d6000fd5b50505050565b6060601680548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b60006105396040516105e0906110b5565b6001600160a01b039091168152602001604051809103906000f08015801561060c573d6000803e3d6000fd5b50604051630c11dedd60e01b815260016004820152909150610682906001600160a01b03831690630c11dedd90600a9060240160206040518083038185885af115801561065d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061046791906113b6565b604051630c11dedd60e01b81526002600482018190526106fa916001600160a01b03841691630c11dedd9160240160206040518083038185885af11580156106ce573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106f391906113b6565b6002610e7e565b6040805160048152602481018252602080820180516001600160e01b0316630c11dedd60e01b179052825160638183015283518082039092018252808401938490526381409b9160e01b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d926381409b9192610776928692600a9291906044016113cf565b600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050604051630c11dedd60e01b81526001600482015261082192506001600160a01b0384169150630c11dedd90600a9060240160206040518083038185885af11580156107f5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061081a91906113b6565b6063610e7e565b604051630c11dedd60e01b8152600260048201819052610899916001600160a01b03841691630c11dedd9160240160206040518083038185885af115801561086d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061089291906113b6565b6004610e7e565b50565b6040805160016024808301919091528251808303909101815260449182018352602080820180516001600160e01b03166370a0823160e01b1790528351600a818301528451808203909201825280850194859052632e5884f960e21b909452737109709ecfa91a80626ff3989d68f67f5b1dd12d9363b96213e493610928936000939092909101611376565b600060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b50506040516370a0823160e01b8152600160048201526109839250600091506370a0823190602401610426565b565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561034e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a5357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a155790505b505050505081525050815260200190600101906109a9565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561034e578382906000526020600020018054610aae9061133c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ada9061133c565b8015610b275780601f10610afc57610100808354040283529160200191610b27565b820191906000526020600020905b815481529060010190602001808311610b0a57829003601f168201915b505050505081526020019060010190610a8f565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561034e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c0957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610bcb5790505b50505050508152505081526020019060010190610b5f565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561034e578382906000526020600020018054610c649061133c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c909061133c565b8015610cdd5780601f10610cb257610100808354040283529160200191610cdd565b820191906000526020600020905b815481529060010190602001808311610cc057829003601f168201915b505050505081526020019060010190610c45565b600754600090610100900460ff1615610d135750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e195760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610da1917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611413565b60408051601f1981840301815290829052610dbb91611444565b6000604051808303816000865af19150503d8060008114610df8576040519150601f19603f3d011682016040523d82523d6000602084013e610dfd565b606091505b5091505080806020019051810190610e159190611460565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801561020b576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101ed575050505050905090565b808214610fa5577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610eef9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610fa5610fa9565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110a45760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526110439291602001611413565b60408051601f198184030181529082905261105d91611444565b6000604051808303816000865af19150503d806000811461109a576040519150601f19603f3d011682016040523d82523d6000602084013e61109f565b606091505b505050505b6007805461ff001916610100179055565b61027a8061148a83390190565b6020808252825182820181905260009190848201906040850190845b818110156111035783516001600160a01b0316835292840192918401916001016110de565b50909695505050505050565b60005b8381101561112a578181015183820152602001611112565b838111156105095750506000910152565b6000815180845261115381602086016020860161110f565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561121757603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561120157605f198985030183526111ef84865161113b565b948e01949350918d01916001016111d3565b505050978a01979450509188019160010161118e565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156112cb57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112b65783516001600160e01b0319168252928b019260019290920191908b019061128c565b50978a0197955050509187019160010161124f565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561132f57603f1988860301845261131d85835161113b565b94509285019290850190600101611301565b5092979650505050505050565b600181811c9082168061135057607f821691505b60208210810361137057634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b038416815260606020820181905260009061139a9083018561113b565b82810360408401526113ac818561113b565b9695505050505050565b6000602082840312156113c857600080fd5b5051919050565b60018060a01b03851681528360208201526080604082015260006113f6608083018561113b565b8281036060840152611408818561113b565b979650505050505050565b6001600160e01b031983168152815160009061143681600485016020870161110f565b919091016004019392505050565b6000825161145681846020870161110f565b9190910192915050565b60006020828403121561147257600080fd5b8151801515811461148257600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a2646970667358221220990b787919d3209dfbd2323072a6f4cedb04c5acf997b14a26e2078b6497508264736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModMockCallTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModMockCallTestField

    syntax S2KtestZModMockCallTestField ::= "stdstore" [symbol(), klabel(field_test%MockCallTest_stdstore)]

    syntax S2KtestZModMockCallTestField ::= "IS_TEST" [symbol(), klabel(field_test%MockCallTest_IS_TEST)]

    syntax S2KtestZModMockCallTestField ::= "_failed" [symbol(), klabel(field_test%MockCallTest__failed)]

    syntax S2KtestZModMockCallTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%MockCallTest_stdChainsInitialized)]

    syntax S2KtestZModMockCallTestField ::= "chains" [symbol(), klabel(field_test%MockCallTest_chains)]

    syntax S2KtestZModMockCallTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%MockCallTest_defaultRpcUrls)]

    syntax S2KtestZModMockCallTestField ::= "idToAlias" [symbol(), klabel(field_test%MockCallTest_idToAlias)]

    syntax S2KtestZModMockCallTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%MockCallTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModMockCallTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%MockCallTest_gasMeteringOff)]

    syntax S2KtestZModMockCallTestField ::= "_excludedContracts" [symbol(), klabel(field_test%MockCallTest__excludedContracts)]

    syntax S2KtestZModMockCallTestField ::= "_excludedSenders" [symbol(), klabel(field_test%MockCallTest__excludedSenders)]

    syntax S2KtestZModMockCallTestField ::= "_targetedContracts" [symbol(), klabel(field_test%MockCallTest__targetedContracts)]

    syntax S2KtestZModMockCallTestField ::= "_targetedSenders" [symbol(), klabel(field_test%MockCallTest__targetedSenders)]

    syntax S2KtestZModMockCallTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%MockCallTest__excludedArtifacts)]

    syntax S2KtestZModMockCallTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%MockCallTest__targetedArtifacts)]

    syntax S2KtestZModMockCallTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%MockCallTest__targetedArtifactSelectors)]

    syntax S2KtestZModMockCallTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%MockCallTest__targetedSelectors)]

    syntax S2KtestZModMockCallTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%MockCallTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModMockCallTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModMockCallTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModMockCallTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModMockCallTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModMockCallTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModMockCallTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModMockCallTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModMockCallTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModMockCallTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModMockCallTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModMockCallTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModMockCallTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModMockCallTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModMockCallTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModMockCallTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModMockCallTestContract "." S2KtestZModMockCallTestMethod [function(), symbol(), klabel(method_test%MockCallTest)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KISZUndTEST_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KexcludeContracts_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KexcludeSenders_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2Kfailed_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtargetArtifacts_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtargetContracts_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtargetInterfaces_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtargetSelectors_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtargetSenders_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtestMockCallValue" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtestMockCallValue_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtestMockCalls" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtestMockCalls_)]

    syntax S2KtestZModMockCallTestMethod ::= "S2KtestSelectorMockCall" "(" ")" [symbol(), klabel(method_test%MockCallTest_S2KtestSelectorMockCall_)]

    rule  ( S2KtestZModMockCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtestMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtestMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTest . S2KtestSelectorMockCall ( ) => #abiCallData ( "testSelectorMockCall" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testMockCallValue()" ) => 1208641942 )


    rule  ( selector ( "testMockCalls()" ) => 957910350 )


    rule  ( selector ( "testSelectorMockCall()" ) => 1385984437 )


endmodule

module S2KtestZModMockCallTestFoundry-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModMockCallTestFoundryContract

    syntax S2KtestZModMockCallTestFoundryContract ::= "S2KtestZModMockCallTestFoundry" [symbol(), klabel(contract_test%MockCallTestFoundry)]

    rule  ( #binRuntime ( S2KtestZModMockCallTestFoundry ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModMockCallTestFoundry ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModMockCallTestFoundryField

    syntax S2KtestZModMockCallTestFoundryField ::= "stdstore" [symbol(), klabel(field_test%MockCallTestFoundry_stdstore)]

    syntax S2KtestZModMockCallTestFoundryField ::= "IS_TEST" [symbol(), klabel(field_test%MockCallTestFoundry_IS_TEST)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_failed" [symbol(), klabel(field_test%MockCallTestFoundry__failed)]

    syntax S2KtestZModMockCallTestFoundryField ::= "stdChainsInitialized" [symbol(), klabel(field_test%MockCallTestFoundry_stdChainsInitialized)]

    syntax S2KtestZModMockCallTestFoundryField ::= "chains" [symbol(), klabel(field_test%MockCallTestFoundry_chains)]

    syntax S2KtestZModMockCallTestFoundryField ::= "defaultRpcUrls" [symbol(), klabel(field_test%MockCallTestFoundry_defaultRpcUrls)]

    syntax S2KtestZModMockCallTestFoundryField ::= "idToAlias" [symbol(), klabel(field_test%MockCallTestFoundry_idToAlias)]

    syntax S2KtestZModMockCallTestFoundryField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%MockCallTestFoundry_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModMockCallTestFoundryField ::= "gasMeteringOff" [symbol(), klabel(field_test%MockCallTestFoundry_gasMeteringOff)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_excludedContracts" [symbol(), klabel(field_test%MockCallTestFoundry__excludedContracts)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_excludedSenders" [symbol(), klabel(field_test%MockCallTestFoundry__excludedSenders)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_targetedContracts" [symbol(), klabel(field_test%MockCallTestFoundry__targetedContracts)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_targetedSenders" [symbol(), klabel(field_test%MockCallTestFoundry__targetedSenders)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_excludedArtifacts" [symbol(), klabel(field_test%MockCallTestFoundry__excludedArtifacts)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_targetedArtifacts" [symbol(), klabel(field_test%MockCallTestFoundry__targetedArtifacts)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%MockCallTestFoundry__targetedArtifactSelectors)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_targetedSelectors" [symbol(), klabel(field_test%MockCallTestFoundry__targetedSelectors)]

    syntax S2KtestZModMockCallTestFoundryField ::= "_targetedInterfaces" [symbol(), klabel(field_test%MockCallTestFoundry__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModMockCallTestFoundry . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . chains ) => 8 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModMockCallTestFoundry . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModMockCallTestFoundryContract "." S2KtestZModMockCallTestFoundryMethod [function(), symbol(), klabel(method_test%MockCallTestFoundry)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KISZUndTEST_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KexcludeArtifacts_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KexcludeContracts_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KexcludeSenders_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2Kfailed_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtargetArtifacts_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtargetContracts_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtargetInterfaces_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtargetSelectors_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtargetSenders_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestClearMockedCalls" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestClearMockedCalls_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallEmptyAccount" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockCallEmptyAccount_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallMultiplePartialMatch" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockCallMultiplePartialMatch_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallWithValue" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockCallWithValue_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallWithValueCalldataPrecedence" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockCallWithValueCalldataPrecedence_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCalldata" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockCalldata_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockGetters" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockGetters_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockNested" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockNested_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockSelector" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestMockSelector_)]

    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestRevertMock" "(" ")" [symbol(), klabel(method_test%MockCallTestFoundry_S2KtestRevertMock_)]

    rule  ( S2KtestZModMockCallTestFoundry . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestClearMockedCalls ( ) => #abiCallData ( "testClearMockedCalls" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallEmptyAccount ( ) => #abiCallData ( "testMockCallEmptyAccount" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallMultiplePartialMatch ( ) => #abiCallData ( "testMockCallMultiplePartialMatch" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallWithValue ( ) => #abiCallData ( "testMockCallWithValue" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallWithValueCalldataPrecedence ( ) => #abiCallData ( "testMockCallWithValueCalldataPrecedence" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCalldata ( ) => #abiCallData ( "testMockCalldata" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockGetters ( ) => #abiCallData ( "testMockGetters" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockNested ( ) => #abiCallData ( "testMockNested" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockSelector ( ) => #abiCallData ( "testMockSelector" , .TypedArgs ) )


    rule  ( S2KtestZModMockCallTestFoundry . S2KtestRevertMock ( ) => #abiCallData ( "testRevertMock" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testClearMockedCalls()" ) => 3785120424 )


    rule  ( selector ( "testMockCallEmptyAccount()" ) => 18109830 )


    rule  ( selector ( "testMockCallMultiplePartialMatch()" ) => 4122307110 )


    rule  ( selector ( "testMockCallWithValue()" ) => 1648180435 )


    rule  ( selector ( "testMockCallWithValueCalldataPrecedence()" ) => 4109519995 )


    rule  ( selector ( "testMockCalldata()" ) => 1414668956 )


    rule  ( selector ( "testMockGetters()" ) => 3597427088 )


    rule  ( selector ( "testMockNested()" ) => 404574674 )


    rule  ( selector ( "testMockSelector()" ) => 105532370 )


    rule  ( selector ( "testRevertMock()" ) => 3765809689 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Contract

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Contract ::= "S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20" [symbol(), klabel(contract_lib%forge-std%src%mocks%MockERC20)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101bb578063a9059cbb146101c3578063d505accf146101d6578063dd62ed3e146101e957600080fd5b80633644e5151461017357806370a082311461017b5780637ecebe001461019b57600080fd5b806306fdde03146100d4578063095ea7b3146100f25780631624f6c61461011557806318160ddd1461012a57806323b872dd14610141578063313ce56714610154575b600080fd5b6100dc610214565b6040516100e99190610a13565b60405180910390f35b610105610100366004610a84565b6102a2565b60405190151581526020016100e9565b610128610123366004610b62565b61030e565b005b61013360035481565b6040519081526020016100e9565b61010561014f366004610bd6565b6103bb565b6002546101619060ff1681565b60405160ff90911681526020016100e9565b6101336104d0565b610133610189366004610c12565b60046020526000908152604090205481565b6101336101a9366004610c12565b60086020526000908152604090205481565b6100dc6104f6565b6101056101d1366004610a84565b610503565b6101286101e4366004610c2d565b61059a565b6101336101f7366004610c97565b600560209081526000928352604080842090915290825290205481565b6000805461022190610cca565b80601f016020809104026020016040519081016040528092919081815260200182805461024d90610cca565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102fd9086815260200190565b60405180910390a350600192915050565b60095460ff161561035c5760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064015b60405180910390fd5b825161036f90600090602086019061097a565b50815161038390600190602085019061097a565b506002805460ff191660ff831617905561039b6107f8565b6006556103a6610811565b60075550506009805460ff1916600117905550565b6001600160a01b03831660009081526005602090815260408083203384529091528120546000198114610417576103f281846108b4565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b03851660009081526004602052604090205461043a90846108b4565b6001600160a01b0380871660009081526004602052604080822093909355908616815220546104699084610917565b6001600160a01b0380861660008181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104bd9087815260200190565b60405180910390a3506001949350505050565b60006006546104dd6107f8565b146104ef576104ea610811565b905090565b5060075490565b6001805461022190610cca565b3360009081526004602052604081205461051d90836108b4565b33600090815260046020526040808220929092556001600160a01b038516815220546105499083610917565b6001600160a01b0384166000818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102fd9086815260200190565b428410156105ea5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610353565b600060016105f66104d0565b6001600160a01b038a16600090815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061064483610d1a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106bd92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561071b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906107515750876001600160a01b0316816001600160a01b0316145b61078e5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610353565b6001600160a01b0381811660009081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b60006109768061080a63ffffffff8216565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108439190610d33565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66108746107f8565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000818310156109065760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152606401610353565b6109108284610dce565b9392505050565b6000806109248385610de5565b9050838110156109105760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152606401610353565b4690565b82805461098690610cca565b90600052602060002090601f0160209004810192826109a857600085556109ee565b82601f106109c157805160ff19168380011785556109ee565b828001600101855582156109ee579182015b828111156109ee5782518255916020019190600101906109d3565b506109fa9291506109fe565b5090565b5b808211156109fa57600081556001016109ff565b600060208083528351808285015260005b81811015610a4057858101830151858201604001528201610a24565b81811115610a52576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a7f57600080fd5b919050565b60008060408385031215610a9757600080fd5b610aa083610a68565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ad557600080fd5b813567ffffffffffffffff80821115610af057610af0610aae565b604051601f8301601f19908116603f01168101908282118183101715610b1857610b18610aae565b81604052838152866020858801011115610b3157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610a7f57600080fd5b600080600060608486031215610b7757600080fd5b833567ffffffffffffffff80821115610b8f57600080fd5b610b9b87838801610ac4565b94506020860135915080821115610bb157600080fd5b50610bbe86828701610ac4565b925050610bcd60408501610b51565b90509250925092565b600080600060608486031215610beb57600080fd5b610bf484610a68565b9250610c0260208501610a68565b9150604084013590509250925092565b600060208284031215610c2457600080fd5b61091082610a68565b600080600080600080600060e0888a031215610c4857600080fd5b610c5188610a68565b9650610c5f60208901610a68565b95506040880135945060608801359350610c7b60808901610b51565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215610caa57600080fd5b610cb383610a68565b9150610cc160208401610a68565b90509250929050565b600181811c90821680610cde57607f821691505b602082108103610cfe57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610d2c57610d2c610d04565b5060010190565b600080835481600182811c915080831680610d4f57607f831692505b60208084108203610d6e57634e487b7160e01b86526022600452602486fd5b818015610d825760018114610d9357610dc0565b60ff19861689528489019650610dc0565b60008a81526020902060005b86811015610db85781548b820152908501908301610d9f565b505084890196505b509498975050505050505050565b600082821015610de057610de0610d04565b500390565b60008219821115610df857610df8610d04565b50019056fea26469706673582212203b8558c88c8e4c8757c7a209f421be6e54d96a8e7f96a0e2a5422e412da2396e64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610e33806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101bb578063a9059cbb146101c3578063d505accf146101d6578063dd62ed3e146101e957600080fd5b80633644e5151461017357806370a082311461017b5780637ecebe001461019b57600080fd5b806306fdde03146100d4578063095ea7b3146100f25780631624f6c61461011557806318160ddd1461012a57806323b872dd14610141578063313ce56714610154575b600080fd5b6100dc610214565b6040516100e99190610a13565b60405180910390f35b610105610100366004610a84565b6102a2565b60405190151581526020016100e9565b610128610123366004610b62565b61030e565b005b61013360035481565b6040519081526020016100e9565b61010561014f366004610bd6565b6103bb565b6002546101619060ff1681565b60405160ff90911681526020016100e9565b6101336104d0565b610133610189366004610c12565b60046020526000908152604090205481565b6101336101a9366004610c12565b60086020526000908152604090205481565b6100dc6104f6565b6101056101d1366004610a84565b610503565b6101286101e4366004610c2d565b61059a565b6101336101f7366004610c97565b600560209081526000928352604080842090915290825290205481565b6000805461022190610cca565b80601f016020809104026020016040519081016040528092919081815260200182805461024d90610cca565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102fd9086815260200190565b60405180910390a350600192915050565b60095460ff161561035c5760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064015b60405180910390fd5b825161036f90600090602086019061097a565b50815161038390600190602085019061097a565b506002805460ff191660ff831617905561039b6107f8565b6006556103a6610811565b60075550506009805460ff1916600117905550565b6001600160a01b03831660009081526005602090815260408083203384529091528120546000198114610417576103f281846108b4565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b03851660009081526004602052604090205461043a90846108b4565b6001600160a01b0380871660009081526004602052604080822093909355908616815220546104699084610917565b6001600160a01b0380861660008181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104bd9087815260200190565b60405180910390a3506001949350505050565b60006006546104dd6107f8565b146104ef576104ea610811565b905090565b5060075490565b6001805461022190610cca565b3360009081526004602052604081205461051d90836108b4565b33600090815260046020526040808220929092556001600160a01b038516815220546105499083610917565b6001600160a01b0384166000818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102fd9086815260200190565b428410156105ea5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610353565b600060016105f66104d0565b6001600160a01b038a16600090815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061064483610d1a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106bd92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561071b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906107515750876001600160a01b0316816001600160a01b0316145b61078e5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610353565b6001600160a01b0381811660009081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b60006109768061080a63ffffffff8216565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108439190610d33565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66108746107f8565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000818310156109065760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152606401610353565b6109108284610dce565b9392505050565b6000806109248385610de5565b9050838110156109105760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152606401610353565b4690565b82805461098690610cca565b90600052602060002090601f0160209004810192826109a857600085556109ee565b82601f106109c157805160ff19168380011785556109ee565b828001600101855582156109ee579182015b828111156109ee5782518255916020019190600101906109d3565b506109fa9291506109fe565b5090565b5b808211156109fa57600081556001016109ff565b600060208083528351808285015260005b81811015610a4057858101830151858201604001528201610a24565b81811115610a52576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a7f57600080fd5b919050565b60008060408385031215610a9757600080fd5b610aa083610a68565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ad557600080fd5b813567ffffffffffffffff80821115610af057610af0610aae565b604051601f8301601f19908116603f01168101908282118183101715610b1857610b18610aae565b81604052838152866020858801011115610b3157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610a7f57600080fd5b600080600060608486031215610b7757600080fd5b833567ffffffffffffffff80821115610b8f57600080fd5b610b9b87838801610ac4565b94506020860135915080821115610bb157600080fd5b50610bbe86828701610ac4565b925050610bcd60408501610b51565b90509250925092565b600080600060608486031215610beb57600080fd5b610bf484610a68565b9250610c0260208501610a68565b9150604084013590509250925092565b600060208284031215610c2457600080fd5b61091082610a68565b600080600080600080600060e0888a031215610c4857600080fd5b610c5188610a68565b9650610c5f60208901610a68565b95506040880135945060608801359350610c7b60808901610b51565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215610caa57600080fd5b610cb383610a68565b9150610cc160208401610a68565b90509250929050565b600181811c90821680610cde57607f821691505b602082108103610cfe57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610d2c57610d2c610d04565b5060010190565b600080835481600182811c915080831680610d4f57607f831692505b60208084108203610d6e57634e487b7160e01b86526022600452602486fd5b818015610d825760018114610d9357610dc0565b60ff19861689528489019650610dc0565b60008a81526020902060005b86811015610db85781548b820152908501908301610d9f565b505084890196505b509498975050505050505050565b600082821015610de057610de0610d04565b500390565b60008219821115610df857610df8610d04565b50019056fea26469706673582212203b8558c88c8e4c8757c7a209f421be6e54d96a8e7f96a0e2a5422e412da2396e64736f6c634300080d0033" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "name" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_name)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "symbol" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_symbol)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "decimals" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_decimals)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "totalSupply" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_totalSupply)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "balanceOf" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_balanceOf)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "allowance" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_allowance)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "INITIAL_CHAIN_ID" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_INITIAL_CHAIN_ID)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "INITIAL_DOMAIN_SEPARATOR" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_INITIAL_DOMAIN_SEPARATOR)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "nonces" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_nonces)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Field ::= "initialized" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC20_initialized)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . name ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . symbol ) => 1 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . decimals ) => 2 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . totalSupply ) => 3 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . balanceOf ) => 4 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . allowance ) => 5 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . INITIAL_CHAIN_ID ) => 6 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . INITIAL_DOMAIN_SEPARATOR ) => 7 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . nonces ) => 8 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . initialized ) => 9 )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Contract "." S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method [function(), symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KDOMAINZUndSEPARATOR" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2KDOMAINZUndSEPARATOR_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kallowance" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Kallowance_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Kapprove_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2KbalanceOf_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kdecimals" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Kdecimals_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kinitialize" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint8" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Kinitialize_string_string_uint8)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kname" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Kname_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Knonces" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Knonces_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kpermit" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint8" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Kpermit_address_address_uint256_uint256_uint8_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Ksymbol_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KtotalSupply" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2KtotalSupply_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2Ktransfer_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20_S2KtransferFrom_address_address_uint256)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KDOMAINZUndSEPARATOR ( ) => #abiCallData ( "DOMAIN_SEPARATOR" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kallowance ( V0_ : address , V1_ : address ) => #abiCallData ( "allowance" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kapprove ( V0_spender : address , V1_amount : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kinitialize ( V0__name : string , V1__symbol : string , V2__decimals : uint8 ) => #abiCallData ( "initialize" , #string ( V0__name ) , #string ( V1__symbol ) , #uint8 ( V2__decimals ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V2__decimals )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kname ( ) => #abiCallData ( "name" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Knonces ( V0_ : address ) => #abiCallData ( "nonces" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kpermit ( V0_owner : address , V1_spender : address , V2_value : uint256 , V3_deadline : uint256 , V4_v : uint8 , V5_r : bytes32 , V6_s : bytes32 ) => #abiCallData ( "permit" , #address ( V0_owner ) , #address ( V1_spender ) , #uint256 ( V2_value ) , #uint256 ( V3_deadline ) , #uint8 ( V4_v ) , #bytes32 ( V5_r ) , #bytes32 ( V6_s ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_owner )
       andBool ( #rangeAddress ( V1_spender )
       andBool ( #rangeUInt ( 256 , V2_value )
       andBool ( #rangeUInt ( 256 , V3_deadline )
       andBool ( #rangeUInt ( 8 , V4_v )
       andBool ( #rangeBytes ( 32 , V5_r )
       andBool ( #rangeBytes ( 32 , V6_s )
               )))))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Ktransfer ( V0_to : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_to ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_to )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KtransferFrom ( V0_from : address , V1_to : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))


    rule  ( selector ( "DOMAIN_SEPARATOR()" ) => 910484757 )


    rule  ( selector ( "allowance(address,address)" ) => 3714247998 )


    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )


    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )


    rule  ( selector ( "decimals()" ) => 826074471 )


    rule  ( selector ( "initialize(string,string,uint8)" ) => 371521222 )


    rule  ( selector ( "name()" ) => 117300739 )


    rule  ( selector ( "nonces(address)" ) => 2127478272 )


    rule  ( selector ( "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)" ) => 3573918927 )


    rule  ( selector ( "symbol()" ) => 2514000705 )


    rule  ( selector ( "totalSupply()" ) => 404098525 )


    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )


    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverContract

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverContract ::= "S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver" [symbol(), klabel(contract_lib%forge-std%src%mocks%IERC721TokenReceiver)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverContract "." S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverMethod [function(), symbol(), klabel(method_lib%forge-std%src%mocks%IERC721TokenReceiver)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverMethod ::= "S2KonERC721Received" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%IERC721TokenReceiver_S2KonERC721Received_address_address_uint256_bytes)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver . S2KonERC721Received ( V0_ : address , V1_ : address , V2_ : uint256 , V3_ : bytes ) => #abiCallData ( "onERC721Received" , #address ( V0_ ) , #address ( V1_ ) , #uint256 ( V2_ ) , #bytes ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
       andBool ( #rangeUInt ( 256 , V2_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_ ) )
               ))))


    rule  ( selector ( "onERC721Received(address,address,uint256,bytes)" ) => 353073666 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Contract

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Contract ::= "S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721" [symbol(), klabel(contract_lib%forge-std%src%mocks%MockERC721)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101f7578063b88d4fde1461020a578063c87b56dd1461021d578063e985e9c51461023157600080fd5b80636352211e146101bb57806370a08231146101ce57806395d89b41146101ef57600080fd5b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018257806342842e0e146101955780634cd88b76146101a857600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610a51565b61025f565b60405190151581526020015b60405180910390f35b61011f6102b1565b60405161010e9190610ac2565b61015561013a366004610ad5565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61018061017b366004610b05565b61033f565b005b610180610190366004610b2f565b610426565b6101806101a3366004610b2f565b61061f565b6101806101b6366004610c17565b61070e565b6101556101c9366004610ad5565b610790565b6101e16101dc366004610c7b565b6107e7565b60405190815260200161010e565b61011f61084a565b610180610205366004610c96565b610857565b610180610218366004610cd2565b6108c3565b61011f61022b366004610ad5565b50606090565b61010261023f366004610d4e565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061029057506380ac58cd60e01b6001600160e01b03198316145b806102ab5750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546102be90610d81565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea90610d81565b80156103375780601f1061030c57610100808354040283529160200191610337565b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b03163381148061038857506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6103ca5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600260205260409020546001600160a01b0384811691161461047c5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b60448201526064016103c1565b6001600160a01b0382166104c65760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b60448201526064016103c1565b336001600160a01b038416148061050057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061052157506000818152600460205260409020546001600160a01b031633145b61055e5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064016103c1565b6001600160a01b038316600090815260036020526040812080549161058283610dd1565b90915550506001600160a01b03821660009081526003602052604081208054916105ab83610de8565b9091555050600081815260026020908152604080832080546001600160a01b038088166001600160a01b031992831681179093556004909452828520805490911690559051849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61062a838383610426565b813b15806106ca5750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610e01565b6001600160e01b031916145b6107095760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b505050565b60065460ff16156107575760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064016103c1565b815161076a90600090602085019061099f565b50805161077e90600190602084019061099f565b50506006805460ff1916600117905550565b6000818152600260205260409020546001600160a01b0316806107e25760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b60448201526064016103c1565b919050565b60006001600160a01b03821661082e5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016103c1565b506001600160a01b031660009081526003602052604090205490565b600180546102be90610d81565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108ce848484610426565b823b158061095a5750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a029061090b903390899088908890600401610e1e565b6020604051808303816000875af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190610e01565b6001600160e01b031916145b6109995760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b50505050565b8280546109ab90610d81565b90600052602060002090601f0160209004810192826109cd5760008555610a13565b82601f106109e657805160ff1916838001178555610a13565b82800160010185558215610a13579182015b82811115610a135782518255916020019190600101906109f8565b50610a1f929150610a23565b5090565b5b80821115610a1f5760008155600101610a24565b6001600160e01b031981168114610a4e57600080fd5b50565b600060208284031215610a6357600080fd5b8135610a6e81610a38565b9392505050565b6000815180845260005b81811015610a9b57602081850181015186830182015201610a7f565b81811115610aad576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610a6e6020830184610a75565b600060208284031215610ae757600080fd5b5035919050565b80356001600160a01b03811681146107e257600080fd5b60008060408385031215610b1857600080fd5b610b2183610aee565b946020939093013593505050565b600080600060608486031215610b4457600080fd5b610b4d84610aee565b9250610b5b60208501610aee565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b9c57610b9c610b6b565b604051601f8501601f19908116603f01168101908282118183101715610bc457610bc4610b6b565b81604052809350858152868686011115610bdd57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610c0857600080fd5b610a6e83833560208501610b81565b60008060408385031215610c2a57600080fd5b823567ffffffffffffffff80821115610c4257600080fd5b610c4e86838701610bf7565b93506020850135915080821115610c6457600080fd5b50610c7185828601610bf7565b9150509250929050565b600060208284031215610c8d57600080fd5b610a6e82610aee565b60008060408385031215610ca957600080fd5b610cb283610aee565b915060208301358015158114610cc757600080fd5b809150509250929050565b60008060008060808587031215610ce857600080fd5b610cf185610aee565b9350610cff60208601610aee565b925060408501359150606085013567ffffffffffffffff811115610d2257600080fd5b8501601f81018713610d3357600080fd5b610d4287823560208401610b81565b91505092959194509250565b60008060408385031215610d6157600080fd5b610d6a83610aee565b9150610d7860208401610aee565b90509250929050565b600181811c90821680610d9557607f821691505b602082108103610db557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081610de057610de0610dbb565b506000190190565b600060018201610dfa57610dfa610dbb565b5060010190565b600060208284031215610e1357600080fd5b8151610a6e81610a38565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610e5190830184610a75565b969550505050505056fea2646970667358221220fd5359dae850633bcfff57877d3c5934ca2a8be123439232a65df025a4e4eae764736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610e91806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101f7578063b88d4fde1461020a578063c87b56dd1461021d578063e985e9c51461023157600080fd5b80636352211e146101bb57806370a08231146101ce57806395d89b41146101ef57600080fd5b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018257806342842e0e146101955780634cd88b76146101a857600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610a51565b61025f565b60405190151581526020015b60405180910390f35b61011f6102b1565b60405161010e9190610ac2565b61015561013a366004610ad5565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61018061017b366004610b05565b61033f565b005b610180610190366004610b2f565b610426565b6101806101a3366004610b2f565b61061f565b6101806101b6366004610c17565b61070e565b6101556101c9366004610ad5565b610790565b6101e16101dc366004610c7b565b6107e7565b60405190815260200161010e565b61011f61084a565b610180610205366004610c96565b610857565b610180610218366004610cd2565b6108c3565b61011f61022b366004610ad5565b50606090565b61010261023f366004610d4e565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061029057506380ac58cd60e01b6001600160e01b03198316145b806102ab5750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546102be90610d81565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea90610d81565b80156103375780601f1061030c57610100808354040283529160200191610337565b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b03163381148061038857506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6103ca5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600260205260409020546001600160a01b0384811691161461047c5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b60448201526064016103c1565b6001600160a01b0382166104c65760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b60448201526064016103c1565b336001600160a01b038416148061050057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061052157506000818152600460205260409020546001600160a01b031633145b61055e5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064016103c1565b6001600160a01b038316600090815260036020526040812080549161058283610dd1565b90915550506001600160a01b03821660009081526003602052604081208054916105ab83610de8565b9091555050600081815260026020908152604080832080546001600160a01b038088166001600160a01b031992831681179093556004909452828520805490911690559051849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61062a838383610426565b813b15806106ca5750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610e01565b6001600160e01b031916145b6107095760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b505050565b60065460ff16156107575760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064016103c1565b815161076a90600090602085019061099f565b50805161077e90600190602084019061099f565b50506006805460ff1916600117905550565b6000818152600260205260409020546001600160a01b0316806107e25760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b60448201526064016103c1565b919050565b60006001600160a01b03821661082e5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016103c1565b506001600160a01b031660009081526003602052604090205490565b600180546102be90610d81565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108ce848484610426565b823b158061095a5750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a029061090b903390899088908890600401610e1e565b6020604051808303816000875af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190610e01565b6001600160e01b031916145b6109995760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b50505050565b8280546109ab90610d81565b90600052602060002090601f0160209004810192826109cd5760008555610a13565b82601f106109e657805160ff1916838001178555610a13565b82800160010185558215610a13579182015b82811115610a135782518255916020019190600101906109f8565b50610a1f929150610a23565b5090565b5b80821115610a1f5760008155600101610a24565b6001600160e01b031981168114610a4e57600080fd5b50565b600060208284031215610a6357600080fd5b8135610a6e81610a38565b9392505050565b6000815180845260005b81811015610a9b57602081850181015186830182015201610a7f565b81811115610aad576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610a6e6020830184610a75565b600060208284031215610ae757600080fd5b5035919050565b80356001600160a01b03811681146107e257600080fd5b60008060408385031215610b1857600080fd5b610b2183610aee565b946020939093013593505050565b600080600060608486031215610b4457600080fd5b610b4d84610aee565b9250610b5b60208501610aee565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b9c57610b9c610b6b565b604051601f8501601f19908116603f01168101908282118183101715610bc457610bc4610b6b565b81604052809350858152868686011115610bdd57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610c0857600080fd5b610a6e83833560208501610b81565b60008060408385031215610c2a57600080fd5b823567ffffffffffffffff80821115610c4257600080fd5b610c4e86838701610bf7565b93506020850135915080821115610c6457600080fd5b50610c7185828601610bf7565b9150509250929050565b600060208284031215610c8d57600080fd5b610a6e82610aee565b60008060408385031215610ca957600080fd5b610cb283610aee565b915060208301358015158114610cc757600080fd5b809150509250929050565b60008060008060808587031215610ce857600080fd5b610cf185610aee565b9350610cff60208601610aee565b925060408501359150606085013567ffffffffffffffff811115610d2257600080fd5b8501601f81018713610d3357600080fd5b610d4287823560208401610b81565b91505092959194509250565b60008060408385031215610d6157600080fd5b610d6a83610aee565b9150610d7860208401610aee565b90509250929050565b600181811c90821680610d9557607f821691505b602082108103610db557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081610de057610de0610dbb565b506000190190565b600060018201610dfa57610dfa610dbb565b5060010190565b600060208284031215610e1357600080fd5b8151610a6e81610a38565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610e5190830184610a75565b969550505050505056fea2646970667358221220fd5359dae850633bcfff57877d3c5934ca2a8be123439232a65df025a4e4eae764736f6c634300080d0033" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "name" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721_name)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "symbol" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721_symbol)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "_ownerOf" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721__ownerOf)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "_balanceOf" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721__balanceOf)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "getApproved" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721_getApproved)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "isApprovedForAll" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721_isApprovedForAll)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Field ::= "initialized" [symbol(), klabel(field_lib%forge-std%src%mocks%MockERC721_initialized)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . name ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . symbol ) => 1 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . _ownerOf ) => 2 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . _balanceOf ) => 3 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . getApproved ) => 4 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . isApprovedForAll ) => 5 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . initialized ) => 6 )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Contract "." S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method [function(), symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2Kapprove_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KbalanceOf_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KgetApproved" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KgetApproved_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Kinitialize" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2Kinitialize_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KisApprovedForAll" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KisApprovedForAll_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Kname" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2Kname_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KownerOf" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KownerOf_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsafeTransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KsafeTransferFrom_address_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsafeTransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KsafeTransferFrom_address_address_uint256_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsetApprovalForAll" "(" Int ":" "address" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KsetApprovalForAll_address_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsupportsInterface" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KsupportsInterface_bytes4)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2Ksymbol_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KtokenURI" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KtokenURI_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721_S2KtransferFrom_address_address_uint256)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Kapprove ( V0_spender : address , V1_id : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_id ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_id )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KbalanceOf ( V0_owner : address ) => #abiCallData ( "balanceOf" , #address ( V0_owner ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_owner )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KgetApproved ( V0_ : uint256 ) => #abiCallData ( "getApproved" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Kinitialize ( V0__name : string , V1__symbol : string ) => #abiCallData ( "initialize" , #string ( V0__name ) , #string ( V1__symbol ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KisApprovedForAll ( V0_ : address , V1_ : address ) => #abiCallData ( "isApprovedForAll" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Kname ( ) => #abiCallData ( "name" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KownerOf ( V0_id : uint256 ) => #abiCallData ( "ownerOf" , #uint256 ( V0_id ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_id )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsafeTransferFrom ( V0_from : address , V1_to : address , V2_id : uint256 ) => #abiCallData ( "safeTransferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_id ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_id )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsafeTransferFrom ( V0_from : address , V1_to : address , V2_id : uint256 , V3_data : bytes ) => #abiCallData ( "safeTransferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_id ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_id )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsetApprovalForAll ( V0_operator : address , V1_approved : bool ) => #abiCallData ( "setApprovalForAll" , #address ( V0_operator ) , #bool ( V1_approved ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_operator )
       andBool ( #rangeBool ( V1_approved )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsupportsInterface ( V0_interfaceId : bytes4 ) => #abiCallData ( "supportsInterface" , #bytes4 ( V0_interfaceId ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_interfaceId )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KtokenURI ( V0_id : uint256 ) => #abiCallData ( "tokenURI" , #uint256 ( V0_id ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_id )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KtransferFrom ( V0_from : address , V1_to : address , V2_id : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_id ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_id )
               )))


    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )


    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )


    rule  ( selector ( "getApproved(uint256)" ) => 135795452 )


    rule  ( selector ( "initialize(string,string)" ) => 1289259894 )


    rule  ( selector ( "isApprovedForAll(address,address)" ) => 3917867461 )


    rule  ( selector ( "name()" ) => 117300739 )


    rule  ( selector ( "ownerOf(uint256)" ) => 1666326814 )


    rule  ( selector ( "safeTransferFrom(address,address,uint256)" ) => 1115958798 )


    rule  ( selector ( "safeTransferFrom(address,address,uint256,bytes)" ) => 3096268766 )


    rule  ( selector ( "setApprovalForAll(address,bool)" ) => 2720838757 )


    rule  ( selector ( "supportsInterface(bytes4)" ) => 33540519 )


    rule  ( selector ( "symbol()" ) => 2514000705 )


    rule  ( selector ( "tokenURI(uint256)" ) => 3363526365 )


    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )


endmodule

module S2KsrcZModMyIERC20-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModMyIERC20Contract

    syntax S2KsrcZModMyIERC20Contract ::= "S2KsrcZModMyIERC20" [symbol(), klabel(contract_src%MyIERC20)]

    rule  ( #binRuntime ( S2KsrcZModMyIERC20 ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KsrcZModMyIERC20 ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KsrcZModMyIERC20Contract "." S2KsrcZModMyIERC20Method [function(), symbol(), klabel(method_src%MyIERC20)]

    syntax S2KsrcZModMyIERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%MyIERC20_S2Kapprove_address_uint256)]

    syntax S2KsrcZModMyIERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_src%MyIERC20_S2KbalanceOf_address)]

    syntax S2KsrcZModMyIERC20Method ::= "S2Kdecimals" "(" ")" [symbol(), klabel(method_src%MyIERC20_S2Kdecimals_)]

    syntax S2KsrcZModMyIERC20Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_src%MyIERC20_S2Ksymbol_)]

    syntax S2KsrcZModMyIERC20Method ::= "S2KtotalSupply" "(" ")" [symbol(), klabel(method_src%MyIERC20_S2KtotalSupply_)]

    syntax S2KsrcZModMyIERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%MyIERC20_S2Ktransfer_address_uint256)]

    syntax S2KsrcZModMyIERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%MyIERC20_S2KtransferFrom_address_address_uint256)]

    rule  ( S2KsrcZModMyIERC20 . S2Kapprove ( V0_spender : address , V1_value : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))


    rule  ( S2KsrcZModMyIERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )


    rule  ( S2KsrcZModMyIERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )


    rule  ( S2KsrcZModMyIERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )


    rule  ( S2KsrcZModMyIERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )


    rule  ( S2KsrcZModMyIERC20 . S2Ktransfer ( V0_recipient : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_recipient ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_recipient )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))


    rule  ( S2KsrcZModMyIERC20 . S2KtransferFrom ( V0_sender : address , V1_recipient : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_sender ) , #address ( V1_recipient ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_sender )
       andBool ( #rangeAddress ( V1_recipient )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))


    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )


    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )


    rule  ( selector ( "decimals()" ) => 826074471 )


    rule  ( selector ( "symbol()" ) => 2514000705 )


    rule  ( selector ( "totalSupply()" ) => 404098525 )


    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )


    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )


endmodule

module S2KsrcZModMyToken-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModMyTokenContract

    syntax S2KsrcZModMyTokenContract ::= "S2KsrcZModMyToken" [symbol(), klabel(contract_src%MyToken)]

    rule  ( #binRuntime ( S2KsrcZModMyToken ) => #parseByteStack ( "0x6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModMyToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModMyTokenField

    syntax S2KsrcZModMyTokenField ::= "token" [symbol(), klabel(field_src%MyToken_token)]

    syntax S2KsrcZModMyTokenField ::= "balances" [symbol(), klabel(field_src%MyToken_balances)]

    rule  ( #loc ( S2KsrcZModMyToken . token ) => 0 )


    rule  ( #loc ( S2KsrcZModMyToken . balances ) => 1 )


    syntax Bytes ::= S2KsrcZModMyTokenContract "." S2KsrcZModMyTokenMethod [function(), symbol(), klabel(method_src%MyToken)]

    syntax S2KsrcZModMyTokenMethod ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_src%MyToken_S2KbalanceOf_address)]

    syntax S2KsrcZModMyTokenMethod ::= "S2Kbalances" "(" Int ":" "address" ")" [symbol(), klabel(method_src%MyToken_S2Kbalances_address)]

    syntax S2KsrcZModMyTokenMethod ::= "S2Kpay" "(" Int ":" "address" ")" [symbol(), klabel(method_src%MyToken_S2Kpay_address)]

    syntax S2KsrcZModMyTokenMethod ::= "S2Ktoken" "(" ")" [symbol(), klabel(method_src%MyToken_S2Ktoken_)]

    rule  ( S2KsrcZModMyToken . S2KbalanceOf ( V0_user : address ) => #abiCallData ( "balanceOf" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )


    rule  ( S2KsrcZModMyToken . S2Kbalances ( V0_ : address ) => #abiCallData ( "balances" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )


    rule  ( S2KsrcZModMyToken . S2Kpay ( V0_user : address ) => #abiCallData ( "pay" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )


    rule  ( S2KsrcZModMyToken . S2Ktoken ( ) => #abiCallData ( "token" , .TypedArgs ) )


    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )


    rule  ( selector ( "balances(address)" ) => 669136355 )


    rule  ( selector ( "pay(address)" ) => 202497757 )


    rule  ( selector ( "token()" ) => 4228666474 )


endmodule

module S2KtestZModNoImport-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModNoImportContract

    syntax S2KtestZModNoImportContract ::= "S2KtestZModNoImport" [symbol(), klabel(contract_test%NoImport)]

    rule  ( #binRuntime ( S2KtestZModNoImport ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063d466a81314602d575b600080fd5b60336045565b60405190815260200160405180910390f35b60008060016002826055838260a1565b905060006061848460b6565b90506000606d828460ca565b9050806078838560a1565b6080919060a1565b965050505050505090565b634e487b7160e01b600052601160045260246000fd5b6000821982111560b15760b1608b565b500190565b60008282101560c55760c5608b565b500390565b600081600019048311821515161560e15760e1608b565b50029056fea2646970667358221220396cae21e2199c8413fc2c4c525eadb7fe48408a10d853a1a13a708b199d51bd64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModNoImport ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061011c806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d466a81314602d575b600080fd5b60336045565b60405190815260200160405180910390f35b60008060016002826055838260a1565b905060006061848460b6565b90506000606d828460ca565b9050806078838560a1565b6080919060a1565b965050505050505090565b634e487b7160e01b600052601160045260246000fd5b6000821982111560b15760b1608b565b500190565b60008282101560c55760c5608b565b500390565b600081600019048311821515161560e15760e1608b565b50029056fea2646970667358221220396cae21e2199c8413fc2c4c525eadb7fe48408a10d853a1a13a708b199d51bd64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModNoImportContract "." S2KtestZModNoImportMethod [function(), symbol(), klabel(method_test%NoImport)]

    syntax S2KtestZModNoImportMethod ::= "S2KtestZUndsourceZUndmap" "(" ")" [symbol(), klabel(method_test%NoImport_S2KtestZUndsourceZUndmap_)]

    rule  ( S2KtestZModNoImport . S2KtestZUndsourceZUndmap ( ) => #abiCallData ( "test_source_map" , .TypedArgs ) )


    rule  ( selector ( "test_source_map()" ) => 3563497491 )


endmodule

module S2KsrcZModOwnerUpOnly-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModOwnerUpOnlyContract

    syntax S2KsrcZModOwnerUpOnlyContract ::= "S2KsrcZModOwnerUpOnly" [symbol(), klabel(contract_src%OwnerUpOnly)]

    rule  ( #binRuntime ( S2KsrcZModOwnerUpOnly ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModOwnerUpOnly ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModOwnerUpOnlyField

    syntax S2KsrcZModOwnerUpOnlyField ::= "count" [symbol(), klabel(field_src%OwnerUpOnly_count)]

    rule  ( #loc ( S2KsrcZModOwnerUpOnly . count ) => 0 )


    syntax Bytes ::= S2KsrcZModOwnerUpOnlyContract "." S2KsrcZModOwnerUpOnlyMethod [function(), symbol(), klabel(method_src%OwnerUpOnly)]

    syntax S2KsrcZModOwnerUpOnlyMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_src%OwnerUpOnly_S2Kcount_)]

    syntax S2KsrcZModOwnerUpOnlyMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_src%OwnerUpOnly_S2Kincrement_)]

    syntax S2KsrcZModOwnerUpOnlyMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_src%OwnerUpOnly_S2Kowner_)]

    rule  ( S2KsrcZModOwnerUpOnly . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )


    rule  ( S2KsrcZModOwnerUpOnly . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )


    rule  ( S2KsrcZModOwnerUpOnly . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )


    rule  ( selector ( "count()" ) => 107354813 )


    rule  ( selector ( "increment()" ) => 3500007562 )


    rule  ( selector ( "owner()" ) => 2376452955 )


endmodule

module S2KtestZModOwnerUpOnlyTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModOwnerUpOnlyTestContract

    syntax S2KtestZModOwnerUpOnlyTestContract ::= "S2KtestZModOwnerUpOnlyTest" [symbol(), klabel(contract_test%OwnerUpOnlyTest)]

    rule  ( #binRuntime ( S2KtestZModOwnerUpOnlyTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModOwnerUpOnlyTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModOwnerUpOnlyTestField

    syntax S2KtestZModOwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_test%OwnerUpOnlyTest_stdstore)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_test%OwnerUpOnlyTest_IS_TEST)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_failed" [symbol(), klabel(field_test%OwnerUpOnlyTest__failed)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%OwnerUpOnlyTest_stdChainsInitialized)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "chains" [symbol(), klabel(field_test%OwnerUpOnlyTest_chains)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%OwnerUpOnlyTest_defaultRpcUrls)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "idToAlias" [symbol(), klabel(field_test%OwnerUpOnlyTest_idToAlias)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%OwnerUpOnlyTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%OwnerUpOnlyTest_gasMeteringOff)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_excludedContracts" [symbol(), klabel(field_test%OwnerUpOnlyTest__excludedContracts)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_excludedSenders" [symbol(), klabel(field_test%OwnerUpOnlyTest__excludedSenders)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_targetedContracts" [symbol(), klabel(field_test%OwnerUpOnlyTest__targetedContracts)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_targetedSenders" [symbol(), klabel(field_test%OwnerUpOnlyTest__targetedSenders)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%OwnerUpOnlyTest__excludedArtifacts)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%OwnerUpOnlyTest__targetedArtifacts)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%OwnerUpOnlyTest__targetedArtifactSelectors)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%OwnerUpOnlyTest__targetedSelectors)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%OwnerUpOnlyTest__targetedInterfaces)]

    syntax S2KtestZModOwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_test%OwnerUpOnlyTest_upOnly)]

    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModOwnerUpOnlyTest . upOnly ) => 28 )


    syntax Bytes ::= S2KtestZModOwnerUpOnlyTestContract "." S2KtestZModOwnerUpOnlyTestMethod [function(), symbol(), klabel(method_test%OwnerUpOnlyTest)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KISZUndTEST_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KexcludeContracts_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KexcludeSenders_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2Kfailed_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KsetUp_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtargetArtifacts_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtargetContracts_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtargetInterfaces_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtargetSelectors_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtargetSenders_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtestFailIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtestFailIncrementAsNotOwner_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtestIncrementAsNotOwner_)]

    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsOwner" "(" ")" [symbol(), klabel(method_test%OwnerUpOnlyTest_S2KtestIncrementAsOwner_)]

    rule  ( S2KtestZModOwnerUpOnlyTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtestFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtestIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )


    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtestIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFailIncrementAsNotOwner()" ) => 4249919617 )


    rule  ( selector ( "testIncrementAsNotOwner()" ) => 1302326069 )


    rule  ( selector ( "testIncrementAsOwner()" ) => 1980498343 )


endmodule

module S2KtestZModAdditionalToken-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAdditionalTokenContract

    syntax S2KtestZModAdditionalTokenContract ::= "S2KtestZModAdditionalToken" [symbol(), klabel(contract_test%AdditionalToken)]

    rule  ( #binRuntime ( S2KtestZModAdditionalToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780638da5cb5b1461006d578063ac6c78d1146100ac578063e5071b8e146100b6575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b6100947f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610064565b6100b46100be565b005b6100b4610167565b33600f146101135760405162461bcd60e51b815260206004820152601f60248201527f4164646974696f6e616c546f6b656e3a2061646472657373206e6f742031350060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152602360248201527f4164646974696f6e616c546f6b656e3a207265766572742061732065787065636044820152621d195960ea1b606482015260840161010a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a9576000546101a59060016101ab565b6000555b565b600082198211156101cc57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220e69d701c09004a123d37a9f57a0daddb4481949753681de64bf842e66d6e925c64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModAdditionalToken ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b50336080526000805560805161020761003a600039600081816072015261017201526102076000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780638da5cb5b1461006d578063ac6c78d1146100ac578063e5071b8e146100b6575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b6100947f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610064565b6100b46100be565b005b6100b4610167565b33600f146101135760405162461bcd60e51b815260206004820152601f60248201527f4164646974696f6e616c546f6b656e3a2061646472657373206e6f742031350060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152602360248201527f4164646974696f6e616c546f6b656e3a207265766572742061732065787065636044820152621d195960ea1b606482015260840161010a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a9576000546101a59060016101ab565b6000555b565b600082198211156101cc57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220e69d701c09004a123d37a9f57a0daddb4481949753681de64bf842e66d6e925c64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModAdditionalTokenField

    syntax S2KtestZModAdditionalTokenField ::= "count" [symbol(), klabel(field_test%AdditionalToken_count)]

    rule  ( #loc ( S2KtestZModAdditionalToken . count ) => 0 )


    syntax Bytes ::= S2KtestZModAdditionalTokenContract "." S2KtestZModAdditionalTokenMethod [function(), symbol(), klabel(method_test%AdditionalToken)]

    syntax S2KtestZModAdditionalTokenMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_test%AdditionalToken_S2Kcount_)]

    syntax S2KtestZModAdditionalTokenMethod ::= "S2KincrementCount" "(" ")" [symbol(), klabel(method_test%AdditionalToken_S2KincrementCount_)]

    syntax S2KtestZModAdditionalTokenMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_test%AdditionalToken_S2Kowner_)]

    syntax S2KtestZModAdditionalTokenMethod ::= "S2KrevertOn15" "(" ")" [symbol(), klabel(method_test%AdditionalToken_S2KrevertOn15_)]

    rule  ( S2KtestZModAdditionalToken . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )


    rule  ( S2KtestZModAdditionalToken . S2KincrementCount ( ) => #abiCallData ( "incrementCount" , .TypedArgs ) )


    rule  ( S2KtestZModAdditionalToken . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )


    rule  ( S2KtestZModAdditionalToken . S2KrevertOn15 ( ) => #abiCallData ( "revertOn15" , .TypedArgs ) )


    rule  ( selector ( "count()" ) => 107354813 )


    rule  ( selector ( "incrementCount()" ) => 3842448270 )


    rule  ( selector ( "owner()" ) => 2376452955 )


    rule  ( selector ( "revertOn15()" ) => 2892789969 )


endmodule

module S2KtestZModMyErc20-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModMyErc20Contract

    syntax S2KtestZModMyErc20Contract ::= "S2KtestZModMyErc20" [symbol(), klabel(contract_test%MyErc20)]

    rule  ( #binRuntime ( S2KtestZModMyErc20 ) => #parseByteStack ( "0x6080604052600080fdfea26469706673582212204ad7cdd771d5aefbc74546bc4d3852b777ea96b2b39f8c7dbe0f7e918866832e64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModMyErc20 ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b503363deadbeef14601f57600080fd5b603f80602c6000396000f3fe6080604052600080fdfea26469706673582212204ad7cdd771d5aefbc74546bc4d3852b777ea96b2b39f8c7dbe0f7e918866832e64736f6c634300080d0033" ) )


endmodule

module S2KtestZModPlainPrankTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModPlainPrankTestContract

    syntax S2KtestZModPlainPrankTestContract ::= "S2KtestZModPlainPrankTest" [symbol(), klabel(contract_test%PlainPrankTest)]

    rule  ( #binRuntime ( S2KtestZModPlainPrankTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModPlainPrankTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModPlainPrankTestField

    syntax S2KtestZModPlainPrankTestField ::= "stdstore" [symbol(), klabel(field_test%PlainPrankTest_stdstore)]

    syntax S2KtestZModPlainPrankTestField ::= "IS_TEST" [symbol(), klabel(field_test%PlainPrankTest_IS_TEST)]

    syntax S2KtestZModPlainPrankTestField ::= "_failed" [symbol(), klabel(field_test%PlainPrankTest__failed)]

    syntax S2KtestZModPlainPrankTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%PlainPrankTest_stdChainsInitialized)]

    syntax S2KtestZModPlainPrankTestField ::= "chains" [symbol(), klabel(field_test%PlainPrankTest_chains)]

    syntax S2KtestZModPlainPrankTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%PlainPrankTest_defaultRpcUrls)]

    syntax S2KtestZModPlainPrankTestField ::= "idToAlias" [symbol(), klabel(field_test%PlainPrankTest_idToAlias)]

    syntax S2KtestZModPlainPrankTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%PlainPrankTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModPlainPrankTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%PlainPrankTest_gasMeteringOff)]

    syntax S2KtestZModPlainPrankTestField ::= "_excludedContracts" [symbol(), klabel(field_test%PlainPrankTest__excludedContracts)]

    syntax S2KtestZModPlainPrankTestField ::= "_excludedSenders" [symbol(), klabel(field_test%PlainPrankTest__excludedSenders)]

    syntax S2KtestZModPlainPrankTestField ::= "_targetedContracts" [symbol(), klabel(field_test%PlainPrankTest__targetedContracts)]

    syntax S2KtestZModPlainPrankTestField ::= "_targetedSenders" [symbol(), klabel(field_test%PlainPrankTest__targetedSenders)]

    syntax S2KtestZModPlainPrankTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%PlainPrankTest__excludedArtifacts)]

    syntax S2KtestZModPlainPrankTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%PlainPrankTest__targetedArtifacts)]

    syntax S2KtestZModPlainPrankTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%PlainPrankTest__targetedArtifactSelectors)]

    syntax S2KtestZModPlainPrankTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%PlainPrankTest__targetedSelectors)]

    syntax S2KtestZModPlainPrankTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%PlainPrankTest__targetedInterfaces)]

    syntax S2KtestZModPlainPrankTestField ::= "erc20a" [symbol(), klabel(field_test%PlainPrankTest_erc20a)]

    syntax S2KtestZModPlainPrankTestField ::= "erc20b" [symbol(), klabel(field_test%PlainPrankTest_erc20b)]

    rule  ( #loc ( S2KtestZModPlainPrankTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . erc20a ) => 28 )


    rule  ( #loc ( S2KtestZModPlainPrankTest . erc20b ) => 29 )


    syntax Bytes ::= S2KtestZModPlainPrankTestContract "." S2KtestZModPlainPrankTestMethod [function(), symbol(), klabel(method_test%PlainPrankTest)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KISZUndTEST_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KexcludeContracts_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KexcludeSenders_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2Kfailed_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KinternalCounter" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KinternalCounter_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtargetArtifacts_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtargetContracts_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtargetInterfaces_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtargetSelectors_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtargetSenders_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndexistingAlready" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestFailZUndstartPrankZUndexistingAlready_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndinternalCall" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestFailZUndstartPrankZUndinternalCall_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestPrankCreate" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestPrankCreate_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestPrankCreateAddress" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestPrankCreateAddress_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndprankZUndexpectRevert" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestZUndprankZUndexpectRevert_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndprankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestZUndprankZUndzeroAddressZUndtrue_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstartPrankWithOriginZUndtrue" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestZUndstartPrankWithOriginZUndtrue_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndtrue" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestZUndstartPrankZUndtrue_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndzeroAddressZUndtrue" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestZUndstartPrankZUndzeroAddressZUndtrue_)]

    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstopPrankZUndnotExistent" "(" ")" [symbol(), klabel(method_test%PlainPrankTest_S2KtestZUndstopPrankZUndnotExistent_)]

    rule  ( S2KtestZModPlainPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KinternalCounter ( ) => #abiCallData ( "internalCounter" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestFailZUndstartPrankZUndexistingAlready ( ) => #abiCallData ( "testFail_startPrank_existingAlready" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestFailZUndstartPrankZUndinternalCall ( ) => #abiCallData ( "testFail_startPrank_internalCall" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestPrankCreate ( ) => #abiCallData ( "testPrankCreate" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestPrankCreateAddress ( ) => #abiCallData ( "testPrankCreateAddress" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndprankZUndexpectRevert ( ) => #abiCallData ( "test_prank_expectRevert" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndprankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_prank_zeroAddress_true" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstartPrankWithOriginZUndtrue ( ) => #abiCallData ( "test_startPrankWithOrigin_true" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstartPrankZUndtrue ( ) => #abiCallData ( "test_startPrank_true" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstartPrankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_startPrank_zeroAddress_true" , .TypedArgs ) )


    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstopPrankZUndnotExistent ( ) => #abiCallData ( "test_stopPrank_notExistent" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "internalCounter()" ) => 2687914858 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_startPrank_existingAlready()" ) => 2262269573 )


    rule  ( selector ( "testFail_startPrank_internalCall()" ) => 3075676477 )


    rule  ( selector ( "testPrankCreate()" ) => 3934929665 )


    rule  ( selector ( "testPrankCreateAddress()" ) => 2313878016 )


    rule  ( selector ( "test_prank_expectRevert()" ) => 215353736 )


    rule  ( selector ( "test_prank_zeroAddress_true()" ) => 3793950116 )


    rule  ( selector ( "test_startPrankWithOrigin_true()" ) => 1559633499 )


    rule  ( selector ( "test_startPrank_true()" ) => 243527947 )


    rule  ( selector ( "test_startPrank_zeroAddress_true()" ) => 858618957 )


    rule  ( selector ( "test_stopPrank_notExistent()" ) => 279002555 )


endmodule

module S2KsrcZModPrank-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModPrankContract

    syntax S2KsrcZModPrankContract ::= "S2KsrcZModPrank" [symbol(), klabel(contract_src%Prank)]

    rule  ( #binRuntime ( S2KsrcZModPrank ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModPrank ) => #parseByteStack ( "0x60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModPrankField

    syntax S2KsrcZModPrankField ::= "count" [symbol(), klabel(field_src%Prank_count)]

    rule  ( #loc ( S2KsrcZModPrank . count ) => 0 )


    syntax Bytes ::= S2KsrcZModPrankContract "." S2KsrcZModPrankMethod [function(), symbol(), klabel(method_src%Prank)]

    syntax S2KsrcZModPrankMethod ::= "S2Kadd" "(" Int ":" "uint256" ")" [symbol(), klabel(method_src%Prank_S2Kadd_uint256)]

    syntax S2KsrcZModPrankMethod ::= "S2Kcount" "(" ")" [symbol(), klabel(method_src%Prank_S2Kcount_)]

    syntax S2KsrcZModPrankMethod ::= "S2KmsgSender" "(" ")" [symbol(), klabel(method_src%Prank_S2KmsgSender_)]

    syntax S2KsrcZModPrankMethod ::= "S2Kowner" "(" ")" [symbol(), klabel(method_src%Prank_S2Kowner_)]

    syntax S2KsrcZModPrankMethod ::= "S2Ksubtract" "(" Int ":" "uint256" ")" [symbol(), klabel(method_src%Prank_S2Ksubtract_uint256)]

    syntax S2KsrcZModPrankMethod ::= "S2KtxOrigin" "(" ")" [symbol(), klabel(method_src%Prank_S2KtxOrigin_)]

    rule  ( S2KsrcZModPrank . S2Kadd ( V0_value : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )


    rule  ( S2KsrcZModPrank . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )


    rule  ( S2KsrcZModPrank . S2KmsgSender ( ) => #abiCallData ( "msgSender" , .TypedArgs ) )


    rule  ( S2KsrcZModPrank . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )


    rule  ( S2KsrcZModPrank . S2Ksubtract ( V0_value : uint256 ) => #abiCallData ( "subtract" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )


    rule  ( S2KsrcZModPrank . S2KtxOrigin ( ) => #abiCallData ( "txOrigin" , .TypedArgs ) )


    rule  ( selector ( "add(uint256)" ) => 268690130 )


    rule  ( selector ( "count()" ) => 107354813 )


    rule  ( selector ( "msgSender()" ) => 3610759367 )


    rule  ( selector ( "owner()" ) => 2376452955 )


    rule  ( selector ( "subtract(uint256)" ) => 499146519 )


    rule  ( selector ( "txOrigin()" ) => 4184299473 )


endmodule

module S2KtestZModPrankTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModPrankTestContract

    syntax S2KtestZModPrankTestContract ::= "S2KtestZModPrankTest" [symbol(), klabel(contract_test%PrankTest)]

    rule  ( #binRuntime ( S2KtestZModPrankTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModPrankTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModPrankTestField

    syntax S2KtestZModPrankTestField ::= "stdstore" [symbol(), klabel(field_test%PrankTest_stdstore)]

    syntax S2KtestZModPrankTestField ::= "IS_TEST" [symbol(), klabel(field_test%PrankTest_IS_TEST)]

    syntax S2KtestZModPrankTestField ::= "_failed" [symbol(), klabel(field_test%PrankTest__failed)]

    syntax S2KtestZModPrankTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%PrankTest_stdChainsInitialized)]

    syntax S2KtestZModPrankTestField ::= "chains" [symbol(), klabel(field_test%PrankTest_chains)]

    syntax S2KtestZModPrankTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%PrankTest_defaultRpcUrls)]

    syntax S2KtestZModPrankTestField ::= "idToAlias" [symbol(), klabel(field_test%PrankTest_idToAlias)]

    syntax S2KtestZModPrankTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%PrankTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModPrankTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%PrankTest_gasMeteringOff)]

    syntax S2KtestZModPrankTestField ::= "_excludedContracts" [symbol(), klabel(field_test%PrankTest__excludedContracts)]

    syntax S2KtestZModPrankTestField ::= "_excludedSenders" [symbol(), klabel(field_test%PrankTest__excludedSenders)]

    syntax S2KtestZModPrankTestField ::= "_targetedContracts" [symbol(), klabel(field_test%PrankTest__targetedContracts)]

    syntax S2KtestZModPrankTestField ::= "_targetedSenders" [symbol(), klabel(field_test%PrankTest__targetedSenders)]

    syntax S2KtestZModPrankTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%PrankTest__excludedArtifacts)]

    syntax S2KtestZModPrankTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%PrankTest__targetedArtifacts)]

    syntax S2KtestZModPrankTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%PrankTest__targetedArtifactSelectors)]

    syntax S2KtestZModPrankTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%PrankTest__targetedSelectors)]

    syntax S2KtestZModPrankTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%PrankTest__targetedInterfaces)]

    syntax S2KtestZModPrankTestField ::= "prankContract" [symbol(), klabel(field_test%PrankTest_prankContract)]

    rule  ( #loc ( S2KtestZModPrankTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModPrankTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModPrankTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModPrankTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModPrankTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModPrankTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModPrankTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModPrankTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModPrankTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModPrankTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModPrankTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModPrankTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModPrankTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModPrankTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModPrankTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModPrankTest . prankContract ) => 28 )


    syntax Bytes ::= S2KtestZModPrankTestContract "." S2KtestZModPrankTestMethod [function(), symbol(), klabel(method_test%PrankTest)]

    syntax S2KtestZModPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KISZUndTEST_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KexcludeContracts_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KexcludeSenders_)]

    syntax S2KtestZModPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%PrankTest_S2Kfailed_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KsetUp_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KtargetArtifacts_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KtargetContracts_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KtargetInterfaces_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KtargetSelectors_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%PrankTest_S2KtargetSenders_)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtestAddAsOwner" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%PrankTest_S2KtestAddAsOwner_uint256)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtestAddStartPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%PrankTest_S2KtestAddStartPrank_uint256)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtestFailAddPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%PrankTest_S2KtestFailAddPrank_uint256)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtestSubtractAsTxOrigin" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%PrankTest_S2KtestSubtractAsTxOrigin_uint256_uint256)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtestSubtractFail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%PrankTest_S2KtestSubtractFail_uint256)]

    syntax S2KtestZModPrankTestMethod ::= "S2KtestSubtractStartPrank" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%PrankTest_S2KtestSubtractStartPrank_uint256_uint256)]

    rule  ( S2KtestZModPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTest . S2KtestAddAsOwner ( V0_x : uint256 ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModPrankTest . S2KtestAddStartPrank ( V0_x : uint256 ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModPrankTest . S2KtestFailAddPrank ( V0_x : uint256 ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModPrankTest . S2KtestSubtractAsTxOrigin ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))


    rule  ( S2KtestZModPrankTest . S2KtestSubtractFail ( V0_x : uint256 ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModPrankTest . S2KtestSubtractStartPrank ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testAddAsOwner(uint256)" ) => 1600382513 )


    rule  ( selector ( "testAddStartPrank(uint256)" ) => 1333759955 )


    rule  ( selector ( "testFailAddPrank(uint256)" ) => 948023622 )


    rule  ( selector ( "testSubtractAsTxOrigin(uint256,uint256)" ) => 3798952319 )


    rule  ( selector ( "testSubtractFail(uint256)" ) => 1433390937 )


    rule  ( selector ( "testSubtractStartPrank(uint256,uint256)" ) => 262874110 )


endmodule

module S2KtestZModPrankTestMsgSender-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModPrankTestMsgSenderContract

    syntax S2KtestZModPrankTestMsgSenderContract ::= "S2KtestZModPrankTestMsgSender" [symbol(), klabel(contract_test%PrankTestMsgSender)]

    rule  ( #binRuntime ( S2KtestZModPrankTestMsgSender ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063b5508aa911610066578063b5508aa9146101a1578063ba414fa6146101a9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b8063916a17c614610166578063a3b1b1661461016e578063a48fd9171461019957600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b610101610286565b60405161010e9190610a76565b60405180910390f35b61011f6102e8565b60405161010e9190610aef565b61010161042a565b61010161048a565b6101446104ea565b60405161010e9190610bca565b6101596105d0565b60405161010e9190610c7d565b6101446106a0565b601c54610181906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b6100f7610786565b61015961080c565b6101b16108dc565b604051901515815260200161010e565b610101610a09565b6007546101b19060ff1681565b6040516101e290610a69565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b039290921691909117905560405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c0575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561040a57838290600052602060002001805461037d90610cea565b80601f01602080910402602001604051908101604052809291908181526020018280546103a990610cea565b80156103f65780601f106103cb576101008083540402835291602001916103f6565b820191906000526020600020905b8154815290600101906020018083116103d957829003601f168201915b50505050508152602001906001019061035e565b50505050815250508152602001906001019061030c565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105b857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161057a5790505b5050505050815250508152602001906001019061050e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461061390610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461063f90610cea565b801561068c5780601f106106615761010080835404028352916020019161068c565b820191906000526020600020905b81548152906001019060200180831161066f57829003601f168201915b5050505050815260200190600101906105f4565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561076e57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107305790505b505050505081525050815260200190600101906106c4565b601c546040805163d737d0c760e01b815290516000926001600160a01b03169163d737d0c79160048083019260209291908290030181865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190610d24565b6001600160a01b03161461080a5761080a610d54565b565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461084f90610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90610cea565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b505050505081526020019060010190610830565b600754600090610100900460ff16156108fe5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a045760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161098c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d6a565b60408051601f19818403018152908290526109a691610d9b565b6000604051808303816000865af19150503d80600081146109e3576040519150601f19603f3d011682016040523d82523d6000602084013e6109e8565b606091505b5091505080806020019051810190610a009190610db7565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b61026d80610dda83390190565b6020808252825182820181905260009190848201906040850190845b81811015610ab75783516001600160a01b031683529284019291840191600101610a92565b50909695505050505050565b60005b83811015610ade578181015183820152602001610ac6565b838111156102805750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ba657898403605f1901835284518051808652610b87818e88018f8501610ac3565b958c0195601f01601f1916949094018b019350918a0191600101610b60565b509197505050938601935090850190600101610b16565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c6e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c595783516001600160e01b0319168252928b019260019290920191908b0190610c2f565b50978a01979550505091870191600101610bf2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57878503603f1901845281518051808752610ccb818989018a8501610ac3565b601f01601f191695909501860194509285019290850190600101610ca4565b600181811c90821680610cfe57607f821691505b602082108103610d1e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d3657600080fd5b81516001600160a01b0381168114610d4d57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d8d816004850160208701610ac3565b919091016004019392505050565b60008251610dad818460208701610ac3565b9190910192915050565b600060208284031215610dc957600080fd5b81518015158114610d4d57600080fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212207763fedf8b03c3b7ad610aa1fadb601aa638b984c13eca493181707ee68f027364736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModPrankTestMsgSender ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061107c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063b5508aa911610066578063b5508aa9146101a1578063ba414fa6146101a9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b8063916a17c614610166578063a3b1b1661461016e578063a48fd9171461019957600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b610101610286565b60405161010e9190610a76565b60405180910390f35b61011f6102e8565b60405161010e9190610aef565b61010161042a565b61010161048a565b6101446104ea565b60405161010e9190610bca565b6101596105d0565b60405161010e9190610c7d565b6101446106a0565b601c54610181906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b6100f7610786565b61015961080c565b6101b16108dc565b604051901515815260200161010e565b610101610a09565b6007546101b19060ff1681565b6040516101e290610a69565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b039290921691909117905560405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c0575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561040a57838290600052602060002001805461037d90610cea565b80601f01602080910402602001604051908101604052809291908181526020018280546103a990610cea565b80156103f65780601f106103cb576101008083540402835291602001916103f6565b820191906000526020600020905b8154815290600101906020018083116103d957829003601f168201915b50505050508152602001906001019061035e565b50505050815250508152602001906001019061030c565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105b857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161057a5790505b5050505050815250508152602001906001019061050e565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461061390610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461063f90610cea565b801561068c5780601f106106615761010080835404028352916020019161068c565b820191906000526020600020905b81548152906001019060200180831161066f57829003601f168201915b5050505050815260200190600101906105f4565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561076e57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107305790505b505050505081525050815260200190600101906106c4565b601c546040805163d737d0c760e01b815290516000926001600160a01b03169163d737d0c79160048083019260209291908290030181865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190610d24565b6001600160a01b03161461080a5761080a610d54565b565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461084f90610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90610cea565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b505050505081526020019060010190610830565b600754600090610100900460ff16156108fe5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a045760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161098c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d6a565b60408051601f19818403018152908290526109a691610d9b565b6000604051808303816000865af19150503d80600081146109e3576040519150601f19603f3d011682016040523d82523d6000602084013e6109e8565b606091505b5091505080806020019051810190610a009190610db7565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b61026d80610dda83390190565b6020808252825182820181905260009190848201906040850190845b81811015610ab75783516001600160a01b031683529284019291840191600101610a92565b50909695505050505050565b60005b83811015610ade578181015183820152602001610ac6565b838111156102805750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ba657898403605f1901835284518051808652610b87818e88018f8501610ac3565b958c0195601f01601f1916949094018b019350918a0191600101610b60565b509197505050938601935090850190600101610b16565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c6e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c595783516001600160e01b0319168252928b019260019290920191908b0190610c2f565b50978a01979550505091870191600101610bf2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57878503603f1901845281518051808752610ccb818989018a8501610ac3565b601f01601f191695909501860194509285019290850190600101610ca4565b600181811c90821680610cfe57607f821691505b602082108103610d1e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d3657600080fd5b81516001600160a01b0381168114610d4d57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d8d816004850160208701610ac3565b919091016004019392505050565b60008251610dad818460208701610ac3565b9190910192915050565b600060208284031215610dc957600080fd5b81518015158114610d4d57600080fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212207763fedf8b03c3b7ad610aa1fadb601aa638b984c13eca493181707ee68f027364736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModPrankTestMsgSenderField

    syntax S2KtestZModPrankTestMsgSenderField ::= "stdstore" [symbol(), klabel(field_test%PrankTestMsgSender_stdstore)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "IS_TEST" [symbol(), klabel(field_test%PrankTestMsgSender_IS_TEST)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_failed" [symbol(), klabel(field_test%PrankTestMsgSender__failed)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "stdChainsInitialized" [symbol(), klabel(field_test%PrankTestMsgSender_stdChainsInitialized)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "chains" [symbol(), klabel(field_test%PrankTestMsgSender_chains)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "defaultRpcUrls" [symbol(), klabel(field_test%PrankTestMsgSender_defaultRpcUrls)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "idToAlias" [symbol(), klabel(field_test%PrankTestMsgSender_idToAlias)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%PrankTestMsgSender_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "gasMeteringOff" [symbol(), klabel(field_test%PrankTestMsgSender_gasMeteringOff)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_excludedContracts" [symbol(), klabel(field_test%PrankTestMsgSender__excludedContracts)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_excludedSenders" [symbol(), klabel(field_test%PrankTestMsgSender__excludedSenders)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_targetedContracts" [symbol(), klabel(field_test%PrankTestMsgSender__targetedContracts)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_targetedSenders" [symbol(), klabel(field_test%PrankTestMsgSender__targetedSenders)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_excludedArtifacts" [symbol(), klabel(field_test%PrankTestMsgSender__excludedArtifacts)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_targetedArtifacts" [symbol(), klabel(field_test%PrankTestMsgSender__targetedArtifacts)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%PrankTestMsgSender__targetedArtifactSelectors)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_targetedSelectors" [symbol(), klabel(field_test%PrankTestMsgSender__targetedSelectors)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "_targetedInterfaces" [symbol(), klabel(field_test%PrankTestMsgSender__targetedInterfaces)]

    syntax S2KtestZModPrankTestMsgSenderField ::= "prankcontract" [symbol(), klabel(field_test%PrankTestMsgSender_prankcontract)]

    rule  ( #loc ( S2KtestZModPrankTestMsgSender . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . chains ) => 8 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModPrankTestMsgSender . prankcontract ) => 28 )


    syntax Bytes ::= S2KtestZModPrankTestMsgSenderContract "." S2KtestZModPrankTestMsgSenderMethod [function(), symbol(), klabel(method_test%PrankTestMsgSender)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KISZUndTEST_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KexcludeArtifacts_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KexcludeContracts_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KexcludeSenders_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2Kfailed_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2Kprankcontract" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2Kprankcontract_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KsetUp_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtargetArtifacts_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtargetContracts_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtargetInterfaces_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtargetSelectors_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtargetSenders_)]

    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtestZUndmsgsenderZUndsetup" "(" ")" [symbol(), klabel(method_test%PrankTestMsgSender_S2KtestZUndmsgsenderZUndsetup_)]

    rule  ( S2KtestZModPrankTestMsgSender . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestMsgSender . S2KtestZUndmsgsenderZUndsetup ( ) => #abiCallData ( "test_msgsender_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "prankcontract()" ) => 2746331494 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_msgsender_setup()" ) => 2760890647 )


endmodule

module S2KtestZModPrankTestOrigin-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModPrankTestOriginContract

    syntax S2KtestZModPrankTestOriginContract ::= "S2KtestZModPrankTestOrigin" [symbol(), klabel(contract_test%PrankTestOrigin)]

    rule  ( #binRuntime ( S2KtestZModPrankTestOrigin ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa6146101a1578063cdd25add146101b9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b8063916a17c614610166578063a3b1b1661461016e578063b5508aa91461019957600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b61010161028d565b60405161010e9190610a7d565b60405180910390f35b61011f6102ef565b60405161010e9190610af6565b610101610431565b610101610491565b6101446104f1565b60405161010e9190610bd1565b6101596105d7565b60405161010e9190610c84565b6101446106a7565b601c54610181906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61015961078d565b6101a961085d565b604051901515815260200161010e565b6100f761098a565b610101610a10565b6007546101a99060ff1681565b6040516101e290610a70565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169190911790556040516323f2866760e11b81526000600482018190526024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906347e50cce90604401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561041157838290600052602060002001805461038490610cf1565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090610cf1565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b505050505081526020019060010190610365565b505050508152505081526020019060010190610313565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105bf57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105815790505b50505050508152505081526020019060010190610515565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461061a90610cf1565b80601f016020809104026020016040519081016040528092919081815260200182805461064690610cf1565b80156106935780601f1061066857610100808354040283529160200191610693565b820191906000526020600020905b81548152906001019060200180831161067657829003601f168201915b5050505050815260200190600101906105fb565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561077557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107375790505b505050505081525050815260200190600101906106cb565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104285783829060005260206000200180546107d090610cf1565b80601f01602080910402602001604051908101604052809291908181526020018280546107fc90610cf1565b80156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b5050505050815260200190600101906107b1565b600754600090610100900460ff161561087f5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109855760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161090d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d2b565b60408051601f198184030181529082905261092791610d5c565b6000604051808303816000865af19150503d8060008114610964576040519150601f19603f3d011682016040523d82523d6000602084013e610969565b606091505b50915050808060200190518101906109819190610d78565b9150505b919050565b601c546040805163f96757d160e01b815290516000926001600160a01b03169163f96757d19160048083019260209291908290030181865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190610da1565b6001600160a01b031614610a0e57610a0e610dca565b565b606060138054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b61026d80610de183390190565b6020808252825182820181905260009190848201906040850190845b81811015610abe5783516001600160a01b031683529284019291840191600101610a99565b50909695505050505050565b60005b83811015610ae5578181015183820152602001610acd565b838111156102875750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610bad57898403605f1901835284518051808652610b8e818e88018f8501610aca565b958c0195601f01601f1916949094018b019350918a0191600101610b67565b509197505050938601935090850190600101610b1d565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c7557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c605783516001600160e01b0319168252928b019260019290920191908b0190610c36565b50978a01979550505091870191600101610bf9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc457878503603f1901845281518051808752610cd2818989018a8501610aca565b601f01601f191695909501860194509285019290850190600101610cab565b600181811c90821680610d0557607f821691505b602082108103610d2557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d4e816004850160208701610aca565b919091016004019392505050565b60008251610d6e818460208701610aca565b9190910192915050565b600060208284031215610d8a57600080fd5b81518015158114610d9a57600080fd5b9392505050565b600060208284031215610db357600080fd5b81516001600160a01b0381168114610d9a57600080fd5b634e487b7160e01b600052600160045260246000fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212209a252c1793a5358ffcf7b21b65ea1b49513b8a9a067105bae353cc238489054764736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModPrankTestOrigin ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506110838061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa6146101a1578063cdd25add146101b9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b8063916a17c614610166578063a3b1b1661461016e578063b5508aa91461019957600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b61010161028d565b60405161010e9190610a7d565b60405180910390f35b61011f6102ef565b60405161010e9190610af6565b610101610431565b610101610491565b6101446104f1565b60405161010e9190610bd1565b6101596105d7565b60405161010e9190610c84565b6101446106a7565b601c54610181906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61015961078d565b6101a961085d565b604051901515815260200161010e565b6100f761098a565b610101610a10565b6007546101a99060ff1681565b6040516101e290610a70565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169190911790556040516323f2866760e11b81526000600482018190526024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906347e50cce90604401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561041157838290600052602060002001805461038490610cf1565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090610cf1565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b505050505081526020019060010190610365565b505050508152505081526020019060010190610313565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105bf57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105815790505b50505050508152505081526020019060010190610515565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461061a90610cf1565b80601f016020809104026020016040519081016040528092919081815260200182805461064690610cf1565b80156106935780601f1061066857610100808354040283529160200191610693565b820191906000526020600020905b81548152906001019060200180831161067657829003601f168201915b5050505050815260200190600101906105fb565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561077557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107375790505b505050505081525050815260200190600101906106cb565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104285783829060005260206000200180546107d090610cf1565b80601f01602080910402602001604051908101604052809291908181526020018280546107fc90610cf1565b80156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b5050505050815260200190600101906107b1565b600754600090610100900460ff161561087f5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109855760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161090d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d2b565b60408051601f198184030181529082905261092791610d5c565b6000604051808303816000865af19150503d8060008114610964576040519150601f19603f3d011682016040523d82523d6000602084013e610969565b606091505b50915050808060200190518101906109819190610d78565b9150505b919050565b601c546040805163f96757d160e01b815290516000926001600160a01b03169163f96757d19160048083019260209291908290030181865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190610da1565b6001600160a01b031614610a0e57610a0e610dca565b565b606060138054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b61026d80610de183390190565b6020808252825182820181905260009190848201906040850190845b81811015610abe5783516001600160a01b031683529284019291840191600101610a99565b50909695505050505050565b60005b83811015610ae5578181015183820152602001610acd565b838111156102875750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610bad57898403605f1901835284518051808652610b8e818e88018f8501610aca565b958c0195601f01601f1916949094018b019350918a0191600101610b67565b509197505050938601935090850190600101610b1d565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c7557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c605783516001600160e01b0319168252928b019260019290920191908b0190610c36565b50978a01979550505091870191600101610bf9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc457878503603f1901845281518051808752610cd2818989018a8501610aca565b601f01601f191695909501860194509285019290850190600101610cab565b600181811c90821680610d0557607f821691505b602082108103610d2557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610d4e816004850160208701610aca565b919091016004019392505050565b60008251610d6e818460208701610aca565b9190910192915050565b600060208284031215610d8a57600080fd5b81518015158114610d9a57600080fd5b9392505050565b600060208284031215610db357600080fd5b81516001600160a01b0381168114610d9a57600080fd5b634e487b7160e01b600052600160045260246000fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212209a252c1793a5358ffcf7b21b65ea1b49513b8a9a067105bae353cc238489054764736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModPrankTestOriginField

    syntax S2KtestZModPrankTestOriginField ::= "stdstore" [symbol(), klabel(field_test%PrankTestOrigin_stdstore)]

    syntax S2KtestZModPrankTestOriginField ::= "IS_TEST" [symbol(), klabel(field_test%PrankTestOrigin_IS_TEST)]

    syntax S2KtestZModPrankTestOriginField ::= "_failed" [symbol(), klabel(field_test%PrankTestOrigin__failed)]

    syntax S2KtestZModPrankTestOriginField ::= "stdChainsInitialized" [symbol(), klabel(field_test%PrankTestOrigin_stdChainsInitialized)]

    syntax S2KtestZModPrankTestOriginField ::= "chains" [symbol(), klabel(field_test%PrankTestOrigin_chains)]

    syntax S2KtestZModPrankTestOriginField ::= "defaultRpcUrls" [symbol(), klabel(field_test%PrankTestOrigin_defaultRpcUrls)]

    syntax S2KtestZModPrankTestOriginField ::= "idToAlias" [symbol(), klabel(field_test%PrankTestOrigin_idToAlias)]

    syntax S2KtestZModPrankTestOriginField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%PrankTestOrigin_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModPrankTestOriginField ::= "gasMeteringOff" [symbol(), klabel(field_test%PrankTestOrigin_gasMeteringOff)]

    syntax S2KtestZModPrankTestOriginField ::= "_excludedContracts" [symbol(), klabel(field_test%PrankTestOrigin__excludedContracts)]

    syntax S2KtestZModPrankTestOriginField ::= "_excludedSenders" [symbol(), klabel(field_test%PrankTestOrigin__excludedSenders)]

    syntax S2KtestZModPrankTestOriginField ::= "_targetedContracts" [symbol(), klabel(field_test%PrankTestOrigin__targetedContracts)]

    syntax S2KtestZModPrankTestOriginField ::= "_targetedSenders" [symbol(), klabel(field_test%PrankTestOrigin__targetedSenders)]

    syntax S2KtestZModPrankTestOriginField ::= "_excludedArtifacts" [symbol(), klabel(field_test%PrankTestOrigin__excludedArtifacts)]

    syntax S2KtestZModPrankTestOriginField ::= "_targetedArtifacts" [symbol(), klabel(field_test%PrankTestOrigin__targetedArtifacts)]

    syntax S2KtestZModPrankTestOriginField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%PrankTestOrigin__targetedArtifactSelectors)]

    syntax S2KtestZModPrankTestOriginField ::= "_targetedSelectors" [symbol(), klabel(field_test%PrankTestOrigin__targetedSelectors)]

    syntax S2KtestZModPrankTestOriginField ::= "_targetedInterfaces" [symbol(), klabel(field_test%PrankTestOrigin__targetedInterfaces)]

    syntax S2KtestZModPrankTestOriginField ::= "prankcontract" [symbol(), klabel(field_test%PrankTestOrigin_prankcontract)]

    rule  ( #loc ( S2KtestZModPrankTestOrigin . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . chains ) => 8 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModPrankTestOrigin . prankcontract ) => 28 )


    syntax Bytes ::= S2KtestZModPrankTestOriginContract "." S2KtestZModPrankTestOriginMethod [function(), symbol(), klabel(method_test%PrankTestOrigin)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KISZUndTEST_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KexcludeArtifacts_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KexcludeContracts_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KexcludeSenders_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2Kfailed_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2Kprankcontract" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2Kprankcontract_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KsetUp_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtargetArtifacts_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtargetContracts_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtargetInterfaces_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtargetSelectors_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtargetSenders_)]

    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtestZUndoriginZUndsetup" "(" ")" [symbol(), klabel(method_test%PrankTestOrigin_S2KtestZUndoriginZUndsetup_)]

    rule  ( S2KtestZModPrankTestOrigin . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPrankTestOrigin . S2KtestZUndoriginZUndsetup ( ) => #abiCallData ( "test_origin_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "prankcontract()" ) => 2746331494 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_origin_setup()" ) => 3453115101 )


endmodule

module S2KtestZModStartPrankTestMsgSender-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModStartPrankTestMsgSenderContract

    syntax S2KtestZModStartPrankTestMsgSenderContract ::= "S2KtestZModStartPrankTestMsgSender" [symbol(), klabel(contract_test%StartPrankTestMsgSender)]

    rule  ( #binRuntime ( S2KtestZModStartPrankTestMsgSender ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063b5508aa911610066578063b5508aa9146101a1578063ba414fa6146101a9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b806385226c8114610159578063916a17c61461016e578063a3b1b1661461017657600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806370acffd51461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b610101610286565b60405161010e9190610a76565b60405180910390f35b61011f6102e8565b60405161010e9190610aef565b61010161042a565b61010161048a565b6101446104ea565b60405161010e9190610bca565b6100f76105d0565b610161610656565b60405161010e9190610c7d565b610144610726565b601c54610189906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61016161080c565b6101b16108dc565b604051901515815260200161010e565b610101610a09565b6007546101b19060ff1681565b6040516101e290610a69565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169190911790556040516303223eab60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c0575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561040a57838290600052602060002001805461037d90610cea565b80601f01602080910402602001604051908101604052809291908181526020018280546103a990610cea565b80156103f65780601f106103cb576101008083540402835291602001916103f6565b820191906000526020600020905b8154815290600101906020018083116103d957829003601f168201915b50505050508152602001906001019061035e565b50505050815250508152602001906001019061030c565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105b857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161057a5790505b5050505050815250508152602001906001019061050e565b601c546040805163d737d0c760e01b815290516000926001600160a01b03169163d737d0c79160048083019260209291908290030181865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190610d24565b6001600160a01b03161461065457610654610d54565b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461069990610cea565b80601f01602080910402602001604051908101604052809291908181526020018280546106c590610cea565b80156107125780601f106106e757610100808354040283529160200191610712565b820191906000526020600020905b8154815290600101906020018083116106f557829003601f168201915b50505050508152602001906001019061067a565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156107f457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107b65790505b5050505050815250508152602001906001019061074a565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461084f90610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90610cea565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b505050505081526020019060010190610830565b600754600090610100900460ff16156108fe5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a045760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161098c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d6a565b60408051601f19818403018152908290526109a691610d9b565b6000604051808303816000865af19150503d80600081146109e3576040519150601f19603f3d011682016040523d82523d6000602084013e6109e8565b606091505b5091505080806020019051810190610a009190610db7565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b61026d80610dda83390190565b6020808252825182820181905260009190848201906040850190845b81811015610ab75783516001600160a01b031683529284019291840191600101610a92565b50909695505050505050565b60005b83811015610ade578181015183820152602001610ac6565b838111156102805750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ba657898403605f1901835284518051808652610b87818e88018f8501610ac3565b958c0195601f01601f1916949094018b019350918a0191600101610b60565b509197505050938601935090850190600101610b16565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c6e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c595783516001600160e01b0319168252928b019260019290920191908b0190610c2f565b50978a01979550505091870191600101610bf2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57878503603f1901845281518051808752610ccb818989018a8501610ac3565b601f01601f191695909501860194509285019290850190600101610ca4565b600181811c90821680610cfe57607f821691505b602082108103610d1e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d3657600080fd5b81516001600160a01b0381168114610d4d57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d8d816004850160208701610ac3565b919091016004019392505050565b60008251610dad818460208701610ac3565b9190910192915050565b600060208284031215610dc957600080fd5b81518015158114610d4d57600080fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212203a7fa2802df1262d91d00e19c83008d00793c4e486a3d2066a164af67f4d5d3f64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModStartPrankTestMsgSender ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061107c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063b5508aa911610066578063b5508aa9146101a1578063ba414fa6146101a9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b806385226c8114610159578063916a17c61461016e578063a3b1b1661461017657600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806370acffd51461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b610101610286565b60405161010e9190610a76565b60405180910390f35b61011f6102e8565b60405161010e9190610aef565b61010161042a565b61010161048a565b6101446104ea565b60405161010e9190610bca565b6100f76105d0565b610161610656565b60405161010e9190610c7d565b610144610726565b601c54610189906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61016161080c565b6101b16108dc565b604051901515815260200161010e565b610101610a09565b6007546101b19060ff1681565b6040516101e290610a69565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169190911790556040516303223eab60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d5690602401600060405180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c0575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042157600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561040a57838290600052602060002001805461037d90610cea565b80601f01602080910402602001604051908101604052809291908181526020018280546103a990610cea565b80156103f65780601f106103cb576101008083540402835291602001916103f6565b820191906000526020600020905b8154815290600101906020018083116103d957829003601f168201915b50505050508152602001906001019061035e565b50505050815250508152602001906001019061030c565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105b857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161057a5790505b5050505050815250508152602001906001019061050e565b601c546040805163d737d0c760e01b815290516000926001600160a01b03169163d737d0c79160048083019260209291908290030181865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190610d24565b6001600160a01b03161461065457610654610d54565b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461069990610cea565b80601f01602080910402602001604051908101604052809291908181526020018280546106c590610cea565b80156107125780601f106106e757610100808354040283529160200191610712565b820191906000526020600020905b8154815290600101906020018083116106f557829003601f168201915b50505050508152602001906001019061067a565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104215760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156107f457602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107b65790505b5050505050815250508152602001906001019061074a565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042157838290600052602060002001805461084f90610cea565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90610cea565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b505050505081526020019060010190610830565b600754600090610100900460ff16156108fe5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a045760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161098c917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d6a565b60408051601f19818403018152908290526109a691610d9b565b6000604051808303816000865af19150503d80600081146109e3576040519150601f19603f3d011682016040523d82523d6000602084013e6109e8565b606091505b5091505080806020019051810190610a009190610db7565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102de576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c0575050505050905090565b61026d80610dda83390190565b6020808252825182820181905260009190848201906040850190845b81811015610ab75783516001600160a01b031683529284019291840191600101610a92565b50909695505050505050565b60005b83811015610ade578181015183820152602001610ac6565b838111156102805750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610ba657898403605f1901835284518051808652610b87818e88018f8501610ac3565b958c0195601f01601f1916949094018b019350918a0191600101610b60565b509197505050938601935090850190600101610b16565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c6e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c595783516001600160e01b0319168252928b019260019290920191908b0190610c2f565b50978a01979550505091870191600101610bf2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bbd57878503603f1901845281518051808752610ccb818989018a8501610ac3565b601f01601f191695909501860194509285019290850190600101610ca4565b600181811c90821680610cfe57607f821691505b602082108103610d1e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d3657600080fd5b81516001600160a01b0381168114610d4d57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d8d816004850160208701610ac3565b919091016004019392505050565b60008251610dad818460208701610ac3565b9190910192915050565b600060208284031215610dc957600080fd5b81518015158114610d4d57600080fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212203a7fa2802df1262d91d00e19c83008d00793c4e486a3d2066a164af67f4d5d3f64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModStartPrankTestMsgSenderField

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "stdstore" [symbol(), klabel(field_test%StartPrankTestMsgSender_stdstore)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "IS_TEST" [symbol(), klabel(field_test%StartPrankTestMsgSender_IS_TEST)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_failed" [symbol(), klabel(field_test%StartPrankTestMsgSender__failed)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "stdChainsInitialized" [symbol(), klabel(field_test%StartPrankTestMsgSender_stdChainsInitialized)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "chains" [symbol(), klabel(field_test%StartPrankTestMsgSender_chains)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "defaultRpcUrls" [symbol(), klabel(field_test%StartPrankTestMsgSender_defaultRpcUrls)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "idToAlias" [symbol(), klabel(field_test%StartPrankTestMsgSender_idToAlias)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%StartPrankTestMsgSender_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "gasMeteringOff" [symbol(), klabel(field_test%StartPrankTestMsgSender_gasMeteringOff)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_excludedContracts" [symbol(), klabel(field_test%StartPrankTestMsgSender__excludedContracts)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_excludedSenders" [symbol(), klabel(field_test%StartPrankTestMsgSender__excludedSenders)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_targetedContracts" [symbol(), klabel(field_test%StartPrankTestMsgSender__targetedContracts)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_targetedSenders" [symbol(), klabel(field_test%StartPrankTestMsgSender__targetedSenders)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_excludedArtifacts" [symbol(), klabel(field_test%StartPrankTestMsgSender__excludedArtifacts)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_targetedArtifacts" [symbol(), klabel(field_test%StartPrankTestMsgSender__targetedArtifacts)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%StartPrankTestMsgSender__targetedArtifactSelectors)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_targetedSelectors" [symbol(), klabel(field_test%StartPrankTestMsgSender__targetedSelectors)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "_targetedInterfaces" [symbol(), klabel(field_test%StartPrankTestMsgSender__targetedInterfaces)]

    syntax S2KtestZModStartPrankTestMsgSenderField ::= "prankcontract" [symbol(), klabel(field_test%StartPrankTestMsgSender_prankcontract)]

    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . chains ) => 8 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModStartPrankTestMsgSender . prankcontract ) => 28 )


    syntax Bytes ::= S2KtestZModStartPrankTestMsgSenderContract "." S2KtestZModStartPrankTestMsgSenderMethod [function(), symbol(), klabel(method_test%StartPrankTestMsgSender)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KISZUndTEST_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KexcludeArtifacts_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KexcludeContracts_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KexcludeSenders_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2Kfailed_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2Kprankcontract" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2Kprankcontract_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KsetUp_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtargetArtifacts_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtargetContracts_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtargetInterfaces_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtargetSelectors_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtargetSenders_)]

    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtestZUndstartprankZUndmsgsenderZUndsetup" "(" ")" [symbol(), klabel(method_test%StartPrankTestMsgSender_S2KtestZUndstartprankZUndmsgsenderZUndsetup_)]

    rule  ( S2KtestZModStartPrankTestMsgSender . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtestZUndstartprankZUndmsgsenderZUndsetup ( ) => #abiCallData ( "test_startprank_msgsender_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "prankcontract()" ) => 2746331494 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_startprank_msgsender_setup()" ) => 1890385877 )


endmodule

module S2KtestZModStartPrankTestOrigin-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModStartPrankTestOriginContract

    syntax S2KtestZModStartPrankTestOriginContract ::= "S2KtestZModStartPrankTestOrigin" [symbol(), klabel(contract_test%StartPrankTestOrigin)]

    rule  ( #binRuntime ( S2KtestZModStartPrankTestOrigin ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModStartPrankTestOrigin ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506110838061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063b5508aa911610066578063b5508aa9146101a1578063ba414fa6146101a9578063e20c9f71146101c1578063fa7626d4146101c957600080fd5b8063916a17c614610166578063a3b1b1661461016e578063a98cd4cd1461019957600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101d6565b005b61010161028d565b60405161010e9190610a7d565b60405180910390f35b61011f6102ef565b60405161010e9190610af6565b610101610431565b610101610491565b6101446104f1565b60405161010e9190610bd1565b6101596105d7565b60405161010e9190610c84565b6101446106a7565b601c54610181906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b6100f761078d565b610159610813565b6101b16108e3565b604051901515815260200161010e565b610101610a10565b6007546101b19060ff1681565b6040516101e290610a70565b604051809103906000f0801580156101fe573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169190911790556040516308b6ac0f60e31b81526000600482018190526024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906345b5607890604401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561041157838290600052602060002001805461038490610cf1565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090610cf1565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b505050505081526020019060010190610365565b505050508152505081526020019060010190610313565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105bf57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105815790505b50505050508152505081526020019060010190610515565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461061a90610cf1565b80601f016020809104026020016040519081016040528092919081815260200182805461064690610cf1565b80156106935780601f1061066857610100808354040283529160200191610693565b820191906000526020600020905b81548152906001019060200180831161067657829003601f168201915b5050505050815260200190600101906105fb565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561077557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107375790505b505050505081525050815260200190600101906106cb565b601c546040805163f96757d160e01b815290516000926001600160a01b03169163f96757d19160048083019260209291908290030181865afa1580156107d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fb9190610d2b565b6001600160a01b03161461081157610811610d5b565b565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461085690610cf1565b80601f016020809104026020016040519081016040528092919081815260200182805461088290610cf1565b80156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b505050505081526020019060010190610837565b600754600090610100900460ff16156109055750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a0b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610993917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d71565b60408051601f19818403018152908290526109ad91610da2565b6000604051808303816000865af19150503d80600081146109ea576040519150601f19603f3d011682016040523d82523d6000602084013e6109ef565b606091505b5091505080806020019051810190610a079190610dbe565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b61026d80610de183390190565b6020808252825182820181905260009190848201906040850190845b81811015610abe5783516001600160a01b031683529284019291840191600101610a99565b50909695505050505050565b60005b83811015610ae5578181015183820152602001610acd565b838111156102875750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc457603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610bad57898403605f1901835284518051808652610b8e818e88018f8501610aca565b958c0195601f01601f1916949094018b019350918a0191600101610b67565b509197505050938601935090850190600101610b1d565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610c7557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610c605783516001600160e01b0319168252928b019260019290920191908b0190610c36565b50978a01979550505091870191600101610bf9565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc457878503603f1901845281518051808752610cd2818989018a8501610aca565b601f01601f191695909501860194509285019290850190600101610cab565b600181811c90821680610d0557607f821691505b602082108103610d2557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d3d57600080fd5b81516001600160a01b0381168114610d5457600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610d94816004850160208701610aca565b919091016004019392505050565b60008251610db4818460208701610aca565b9190910192915050565b600060208284031215610dd057600080fd5b81518015158114610d5457600080fdfe60a060405234801561001057600080fd5b50336080526080516102376100366000396000818160b0015261010101526102376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306661abd146100675780631003e2d2146100835780631dc05f17146100985780638da5cb5b146100ab578063d737d0c7146100ea578063f96757d1146100f0575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b6100966100913660046101a3565b6100f6565b005b6100966100a63660046101a3565b610178565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b336100d2565b326100d2565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015f5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b8060008082825461017091906101d2565b909155505050565b321561018357600080fd5b80600054101561019257600080fd5b8060008082825461017091906101ea565b6000602082840312156101b557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156101e5576101e56101bc565b500190565b6000828210156101fc576101fc6101bc565b50039056fea26469706673582212209fec2a98ce783918a505ab8dd5902fd0124c28b9082bff3625e1ca56841a14c364736f6c634300080d0033a26469706673582212207361c72a220d083d0336a87fbcd66d28bfd889f0b0ebe35ae74258b534fd05d264736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModStartPrankTestOriginField

    syntax S2KtestZModStartPrankTestOriginField ::= "stdstore" [symbol(), klabel(field_test%StartPrankTestOrigin_stdstore)]

    syntax S2KtestZModStartPrankTestOriginField ::= "IS_TEST" [symbol(), klabel(field_test%StartPrankTestOrigin_IS_TEST)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_failed" [symbol(), klabel(field_test%StartPrankTestOrigin__failed)]

    syntax S2KtestZModStartPrankTestOriginField ::= "stdChainsInitialized" [symbol(), klabel(field_test%StartPrankTestOrigin_stdChainsInitialized)]

    syntax S2KtestZModStartPrankTestOriginField ::= "chains" [symbol(), klabel(field_test%StartPrankTestOrigin_chains)]

    syntax S2KtestZModStartPrankTestOriginField ::= "defaultRpcUrls" [symbol(), klabel(field_test%StartPrankTestOrigin_defaultRpcUrls)]

    syntax S2KtestZModStartPrankTestOriginField ::= "idToAlias" [symbol(), klabel(field_test%StartPrankTestOrigin_idToAlias)]

    syntax S2KtestZModStartPrankTestOriginField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%StartPrankTestOrigin_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModStartPrankTestOriginField ::= "gasMeteringOff" [symbol(), klabel(field_test%StartPrankTestOrigin_gasMeteringOff)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_excludedContracts" [symbol(), klabel(field_test%StartPrankTestOrigin__excludedContracts)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_excludedSenders" [symbol(), klabel(field_test%StartPrankTestOrigin__excludedSenders)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_targetedContracts" [symbol(), klabel(field_test%StartPrankTestOrigin__targetedContracts)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_targetedSenders" [symbol(), klabel(field_test%StartPrankTestOrigin__targetedSenders)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_excludedArtifacts" [symbol(), klabel(field_test%StartPrankTestOrigin__excludedArtifacts)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_targetedArtifacts" [symbol(), klabel(field_test%StartPrankTestOrigin__targetedArtifacts)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%StartPrankTestOrigin__targetedArtifactSelectors)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_targetedSelectors" [symbol(), klabel(field_test%StartPrankTestOrigin__targetedSelectors)]

    syntax S2KtestZModStartPrankTestOriginField ::= "_targetedInterfaces" [symbol(), klabel(field_test%StartPrankTestOrigin__targetedInterfaces)]

    syntax S2KtestZModStartPrankTestOriginField ::= "prankcontract" [symbol(), klabel(field_test%StartPrankTestOrigin_prankcontract)]

    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . chains ) => 8 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModStartPrankTestOrigin . prankcontract ) => 28 )


    syntax Bytes ::= S2KtestZModStartPrankTestOriginContract "." S2KtestZModStartPrankTestOriginMethod [function(), symbol(), klabel(method_test%StartPrankTestOrigin)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KISZUndTEST_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KexcludeArtifacts_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KexcludeContracts_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KexcludeSenders_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2Kfailed_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2Kprankcontract" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2Kprankcontract_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KsetUp_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtargetArtifacts_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtargetContracts_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtargetInterfaces_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtargetSelectors_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtargetSenders_)]

    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtestZUndstartprankZUndoriginZUndsetup" "(" ")" [symbol(), klabel(method_test%StartPrankTestOrigin_S2KtestZUndstartprankZUndoriginZUndsetup_)]

    rule  ( S2KtestZModStartPrankTestOrigin . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModStartPrankTestOrigin . S2KtestZUndstartprankZUndoriginZUndsetup ( ) => #abiCallData ( "test_startprank_origin_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "prankcontract()" ) => 2746331494 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_startprank_origin_setup()" ) => 2844579021 )


endmodule

module S2KtestZModPreconditionsTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModPreconditionsTestContract

    syntax S2KtestZModPreconditionsTestContract ::= "S2KtestZModPreconditionsTest" [symbol(), klabel(contract_test%PreconditionsTest)]

    rule  ( #binRuntime ( S2KtestZModPreconditionsTest ) => #parseByteStack ( "" ) )


    rule  ( #initBytecode ( S2KtestZModPreconditionsTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModPreconditionsTestField

    syntax S2KtestZModPreconditionsTestField ::= "stdstore" [symbol(), klabel(field_test%PreconditionsTest_stdstore)]

    syntax S2KtestZModPreconditionsTestField ::= "IS_TEST" [symbol(), klabel(field_test%PreconditionsTest_IS_TEST)]

    syntax S2KtestZModPreconditionsTestField ::= "_failed" [symbol(), klabel(field_test%PreconditionsTest__failed)]

    syntax S2KtestZModPreconditionsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%PreconditionsTest_stdChainsInitialized)]

    syntax S2KtestZModPreconditionsTestField ::= "chains" [symbol(), klabel(field_test%PreconditionsTest_chains)]

    syntax S2KtestZModPreconditionsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%PreconditionsTest_defaultRpcUrls)]

    syntax S2KtestZModPreconditionsTestField ::= "idToAlias" [symbol(), klabel(field_test%PreconditionsTest_idToAlias)]

    syntax S2KtestZModPreconditionsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%PreconditionsTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModPreconditionsTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%PreconditionsTest_gasMeteringOff)]

    syntax S2KtestZModPreconditionsTestField ::= "_excludedContracts" [symbol(), klabel(field_test%PreconditionsTest__excludedContracts)]

    syntax S2KtestZModPreconditionsTestField ::= "_excludedSenders" [symbol(), klabel(field_test%PreconditionsTest__excludedSenders)]

    syntax S2KtestZModPreconditionsTestField ::= "_targetedContracts" [symbol(), klabel(field_test%PreconditionsTest__targetedContracts)]

    syntax S2KtestZModPreconditionsTestField ::= "_targetedSenders" [symbol(), klabel(field_test%PreconditionsTest__targetedSenders)]

    syntax S2KtestZModPreconditionsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%PreconditionsTest__excludedArtifacts)]

    syntax S2KtestZModPreconditionsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%PreconditionsTest__targetedArtifacts)]

    syntax S2KtestZModPreconditionsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%PreconditionsTest__targetedArtifactSelectors)]

    syntax S2KtestZModPreconditionsTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%PreconditionsTest__targetedSelectors)]

    syntax S2KtestZModPreconditionsTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%PreconditionsTest__targetedInterfaces)]

    syntax S2KtestZModPreconditionsTestField ::= "n" [symbol(), klabel(field_test%PreconditionsTest_n)]

    rule  ( #loc ( S2KtestZModPreconditionsTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModPreconditionsTest . n ) => 28 )


    syntax Bytes ::= S2KtestZModPreconditionsTestContract "." S2KtestZModPreconditionsTestMethod [function(), symbol(), klabel(method_test%PreconditionsTest)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KISZUndTEST_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KexcludeContracts_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KexcludeSenders_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2Kfailed_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2Kkevm_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KsetUp_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtargetArtifacts_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtargetContracts_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtargetInterfaces_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtargetSelectors_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtargetSenders_)]

    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtestAssume" "(" ")" [symbol(), klabel(method_test%PreconditionsTest_S2KtestAssume_)]

    rule  ( S2KtestZModPreconditionsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModPreconditionsTest . S2KtestAssume ( ) => #abiCallData ( "testAssume" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testAssume()" ) => 3928496829 )


endmodule

module S2KtestZModRecordLogsTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModRecordLogsTestContract

    syntax S2KtestZModRecordLogsTestContract ::= "S2KtestZModRecordLogsTest" [symbol(), klabel(contract_test%RecordLogsTest)]

    rule  ( #binRuntime ( S2KtestZModRecordLogsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063d7f8995814610173578063e20c9f711461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e6610257565b6040516100f39190610e46565b60405180910390f35b6101046102b9565b6040516100f39190610ebf565b6100e66103fb565b6100e661045b565b6101296104bb565b6040516100f39190610f9a565b61013e6105a1565b6040516100f3919061104d565b610129610671565b61013e610757565b610163610827565b60405190151581526020016100f3565b6100dc610954565b6100e6610af9565b6007546101639060ff1681565b60405161019c90610e3a565b604051809103906000f0801580156101b8573d6000803e3d6000fd5b50601c60006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023d57600080fd5b505af1158015610251573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610291575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103f257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103db57838290600052602060002001805461034e906110ba565b80601f016020809104026020016040519081016040528092919081815260200182805461037a906110ba565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b50505050508152602001906001019061032f565b5050505081525050815260200190600101906102dd565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102af576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610291575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102af576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610291575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103f25760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561058957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161054b5790505b505050505081525050815260200190600101906104df565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103f25783829060005260206000200180546105e4906110ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610610906110ba565b801561065d5780601f106106325761010080835404028352916020019161065d565b820191906000526020600020905b81548152906001019060200180831161064057829003601f168201915b5050505050815260200190600101906105c5565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103f25760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561073f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107015790505b50505050508152505081526020019060010190610695565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103f257838290600052602060002001805461079a906110ba565b80601f01602080910402602001604051908101604052809291908181526020018280546107c6906110ba565b80156108135780601f106107e857610100808354040283529160200191610813565b820191906000526020600020905b8154815290600101906020018083116107f657829003601f168201915b50505050508152602001906001019061077b565b600754600090610100900460ff16156108495750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561094f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108d7917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016110f4565b60408051601f19818403018152908290526108f191611125565b6000604051808303816000865af19150503d806000811461092e576040519150601f19603f3d011682016040523d82523d6000602084013e610933565b606091505b509150508080602001905181019061094b9190611141565b9150505b919050565b601c60009054906101000a90046001600160a01b03166001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610a21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a499190810190611281565b9050610a5781516001610b59565b610ab981600081518110610a6d57610a6d6113f3565b602002602001015160000151600081518110610a8b57610a8b6113f3565b60200260200101517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610c4c565b610af681600081518110610acf57610acf6113f3565b602002602001015160200151806020019051810190610aee9190611409565b610539610b59565b50565b606060138054806020026020016040519081016040528092919081815260200182805480156102af576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610291575050505050905090565b808214610c48577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610bca9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610c019190611422565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610c38919061145a565b60405180910390a1610c48610d2e565b5050565b808214610c48577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610cc09060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9982604051610cf79190611422565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9981604051610c38919061145a565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e295760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610dc892916020016110f4565b60408051601f1981840301815290829052610de291611125565b6000604051808303816000865af19150503d8060008114610e1f576040519150601f19603f3d011682016040523d82523d6000602084013e610e24565b606091505b505050505b6007805461ff001916610100179055565b60c48061148583390190565b6020808252825182820181905260009190848201906040850190845b81811015610e875783516001600160a01b031683529284019291840191600101610e62565b50909695505050505050565b60005b83811015610eae578181015183820152602001610e96565b838111156102515750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f8d57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f7657898403605f1901835284518051808652610f57818e88018f8501610e93565b958c0195601f01601f1916949094018b019350918a0191600101610f30565b509197505050938601935090850190600101610ee6565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561103e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110295783516001600160e01b0319168252928b019260019290920191908b0190610fff565b50978a01979550505091870191600101610fc2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f8d57878503603f190184528151805180875261109b818989018a8501610e93565b601f01601f191695909501860194509285019290850190600101611074565b600181811c908216806110ce57607f821691505b6020821081036110ee57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090611117816004850160208701610e93565b919091016004019392505050565b60008251611137818460208701610e93565b9190910192915050565b60006020828403121561115357600080fd5b8151801515811461116357600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156111a3576111a361116a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156111d2576111d261116a565b604052919050565b600067ffffffffffffffff8211156111f4576111f461116a565b5060051b60200190565b600082601f83011261120f57600080fd5b815167ffffffffffffffff8111156112295761122961116a565b61123c601f8201601f19166020016111a9565b81815284602083860101111561125157600080fd5b611262826020830160208701610e93565b949350505050565b80516001600160a01b038116811461094f57600080fd5b6000602080838503121561129457600080fd5b825167ffffffffffffffff808211156112ac57600080fd5b818501915085601f8301126112c057600080fd5b81516112d36112ce826111da565b6111a9565b81815260059190911b830184019084810190888311156112f257600080fd5b8585015b838110156113e65780518581111561130d57600080fd5b86016060818c03601f1901121561132357600080fd5b61132b611180565b888201518781111561133c57600080fd5b8201603f81018d1361134d57600080fd5b8981015161135d6112ce826111da565b81815260059190911b8201604001908b8101908f83111561137d57600080fd5b6040840193505b8284101561139d5783518252928c0192908c0190611384565b84525050506040820151878111156113b457600080fd5b6113c28d8b838601016111fe565b8a830152506113d36060830161126a565b60408201528452509186019186016112f6565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561141b57600080fd5b5051919050565b60408152600061144c60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600061144c60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a26469706673582212205fe238b9de6479c2b1bae59e53619aed13898ae867e0d02a0dde37ade082a85e64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModRecordLogsTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061157e8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461015b578063d7f8995814610173578063e20c9f711461017b578063fa7626d41461018357600080fd5b806385226c8114610136578063916a17c61461014b578063b5508aa91461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806366d9a9a014610121575b600080fd5b6100dc610190565b005b6100e6610257565b6040516100f39190610e46565b60405180910390f35b6101046102b9565b6040516100f39190610ebf565b6100e66103fb565b6100e661045b565b6101296104bb565b6040516100f39190610f9a565b61013e6105a1565b6040516100f3919061104d565b610129610671565b61013e610757565b610163610827565b60405190151581526020016100f3565b6100dc610954565b6100e6610af9565b6007546101639060ff1681565b60405161019c90610e3a565b604051809103906000f0801580156101b8573d6000803e3d6000fd5b50601c60006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023d57600080fd5b505af1158015610251573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610291575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103f257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103db57838290600052602060002001805461034e906110ba565b80601f016020809104026020016040519081016040528092919081815260200182805461037a906110ba565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b50505050508152602001906001019061032f565b5050505081525050815260200190600101906102dd565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102af576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610291575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102af576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610291575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103f25760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561058957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161054b5790505b505050505081525050815260200190600101906104df565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103f25783829060005260206000200180546105e4906110ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610610906110ba565b801561065d5780601f106106325761010080835404028352916020019161065d565b820191906000526020600020905b81548152906001019060200180831161064057829003601f168201915b5050505050815260200190600101906105c5565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103f25760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561073f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107015790505b50505050508152505081526020019060010190610695565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103f257838290600052602060002001805461079a906110ba565b80601f01602080910402602001604051908101604052809291908181526020018280546107c6906110ba565b80156108135780601f106107e857610100808354040283529160200191610813565b820191906000526020600020905b8154815290600101906020018083116107f657829003601f168201915b50505050508152602001906001019061077b565b600754600090610100900460ff16156108495750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561094f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108d7917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016110f4565b60408051601f19818403018152908290526108f191611125565b6000604051808303816000865af19150503d806000811461092e576040519150601f19603f3d011682016040523d82523d6000602084013e610933565b606091505b509150508080602001905181019061094b9190611141565b9150505b919050565b601c60009054906101000a90046001600160a01b03166001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610a21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a499190810190611281565b9050610a5781516001610b59565b610ab981600081518110610a6d57610a6d6113f3565b602002602001015160000151600081518110610a8b57610a8b6113f3565b60200260200101517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610c4c565b610af681600081518110610acf57610acf6113f3565b602002602001015160200151806020019051810190610aee9190611409565b610539610b59565b50565b606060138054806020026020016040519081016040528092919081815260200182805480156102af576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610291575050505050905090565b808214610c48577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610bca9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610c019190611422565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610c38919061145a565b60405180910390a1610c48610d2e565b5050565b808214610c48577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610cc09060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9982604051610cf79190611422565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9981604051610c38919061145a565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e295760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610dc892916020016110f4565b60408051601f1981840301815290829052610de291611125565b6000604051808303816000865af19150503d8060008114610e1f576040519150601f19603f3d011682016040523d82523d6000602084013e610e24565b606091505b505050505b6007805461ff001916610100179055565b60c48061148583390190565b6020808252825182820181905260009190848201906040850190845b81811015610e875783516001600160a01b031683529284019291840191600101610e62565b50909695505050505050565b60005b83811015610eae578181015183820152602001610e96565b838111156102515750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f8d57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f7657898403605f1901835284518051808652610f57818e88018f8501610e93565b958c0195601f01601f1916949094018b019350918a0191600101610f30565b509197505050938601935090850190600101610ee6565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561103e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156110295783516001600160e01b0319168252928b019260019290920191908b0190610fff565b50978a01979550505091870191600101610fc2565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f8d57878503603f190184528151805180875261109b818989018a8501610e93565b601f01601f191695909501860194509285019290850190600101611074565b600181811c908216806110ce57607f821691505b6020821081036110ee57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090611117816004850160208701610e93565b919091016004019392505050565b60008251611137818460208701610e93565b9190910192915050565b60006020828403121561115357600080fd5b8151801515811461116357600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156111a3576111a361116a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156111d2576111d261116a565b604052919050565b600067ffffffffffffffff8211156111f4576111f461116a565b5060051b60200190565b600082601f83011261120f57600080fd5b815167ffffffffffffffff8111156112295761122961116a565b61123c601f8201601f19166020016111a9565b81815284602083860101111561125157600080fd5b611262826020830160208701610e93565b949350505050565b80516001600160a01b038116811461094f57600080fd5b6000602080838503121561129457600080fd5b825167ffffffffffffffff808211156112ac57600080fd5b818501915085601f8301126112c057600080fd5b81516112d36112ce826111da565b6111a9565b81815260059190911b830184019084810190888311156112f257600080fd5b8585015b838110156113e65780518581111561130d57600080fd5b86016060818c03601f1901121561132357600080fd5b61132b611180565b888201518781111561133c57600080fd5b8201603f81018d1361134d57600080fd5b8981015161135d6112ce826111da565b81815260059190911b8201604001908b8101908f83111561137d57600080fd5b6040840193505b8284101561139d5783518252928c0192908c0190611384565b84525050506040820151878111156113b457600080fd5b6113c28d8b838601016111fe565b8a830152506113d36060830161126a565b60408201528452509186019186016112f6565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561141b57600080fd5b5051919050565b60408152600061144c60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b60408152600061144c60408301600a8152690808080808149a59da1d60b21b60208201526040019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a26469706673582212205fe238b9de6479c2b1bae59e53619aed13898ae867e0d02a0dde37ade082a85e64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModRecordLogsTestField

    syntax S2KtestZModRecordLogsTestField ::= "stdstore" [symbol(), klabel(field_test%RecordLogsTest_stdstore)]

    syntax S2KtestZModRecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_test%RecordLogsTest_IS_TEST)]

    syntax S2KtestZModRecordLogsTestField ::= "_failed" [symbol(), klabel(field_test%RecordLogsTest__failed)]

    syntax S2KtestZModRecordLogsTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%RecordLogsTest_stdChainsInitialized)]

    syntax S2KtestZModRecordLogsTestField ::= "chains" [symbol(), klabel(field_test%RecordLogsTest_chains)]

    syntax S2KtestZModRecordLogsTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%RecordLogsTest_defaultRpcUrls)]

    syntax S2KtestZModRecordLogsTestField ::= "idToAlias" [symbol(), klabel(field_test%RecordLogsTest_idToAlias)]

    syntax S2KtestZModRecordLogsTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%RecordLogsTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModRecordLogsTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%RecordLogsTest_gasMeteringOff)]

    syntax S2KtestZModRecordLogsTestField ::= "_excludedContracts" [symbol(), klabel(field_test%RecordLogsTest__excludedContracts)]

    syntax S2KtestZModRecordLogsTestField ::= "_excludedSenders" [symbol(), klabel(field_test%RecordLogsTest__excludedSenders)]

    syntax S2KtestZModRecordLogsTestField ::= "_targetedContracts" [symbol(), klabel(field_test%RecordLogsTest__targetedContracts)]

    syntax S2KtestZModRecordLogsTestField ::= "_targetedSenders" [symbol(), klabel(field_test%RecordLogsTest__targetedSenders)]

    syntax S2KtestZModRecordLogsTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%RecordLogsTest__excludedArtifacts)]

    syntax S2KtestZModRecordLogsTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%RecordLogsTest__targetedArtifacts)]

    syntax S2KtestZModRecordLogsTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%RecordLogsTest__targetedArtifactSelectors)]

    syntax S2KtestZModRecordLogsTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%RecordLogsTest__targetedSelectors)]

    syntax S2KtestZModRecordLogsTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%RecordLogsTest__targetedInterfaces)]

    syntax S2KtestZModRecordLogsTestField ::= "emitter" [symbol(), klabel(field_test%RecordLogsTest_emitter)]

    rule  ( #loc ( S2KtestZModRecordLogsTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModRecordLogsTest . emitter ) => 28 )


    syntax Bytes ::= S2KtestZModRecordLogsTestContract "." S2KtestZModRecordLogsTestMethod [function(), symbol(), klabel(method_test%RecordLogsTest)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KISZUndTEST_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KexcludeContracts_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KexcludeSenders_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2Kfailed_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KsetUp_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtargetArtifacts_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtargetContracts_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtargetInterfaces_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtargetSelectors_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtargetSenders_)]

    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtestRecordLogs" "(" ")" [symbol(), klabel(method_test%RecordLogsTest_S2KtestRecordLogs_)]

    rule  ( S2KtestZModRecordLogsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModRecordLogsTest . S2KtestRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testRecordLogs()" ) => 3623393624 )


endmodule

module S2KsrcZModSafe-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModSafeContract

    syntax S2KsrcZModSafeContract ::= "S2KsrcZModSafe" [symbol(), klabel(contract_src%Safe)]

    rule  ( #binRuntime ( S2KsrcZModSafe ) => #parseByteStack ( "0x60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModSafe ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033" ) )


    syntax Bytes ::= S2KsrcZModSafeContract "." S2KsrcZModSafeMethod [function(), symbol(), klabel(method_src%Safe)]

    syntax S2KsrcZModSafeMethod ::= "S2Kwithdraw" "(" ")" [symbol(), klabel(method_src%Safe_S2Kwithdraw_)]

    rule  ( S2KsrcZModSafe . S2Kwithdraw ( ) => #abiCallData ( "withdraw" , .TypedArgs ) )


    rule  ( selector ( "withdraw()" ) => 1020253707 )


endmodule

module S2KtestZModSafeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSafeTestContract

    syntax S2KtestZModSafeTestContract ::= "S2KtestZModSafeTest" [symbol(), klabel(contract_test%SafeTest)]

    rule  ( #binRuntime ( S2KtestZModSafeTest ) => #parseByteStack ( "0x6080604052600436106100e15760003560e01c8063916a17c61161007f578063d0da5a0a11610059578063d0da5a0a1461020e578063d509b16c1461022e578063e20c9f7114610243578063fa7626d41461025857600080fd5b8063916a17c6146101bf578063b5508aa9146101d4578063ba414fa6146101e957600080fd5b80633e5e3c23116100bb5780633e5e3c23146101515780633f7286f41461016657806366d9a9a01461017b57806385226c811461019d57600080fd5b80630a9254e4146100ed5780631ed7831c146101045780632ade38801461012f57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b50610102610272565b005b34801561011057600080fd5b506101196102bd565b6040516101269190610e47565b60405180910390f35b34801561013b57600080fd5b5061014461031f565b6040516101269190610ec4565b34801561015d57600080fd5b50610119610461565b34801561017257600080fd5b506101196104c1565b34801561018757600080fd5b50610190610521565b6040516101269190610f9f565b3480156101a957600080fd5b506101b2610607565b6040516101269190611052565b3480156101cb57600080fd5b506101906106d7565b3480156101e057600080fd5b506101b26107bd565b3480156101f557600080fd5b506101fe61088d565b6040519015158152602001610126565b34801561021a57600080fd5b506101026102293660046110bf565b6109ba565b34801561023a57600080fd5b50610102610af5565b34801561024f57600080fd5b50610119610bad565b34801561026457600080fd5b506007546101fe9060ff1681565b60405161027e90610e3b565b604051809103906000f08015801561029a573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561031557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102f7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561045857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104415783829060005260206000200180546103b4906110ef565b80601f01602080910402602001604051908101604052809291908181526020018280546103e0906110ef565b801561042d5780601f106104025761010080835404028352916020019161042d565b820191906000526020600020905b81548152906001019060200180831161041057829003601f168201915b505050505081526020019060010190610395565b505050508152505081526020019060010190610343565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610315576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102f7575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610315576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102f7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104585760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105ef57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105b15790505b50505050508152505081526020019060010190610545565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561045857838290600052602060002001805461064a906110ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610676906110ef565b80156106c35780601f10610698576101008083540402835291602001916106c3565b820191906000526020600020905b8154815290600101906020018083116106a657829003601f168201915b50505050508152602001906001019061062b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104585760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156107a557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107675790505b505050505081525050815260200190600101906106fb565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610458578382906000526020600020018054610800906110ef565b80601f016020809104026020016040519081016040528092919081815260200182805461082c906110ef565b80156108795780601f1061084e57610100808354040283529160200191610879565b820191906000526020600020905b81548152906001019060200180831161085c57829003601f168201915b5050505050815260200190600101906107e1565b600754600090610100900460ff16156108af5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109b55760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161093d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611129565b60408051601f19818403018152908290526109579161115a565b6000604051808303816000865af19150503d8060008114610994576040519150601f19603f3d011682016040523d82523d6000602084013e610999565b606091505b50915050808060200190518101906109b19190611176565b9150505b919050565b604051632631f2b160e11b815267016345785d8a00006001600160601b038316116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b5050601c546040516001600160a01b0390911692506001600160601b03841680156108fc029250906000818181858888f19350505050158015610a72573d6000803e3d6000fd5b50601c5460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b50479250610af09150610aea90506001600160601b03851684611198565b82610c0d565b505050565b601c546040516001600160a01b0390911690600090670de0b6b3a76400009082818181858883f19350505050158015610b32573d6000803e3d6000fd5b50601c5460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b50479250610ba99150610aea905083670de0b6b3a7640000611198565b5050565b60606013805480602002602001604051908101604052809291908181526020018280548015610315576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102f7575050505050905090565b808214610ba9577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c7e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610ba9737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e2a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610dc99291602001611129565b60408051601f1981840301815290829052610de39161115a565b6000604051808303816000865af19150503d8060008114610e20576040519150601f19603f3d011682016040523d82523d6000602084013e610e25565b606091505b505050505b6007805461ff001916610100179055565b60c1806111bf83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e885783516001600160a01b031683529284019291840191600101610e63565b50909695505050505050565b60005b83811015610eaf578181015183820152602001610e97565b83811115610ebe576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f9257603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f7b57898403605f1901835284518051808652610f5c818e88018f8501610e94565b958c0195601f01601f1916949094018b019350918a0191600101610f35565b509197505050938601935090850190600101610eeb565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561104357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561102e5783516001600160e01b0319168252928b019260019290920191908b0190611004565b50978a01979550505091870191600101610fc7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f9257878503603f19018452815180518087526110a0818989018a8501610e94565b601f01601f191695909501860194509285019290850190600101611079565b6000602082840312156110d157600080fd5b81356001600160601b03811681146110e857600080fd5b9392505050565b600181811c9082168061110357607f821691505b60208210810361112357634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b031983168152815160009061114c816004850160208701610e94565b919091016004019392505050565b6000825161116c818460208701610e94565b9190910192915050565b60006020828403121561118857600080fd5b815180151581146110e857600080fd5b600082198211156111b957634e487b7160e01b600052601160045260246000fd5b50019056fe6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033a26469706673582212209e1a7e5bed8eca64e482bac1dbc5284bbd7ae8c492b20b05511d3459e093b67b64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSafeTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506112b58061003d6000396000f3fe6080604052600436106100e15760003560e01c8063916a17c61161007f578063d0da5a0a11610059578063d0da5a0a1461020e578063d509b16c1461022e578063e20c9f7114610243578063fa7626d41461025857600080fd5b8063916a17c6146101bf578063b5508aa9146101d4578063ba414fa6146101e957600080fd5b80633e5e3c23116100bb5780633e5e3c23146101515780633f7286f41461016657806366d9a9a01461017b57806385226c811461019d57600080fd5b80630a9254e4146100ed5780631ed7831c146101045780632ade38801461012f57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b50610102610272565b005b34801561011057600080fd5b506101196102bd565b6040516101269190610e47565b60405180910390f35b34801561013b57600080fd5b5061014461031f565b6040516101269190610ec4565b34801561015d57600080fd5b50610119610461565b34801561017257600080fd5b506101196104c1565b34801561018757600080fd5b50610190610521565b6040516101269190610f9f565b3480156101a957600080fd5b506101b2610607565b6040516101269190611052565b3480156101cb57600080fd5b506101906106d7565b3480156101e057600080fd5b506101b26107bd565b3480156101f557600080fd5b506101fe61088d565b6040519015158152602001610126565b34801561021a57600080fd5b506101026102293660046110bf565b6109ba565b34801561023a57600080fd5b50610102610af5565b34801561024f57600080fd5b50610119610bad565b34801561026457600080fd5b506007546101fe9060ff1681565b60405161027e90610e3b565b604051809103906000f08015801561029a573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561031557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102f7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561045857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104415783829060005260206000200180546103b4906110ef565b80601f01602080910402602001604051908101604052809291908181526020018280546103e0906110ef565b801561042d5780601f106104025761010080835404028352916020019161042d565b820191906000526020600020905b81548152906001019060200180831161041057829003601f168201915b505050505081526020019060010190610395565b505050508152505081526020019060010190610343565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610315576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102f7575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610315576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102f7575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104585760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105ef57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105b15790505b50505050508152505081526020019060010190610545565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561045857838290600052602060002001805461064a906110ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610676906110ef565b80156106c35780601f10610698576101008083540402835291602001916106c3565b820191906000526020600020905b8154815290600101906020018083116106a657829003601f168201915b50505050508152602001906001019061062b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104585760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156107a557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107675790505b505050505081525050815260200190600101906106fb565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610458578382906000526020600020018054610800906110ef565b80601f016020809104026020016040519081016040528092919081815260200182805461082c906110ef565b80156108795780601f1061084e57610100808354040283529160200191610879565b820191906000526020600020905b81548152906001019060200180831161085c57829003601f168201915b5050505050815260200190600101906107e1565b600754600090610100900460ff16156108af5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109b55760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161093d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611129565b60408051601f19818403018152908290526109579161115a565b6000604051808303816000865af19150503d8060008114610994576040519150601f19603f3d011682016040523d82523d6000602084013e610999565b606091505b50915050808060200190518101906109b19190611176565b9150505b919050565b604051632631f2b160e11b815267016345785d8a00006001600160601b038316116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b5050601c546040516001600160a01b0390911692506001600160601b03841680156108fc029250906000818181858888f19350505050158015610a72573d6000803e3d6000fd5b50601c5460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b50479250610af09150610aea90506001600160601b03851684611198565b82610c0d565b505050565b601c546040516001600160a01b0390911690600090670de0b6b3a76400009082818181858883f19350505050158015610b32573d6000803e3d6000fd5b50601c5460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b50479250610ba99150610aea905083670de0b6b3a7640000611198565b5050565b60606013805480602002602001604051908101604052809291908181526020018280548015610315576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102f7575050505050905090565b808214610ba9577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c7e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610ba9737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610e2a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610dc99291602001611129565b60408051601f1981840301815290829052610de39161115a565b6000604051808303816000865af19150503d8060008114610e20576040519150601f19603f3d011682016040523d82523d6000602084013e610e25565b606091505b505050505b6007805461ff001916610100179055565b60c1806111bf83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e885783516001600160a01b031683529284019291840191600101610e63565b50909695505050505050565b60005b83811015610eaf578181015183820152602001610e97565b83811115610ebe576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f9257603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f7b57898403605f1901835284518051808652610f5c818e88018f8501610e94565b958c0195601f01601f1916949094018b019350918a0191600101610f35565b509197505050938601935090850190600101610eeb565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561104357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561102e5783516001600160e01b0319168252928b019260019290920191908b0190611004565b50978a01979550505091870191600101610fc7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f9257878503603f19018452815180518087526110a0818989018a8501610e94565b601f01601f191695909501860194509285019290850190600101611079565b6000602082840312156110d157600080fd5b81356001600160601b03811681146110e857600080fd5b9392505050565b600181811c9082168061110357607f821691505b60208210810361112357634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b031983168152815160009061114c816004850160208701610e94565b919091016004019392505050565b6000825161116c818460208701610e94565b9190910192915050565b60006020828403121561118857600080fd5b815180151581146110e857600080fd5b600082198211156111b957634e487b7160e01b600052601160045260246000fd5b50019056fe6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033a26469706673582212209e1a7e5bed8eca64e482bac1dbc5284bbd7ae8c492b20b05511d3459e093b67b64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSafeTestField

    syntax S2KtestZModSafeTestField ::= "stdstore" [symbol(), klabel(field_test%SafeTest_stdstore)]

    syntax S2KtestZModSafeTestField ::= "IS_TEST" [symbol(), klabel(field_test%SafeTest_IS_TEST)]

    syntax S2KtestZModSafeTestField ::= "_failed" [symbol(), klabel(field_test%SafeTest__failed)]

    syntax S2KtestZModSafeTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%SafeTest_stdChainsInitialized)]

    syntax S2KtestZModSafeTestField ::= "chains" [symbol(), klabel(field_test%SafeTest_chains)]

    syntax S2KtestZModSafeTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%SafeTest_defaultRpcUrls)]

    syntax S2KtestZModSafeTestField ::= "idToAlias" [symbol(), klabel(field_test%SafeTest_idToAlias)]

    syntax S2KtestZModSafeTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%SafeTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSafeTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%SafeTest_gasMeteringOff)]

    syntax S2KtestZModSafeTestField ::= "_excludedContracts" [symbol(), klabel(field_test%SafeTest__excludedContracts)]

    syntax S2KtestZModSafeTestField ::= "_excludedSenders" [symbol(), klabel(field_test%SafeTest__excludedSenders)]

    syntax S2KtestZModSafeTestField ::= "_targetedContracts" [symbol(), klabel(field_test%SafeTest__targetedContracts)]

    syntax S2KtestZModSafeTestField ::= "_targetedSenders" [symbol(), klabel(field_test%SafeTest__targetedSenders)]

    syntax S2KtestZModSafeTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%SafeTest__excludedArtifacts)]

    syntax S2KtestZModSafeTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%SafeTest__targetedArtifacts)]

    syntax S2KtestZModSafeTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%SafeTest__targetedArtifactSelectors)]

    syntax S2KtestZModSafeTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%SafeTest__targetedSelectors)]

    syntax S2KtestZModSafeTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%SafeTest__targetedInterfaces)]

    syntax S2KtestZModSafeTestField ::= "safe" [symbol(), klabel(field_test%SafeTest_safe)]

    rule  ( #loc ( S2KtestZModSafeTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSafeTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSafeTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSafeTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSafeTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSafeTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSafeTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSafeTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSafeTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSafeTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSafeTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSafeTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSafeTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSafeTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSafeTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSafeTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSafeTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSafeTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModSafeTest . safe ) => 28 )


    syntax Bytes ::= S2KtestZModSafeTestContract "." S2KtestZModSafeTestMethod [function(), symbol(), klabel(method_test%SafeTest)]

    syntax S2KtestZModSafeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KISZUndTEST_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KexcludeContracts_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KexcludeSenders_)]

    syntax S2KtestZModSafeTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%SafeTest_S2Kfailed_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KsetUp_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtargetArtifacts_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtargetContracts_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtargetInterfaces_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtargetSelectors_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtargetSenders_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtestWithdraw" "(" ")" [symbol(), klabel(method_test%SafeTest_S2KtestWithdraw_)]

    syntax S2KtestZModSafeTestMethod ::= "S2KtestWithdrawFuzz" "(" Int ":" "uint96" ")" [symbol(), klabel(method_test%SafeTest_S2KtestWithdrawFuzz_uint96)]

    rule  ( S2KtestZModSafeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtestWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )


    rule  ( S2KtestZModSafeTest . S2KtestWithdrawFuzz ( V0_amount : uint96 ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testWithdraw()" ) => 3574182252 )


    rule  ( selector ( "testWithdrawFuzz(uint96)" ) => 3503970826 )


endmodule

module S2KtestZModSetup2Test-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSetup2TestContract

    syntax S2KtestZModSetup2TestContract ::= "S2KtestZModSetup2Test" [symbol(), klabel(contract_test%Setup2Test)]

    rule  ( #binRuntime ( S2KtestZModSetup2Test ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461018a578063d0b346e6146101a2578063e20c9f71146101aa578063fa7626d4146101b257600080fd5b806385226c8114610165578063916a17c61461017a578063b5508aa91461018257600080fd5b80633e5e3c23116100c85780633e5e3c23146101385780633f7286f41461014057806366d9a9a01461014857806377493bf31461015d57600080fd5b80630a9254e4146100ef5780631ed7831c146101055780632ade388014610123575b600080fd5b6101036001601c556002601d556003601e55565b005b61010d6101bf565b60405161011a9190610ba3565b60405180910390f35b61012b610221565b60405161011a9190610c20565b61010d610363565b61010d6103c3565b610150610423565b60405161011a9190610cfb565b610103610509565b61016d610532565b60405161011a9190610dae565b610150610602565b61016d6106e8565b6101926107b8565b604051901515815260200161011a565b6101036108e5565b61010d61090c565b6007546101929060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561021757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f9575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561035a57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103435783829060005260206000200180546102b690610e1b565b80601f01602080910402602001604051908101604052809291908181526020018280546102e290610e1b565b801561032f5780601f106103045761010080835404028352916020019161032f565b820191906000526020600020905b81548152906001019060200180831161031257829003601f168201915b505050505081526020019060010190610297565b505050508152505081526020019060010190610245565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610217576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f9575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610217576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f9575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561035a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104f157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104b35790505b50505050508152505081526020019060010190610447565b610530601e54601d54601c5461051f9190610e55565b6105299190610e55565b600661096c565b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561035a57838290600052602060002001805461057590610e1b565b80601f01602080910402602001604051908101604052809291908181526020018280546105a190610e1b565b80156105ee5780601f106105c3576101008083540402835291602001916105ee565b820191906000526020600020905b8154815290600101906020018083116105d157829003601f168201915b505050505081526020019060010190610556565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561035a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106d057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106925790505b50505050508152505081526020019060010190610626565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561035a57838290600052602060002001805461072b90610e1b565b80601f016020809104026020016040519081016040528092919081815260200182805461075790610e1b565b80156107a45780601f10610779576101008083540402835291602001916107a4565b820191906000526020600020905b81548152906001019060200180831161078757829003601f168201915b50505050508152602001906001019061070c565b600754600090610100900460ff16156107da5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108e05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610868917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e7b565b60408051601f198184030181529082905261088291610eac565b6000604051808303816000865af19150503d80600081146108bf576040519150601f19603f3d011682016040523d82523d6000602084013e6108c4565b606091505b50915050808060200190518101906108dc9190610ec8565b9150505b919050565b610530601e54601d54601c546108fb9190610e55565b6109059190610e55565b600761096c565b60606013805480602002602001604051908101604052809291908181526020018280548015610217576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f9575050505050905090565b808214610a93577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109dd9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a93610a97565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b925760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b319291602001610e7b565b60408051601f1981840301815290829052610b4b91610eac565b6000604051808303816000865af19150503d8060008114610b88576040519150601f19603f3d011682016040523d82523d6000602084013e610b8d565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610be45783516001600160a01b031683529284019291840191600101610bbf565b50909695505050505050565b60005b83811015610c0b578181015183820152602001610bf3565b83811115610c1a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cee57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610cd757898403605f1901835284518051808652610cb8818e88018f8501610bf0565b958c0195601f01601f1916949094018b019350918a0191600101610c91565b509197505050938601935090850190600101610c47565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d9f57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d8a5783516001600160e01b0319168252928b019260019290920191908b0190610d60565b50978a01979550505091870191600101610d23565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cee57878503603f1901845281518051808752610dfc818989018a8501610bf0565b601f01601f191695909501860194509285019290850190600101610dd5565b600181811c90821680610e2f57607f821691505b602082108103610e4f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610e7657634e487b7160e01b600052601160045260246000fd5b500190565b6001600160e01b0319831681528151600090610e9e816004850160208701610bf0565b919091016004019392505050565b60008251610ebe818460208701610bf0565b9190910192915050565b600060208284031215610eda57600080fd5b81518015158114610eea57600080fd5b939250505056fea26469706673582212205dd300cedd2eb32edab38a774820f4a8e6187c5cfc1aaf65f6157e639fb20c7a64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSetup2Test ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610f278061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa61461018a578063d0b346e6146101a2578063e20c9f71146101aa578063fa7626d4146101b257600080fd5b806385226c8114610165578063916a17c61461017a578063b5508aa91461018257600080fd5b80633e5e3c23116100c85780633e5e3c23146101385780633f7286f41461014057806366d9a9a01461014857806377493bf31461015d57600080fd5b80630a9254e4146100ef5780631ed7831c146101055780632ade388014610123575b600080fd5b6101036001601c556002601d556003601e55565b005b61010d6101bf565b60405161011a9190610ba3565b60405180910390f35b61012b610221565b60405161011a9190610c20565b61010d610363565b61010d6103c3565b610150610423565b60405161011a9190610cfb565b610103610509565b61016d610532565b60405161011a9190610dae565b610150610602565b61016d6106e8565b6101926107b8565b604051901515815260200161011a565b6101036108e5565b61010d61090c565b6007546101929060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561021757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f9575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561035a57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103435783829060005260206000200180546102b690610e1b565b80601f01602080910402602001604051908101604052809291908181526020018280546102e290610e1b565b801561032f5780601f106103045761010080835404028352916020019161032f565b820191906000526020600020905b81548152906001019060200180831161031257829003601f168201915b505050505081526020019060010190610297565b505050508152505081526020019060010190610245565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610217576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f9575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610217576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f9575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561035a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104f157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104b35790505b50505050508152505081526020019060010190610447565b610530601e54601d54601c5461051f9190610e55565b6105299190610e55565b600661096c565b565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561035a57838290600052602060002001805461057590610e1b565b80601f01602080910402602001604051908101604052809291908181526020018280546105a190610e1b565b80156105ee5780601f106105c3576101008083540402835291602001916105ee565b820191906000526020600020905b8154815290600101906020018083116105d157829003601f168201915b505050505081526020019060010190610556565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561035a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106d057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106925790505b50505050508152505081526020019060010190610626565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561035a57838290600052602060002001805461072b90610e1b565b80601f016020809104026020016040519081016040528092919081815260200182805461075790610e1b565b80156107a45780601f10610779576101008083540402835291602001916107a4565b820191906000526020600020905b81548152906001019060200180831161078757829003601f168201915b50505050508152602001906001019061070c565b600754600090610100900460ff16156107da5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108e05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610868917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e7b565b60408051601f198184030181529082905261088291610eac565b6000604051808303816000865af19150503d80600081146108bf576040519150601f19603f3d011682016040523d82523d6000602084013e6108c4565b606091505b50915050808060200190518101906108dc9190610ec8565b9150505b919050565b610530601e54601d54601c546108fb9190610e55565b6109059190610e55565b600761096c565b60606013805480602002602001604051908101604052809291908181526020018280548015610217576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f9575050505050905090565b808214610a93577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109dd9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a93610a97565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b925760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b319291602001610e7b565b60408051601f1981840301815290829052610b4b91610eac565b6000604051808303816000865af19150503d8060008114610b88576040519150601f19603f3d011682016040523d82523d6000602084013e610b8d565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610be45783516001600160a01b031683529284019291840191600101610bbf565b50909695505050505050565b60005b83811015610c0b578181015183820152602001610bf3565b83811115610c1a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cee57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610cd757898403605f1901835284518051808652610cb8818e88018f8501610bf0565b958c0195601f01601f1916949094018b019350918a0191600101610c91565b509197505050938601935090850190600101610c47565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d9f57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d8a5783516001600160e01b0319168252928b019260019290920191908b0190610d60565b50978a01979550505091870191600101610d23565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cee57878503603f1901845281518051808752610dfc818989018a8501610bf0565b601f01601f191695909501860194509285019290850190600101610dd5565b600181811c90821680610e2f57607f821691505b602082108103610e4f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610e7657634e487b7160e01b600052601160045260246000fd5b500190565b6001600160e01b0319831681528151600090610e9e816004850160208701610bf0565b919091016004019392505050565b60008251610ebe818460208701610bf0565b9190910192915050565b600060208284031215610eda57600080fd5b81518015158114610eea57600080fd5b939250505056fea26469706673582212205dd300cedd2eb32edab38a774820f4a8e6187c5cfc1aaf65f6157e639fb20c7a64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSetup2TestField

    syntax S2KtestZModSetup2TestField ::= "stdstore" [symbol(), klabel(field_test%Setup2Test_stdstore)]

    syntax S2KtestZModSetup2TestField ::= "IS_TEST" [symbol(), klabel(field_test%Setup2Test_IS_TEST)]

    syntax S2KtestZModSetup2TestField ::= "_failed" [symbol(), klabel(field_test%Setup2Test__failed)]

    syntax S2KtestZModSetup2TestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%Setup2Test_stdChainsInitialized)]

    syntax S2KtestZModSetup2TestField ::= "chains" [symbol(), klabel(field_test%Setup2Test_chains)]

    syntax S2KtestZModSetup2TestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%Setup2Test_defaultRpcUrls)]

    syntax S2KtestZModSetup2TestField ::= "idToAlias" [symbol(), klabel(field_test%Setup2Test_idToAlias)]

    syntax S2KtestZModSetup2TestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%Setup2Test_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSetup2TestField ::= "gasMeteringOff" [symbol(), klabel(field_test%Setup2Test_gasMeteringOff)]

    syntax S2KtestZModSetup2TestField ::= "_excludedContracts" [symbol(), klabel(field_test%Setup2Test__excludedContracts)]

    syntax S2KtestZModSetup2TestField ::= "_excludedSenders" [symbol(), klabel(field_test%Setup2Test__excludedSenders)]

    syntax S2KtestZModSetup2TestField ::= "_targetedContracts" [symbol(), klabel(field_test%Setup2Test__targetedContracts)]

    syntax S2KtestZModSetup2TestField ::= "_targetedSenders" [symbol(), klabel(field_test%Setup2Test__targetedSenders)]

    syntax S2KtestZModSetup2TestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%Setup2Test__excludedArtifacts)]

    syntax S2KtestZModSetup2TestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%Setup2Test__targetedArtifacts)]

    syntax S2KtestZModSetup2TestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%Setup2Test__targetedArtifactSelectors)]

    syntax S2KtestZModSetup2TestField ::= "_targetedSelectors" [symbol(), klabel(field_test%Setup2Test__targetedSelectors)]

    syntax S2KtestZModSetup2TestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%Setup2Test__targetedInterfaces)]

    syntax S2KtestZModSetup2TestField ::= "a" [symbol(), klabel(field_test%Setup2Test_a)]

    syntax S2KtestZModSetup2TestField ::= "b" [symbol(), klabel(field_test%Setup2Test_b)]

    syntax S2KtestZModSetup2TestField ::= "c" [symbol(), klabel(field_test%Setup2Test_c)]

    rule  ( #loc ( S2KtestZModSetup2Test . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSetup2Test . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSetup2Test . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSetup2Test . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSetup2Test . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSetup2Test . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSetup2Test . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSetup2Test . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSetup2Test . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSetup2Test . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSetup2Test . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSetup2Test . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSetup2Test . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSetup2Test . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSetup2Test . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSetup2Test . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSetup2Test . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSetup2Test . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModSetup2Test . a ) => 28 )


    rule  ( #loc ( S2KtestZModSetup2Test . b ) => 29 )


    rule  ( #loc ( S2KtestZModSetup2Test . c ) => 30 )


    syntax Bytes ::= S2KtestZModSetup2TestContract "." S2KtestZModSetup2TestMethod [function(), symbol(), klabel(method_test%Setup2Test)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KISZUndTEST_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KexcludeArtifacts_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KexcludeContracts_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KexcludeSenders_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2Kfailed_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KsetUp_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtargetArtifacts_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtargetContracts_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtargetInterfaces_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtargetSelectors_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtargetSenders_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtestFailZUndsetup" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtestFailZUndsetup_)]

    syntax S2KtestZModSetup2TestMethod ::= "S2KtestZUndsetup" "(" ")" [symbol(), klabel(method_test%Setup2Test_S2KtestZUndsetup_)]

    rule  ( S2KtestZModSetup2Test . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtestFailZUndsetup ( ) => #abiCallData ( "testFail_setup" , .TypedArgs ) )


    rule  ( S2KtestZModSetup2Test . S2KtestZUndsetup ( ) => #abiCallData ( "test_setup" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_setup()" ) => 3501410022 )


    rule  ( selector ( "test_setup()" ) => 2001288179 )


endmodule

module S2KtestZModSetUpDeployTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSetUpDeployTestContract

    syntax S2KtestZModSetUpDeployTestContract ::= "S2KtestZModSetUpDeployTest" [symbol(), klabel(contract_test%SetUpDeployTest)]

    rule  ( #binRuntime ( S2KtestZModSetUpDeployTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806366d9a9a01461012957806385226c811461013e578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806362c9eac514610121575b600080fd5b6100dc610190565b005b6100e66101ed565b6040516100f39190610977565b60405180910390f35b61010461024f565b6040516100f391906109f4565b6100e6610391565b6100e66103f1565b6100dc610451565b610131610471565b6040516100f39190610acf565b610146610557565b6040516100f39190610b82565b610131610627565b61014661070d565b61016b6107dd565b60405190151581526020016100f3565b6100e661090a565b60075461016b9060ff1681565b600060405161019e9061096a565b6001600160a01b039091168152602001604051809103906000f0801580156101ca573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561024557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610227575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103715783829060005260206000200180546102e490610bef565b80601f016020809104026020016040519081016040528092919081815260200182805461031090610bef565b801561035d5780601f106103325761010080835404028352916020019161035d565b820191906000526020600020905b81548152906001019060200180831161034057829003601f168201915b5050505050815260200190600101906102c5565b505050508152505081526020019060010190610273565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b601c546001600160a01b0316803b908161046d5761046d610c29565b5050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105015790505b50505050508152505081526020019060010190610495565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461059a90610bef565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690610bef565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b50505050508152602001906001019061057b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b75790505b5050505050815250508152602001906001019061064b565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461075090610bef565b80601f016020809104026020016040519081016040528092919081815260200182805461077c90610bef565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b505050505081526020019060010190610731565b600754600090610100900460ff16156107ff5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109055760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3f565b60408051601f19818403018152908290526108a791610c70565b6000604051808303816000865af19150503d80600081146108e4576040519150601f19603f3d011682016040523d82523d6000602084013e6108e9565b606091505b50915050808060200190518101906109019190610c8c565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b61027a80610cb683390190565b6020808252825182820181905260009190848201906040850190845b818110156109b85783516001600160a01b031683529284019291840191600101610993565b50909695505050505050565b60005b838110156109df5781810151838201526020016109c7565b838111156109ee576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ac257603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610aab57898403605f1901835284518051808652610a8c818e88018f85016109c4565b958c0195601f01601f1916949094018b019350918a0191600101610a65565b509197505050938601935090850190600101610a1b565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b7357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b5e5783516001600160e01b0319168252928b019260019290920191908b0190610b34565b50978a01979550505091870191600101610af7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ac257878503603f1901845281518051808752610bd0818989018a85016109c4565b601f01601f191695909501860194509285019290850190600101610ba9565b600181811c90821680610c0357607f821691505b602082108103610c2357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c628160048501602087016109c4565b919091016004019392505050565b60008251610c828184602087016109c4565b9190910192915050565b600060208284031215610c9e57600080fd5b81518015158114610cae57600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a26469706673582212205a2557745c9ce3895062910a1bc439b3fdc395fd0988159627eabcb1cef97c4164736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSetUpDeployTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610f658061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015b578063ba414fa614610163578063e20c9f711461017b578063fa7626d41461018357600080fd5b806366d9a9a01461012957806385226c811461013e578063916a17c61461015357600080fd5b80630a9254e4146100d45780631ed7831c146100de5780632ade3880146100fc5780633e5e3c23146101115780633f7286f41461011957806362c9eac514610121575b600080fd5b6100dc610190565b005b6100e66101ed565b6040516100f39190610977565b60405180910390f35b61010461024f565b6040516100f391906109f4565b6100e6610391565b6100e66103f1565b6100dc610451565b610131610471565b6040516100f39190610acf565b610146610557565b6040516100f39190610b82565b610131610627565b61014661070d565b61016b6107dd565b60405190151581526020016100f3565b6100e661090a565b60075461016b9060ff1681565b600060405161019e9061096a565b6001600160a01b039091168152602001604051809103906000f0801580156101ca573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060601480548060200260200160405190810160405280929190818152602001828054801561024557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610227575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561038857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103715783829060005260206000200180546102e490610bef565b80601f016020809104026020016040519081016040528092919081815260200182805461031090610bef565b801561035d5780601f106103325761010080835404028352916020019161035d565b820191906000526020600020905b81548152906001019060200180831161034057829003601f168201915b5050505050815260200190600101906102c5565b505050508152505081526020019060010190610273565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b601c546001600160a01b0316803b908161046d5761046d610c29565b5050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561053f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105015790505b50505050508152505081526020019060010190610495565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461059a90610bef565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690610bef565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b50505050508152602001906001019061057b565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103885760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106f557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106b75790505b5050505050815250508152602001906001019061064b565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561038857838290600052602060002001805461075090610bef565b80601f016020809104026020016040519081016040528092919081815260200182805461077c90610bef565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b505050505081526020019060010190610731565b600754600090610100900460ff16156107ff5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109055760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161088d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c3f565b60408051601f19818403018152908290526108a791610c70565b6000604051808303816000865af19150503d80600081146108e4576040519150601f19603f3d011682016040523d82523d6000602084013e6108e9565b606091505b50915050808060200190518101906109019190610c8c565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610245576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610227575050505050905090565b61027a80610cb683390190565b6020808252825182820181905260009190848201906040850190845b818110156109b85783516001600160a01b031683529284019291840191600101610993565b50909695505050505050565b60005b838110156109df5781810151838201526020016109c7565b838111156109ee576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ac257603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610aab57898403605f1901835284518051808652610a8c818e88018f85016109c4565b958c0195601f01601f1916949094018b019350918a0191600101610a65565b509197505050938601935090850190600101610a1b565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b7357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610b5e5783516001600160e01b0319168252928b019260019290920191908b0190610b34565b50978a01979550505091870191600101610af7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ac257878503603f1901845281518051808752610bd0818989018a85016109c4565b601f01601f191695909501860194509285019290850190600101610ba9565b600181811c90821680610c0357607f821691505b602082108103610c2357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b6001600160e01b0319831681528151600090610c628160048501602087016109c4565b919091016004019392505050565b60008251610c828184602087016109c4565b9190910192915050565b600060208284031215610c9e57600080fd5b81518015158114610cae57600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a26469706673582212205a2557745c9ce3895062910a1bc439b3fdc395fd0988159627eabcb1cef97c4164736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSetUpDeployTestField

    syntax S2KtestZModSetUpDeployTestField ::= "stdstore" [symbol(), klabel(field_test%SetUpDeployTest_stdstore)]

    syntax S2KtestZModSetUpDeployTestField ::= "IS_TEST" [symbol(), klabel(field_test%SetUpDeployTest_IS_TEST)]

    syntax S2KtestZModSetUpDeployTestField ::= "_failed" [symbol(), klabel(field_test%SetUpDeployTest__failed)]

    syntax S2KtestZModSetUpDeployTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%SetUpDeployTest_stdChainsInitialized)]

    syntax S2KtestZModSetUpDeployTestField ::= "chains" [symbol(), klabel(field_test%SetUpDeployTest_chains)]

    syntax S2KtestZModSetUpDeployTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%SetUpDeployTest_defaultRpcUrls)]

    syntax S2KtestZModSetUpDeployTestField ::= "idToAlias" [symbol(), klabel(field_test%SetUpDeployTest_idToAlias)]

    syntax S2KtestZModSetUpDeployTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%SetUpDeployTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSetUpDeployTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%SetUpDeployTest_gasMeteringOff)]

    syntax S2KtestZModSetUpDeployTestField ::= "_excludedContracts" [symbol(), klabel(field_test%SetUpDeployTest__excludedContracts)]

    syntax S2KtestZModSetUpDeployTestField ::= "_excludedSenders" [symbol(), klabel(field_test%SetUpDeployTest__excludedSenders)]

    syntax S2KtestZModSetUpDeployTestField ::= "_targetedContracts" [symbol(), klabel(field_test%SetUpDeployTest__targetedContracts)]

    syntax S2KtestZModSetUpDeployTestField ::= "_targetedSenders" [symbol(), klabel(field_test%SetUpDeployTest__targetedSenders)]

    syntax S2KtestZModSetUpDeployTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%SetUpDeployTest__excludedArtifacts)]

    syntax S2KtestZModSetUpDeployTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%SetUpDeployTest__targetedArtifacts)]

    syntax S2KtestZModSetUpDeployTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%SetUpDeployTest__targetedArtifactSelectors)]

    syntax S2KtestZModSetUpDeployTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%SetUpDeployTest__targetedSelectors)]

    syntax S2KtestZModSetUpDeployTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%SetUpDeployTest__targetedInterfaces)]

    syntax S2KtestZModSetUpDeployTestField ::= "token" [symbol(), klabel(field_test%SetUpDeployTest_token)]

    rule  ( #loc ( S2KtestZModSetUpDeployTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModSetUpDeployTest . token ) => 28 )


    syntax Bytes ::= S2KtestZModSetUpDeployTestContract "." S2KtestZModSetUpDeployTestMethod [function(), symbol(), klabel(method_test%SetUpDeployTest)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KISZUndTEST_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KexcludeContracts_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KexcludeSenders_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2Kfailed_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KsetUp_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtargetArtifacts_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtargetContracts_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtargetInterfaces_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtargetSelectors_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtargetSenders_)]

    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtestZUndextcodesize" "(" ")" [symbol(), klabel(method_test%SetUpDeployTest_S2KtestZUndextcodesize_)]

    rule  ( S2KtestZModSetUpDeployTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpDeployTest . S2KtestZUndextcodesize ( ) => #abiCallData ( "test_extcodesize" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "test_extcodesize()" ) => 1657400005 )


endmodule

module S2KtestZModSetUpTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSetUpTestContract

    syntax S2KtestZModSetUpTestContract ::= "S2KtestZModSetUpTest" [symbol(), klabel(contract_test%SetUpTest)]

    rule  ( #binRuntime ( S2KtestZModSetUpTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063c6a19dd211610066578063c6a19dd21461018e578063e20c9f71146101a1578063ec7fe471146101a9578063fa7626d4146101b157600080fd5b8063916a17c614610166578063b5508aa91461016e578063ba414fa61461017657600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101be565b005b6101016101d5565b60405161010e9190610b92565b60405180910390f35b61011f610237565b60405161010e9190610c0f565b610101610379565b6101016103d9565b610144610439565b60405161010e9190610cea565b61015961051f565b60405161010e9190610d9d565b6101446105ef565b6101596106d5565b61017e6107a5565b604051901515815260200161010e565b6100f761019c366004610e0a565b6108d2565b6101016108ec565b6100f761094c565b60075461017e9060ff1681565b601c80549060006101ce83610e23565b9190505550565b6060601480548060200260200160405190810160405280929190818152602001828054801561022d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020f575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561037057600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103595783829060005260206000200180546102cc90610e4a565b80601f01602080910402602001604051908101604052809291908181526020018280546102f890610e4a565b80156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050815260200190600101906102ad565b50505050815250508152602001906001019061025b565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020f575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020f575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103705760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104c95790505b5050505050815250508152602001906001019061045d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561037057838290600052602060002001805461056290610e4a565b80601f016020809104026020016040519081016040528092919081815260200182805461058e90610e4a565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081526020019060010190610543565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103705760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106bd57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161067f5790505b50505050508152505081526020019060010190610613565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561037057838290600052602060002001805461071890610e4a565b80601f016020809104026020016040519081016040528092919081815260200182805461074490610e4a565b80156107915780601f1061076657610100808354040283529160200191610791565b820191906000526020600020905b81548152906001019060200180831161077457829003601f168201915b5050505050815260200190600101906106f9565b600754600090610100900460ff16156107c75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108cd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610855917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e84565b60408051601f198184030181529082905261086f91610eb5565b6000604051808303816000865af19150503d80600081146108ac576040519150601f19603f3d011682016040523d82523d6000602084013e6108b1565b606091505b50915050808060200190518101906108c99190610ed1565b9150505b919050565b6108df601c54606561095b565b6108e9818261095b565b50565b6060601380548060200260200160405190810160405280929190818152602001828054801561022d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020f575050505050905090565b610959601c54606561095b565b565b808214610a82577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109cc9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a82610a86565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b815760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b209291602001610e84565b60408051601f1981840301815290829052610b3a91610eb5565b6000604051808303816000865af19150503d8060008114610b77576040519150601f19603f3d011682016040523d82523d6000602084013e610b7c565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bd35783516001600160a01b031683529284019291840191600101610bae565b50909695505050505050565b60005b83811015610bfa578181015183820152602001610be2565b83811115610c09576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cdd57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610cc657898403605f1901835284518051808652610ca7818e88018f8501610bdf565b958c0195601f01601f1916949094018b019350918a0191600101610c80565b509197505050938601935090850190600101610c36565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d8e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d795783516001600160e01b0319168252928b019260019290920191908b0190610d4f565b50978a01979550505091870191600101610d12565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cdd57878503603f1901845281518051808752610deb818989018a8501610bdf565b601f01601f191695909501860194509285019290850190600101610dc4565b600060208284031215610e1c57600080fd5b5035919050565b600060018201610e4357634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610e5e57607f821691505b602082108103610e7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610ea7816004850160208701610bdf565b919091016004019392505050565b60008251610ec7818460208701610bdf565b9190910192915050565b600060208284031215610ee357600080fd5b81518015158114610ef357600080fd5b939250505056fea2646970667358221220957b54f11f4b00cc4d5a3bd9f2a73c631b204867382b339df5be44de840ea53664736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSetUpTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b805490911690911790556000601c5534801561003257600080fd5b506064601c55610f30806100476000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916a17c61161008c578063c6a19dd211610066578063c6a19dd21461018e578063e20c9f71146101a1578063ec7fe471146101a9578063fa7626d4146101b157600080fd5b8063916a17c614610166578063b5508aa91461016e578063ba414fa61461017657600080fd5b80633e5e3c23116100c85780633e5e3c231461012c5780633f7286f41461013457806366d9a9a01461013c57806385226c811461015157600080fd5b80630a9254e4146100ef5780631ed7831c146100f95780632ade388014610117575b600080fd5b6100f76101be565b005b6101016101d5565b60405161010e9190610b92565b60405180910390f35b61011f610237565b60405161010e9190610c0f565b610101610379565b6101016103d9565b610144610439565b60405161010e9190610cea565b61015961051f565b60405161010e9190610d9d565b6101446105ef565b6101596106d5565b61017e6107a5565b604051901515815260200161010e565b6100f761019c366004610e0a565b6108d2565b6101016108ec565b6100f761094c565b60075461017e9060ff1681565b601c80549060006101ce83610e23565b9190505550565b6060601480548060200260200160405190810160405280929190818152602001828054801561022d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020f575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561037057600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103595783829060005260206000200180546102cc90610e4a565b80601f01602080910402602001604051908101604052809291908181526020018280546102f890610e4a565b80156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050815260200190600101906102ad565b50505050815250508152602001906001019061025b565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801561022d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020f575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561022d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020f575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103705760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104c95790505b5050505050815250508152602001906001019061045d565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561037057838290600052602060002001805461056290610e4a565b80601f016020809104026020016040519081016040528092919081815260200182805461058e90610e4a565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081526020019060010190610543565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103705760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156106bd57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161067f5790505b50505050508152505081526020019060010190610613565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561037057838290600052602060002001805461071890610e4a565b80601f016020809104026020016040519081016040528092919081815260200182805461074490610e4a565b80156107915780601f1061076657610100808354040283529160200191610791565b820191906000526020600020905b81548152906001019060200180831161077457829003601f168201915b5050505050815260200190600101906106f9565b600754600090610100900460ff16156107c75750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108cd5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610855917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e84565b60408051601f198184030181529082905261086f91610eb5565b6000604051808303816000865af19150503d80600081146108ac576040519150601f19603f3d011682016040523d82523d6000602084013e6108b1565b606091505b50915050808060200190518101906108c99190610ed1565b9150505b919050565b6108df601c54606561095b565b6108e9818261095b565b50565b6060601380548060200260200160405190810160405280929190818152602001828054801561022d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161020f575050505050905090565b610959601c54606561095b565b565b808214610a82577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109cc9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610a82610a86565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b815760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b209291602001610e84565b60408051601f1981840301815290829052610b3a91610eb5565b6000604051808303816000865af19150503d8060008114610b77576040519150601f19603f3d011682016040523d82523d6000602084013e610b7c565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610bd35783516001600160a01b031683529284019291840191600101610bae565b50909695505050505050565b60005b83811015610bfa578181015183820152602001610be2565b83811115610c09576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cdd57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610cc657898403605f1901835284518051808652610ca7818e88018f8501610bdf565b958c0195601f01601f1916949094018b019350918a0191600101610c80565b509197505050938601935090850190600101610c36565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d8e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d795783516001600160e01b0319168252928b019260019290920191908b0190610d4f565b50978a01979550505091870191600101610d12565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cdd57878503603f1901845281518051808752610deb818989018a8501610bdf565b601f01601f191695909501860194509285019290850190600101610dc4565b600060208284031215610e1c57600080fd5b5035919050565b600060018201610e4357634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610e5e57607f821691505b602082108103610e7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610ea7816004850160208701610bdf565b919091016004019392505050565b60008251610ec7818460208701610bdf565b9190910192915050565b600060208284031215610ee357600080fd5b81518015158114610ef357600080fd5b939250505056fea2646970667358221220957b54f11f4b00cc4d5a3bd9f2a73c631b204867382b339df5be44de840ea53664736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSetUpTestField

    syntax S2KtestZModSetUpTestField ::= "stdstore" [symbol(), klabel(field_test%SetUpTest_stdstore)]

    syntax S2KtestZModSetUpTestField ::= "IS_TEST" [symbol(), klabel(field_test%SetUpTest_IS_TEST)]

    syntax S2KtestZModSetUpTestField ::= "_failed" [symbol(), klabel(field_test%SetUpTest__failed)]

    syntax S2KtestZModSetUpTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%SetUpTest_stdChainsInitialized)]

    syntax S2KtestZModSetUpTestField ::= "chains" [symbol(), klabel(field_test%SetUpTest_chains)]

    syntax S2KtestZModSetUpTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%SetUpTest_defaultRpcUrls)]

    syntax S2KtestZModSetUpTestField ::= "idToAlias" [symbol(), klabel(field_test%SetUpTest_idToAlias)]

    syntax S2KtestZModSetUpTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%SetUpTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSetUpTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%SetUpTest_gasMeteringOff)]

    syntax S2KtestZModSetUpTestField ::= "_excludedContracts" [symbol(), klabel(field_test%SetUpTest__excludedContracts)]

    syntax S2KtestZModSetUpTestField ::= "_excludedSenders" [symbol(), klabel(field_test%SetUpTest__excludedSenders)]

    syntax S2KtestZModSetUpTestField ::= "_targetedContracts" [symbol(), klabel(field_test%SetUpTest__targetedContracts)]

    syntax S2KtestZModSetUpTestField ::= "_targetedSenders" [symbol(), klabel(field_test%SetUpTest__targetedSenders)]

    syntax S2KtestZModSetUpTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%SetUpTest__excludedArtifacts)]

    syntax S2KtestZModSetUpTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%SetUpTest__targetedArtifacts)]

    syntax S2KtestZModSetUpTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%SetUpTest__targetedArtifactSelectors)]

    syntax S2KtestZModSetUpTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%SetUpTest__targetedSelectors)]

    syntax S2KtestZModSetUpTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%SetUpTest__targetedInterfaces)]

    syntax S2KtestZModSetUpTestField ::= "counter" [symbol(), klabel(field_test%SetUpTest_counter)]

    rule  ( #loc ( S2KtestZModSetUpTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSetUpTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSetUpTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSetUpTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSetUpTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSetUpTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSetUpTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSetUpTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSetUpTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSetUpTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSetUpTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSetUpTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSetUpTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSetUpTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSetUpTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSetUpTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSetUpTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSetUpTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModSetUpTest . counter ) => 28 )


    syntax Bytes ::= S2KtestZModSetUpTestContract "." S2KtestZModSetUpTestMethod [function(), symbol(), klabel(method_test%SetUpTest)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KISZUndTEST_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KexcludeContracts_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KexcludeSenders_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2Kfailed_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KsetUp_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtargetArtifacts_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtargetContracts_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtargetInterfaces_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtargetSelectors_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtargetSenders_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtestSetUpCalled" "(" ")" [symbol(), klabel(method_test%SetUpTest_S2KtestSetUpCalled_)]

    syntax S2KtestZModSetUpTestMethod ::= "S2KtestSetUpCalledSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%SetUpTest_S2KtestSetUpCalledSymbolic_uint256)]

    rule  ( S2KtestZModSetUpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtestSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )


    rule  ( S2KtestZModSetUpTest . S2KtestSetUpCalledSymbolic ( V0_x : uint256 ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testSetUpCalled()" ) => 3967804529 )


    rule  ( selector ( "testSetUpCalledSymbolic(uint256)" ) => 3332480466 )


endmodule

module S2KtestZModSignTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSignTestContract

    syntax S2KtestZModSignTestContract ::= "S2KtestZModSignTest" [symbol(), klabel(contract_test%SignTest)]

    rule  ( #binRuntime ( S2KtestZModSignTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa614610166578063e20c9f711461017e578063ed8f10df14610186578063fa7626d41461018e57600080fd5b8063916a17c614610141578063af5bc10d14610149578063b5508aa91461015e57600080fd5b80631ed7831c146100d45780632ade3880146100f25780633e5e3c23146101075780633f7286f41461010f57806366d9a9a01461011757806385226c811461012c575b600080fd5b6100dc61019b565b6040516100e99190610f77565b60405180910390f35b6100fa6101fd565b6040516100e99190610ff4565b6100dc61033f565b6100dc61039f565b61011f6103ff565b6040516100e991906110cf565b6101346104e5565b6040516100e99190611182565b61011f6105b5565b61015c6101573660046111ef565b61069b565b005b61013461091a565b61016e6109ea565b60405190151581526020016100e9565b6100dc610b17565b61015c610b77565b60075461016e9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d5575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561033657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561031f57838290600052602060002001805461029290611208565b80601f01602080910402602001604051908101604052809291908181526020018280546102be90611208565b801561030b5780601f106102e05761010080835404028352916020019161030b565b820191906000526020600020905b8154815290600101906020018083116102ee57829003601f168201915b505050505081526020019060010190610273565b505050508152505081526020019060010190610221565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101f3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d5575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101f3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d5575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103365760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104cd57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161048f5790505b50505050508152505081526020019060010190610423565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561033657838290600052602060002001805461052890611208565b80601f016020809104026020016040519081016040528092919081815260200182805461055490611208565b80156105a15780601f10610576576101008083540402835291602001916105a1565b820191906000526020600020905b81548152906001019060200180831161058457829003601f168201915b505050505081526020019060010190610509565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103365760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561068357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106455790505b505050505081525050815260200190600101906105d9565b604051632631f2b160e11b81528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b1580156106e757600080fd5b505afa1580156106fb573d6000803e3d6000fd5b5050604051632631f2b160e11b815270014551231950b75fc4402da1732fc9bebe1984106004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9250634c63e562915060240160006040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b50506040516001625e79b760e01b031981526004810184905260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ffa1864990602401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190611242565b6040516338d07aa960e21b8152600481018490527fcec7901caf5725c08993c6c23be407884cf770cbb2394af38ff5d00d0e11ad426024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa490604401606060405180830381865afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108959190611272565b9250925092506000600185858585604051600081526020016040526040516108d9949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156108fb573d6000803e3d6000fd5b5050506020604051035190506109118682610d1b565b50505050505050565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561033657838290600052602060002001805461095d90611208565b80601f016020809104026020016040519081016040528092919081815260200182805461098990611208565b80156109d65780601f106109ab576101008083540402835291602001916109d6565b820191906000526020600020905b8154815290600101906020018083116109b957829003601f168201915b50505050508152602001906001019061093e565b600754600090610100900460ff1615610a0c5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b125760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a9a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016112af565b60408051601f1981840301815290829052610ab4916112e0565b6000604051808303816000865af19150503d8060008114610af1576040519150601f19603f3d011682016040523d82523d6000602084013e610af6565b606091505b5091505080806020019051810190610b0e91906112fc565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156101f3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d5575050505050905090565b6040516001625e79b760e01b0319815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611242565b6040516338d07aa960e21b8152600160048201527f385967023fb9520b497ee37da9c1e3d5faac1385800ce4ed07ca32d7893c7bb56024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa490604401606060405180830381865afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190611272565b925092509250600060018585858560405160008152602001604052604051610cdb949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610cfd573d6000803e3d6000fd5b505050602060405103519050610d138682610d1b565b505050505050565b806001600160a01b0316826001600160a01b031614610e67577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610da19060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a1610e67610e6b565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610f665760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610f0592916020016112af565b60408051601f1981840301815290829052610f1f916112e0565b6000604051808303816000865af19150503d8060008114610f5c576040519150601f19603f3d011682016040523d82523d6000602084013e610f61565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610fb85783516001600160a01b031683529284019291840191600101610f93565b50909695505050505050565b60005b83811015610fdf578181015183820152602001610fc7565b83811115610fee576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156110c257603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156110ab57898403605f190183528451805180865261108c818e88018f8501610fc4565b958c0195601f01601f1916949094018b019350918a0191600101611065565b50919750505093860193509085019060010161101b565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561117357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561115e5783516001600160e01b0319168252928b019260019290920191908b0190611134565b50978a019795505050918701916001016110f7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156110c257878503603f19018452815180518087526111d0818989018a8501610fc4565b601f01601f1916959095018601945092850192908501906001016111a9565b60006020828403121561120157600080fd5b5035919050565b600181811c9082168061121c57607f821691505b60208210810361123c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561125457600080fd5b81516001600160a01b038116811461126b57600080fd5b9392505050565b60008060006060848603121561128757600080fd5b835160ff8116811461129857600080fd5b602085015160409095015190969495509392505050565b6001600160e01b03198316815281516000906112d2816004850160208701610fc4565b919091016004019392505050565b600082516112f2818460208701610fc4565b9190910192915050565b60006020828403121561130e57600080fd5b8151801515811461126b57600080fdfea26469706673582212203b51f2e0062f8bf750bb51321c78ab41f05b780a72fafc2e42d2cd00aa55bd3a64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSignTest ) => #parseByteStack ( "" ) )


    syntax Field ::= S2KtestZModSignTestField

    syntax S2KtestZModSignTestField ::= "stdstore" [symbol(), klabel(field_test%SignTest_stdstore)]

    syntax S2KtestZModSignTestField ::= "IS_TEST" [symbol(), klabel(field_test%SignTest_IS_TEST)]

    syntax S2KtestZModSignTestField ::= "_failed" [symbol(), klabel(field_test%SignTest__failed)]

    syntax S2KtestZModSignTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%SignTest_stdChainsInitialized)]

    syntax S2KtestZModSignTestField ::= "chains" [symbol(), klabel(field_test%SignTest_chains)]

    syntax S2KtestZModSignTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%SignTest_defaultRpcUrls)]

    syntax S2KtestZModSignTestField ::= "idToAlias" [symbol(), klabel(field_test%SignTest_idToAlias)]

    syntax S2KtestZModSignTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%SignTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSignTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%SignTest_gasMeteringOff)]

    syntax S2KtestZModSignTestField ::= "_excludedContracts" [symbol(), klabel(field_test%SignTest__excludedContracts)]

    syntax S2KtestZModSignTestField ::= "_excludedSenders" [symbol(), klabel(field_test%SignTest__excludedSenders)]

    syntax S2KtestZModSignTestField ::= "_targetedContracts" [symbol(), klabel(field_test%SignTest__targetedContracts)]

    syntax S2KtestZModSignTestField ::= "_targetedSenders" [symbol(), klabel(field_test%SignTest__targetedSenders)]

    syntax S2KtestZModSignTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%SignTest__excludedArtifacts)]

    syntax S2KtestZModSignTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%SignTest__targetedArtifacts)]

    syntax S2KtestZModSignTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%SignTest__targetedArtifactSelectors)]

    syntax S2KtestZModSignTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%SignTest__targetedSelectors)]

    syntax S2KtestZModSignTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%SignTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModSignTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSignTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSignTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSignTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSignTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSignTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSignTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSignTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSignTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSignTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSignTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSignTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSignTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSignTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSignTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSignTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSignTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSignTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModSignTestContract "." S2KtestZModSignTestMethod [function(), symbol(), klabel(method_test%SignTest)]

    syntax S2KtestZModSignTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%SignTest_S2KISZUndTEST_)]

    syntax S2KtestZModSignTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%SignTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModSignTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%SignTest_S2KexcludeContracts_)]

    syntax S2KtestZModSignTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%SignTest_S2KexcludeSenders_)]

    syntax S2KtestZModSignTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%SignTest_S2Kfailed_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtargetArtifacts_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtargetContracts_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtargetInterfaces_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtargetSelectors_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtargetSenders_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtestSign" "(" ")" [symbol(), klabel(method_test%SignTest_S2KtestSign_)]

    syntax S2KtestZModSignTestMethod ::= "S2KtestSignZUndsymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%SignTest_S2KtestSignZUndsymbolic_uint256)]

    rule  ( S2KtestZModSignTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtestSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )


    rule  ( S2KtestZModSignTest . S2KtestSignZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "testSign_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testSign()" ) => 3985576159 )


    rule  ( selector ( "testSign_symbolic(uint256)" ) => 2942025997 )


endmodule

module S2KtestZModAssertTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModAssertTestContract

    syntax S2KtestZModAssertTestContract ::= "S2KtestZModAssertTest" [symbol(), klabel(contract_test%AssertTest)]

    rule  ( #binRuntime ( S2KtestZModAssertTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806385226c81116100c3578063ba414fa61161007c578063ba414fa614610207578063c2c0bcc71461021f578063d6a2ec7614610232578063e20c9f7114610271578063f3ad3023146101b2578063fa7626d41461027957600080fd5b806385226c81146101cf578063883d4f56146101525780638c0edd8b146101e4578063916a17c6146101f7578063a25ddff4146101b2578063b5508aa9146101ff57600080fd5b8063360da4d211610115578063360da4d2146101525780633e5e3c231461018f5780633f7286f4146101975780634622b1551461019f5780635ddecbfd146101b257806366d9a9a0146101ba57600080fd5b80630a9254e41461015257806318675d42146101525780631ed7831c146101545780632a4de1a1146101725780632ade38801461017a575b600080fd5b005b61015c610288565b6040516101699190610b16565b60405180910390f35b6101526102ea565b6101826103b3565b6040516101699190610b8f565b61015c6104f5565b61015c610555565b6101526101ad366004610c6a565b6105b5565b6101526105c9565b6101c26105d1565b6040516101699190610c83565b6101d76106b7565b6040516101699190610d36565b6101526101f2366004610da3565b610787565b6101c261079f565b6101d7610885565b61020f610955565b6040519015158152602001610169565b61015261022d366004610c6a565b610a82565b6102597f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610169565b61015c610ab6565b60075461020f9060ff1681565b565b606060148054806020026020016040519081016040528092919081815260200182805480156102e057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c2575b5050505050905090565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561034857600080fd5b505af115801561035c573d6000803e3d6000fd5b50505050306001600160a01b031663f3ad30236040518163ffffffff1660e01b815260040160006040518083038186803b15801561039957600080fd5b505afa1580156103ad573d6000803e3d6000fd5b50505050565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156104ec57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104d557838290600052602060002001805461044890610ddb565b80601f016020809104026020016040519081016040528092919081815260200182805461047490610ddb565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b505050505081526020019060010190610429565b5050505081525050815260200190600101906103d7565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b60648110156105c6576105c6610dc5565b50565b610286610dc5565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104ec5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561069f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106615790505b505050505081525050815260200190600101906105f5565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104ec5783829060005260206000200180546106fa90610ddb565b80601f016020809104026020016040519081016040528092919081815260200182805461072690610ddb565b80156107735780601f1061074857610100808354040283529160200191610773565b820191906000526020600020905b81548152906001019060200180831161075657829003601f168201915b5050505050815260200190600101906106db565b80821015610793575050565b61079b610dc5565b5050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104ec5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561086d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161082f5790505b505050505081525050815260200190600101906107c3565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104ec5783829060005260206000200180546108c890610ddb565b80601f01602080910402602001604051908101604052809291908181526020018280546108f490610ddb565b80156109415780601f1061091657610100808354040283529160200191610941565b820191906000526020600020905b81548152906001019060200180831161092457829003601f168201915b5050505050815260200190600101906108a9565b600754600090610100900460ff16156109775750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a7d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a05917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e15565b60408051601f1981840301815290829052610a1f91610e46565b6000604051808303816000865af19150503d8060008114610a5c576040519150601f19603f3d011682016040523d82523d6000602084013e610a61565b606091505b5091505080806020019051810190610a799190610e62565b9150505b919050565b6003811015610a9557601c819055610aa4565b610aa0600182610e8b565b601c555b80601c5411156105c6576105c6610dc5565b606060138054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b6020808252825182820181905260009190848201906040850190845b81811015610b575783516001600160a01b031683529284019291840191600101610b32565b50909695505050505050565b60005b83811015610b7e578181015183820152602001610b66565b838111156103ad5750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c5d57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610c4657898403605f1901835284518051808652610c27818e88018f8501610b63565b958c0195601f01601f1916949094018b019350918a0191600101610c00565b509197505050938601935090850190600101610bb6565b5092979650505050505050565b600060208284031215610c7c57600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d2757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d125783516001600160e01b0319168252928b019260019290920191908b0190610ce8565b50978a01979550505091870191600101610cab565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c5d57878503603f1901845281518051808752610d84818989018a8501610b63565b601f01601f191695909501860194509285019290850190600101610d5d565b60008060408385031215610db657600080fd5b50508035926020909101359150565b634e487b7160e01b600052600160045260246000fd5b600181811c90821680610def57607f821691505b602082108103610e0f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610e38816004850160208701610b63565b919091016004019392505050565b60008251610e58818460208701610b63565b9190910192915050565b600060208284031215610e7457600080fd5b81518015158114610e8457600080fd5b9392505050565b600082821015610eab57634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220fdd664ed219c72e0e9a094f33020e8c526e5e1dc80233447a4ccfd438ee85aad64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModAssertTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50610ee68061003d6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806385226c81116100c3578063ba414fa61161007c578063ba414fa614610207578063c2c0bcc71461021f578063d6a2ec7614610232578063e20c9f7114610271578063f3ad3023146101b2578063fa7626d41461027957600080fd5b806385226c81146101cf578063883d4f56146101525780638c0edd8b146101e4578063916a17c6146101f7578063a25ddff4146101b2578063b5508aa9146101ff57600080fd5b8063360da4d211610115578063360da4d2146101525780633e5e3c231461018f5780633f7286f4146101975780634622b1551461019f5780635ddecbfd146101b257806366d9a9a0146101ba57600080fd5b80630a9254e41461015257806318675d42146101525780631ed7831c146101545780632a4de1a1146101725780632ade38801461017a575b600080fd5b005b61015c610288565b6040516101699190610b16565b60405180910390f35b6101526102ea565b6101826103b3565b6040516101699190610b8f565b61015c6104f5565b61015c610555565b6101526101ad366004610c6a565b6105b5565b6101526105c9565b6101c26105d1565b6040516101699190610c83565b6101d76106b7565b6040516101699190610d36565b6101526101f2366004610da3565b610787565b6101c261079f565b6101d7610885565b61020f610955565b6040519015158152602001610169565b61015261022d366004610c6a565b610a82565b6102597f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b039091168152602001610169565b61015c610ab6565b60075461020f9060ff1681565b565b606060148054806020026020016040519081016040528092919081815260200182805480156102e057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c2575b5050505050905090565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561034857600080fd5b505af115801561035c573d6000803e3d6000fd5b50505050306001600160a01b031663f3ad30236040518163ffffffff1660e01b815260040160006040518083038186803b15801561039957600080fd5b505afa1580156103ad573d6000803e3d6000fd5b50505050565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156104ec57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104d557838290600052602060002001805461044890610ddb565b80601f016020809104026020016040519081016040528092919081815260200182805461047490610ddb565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b505050505081526020019060010190610429565b5050505081525050815260200190600101906103d7565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b60648110156105c6576105c6610dc5565b50565b610286610dc5565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104ec5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561069f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106615790505b505050505081525050815260200190600101906105f5565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104ec5783829060005260206000200180546106fa90610ddb565b80601f016020809104026020016040519081016040528092919081815260200182805461072690610ddb565b80156107735780601f1061074857610100808354040283529160200191610773565b820191906000526020600020905b81548152906001019060200180831161075657829003601f168201915b5050505050815260200190600101906106db565b80821015610793575050565b61079b610dc5565b5050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104ec5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561086d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161082f5790505b505050505081525050815260200190600101906107c3565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104ec5783829060005260206000200180546108c890610ddb565b80601f01602080910402602001604051908101604052809291908181526020018280546108f490610ddb565b80156109415780601f1061091657610100808354040283529160200191610941565b820191906000526020600020905b81548152906001019060200180831161092457829003601f168201915b5050505050815260200190600101906108a9565b600754600090610100900460ff16156109775750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610a7d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610a05917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610e15565b60408051601f1981840301815290829052610a1f91610e46565b6000604051808303816000865af19150503d8060008114610a5c576040519150601f19603f3d011682016040523d82523d6000602084013e610a61565b606091505b5091505080806020019051810190610a799190610e62565b9150505b919050565b6003811015610a9557601c819055610aa4565b610aa0600182610e8b565b601c555b80601c5411156105c6576105c6610dc5565b606060138054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b6020808252825182820181905260009190848201906040850190845b81811015610b575783516001600160a01b031683529284019291840191600101610b32565b50909695505050505050565b60005b83811015610b7e578181015183820152602001610b66565b838111156103ad5750506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c5d57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610c4657898403605f1901835284518051808652610c27818e88018f8501610b63565b958c0195601f01601f1916949094018b019350918a0191600101610c00565b509197505050938601935090850190600101610bb6565b5092979650505050505050565b600060208284031215610c7c57600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610d2757898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d125783516001600160e01b0319168252928b019260019290920191908b0190610ce8565b50978a01979550505091870191600101610cab565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c5d57878503603f1901845281518051808752610d84818989018a8501610b63565b601f01601f191695909501860194509285019290850190600101610d5d565b60008060408385031215610db657600080fd5b50508035926020909101359150565b634e487b7160e01b600052600160045260246000fd5b600181811c90821680610def57607f821691505b602082108103610e0f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610e38816004850160208701610b63565b919091016004019392505050565b60008251610e58818460208701610b63565b9190910192915050565b600060208284031215610e7457600080fd5b81518015158114610e8457600080fd5b9392505050565b600082821015610eab57634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220fdd664ed219c72e0e9a094f33020e8c526e5e1dc80233447a4ccfd438ee85aad64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModAssertTestField

    syntax S2KtestZModAssertTestField ::= "stdstore" [symbol(), klabel(field_test%AssertTest_stdstore)]

    syntax S2KtestZModAssertTestField ::= "IS_TEST" [symbol(), klabel(field_test%AssertTest_IS_TEST)]

    syntax S2KtestZModAssertTestField ::= "_failed" [symbol(), klabel(field_test%AssertTest__failed)]

    syntax S2KtestZModAssertTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%AssertTest_stdChainsInitialized)]

    syntax S2KtestZModAssertTestField ::= "chains" [symbol(), klabel(field_test%AssertTest_chains)]

    syntax S2KtestZModAssertTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%AssertTest_defaultRpcUrls)]

    syntax S2KtestZModAssertTestField ::= "idToAlias" [symbol(), klabel(field_test%AssertTest_idToAlias)]

    syntax S2KtestZModAssertTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%AssertTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModAssertTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%AssertTest_gasMeteringOff)]

    syntax S2KtestZModAssertTestField ::= "_excludedContracts" [symbol(), klabel(field_test%AssertTest__excludedContracts)]

    syntax S2KtestZModAssertTestField ::= "_excludedSenders" [symbol(), klabel(field_test%AssertTest__excludedSenders)]

    syntax S2KtestZModAssertTestField ::= "_targetedContracts" [symbol(), klabel(field_test%AssertTest__targetedContracts)]

    syntax S2KtestZModAssertTestField ::= "_targetedSenders" [symbol(), klabel(field_test%AssertTest__targetedSenders)]

    syntax S2KtestZModAssertTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%AssertTest__excludedArtifacts)]

    syntax S2KtestZModAssertTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%AssertTest__targetedArtifacts)]

    syntax S2KtestZModAssertTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%AssertTest__targetedArtifactSelectors)]

    syntax S2KtestZModAssertTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%AssertTest__targetedSelectors)]

    syntax S2KtestZModAssertTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%AssertTest__targetedInterfaces)]

    syntax S2KtestZModAssertTestField ::= "y" [symbol(), klabel(field_test%AssertTest_y)]

    rule  ( #loc ( S2KtestZModAssertTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModAssertTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModAssertTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModAssertTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModAssertTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModAssertTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModAssertTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModAssertTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModAssertTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModAssertTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModAssertTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModAssertTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModAssertTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModAssertTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModAssertTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModAssertTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModAssertTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModAssertTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModAssertTest . y ) => 28 )


    syntax Bytes ::= S2KtestZModAssertTestContract "." S2KtestZModAssertTestMethod [function(), symbol(), klabel(method_test%AssertTest)]

    syntax S2KtestZModAssertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KISZUndTEST_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KcallZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KcallZUndassertZUndfalse_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KcheckFailZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KcheckFailZUndassertZUndfalse_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KexcludeContracts_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KexcludeSenders_)]

    syntax S2KtestZModAssertTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%AssertTest_S2Kfailed_)]

    syntax S2KtestZModAssertTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%AssertTest_S2Kkevm_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KproveZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KproveZUndassertZUndtrue_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KsetUp_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtargetArtifacts_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtargetContracts_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtargetInterfaces_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtargetSelectors_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtargetSenders_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestFailZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtestFailZUndassertZUndtrue_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestFailZUndexpectZUndrevert" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtestFailZUndexpectZUndrevert_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndassertZUndfalse" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtestZUndassertZUndfalse_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol(), klabel(method_test%AssertTest_S2KtestZUndassertZUndtrue_)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndassertZUndtrueZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%AssertTest_S2KtestZUndassertZUndtrueZUndbranch_uint256)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndfailingZUndbranch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%AssertTest_S2KtestZUndfailingZUndbranch_uint256)]

    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndrevertZUndbranch" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_test%AssertTest_S2KtestZUndrevertZUndbranch_uint256_uint256)]

    rule  ( S2KtestZModAssertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KcallZUndassertZUndfalse ( ) => #abiCallData ( "call_assert_false" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KcheckFailZUndassertZUndfalse ( ) => #abiCallData ( "checkFail_assert_false" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KproveZUndassertZUndtrue ( ) => #abiCallData ( "prove_assert_true" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtestFailZUndassertZUndtrue ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtestFailZUndexpectZUndrevert ( ) => #abiCallData ( "testFail_expect_revert" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtestZUndassertZUndfalse ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )


    rule  ( S2KtestZModAssertTest . S2KtestZUndassertZUndtrueZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_assert_true_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModAssertTest . S2KtestZUndfailingZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_failing_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModAssertTest . S2KtestZUndrevertZUndbranch ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_revert_branch" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "call_assert_false()" ) => 4088213539 )


    rule  ( selector ( "checkFail_assert_false()" ) => 2724061172 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "prove_assert_true()" ) => 2285719382 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testFail_assert_true()" ) => 409427266 )


    rule  ( selector ( "testFail_expect_revert()" ) => 709747105 )


    rule  ( selector ( "test_assert_false()" ) => 1574882301 )


    rule  ( selector ( "test_assert_true()" ) => 906863826 )


    rule  ( selector ( "test_assert_true_branch(uint256)" ) => 3267411143 )


    rule  ( selector ( "test_failing_branch(uint256)" ) => 1176678741 )


    rule  ( selector ( "test_revert_branch(uint256,uint256)" ) => 2349784459 )


endmodule

module S2KtestZModSnapshotTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSnapshotTestContract

    syntax S2KtestZModSnapshotTestContract ::= "S2KtestZModSnapshotTest" [symbol(), klabel(contract_test%SnapshotTest)]

    rule  ( #binRuntime ( S2KtestZModSnapshotTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610162578063befb3b8a1461017a578063e20c9f7114610182578063fa7626d41461018a57600080fd5b806385226c811461013d578063916a17c614610152578063b5508aa91461015a57600080fd5b80630a9254e4146100d45780631ed7831c146100e55780632ade3880146101035780633e5e3c23146101185780633f7286f41461012057806366d9a9a014610128575b600080fd5b6100e3600a601c556014601d55565b005b6100ed610197565b6040516100fa9190610cf7565b60405180910390f35b61010b6101f9565b6040516100fa9190610da0565b6100ed61033b565b6100ed61039b565b6101306103fb565b6040516100fa9190610e60565b6101456104e1565b6040516100fa9190610f13565b6101306105b1565b610145610697565b61016a610767565b60405190151581526020016100fa565b6100e3610894565b6100ed610a13565b60075461016a9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d1575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561033257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561031b57838290600052602060002001805461028e90610f75565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba90610f75565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b50505050508152602001906001019061026f565b50505050815250508152602001906001019061021d565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d1575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d1575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103325760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104c957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161048b5790505b5050505050815250508152602001906001019061041f565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561033257838290600052602060002001805461052490610f75565b80601f016020809104026020016040519081016040528092919081815260200182805461055090610f75565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b505050505081526020019060010190610505565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103325760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561067f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106415790505b505050505081525050815260200190600101906105d5565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103325783829060005260206000200180546106da90610f75565b80601f016020809104026020016040519081016040528092919081815260200182805461070690610f75565b80156107535780601f1061072857610100808354040283529160200191610753565b820191906000526020600020905b81548152906001019060200180831161073657829003601f168201915b5050505050815260200190600101906106bb565b600754600090610100900460ff16156107895750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561088f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610817917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610faf565b60408051601f198184030181529082905261083191610fe0565b6000604051808303816000865af19150503d806000811461086e576040519150601f19603f3d011682016040523d82523d6000602084013e610873565b606091505b509150508080602001905181019061088b9190610ffc565b9150505b919050565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190611025565b61012c601c819055610190601d559091506109389080610a73565b601d5461094790610190610a73565b604051631135fc2960e21b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906344d7f0a4906024016020604051808303816000875af1158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd9190610ffc565b506109e7601c60000154600a60405180606001604052806027815260200161109560279139610b9e565b610a10601c60010154601460405180606001604052806027815260200161106e60279139610b9e565b50565b606060138054806020026020016040519081016040528092919081815260200182805480156101ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d1575050505050905090565b808214610b9a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610ae49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610b9a610beb565b5050565b818314610be6577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610bd4919061103e565b60405180910390a1610be68383610a73565b505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ce65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610c859291602001610faf565b60408051601f1981840301815290829052610c9f91610fe0565b6000604051808303816000865af19150503d8060008114610cdc576040519150601f19603f3d011682016040523d82523d6000602084013e610ce1565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610d385783516001600160a01b031683529284019291840191600101610d13565b50909695505050505050565b60005b83811015610d5f578181015183820152602001610d47565b83811115610d6e576000848401525b50505050565b60008151808452610d8c816020860160208601610d44565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610e5057603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610e3a57605f19898503018352610e28848651610d74565b948e01949350918d0191600101610e0c565b505050978a019794505091880191600101610dc7565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610f0457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610eef5783516001600160e01b0319168252928b019260019290920191908b0190610ec5565b50978a01979550505091870191600101610e88565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f6857603f19888603018452610f56858351610d74565b94509285019290850190600101610f3a565b5092979650505050505050565b600181811c90821680610f8957607f821691505b602082108103610fa957634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610fd2816004850160208701610d44565b919091016004019392505050565b60008251610ff2818460208701610d44565b9190910192915050565b60006020828403121561100e57600080fd5b8151801515811461101e57600080fd5b9392505050565b60006020828403121561103757600080fd5b5051919050565b60408152600560408201526422b93937b960d91b606082015260806020820152600061101e6080830184610d7456fe736e617073686f742072657665727420666f7220736c6f74203120756e7375636365737366756c736e617073686f742072657665727420666f7220736c6f74203020756e7375636365737366756ca264697066735822122029d9ffc63858bc54a68e1655890ec6511d4194a7dea9f8465f0d9dede2fec4bf64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSnapshotTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506110f18061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806385226c811161008c578063ba414fa611610066578063ba414fa614610162578063befb3b8a1461017a578063e20c9f7114610182578063fa7626d41461018a57600080fd5b806385226c811461013d578063916a17c614610152578063b5508aa91461015a57600080fd5b80630a9254e4146100d45780631ed7831c146100e55780632ade3880146101035780633e5e3c23146101185780633f7286f41461012057806366d9a9a014610128575b600080fd5b6100e3600a601c556014601d55565b005b6100ed610197565b6040516100fa9190610cf7565b60405180910390f35b61010b6101f9565b6040516100fa9190610da0565b6100ed61033b565b6100ed61039b565b6101306103fb565b6040516100fa9190610e60565b6101456104e1565b6040516100fa9190610f13565b6101306105b1565b610145610697565b61016a610767565b60405190151581526020016100fa565b6100e3610894565b6100ed610a13565b60075461016a9060ff1681565b606060148054806020026020016040519081016040528092919081815260200182805480156101ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d1575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561033257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561031b57838290600052602060002001805461028e90610f75565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba90610f75565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b50505050508152602001906001019061026f565b50505050815250508152602001906001019061021d565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156101ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d1575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d1575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103325760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156104c957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161048b5790505b5050505050815250508152602001906001019061041f565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561033257838290600052602060002001805461052490610f75565b80601f016020809104026020016040519081016040528092919081815260200182805461055090610f75565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b505050505081526020019060010190610505565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103325760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561067f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106415790505b505050505081525050815260200190600101906105d5565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103325783829060005260206000200180546106da90610f75565b80601f016020809104026020016040519081016040528092919081815260200182805461070690610f75565b80156107535780601f1061072857610100808354040283529160200191610753565b820191906000526020600020905b81548152906001019060200180831161073657829003601f168201915b5050505050815260200190600101906106bb565b600754600090610100900460ff16156107895750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561088f5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610817917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610faf565b60408051601f198184030181529082905261083191610fe0565b6000604051808303816000865af19150503d806000811461086e576040519150601f19603f3d011682016040523d82523d6000602084013e610873565b606091505b509150508080602001905181019061088b9190610ffc565b9150505b919050565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190611025565b61012c601c819055610190601d559091506109389080610a73565b601d5461094790610190610a73565b604051631135fc2960e21b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906344d7f0a4906024016020604051808303816000875af1158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd9190610ffc565b506109e7601c60000154600a60405180606001604052806027815260200161109560279139610b9e565b610a10601c60010154601460405180606001604052806027815260200161106e60279139610b9e565b50565b606060138054806020026020016040519081016040528092919081815260200182805480156101ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d1575050505050905090565b808214610b9a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610ae49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610b9a610beb565b5050565b818314610be6577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610bd4919061103e565b60405180910390a1610be68383610a73565b505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ce65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610c859291602001610faf565b60408051601f1981840301815290829052610c9f91610fe0565b6000604051808303816000865af19150503d8060008114610cdc576040519150601f19603f3d011682016040523d82523d6000602084013e610ce1565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b81811015610d385783516001600160a01b031683529284019291840191600101610d13565b50909695505050505050565b60005b83811015610d5f578181015183820152602001610d47565b83811115610d6e576000848401525b50505050565b60008151808452610d8c816020860160208601610d44565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610e5057603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610e3a57605f19898503018352610e28848651610d74565b948e01949350918d0191600101610e0c565b505050978a019794505091880191600101610dc7565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610f0457898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610eef5783516001600160e01b0319168252928b019260019290920191908b0190610ec5565b50978a01979550505091870191600101610e88565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f6857603f19888603018452610f56858351610d74565b94509285019290850190600101610f3a565b5092979650505050505050565b600181811c90821680610f8957607f821691505b602082108103610fa957634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610fd2816004850160208701610d44565b919091016004019392505050565b60008251610ff2818460208701610d44565b9190910192915050565b60006020828403121561100e57600080fd5b8151801515811461101e57600080fd5b9392505050565b60006020828403121561103757600080fd5b5051919050565b60408152600560408201526422b93937b960d91b606082015260806020820152600061101e6080830184610d7456fe736e617073686f742072657665727420666f7220736c6f74203120756e7375636365737366756c736e617073686f742072657665727420666f7220736c6f74203020756e7375636365737366756ca264697066735822122029d9ffc63858bc54a68e1655890ec6511d4194a7dea9f8465f0d9dede2fec4bf64736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSnapshotTestField

    syntax S2KtestZModSnapshotTestField ::= "stdstore" [symbol(), klabel(field_test%SnapshotTest_stdstore)]

    syntax S2KtestZModSnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_test%SnapshotTest_IS_TEST)]

    syntax S2KtestZModSnapshotTestField ::= "_failed" [symbol(), klabel(field_test%SnapshotTest__failed)]

    syntax S2KtestZModSnapshotTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%SnapshotTest_stdChainsInitialized)]

    syntax S2KtestZModSnapshotTestField ::= "chains" [symbol(), klabel(field_test%SnapshotTest_chains)]

    syntax S2KtestZModSnapshotTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%SnapshotTest_defaultRpcUrls)]

    syntax S2KtestZModSnapshotTestField ::= "idToAlias" [symbol(), klabel(field_test%SnapshotTest_idToAlias)]

    syntax S2KtestZModSnapshotTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%SnapshotTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSnapshotTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%SnapshotTest_gasMeteringOff)]

    syntax S2KtestZModSnapshotTestField ::= "_excludedContracts" [symbol(), klabel(field_test%SnapshotTest__excludedContracts)]

    syntax S2KtestZModSnapshotTestField ::= "_excludedSenders" [symbol(), klabel(field_test%SnapshotTest__excludedSenders)]

    syntax S2KtestZModSnapshotTestField ::= "_targetedContracts" [symbol(), klabel(field_test%SnapshotTest__targetedContracts)]

    syntax S2KtestZModSnapshotTestField ::= "_targetedSenders" [symbol(), klabel(field_test%SnapshotTest__targetedSenders)]

    syntax S2KtestZModSnapshotTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%SnapshotTest__excludedArtifacts)]

    syntax S2KtestZModSnapshotTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%SnapshotTest__targetedArtifacts)]

    syntax S2KtestZModSnapshotTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%SnapshotTest__targetedArtifactSelectors)]

    syntax S2KtestZModSnapshotTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%SnapshotTest__targetedSelectors)]

    syntax S2KtestZModSnapshotTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%SnapshotTest__targetedInterfaces)]

    syntax S2KtestZModSnapshotTestField ::= "store" [symbol(), klabel(field_test%SnapshotTest_store)]

    rule  ( #loc ( S2KtestZModSnapshotTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSnapshotTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSnapshotTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSnapshotTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSnapshotTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSnapshotTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSnapshotTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSnapshotTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSnapshotTest . _targetedInterfaces ) => 27 )


    rule  ( #loc ( S2KtestZModSnapshotTest . store ) => 28 )


    syntax Bytes ::= S2KtestZModSnapshotTestContract "." S2KtestZModSnapshotTestMethod [function(), symbol(), klabel(method_test%SnapshotTest)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KISZUndTEST_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KexcludeContracts_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KexcludeSenders_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2Kfailed_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KsetUp_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtargetArtifacts_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtargetContracts_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtargetInterfaces_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtargetSelectors_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtargetSenders_)]

    syntax S2KtestZModSnapshotTestMethod ::= "S2KtestSnapshot" "(" ")" [symbol(), klabel(method_test%SnapshotTest_S2KtestSnapshot_)]

    rule  ( S2KtestZModSnapshotTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSnapshotTest . S2KtestSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "setUp()" ) => 177362148 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testSnapshot()" ) => 3204135818 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdAssertions-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdAssertions" [symbol(), klabel(contract_lib%forge-std%src%StdAssertions)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsField

    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsField ::= "IS_TEST" [symbol(), klabel(field_lib%forge-std%src%StdAssertions_IS_TEST)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsField ::= "_failed" [symbol(), klabel(field_lib%forge-std%src%StdAssertions__failed)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . IS_TEST ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . _failed ) => 0 )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract "." S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod [function(), symbol(), klabel(method_lib%forge-std%src%StdAssertions)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdAssertions_S2KISZUndTEST_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdAssertions_S2Kfailed_)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "failed()" ) => 3124842406 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdChains-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdChainsContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdChains" [symbol(), klabel(contract_lib%forge-std%src%StdChains)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdChains ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdChains ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModStdChainsField

    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsField ::= "stdChainsInitialized" [symbol(), klabel(field_lib%forge-std%src%StdChains_stdChainsInitialized)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsField ::= "chains" [symbol(), klabel(field_lib%forge-std%src%StdChains_chains)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsField ::= "defaultRpcUrls" [symbol(), klabel(field_lib%forge-std%src%StdChains_defaultRpcUrls)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsField ::= "idToAlias" [symbol(), klabel(field_lib%forge-std%src%StdChains_idToAlias)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_lib%forge-std%src%StdChains_fallbackToDefaultRpcUrls)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdChains . stdChainsInitialized ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdChains . chains ) => 1 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdChains . defaultRpcUrls ) => 2 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdChains . idToAlias ) => 3 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdChains . fallbackToDefaultRpcUrls ) => 4 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdCheats-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdCheats" [symbol(), klabel(contract_lib%forge-std%src%StdCheats)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdCheats ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdCheats ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsField

    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsField ::= "gasMeteringOff" [symbol(), klabel(field_lib%forge-std%src%StdCheats_gasMeteringOff)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsField ::= "stdstore" [symbol(), klabel(field_lib%forge-std%src%StdCheats_stdstore)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdCheats . gasMeteringOff ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdCheats . stdstore ) => 1 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe" [symbol(), klabel(contract_lib%forge-std%src%StdCheatsSafe)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeField

    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeField ::= "gasMeteringOff" [symbol(), klabel(field_lib%forge-std%src%StdCheatsSafe_gasMeteringOff)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe . gasMeteringOff ) => 0 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdError-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdErrorContract

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdError" [symbol(), klabel(contract_lib%forge-std%src%stdError)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdError ) => #parseByteStack ( "0x730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063986c5f6811610070578063986c5f68146100d8578063b22dc54d146100e0578063b67689da146100e8578063d160e4de146100f0578063fa784a44146100f857600080fd5b806305ee8612146100a257806310332977146100c05780631de45560146100c85780638995290f146100d0575b600080fd5b6100aa610100565b6040516100b791906101cb565b60405180910390f35b6100aa61013b565b6100aa61014d565b6100aa61015f565b6100aa610171565b6100aa610183565b6100aa610195565b6100aa6101a7565b6100aa6101b9565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161010e565b6040516021602482015260440161010e565b6040516011602482015260440161010e565b6040516041602482015260440161010e565b6040516031602482015260440161010e565b6040516051602482015260440161010e565b6040516022602482015260440161010e565b6040516012602482015260440161010e565b600060208083528351808285015260005b818110156101f8578581018301518582016040015282016101dc565b8181111561020a576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220b50568a01aeb365651845e1555ca92e15fc0bf558cbecc588728960215d1a59c64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdError ) => #parseByteStack ( "0x61025661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063986c5f6811610070578063986c5f68146100d8578063b22dc54d146100e0578063b67689da146100e8578063d160e4de146100f0578063fa784a44146100f857600080fd5b806305ee8612146100a257806310332977146100c05780631de45560146100c85780638995290f146100d0575b600080fd5b6100aa610100565b6040516100b791906101cb565b60405180910390f35b6100aa61013b565b6100aa61014d565b6100aa61015f565b6100aa610171565b6100aa610183565b6100aa610195565b6100aa6101a7565b6100aa6101b9565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161010e565b6040516021602482015260440161010e565b6040516011602482015260440161010e565b6040516041602482015260440161010e565b6040516031602482015260440161010e565b6040516051602482015260440161010e565b6040516022602482015260440161010e565b6040516012602482015260440161010e565b600060208083528351808285015260005b818110156101f8578581018301518582016040015282016101dc565b8181111561020a576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220b50568a01aeb365651845e1555ca92e15fc0bf558cbecc588728960215d1a59c64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModstdErrorContract "." S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod [function(), symbol(), klabel(method_lib%forge-std%src%stdError)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KarithmeticError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KarithmeticError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KassertionError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KassertionError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KdivisionError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KdivisionError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KencodeStorageError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KencodeStorageError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KenumConversionError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KenumConversionError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KindexOOBError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KindexOOBError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KmemOverflowError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KmemOverflowError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KpopError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KpopError_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KzeroVarError" "(" ")" [symbol(), klabel(method_lib%forge-std%src%stdError_S2KzeroVarError_)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KarithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KassertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KdivisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KencodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KenumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KindexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KmemOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KpopError ( ) => #abiCallData ( "popError" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KzeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )


    rule  ( selector ( "arithmeticError()" ) => 2308253967 )


    rule  ( selector ( "assertionError()" ) => 271788407 )


    rule  ( selector ( "divisionError()" ) => 4202187332 )


    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )


    rule  ( selector ( "enumConversionError()" ) => 501503328 )


    rule  ( selector ( "indexOOBError()" ) => 99517970 )


    rule  ( selector ( "memOverflowError()" ) => 2557239144 )


    rule  ( selector ( "popError()" ) => 2989344077 )


    rule  ( selector ( "zeroVarError()" ) => 3061221850 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdInvariant-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdInvariant" [symbol(), klabel(contract_lib%forge-std%src%StdInvariant)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantField

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_excludedContracts" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__excludedContracts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_excludedSenders" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__excludedSenders)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_targetedContracts" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__targetedContracts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_targetedSenders" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__targetedSenders)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_excludedArtifacts" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__excludedArtifacts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_targetedArtifacts" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__targetedArtifacts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__targetedArtifactSelectors)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_targetedSelectors" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__targetedSelectors)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantField ::= "_targetedInterfaces" [symbol(), klabel(field_lib%forge-std%src%StdInvariant__targetedInterfaces)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _excludedContracts ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _excludedSenders ) => 1 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _targetedContracts ) => 2 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _targetedSenders ) => 3 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _excludedArtifacts ) => 4 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _targetedArtifacts ) => 5 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _targetedArtifactSelectors ) => 6 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _targetedSelectors ) => 7 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . _targetedInterfaces ) => 8 )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract "." S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod [function(), symbol(), klabel(method_lib%forge-std%src%StdInvariant)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KexcludeArtifacts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KexcludeContracts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KexcludeSenders_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KtargetArtifactSelectors_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KtargetArtifacts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KtargetContracts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KtargetInterfaces_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KtargetSelectors_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_lib%forge-std%src%StdInvariant_S2KtargetSenders_)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdJson-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdJsonContract

    syntax S2KlibZModforgeZSubstdZModsrcZModstdJsonContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdJson" [symbol(), klabel(contract_lib%forge-std%src%stdJson)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdJson ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220010187f2ede2c2847f5c7ccec8a4f0cad84cce45e0e902b5689a257bfa9b8c6564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdJson ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220010187f2ede2c2847f5c7ccec8a4f0cad84cce45e0e902b5689a257bfa9b8c6564736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdMath-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdMathContract

    syntax S2KlibZModforgeZSubstdZModsrcZModstdMathContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdMath" [symbol(), klabel(contract_lib%forge-std%src%stdMath)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdMath ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d5896cecc074b7a125dff1c77ff303e9e188764651777cf455720d281a08f2864736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdMath ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d5896cecc074b7a125dff1c77ff303e9e188764651777cf455720d281a08f2864736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdStorage-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdStorageContract

    syntax S2KlibZModforgeZSubstdZModsrcZModstdStorageContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdStorage" [symbol(), klabel(contract_lib%forge-std%src%stdStorage)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdStorage ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205df1b80e1a1bba287e06a003df91c9e5ae5ff1d835654a0856d5cd190329164f64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdStorage ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205df1b80e1a1bba287e06a003df91c9e5ae5ff1d835654a0856d5cd190329164f64736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdStorageSafeContract

    syntax S2KlibZModforgeZSubstdZModsrcZModstdStorageSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe" [symbol(), klabel(contract_lib%forge-std%src%stdStorageSafe)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122065f39e96706f37d3515cad7831545d1205b392c9485a955775eb44b2dcbff44664736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122065f39e96706f37d3515cad7831545d1205b392c9485a955775eb44b2dcbff44664736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdStyle-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdStyleContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdStyleContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdStyle" [symbol(), klabel(contract_lib%forge-std%src%StdStyle)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdStyle ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004793572f28c976bcae05812c67f8b17b11359518beb24e5f21822d1a304a52564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdStyle ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004793572f28c976bcae05812c67f8b17b11359518beb24e5f21822d1a304a52564736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdUtils-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdUtilsContract

    syntax S2KlibZModforgeZSubstdZModsrcZModStdUtilsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdUtils" [symbol(), klabel(contract_lib%forge-std%src%StdUtils)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdUtils ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdUtils ) => #parseByteStack ( "0x" ) )


endmodule

module S2KtestZModStore-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModStoreContract

    syntax S2KtestZModStoreContract ::= "S2KtestZModStore" [symbol(), klabel(contract_test%Store)]

    rule  ( #binRuntime ( S2KtestZModStore ) => #parseByteStack ( "0x6080604052600080fdfea26469706673582212209e7fd31b4176633aeaa66e39f264a2c1c3cd899a2121898d7e2a35927c11623964736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModStore ) => #parseByteStack ( "0x6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212209e7fd31b4176633aeaa66e39f264a2c1c3cd899a2121898d7e2a35927c11623964736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModStoreField

    syntax S2KtestZModStoreField ::= "testNumber" [symbol(), klabel(field_test%Store_testNumber)]

    rule  ( #loc ( S2KtestZModStore . testNumber ) => 0 )


endmodule

module S2KtestZModStoreTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModStoreTestContract

    syntax S2KtestZModStoreTestContract ::= "S2KtestZModStoreTest" [symbol(), klabel(contract_test%StoreTest)]

    rule  ( #binRuntime ( S2KtestZModStoreTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806385226c81116100b8578063b5508aa91161007c578063b5508aa9146101f3578063ba414fa6146101fb578063e20c9f7114610213578063e292f8b51461021b578063e92ca5bb14610223578063fa7626d41461022b57600080fd5b806385226c81146101be57806387a8a81b146101d357806389a99a74146101db578063916a17c6146101e35780639b716e86146101eb57600080fd5b80633e5e3c23116100ff5780633e5e3c23146101895780633f7286f41461019157806348088073146101995780635c2d302e146101a157806366d9a9a0146101a957600080fd5b806305f6ff371461013c57806309840bb5146101465780631ed7831c1461014e57806324007a261461016c5780632ade388014610174575b600080fd5b610144610238565b005b6101446102d8565b61015661041b565b604051610163919061108f565b60405180910390f35b61014461047d565b61017c610515565b604051610163919061110c565b610156610657565b6101566106b7565b610144610717565b610144610852565b6101b16108de565b60405161016391906111e7565b6101c66109c4565b604051610163919061129a565b610144610a94565b610144610b22565b6101b1610b64565b610144610c4a565b6101c6610cd2565b610203610da2565b6040519015158152602001610163565b610156610ecf565b610144610f2f565b610144610f5f565b6007546102039060ff1681565b604051737109709ecfa91a80626ff3989d68f67f5b1dd12d906108fc9060009081818181818888f15050604051600093506102c3925060008051602061157f833981519152915061029490606590601790600590602401611307565b60408051601f198184030181529190526020810180516001600160e01b03166370ca10bb60e01b179052611061565b905080607d146102d5576102d5611328565b50565b60006040516102e690611083565b604051809103906000f080158015610302573d6000803e3d6000fd5b50905060008051602061157f83398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b50506040516365bc948160e01b81526001600160a01b038416600482015260009250829150737109709ecfa91a80626ff3989d68f67f5b1dd12d906365bc9481906024016000604051808303816000875af11580156103c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f091908101906113ef565b91509150815160011461040557610405611328565b805160011461041657610416611328565b505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561047357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610455575b5050505050905090565b604051630667f9d760e41b81526065600482015260176024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063667f9d7090604401602060405180830381865afa1580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f89190611453565b5060006102c3606560405180602001604052806000815250611061565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561064e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156106375783829060005260206000200180546105aa9061146c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d69061146c565b80156106235780601f106105f857610100808354040283529160200191610623565b820191906000526020600020905b81548152906001019060200180831161060657829003601f168201915b50505050508152602001906001019061058b565b505050508152505081526020019060010190610539565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610455575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610455575050505050905090565b600060405161072590611083565b604051809103906000f080158015610741573d6000803e3d6000fd5b506040516370ca10bb60e01b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb90610783908490600090617a6990600401611307565b600060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b5050604051630667f9d760e41b81526001600160a01b03841660048201526000602482018190529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d7090604401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611453565b9050617a69811461084e5761084e611328565b5050565b6040516370ca10bb60e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb9061089090606590601790600590600401611307565b600060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b5050505060006102c3606560405180602001604052806000815250611061565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156109ac57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161096e5790505b50505050508152505081526020019060010190610902565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610a079061146c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a339061146c565b8015610a805780601f10610a5557610100808354040283529160200191610a80565b820191906000526020600020905b815481529060010190602001808311610a6357829003601f168201915b5050505050815260200190600101906109e8565b604051630667f9d760e41b81526064600482015260176024820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063667f9d7090604401602060405180830381865afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190611453565b905080156102d5576102d5611328565b604051600090610b519060008051602061157f8339815191529061029490606590601790600590602401611307565b905080610a41146102d5576102d5611328565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c3257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610bf45790505b50505050508152505081526020019060010190610b88565b604051737109709ecfa91a80626ff3989d68f67f5b1dd12d906108fc9060009081818181818888f150506040516065602482015260176044820152600093506102c3925060008051602061157f83398151915291506064015b60408051601f198184030181529190526020810180516001600160e01b0316630667f9d760e41b179052611061565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610d159061146c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d419061146c565b8015610d8e5780601f10610d6357610100808354040283529160200191610d8e565b820191906000526020600020905b815481529060010190602001808311610d7157829003601f168201915b505050505081526020019060010190610cf6565b600754600090610100900460ff1615610dc45750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610eca5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e52917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016114a6565b60408051601f1981840301815290829052610e6c916114d7565b6000604051808303816000865af19150503d8060008114610ea9576040519150601f19603f3d011682016040523d82523d6000602084013e610eae565b606091505b5091505080806020019051810190610ec691906114f3565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610455575050505050905090565b6040516065602482015260176044820152600090610b519060008051602061157f83398151915290606401610ca3565b6040516370ca10bb60e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb90610f9e90600090600390617a6990600401611307565b600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b5050604051630667f9d760e41b8152600060048201819052600360248301529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d7090604401602060405180830381865afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e9190611453565b9050617a6981146102d5576102d5611328565b6000808260200183515a600080838560008b86f1505a90039695505050505050565b60628061151d83390190565b6020808252825182820181905260009190848201906040850190845b818110156110d05783516001600160a01b0316835292840192918401916001016110ab565b50909695505050505050565b60005b838110156110f75781810151838201526020016110df565b83811115611106576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111da57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156111c357898403605f19018352845180518086526111a4818e88018f85016110dc565b958c0195601f01601f1916949094018b019350918a019160010161117d565b509197505050938601935090850190600101611133565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561128b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112765783516001600160e01b0319168252928b019260019290920191908b019061124c565b50978a0197955050509187019160010161120f565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111da57878503603f19018452815180518087526112e8818989018a85016110dc565b601f01601f1916959095018601945092850192908501906001016112c1565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261136557600080fd5b8151602067ffffffffffffffff808311156113825761138261133e565b8260051b604051601f19603f830116810181811084821117156113a7576113a761133e565b6040529384528581018301938381019250878511156113c557600080fd5b83870191505b848210156113e4578151835291830191908301906113cb565b979650505050505050565b6000806040838503121561140257600080fd5b825167ffffffffffffffff8082111561141a57600080fd5b61142686838701611354565b9350602085015191508082111561143c57600080fd5b5061144985828601611354565b9150509250929050565b60006020828403121561146557600080fd5b5051919050565b600181811c9082168061148057607f821691505b6020821081036114a057634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906114c98160048501602087016110dc565b919091016004019392505050565b600082516114e98184602087016110dc565b9190910192915050565b60006020828403121561150557600080fd5b8151801515811461151557600080fd5b939250505056fe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212209e7fd31b4176633aeaa66e39f264a2c1c3cd899a2121898d7e2a35927c11623964736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220e484cff4835fa27cddcacec2f28d2d07f82febb5d26b20c1da1136b745adae8564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModStoreTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506115d48061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806385226c81116100b8578063b5508aa91161007c578063b5508aa9146101f3578063ba414fa6146101fb578063e20c9f7114610213578063e292f8b51461021b578063e92ca5bb14610223578063fa7626d41461022b57600080fd5b806385226c81146101be57806387a8a81b146101d357806389a99a74146101db578063916a17c6146101e35780639b716e86146101eb57600080fd5b80633e5e3c23116100ff5780633e5e3c23146101895780633f7286f41461019157806348088073146101995780635c2d302e146101a157806366d9a9a0146101a957600080fd5b806305f6ff371461013c57806309840bb5146101465780631ed7831c1461014e57806324007a261461016c5780632ade388014610174575b600080fd5b610144610238565b005b6101446102d8565b61015661041b565b604051610163919061108f565b60405180910390f35b61014461047d565b61017c610515565b604051610163919061110c565b610156610657565b6101566106b7565b610144610717565b610144610852565b6101b16108de565b60405161016391906111e7565b6101c66109c4565b604051610163919061129a565b610144610a94565b610144610b22565b6101b1610b64565b610144610c4a565b6101c6610cd2565b610203610da2565b6040519015158152602001610163565b610156610ecf565b610144610f2f565b610144610f5f565b6007546102039060ff1681565b604051737109709ecfa91a80626ff3989d68f67f5b1dd12d906108fc9060009081818181818888f15050604051600093506102c3925060008051602061157f833981519152915061029490606590601790600590602401611307565b60408051601f198184030181529190526020810180516001600160e01b03166370ca10bb60e01b179052611061565b905080607d146102d5576102d5611328565b50565b60006040516102e690611083565b604051809103906000f080158015610302573d6000803e3d6000fd5b50905060008051602061157f83398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b50506040516365bc948160e01b81526001600160a01b038416600482015260009250829150737109709ecfa91a80626ff3989d68f67f5b1dd12d906365bc9481906024016000604051808303816000875af11580156103c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f091908101906113ef565b91509150815160011461040557610405611328565b805160011461041657610416611328565b505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561047357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610455575b5050505050905090565b604051630667f9d760e41b81526065600482015260176024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063667f9d7090604401602060405180830381865afa1580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f89190611453565b5060006102c3606560405180602001604052806000815250611061565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561064e57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156106375783829060005260206000200180546105aa9061146c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d69061146c565b80156106235780601f106105f857610100808354040283529160200191610623565b820191906000526020600020905b81548152906001019060200180831161060657829003601f168201915b50505050508152602001906001019061058b565b505050508152505081526020019060010190610539565b50505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610455575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610455575050505050905090565b600060405161072590611083565b604051809103906000f080158015610741573d6000803e3d6000fd5b506040516370ca10bb60e01b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb90610783908490600090617a6990600401611307565b600060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b5050604051630667f9d760e41b81526001600160a01b03841660048201526000602482018190529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d7090604401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611453565b9050617a69811461084e5761084e611328565b5050565b6040516370ca10bb60e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb9061089090606590601790600590600401611307565b600060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b5050505060006102c3606560405180602001604052806000815250611061565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156109ac57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161096e5790505b50505050508152505081526020019060010190610902565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610a079061146c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a339061146c565b8015610a805780601f10610a5557610100808354040283529160200191610a80565b820191906000526020600020905b815481529060010190602001808311610a6357829003601f168201915b5050505050815260200190600101906109e8565b604051630667f9d760e41b81526064600482015260176024820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063667f9d7090604401602060405180830381865afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190611453565b905080156102d5576102d5611328565b604051600090610b519060008051602061157f8339815191529061029490606590601790600590602401611307565b905080610a41146102d5576102d5611328565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561064e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c3257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610bf45790505b50505050508152505081526020019060010190610b88565b604051737109709ecfa91a80626ff3989d68f67f5b1dd12d906108fc9060009081818181818888f150506040516065602482015260176044820152600093506102c3925060008051602061157f83398151915291506064015b60408051601f198184030181529190526020810180516001600160e01b0316630667f9d760e41b179052611061565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561064e578382906000526020600020018054610d159061146c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d419061146c565b8015610d8e5780601f10610d6357610100808354040283529160200191610d8e565b820191906000526020600020905b815481529060010190602001808311610d7157829003601f168201915b505050505081526020019060010190610cf6565b600754600090610100900460ff1615610dc45750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610eca5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e52917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016114a6565b60408051601f1981840301815290829052610e6c916114d7565b6000604051808303816000865af19150503d8060008114610ea9576040519150601f19603f3d011682016040523d82523d6000602084013e610eae565b606091505b5091505080806020019051810190610ec691906114f3565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610455575050505050905090565b6040516065602482015260176044820152600090610b519060008051602061157f83398151915290606401610ca3565b6040516370ca10bb60e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb90610f9e90600090600390617a6990600401611307565b600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b5050604051630667f9d760e41b8152600060048201819052600360248301529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d7090604401602060405180830381865afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e9190611453565b9050617a6981146102d5576102d5611328565b6000808260200183515a600080838560008b86f1505a90039695505050505050565b60628061151d83390190565b6020808252825182820181905260009190848201906040850190845b818110156110d05783516001600160a01b0316835292840192918401916001016110ab565b50909695505050505050565b60005b838110156110f75781810151838201526020016110df565b83811115611106576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111da57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156111c357898403605f19018352845180518086526111a4818e88018f85016110dc565b958c0195601f01601f1916949094018b019350918a019160010161117d565b509197505050938601935090850190600101611133565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561128b57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156112765783516001600160e01b0319168252928b019260019290920191908b019061124c565b50978a0197955050509187019160010161120f565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111da57878503603f19018452815180518087526112e8818989018a85016110dc565b601f01601f1916959095018601945092850192908501906001016112c1565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261136557600080fd5b8151602067ffffffffffffffff808311156113825761138261133e565b8260051b604051601f19603f830116810181811084821117156113a7576113a761133e565b6040529384528581018301938381019250878511156113c557600080fd5b83870191505b848210156113e4578151835291830191908301906113cb565b979650505050505050565b6000806040838503121561140257600080fd5b825167ffffffffffffffff8082111561141a57600080fd5b61142686838701611354565b9350602085015191508082111561143c57600080fd5b5061144985828601611354565b9150509250929050565b60006020828403121561146557600080fd5b5051919050565b600181811c9082168061148057607f821691505b6020821081036114a057634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906114c98160048501602087016110dc565b919091016004019392505050565b600082516114e98184602087016110dc565b9190910192915050565b60006020828403121561150557600080fd5b8151801515811461151557600080fd5b939250505056fe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212209e7fd31b4176633aeaa66e39f264a2c1c3cd899a2121898d7e2a35927c11623964736f6c634300080d0033885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220e484cff4835fa27cddcacec2f28d2d07f82febb5d26b20c1da1136b745adae8564736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModStoreTestField

    syntax S2KtestZModStoreTestField ::= "stdstore" [symbol(), klabel(field_test%StoreTest_stdstore)]

    syntax S2KtestZModStoreTestField ::= "IS_TEST" [symbol(), klabel(field_test%StoreTest_IS_TEST)]

    syntax S2KtestZModStoreTestField ::= "_failed" [symbol(), klabel(field_test%StoreTest__failed)]

    syntax S2KtestZModStoreTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%StoreTest_stdChainsInitialized)]

    syntax S2KtestZModStoreTestField ::= "chains" [symbol(), klabel(field_test%StoreTest_chains)]

    syntax S2KtestZModStoreTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%StoreTest_defaultRpcUrls)]

    syntax S2KtestZModStoreTestField ::= "idToAlias" [symbol(), klabel(field_test%StoreTest_idToAlias)]

    syntax S2KtestZModStoreTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%StoreTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModStoreTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%StoreTest_gasMeteringOff)]

    syntax S2KtestZModStoreTestField ::= "_excludedContracts" [symbol(), klabel(field_test%StoreTest__excludedContracts)]

    syntax S2KtestZModStoreTestField ::= "_excludedSenders" [symbol(), klabel(field_test%StoreTest__excludedSenders)]

    syntax S2KtestZModStoreTestField ::= "_targetedContracts" [symbol(), klabel(field_test%StoreTest__targetedContracts)]

    syntax S2KtestZModStoreTestField ::= "_targetedSenders" [symbol(), klabel(field_test%StoreTest__targetedSenders)]

    syntax S2KtestZModStoreTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%StoreTest__excludedArtifacts)]

    syntax S2KtestZModStoreTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%StoreTest__targetedArtifacts)]

    syntax S2KtestZModStoreTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%StoreTest__targetedArtifactSelectors)]

    syntax S2KtestZModStoreTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%StoreTest__targetedSelectors)]

    syntax S2KtestZModStoreTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%StoreTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModStoreTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModStoreTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModStoreTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModStoreTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModStoreTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModStoreTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModStoreTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModStoreTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModStoreTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModStoreTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModStoreTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModStoreTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModStoreTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModStoreTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModStoreTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModStoreTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModStoreTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModStoreTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModStoreTestContract "." S2KtestZModStoreTestMethod [function(), symbol(), klabel(method_test%StoreTest)]

    syntax S2KtestZModStoreTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KISZUndTEST_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KexcludeContracts_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KexcludeSenders_)]

    syntax S2KtestZModStoreTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%StoreTest_S2Kfailed_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtargetArtifacts_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtargetContracts_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtargetInterfaces_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtargetSelectors_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtargetSenders_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestAccesses" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestAccesses_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasLoadColdVM" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestGasLoadColdVM_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasLoadWarmUp" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestGasLoadWarmUp_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasLoadWarmVM" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestGasLoadWarmVM_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasStoreColdVM" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestGasStoreColdVM_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasStoreWarmUp" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestGasStoreWarmUp_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasStoreWarmVM" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestGasStoreWarmVM_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestLoadNonExistent" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestLoadNonExistent_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestStoreLoad" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestStoreLoad_)]

    syntax S2KtestZModStoreTestMethod ::= "S2KtestStoreLoadNonExistent" "(" ")" [symbol(), klabel(method_test%StoreTest_S2KtestStoreLoadNonExistent_)]

    rule  ( S2KtestZModStoreTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestGasLoadColdVM ( ) => #abiCallData ( "testGasLoadColdVM" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestGasLoadWarmUp ( ) => #abiCallData ( "testGasLoadWarmUp" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestGasLoadWarmVM ( ) => #abiCallData ( "testGasLoadWarmVM" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestGasStoreColdVM ( ) => #abiCallData ( "testGasStoreColdVM" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestGasStoreWarmUp ( ) => #abiCallData ( "testGasStoreWarmUp" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestGasStoreWarmVM ( ) => #abiCallData ( "testGasStoreWarmVM" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestLoadNonExistent ( ) => #abiCallData ( "testLoadNonExistent" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )


    rule  ( S2KtestZModStoreTest . S2KtestStoreLoadNonExistent ( ) => #abiCallData ( "testStoreLoadNonExistent" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testAccesses()" ) => 159648693 )


    rule  ( selector ( "testGasLoadColdVM()" ) => 3801282741 )


    rule  ( selector ( "testGasLoadWarmUp()" ) => 604011046 )


    rule  ( selector ( "testGasLoadWarmVM()" ) => 2607902342 )


    rule  ( selector ( "testGasStoreColdVM()" ) => 2309593716 )


    rule  ( selector ( "testGasStoreWarmUp()" ) => 1546465326 )


    rule  ( selector ( "testGasStoreWarmVM()" ) => 100073271 )


    rule  ( selector ( "testLoadNonExistent()" ) => 2275977243 )


    rule  ( selector ( "testStoreLoad()" ) => 1208516723 )


    rule  ( selector ( "testStoreLoadNonExistent()" ) => 3912017339 )


endmodule

module S2KtestZModSymbolicStorageTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSymbolicStorageTestContract

    syntax S2KtestZModSymbolicStorageTestContract ::= "S2KtestZModSymbolicStorageTest" [symbol(), klabel(contract_test%SymbolicStorageTest)]

    rule  ( #binRuntime ( S2KtestZModSymbolicStorageTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063916a17c611610097578063ba414fa611610066578063ba414fa6146101b2578063d6a2ec76146101ca578063e20c9f7114610209578063fa7626d41461021157600080fd5b8063916a17c61461017c5780639612794614610184578063acd6964014610197578063b5508aa9146101aa57600080fd5b80633e5e3c23116100d35780633e5e3c23146101425780633f7286f41461014a57806366d9a9a01461015257806385226c811461016757600080fd5b80631ed7831c146100fa5780632ade38801461011857806330f6beb51461012d575b600080fd5b61010261021e565b60405161010f9190610dd3565b60405180910390f35b610120610280565b60405161010f9190610e50565b61014061013b366004610f2b565b6103c2565b005b6101026104e4565b610102610544565b61015a6105a4565b60405161010f9190610f44565b61016f61068a565b60405161010f9190610ff7565b61015a61075a565b610140610192366004610f2b565b610840565b6101406101a5366004610f2b565b6108ce565b61016f61093c565b6101ba610a0c565b604051901515815260200161010f565b6101f17f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161010f565b610102610b39565b6007546101ba9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561027657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610258575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103b957600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103a257838290600052602060002001805461031590611064565b80601f016020809104026020016040519081016040528092919081815260200182805461034190611064565b801561038e5780601f106103635761010080835404028352916020019161038e565b820191906000526020600020905b81548152906001019060200180831161037157829003601f168201915b5050505050815260200190600101906102f6565b5050505081525050815260200190600101906102a4565b50505050905090565b6040516316f02cd760e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae906024015b600060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b5050604051630667f9d760e41b81526001600160a01b03841660048201526024810185905260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d7090604401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c4919061109e565b905060008190036104d457600080fd5b6104df816000610b99565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610276576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610258575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610276576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610258575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103b95760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561067257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106345790505b505050505081525050815260200190600101906105c8565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103b95783829060005260206000200180546106cd90611064565b80601f01602080910402602001604051908101604052809291908181526020018280546106f990611064565b80156107465780601f1061071b57610100808354040283529160200191610746565b820191906000526020600020905b81548152906001019060200180831161072957829003601f168201915b5050505050815260200190600101906106ae565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103b95760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561082857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107ea5790505b5050505050815250508152602001906001019061077e565b604051630667f9d760e41b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190526024820183905260009163667f9d7090604401602060405180830381865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd919061109e565b90506108ca816000610b99565b5050565b60006040516108dc90610dc7565b604051809103906000f0801580156108f8573d6000803e3d6000fd5b506040516316f02cd760e11b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae9060240161040c565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103b957838290600052602060002001805461097f90611064565b80601f01602080910402602001604051908101604052809291908181526020018280546109ab90611064565b80156109f85780601f106109cd576101008083540402835291602001916109f8565b820191906000526020600020905b8154815290600101906020018083116109db57829003601f168201915b505050505081526020019060010190610960565b600754600090610100900460ff1615610a2e5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b345760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610abc917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016110b7565b60408051601f1981840301815290829052610ad6916110e8565b6000604051808303816000865af19150503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091505080806020019051810190610b309190611104565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610276576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610258575050505050905090565b8082146108ca577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c0a9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16108ca737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610db65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d5592916020016110b7565b60408051601f1981840301815290829052610d6f916110e8565b6000604051808303816000865af19150503d8060008114610dac576040519150601f19603f3d011682016040523d82523d6000602084013e610db1565b606091505b505050505b6007805461ff001916610100179055565b60628061112e83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e145783516001600160a01b031683529284019291840191600101610def565b50909695505050505050565b60005b83811015610e3b578181015183820152602001610e23565b83811115610e4a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f1e57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f0757898403605f1901835284518051808652610ee8818e88018f8501610e20565b958c0195601f01601f1916949094018b019350918a0191600101610ec1565b509197505050938601935090850190600101610e77565b5092979650505050505050565b600060208284031215610f3d57600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610fe857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610fd35783516001600160e01b0319168252928b019260019290920191908b0190610fa9565b50978a01979550505091870191600101610f6c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f1e57878503603f1901845281518051808752611045818989018a8501610e20565b601f01601f19169590950186019450928501929085019060010161101e565b600181811c9082168061107857607f821691505b60208210810361109857634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110b057600080fd5b5051919050565b6001600160e01b03198316815281516000906110da816004850160208701610e20565b919091016004019392505050565b600082516110fa818460208701610e20565b9190910192915050565b60006020828403121561111657600080fd5b8151801515811461112657600080fd5b939250505056fe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212203925fa6da305bfbf9a734a1d68ca7b46b4fd50dc953f041b395bc5c61cb0ddf464736f6c634300080d0033a2646970667358221220432c8a0f9723ee58f9066ebd98b1fd50d373cce99678177b6aa0e5b7b74dd53764736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSymbolicStorageTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506111c58061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063916a17c611610097578063ba414fa611610066578063ba414fa6146101b2578063d6a2ec76146101ca578063e20c9f7114610209578063fa7626d41461021157600080fd5b8063916a17c61461017c5780639612794614610184578063acd6964014610197578063b5508aa9146101aa57600080fd5b80633e5e3c23116100d35780633e5e3c23146101425780633f7286f41461014a57806366d9a9a01461015257806385226c811461016757600080fd5b80631ed7831c146100fa5780632ade38801461011857806330f6beb51461012d575b600080fd5b61010261021e565b60405161010f9190610dd3565b60405180910390f35b610120610280565b60405161010f9190610e50565b61014061013b366004610f2b565b6103c2565b005b6101026104e4565b610102610544565b61015a6105a4565b60405161010f9190610f44565b61016f61068a565b60405161010f9190610ff7565b61015a61075a565b610140610192366004610f2b565b610840565b6101406101a5366004610f2b565b6108ce565b61016f61093c565b6101ba610a0c565b604051901515815260200161010f565b6101f17f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200161010f565b610102610b39565b6007546101ba9060ff1681565b6060601480548060200260200160405190810160405280929190818152602001828054801561027657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610258575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103b957600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103a257838290600052602060002001805461031590611064565b80601f016020809104026020016040519081016040528092919081815260200182805461034190611064565b801561038e5780601f106103635761010080835404028352916020019161038e565b820191906000526020600020905b81548152906001019060200180831161037157829003601f168201915b5050505050815260200190600101906102f6565b5050505081525050815260200190600101906102a4565b50505050905090565b6040516316f02cd760e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae906024015b600060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b5050604051630667f9d760e41b81526001600160a01b03841660048201526024810185905260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d7090604401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c4919061109e565b905060008190036104d457600080fd5b6104df816000610b99565b505050565b60606016805480602002602001604051908101604052809291908181526020018280548015610276576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610258575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610276576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610258575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156103b95760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561067257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106345790505b505050505081525050815260200190600101906105c8565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156103b95783829060005260206000200180546106cd90611064565b80601f01602080910402602001604051908101604052809291908181526020018280546106f990611064565b80156107465780601f1061071b57610100808354040283529160200191610746565b820191906000526020600020905b81548152906001019060200180831161072957829003601f168201915b5050505050815260200190600101906106ae565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156103b95760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561082857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107ea5790505b5050505050815250508152602001906001019061077e565b604051630667f9d760e41b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190526024820183905260009163667f9d7090604401602060405180830381865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd919061109e565b90506108ca816000610b99565b5050565b60006040516108dc90610dc7565b604051809103906000f0801580156108f8573d6000803e3d6000fd5b506040516316f02cd760e11b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90632de059ae9060240161040c565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156103b957838290600052602060002001805461097f90611064565b80601f01602080910402602001604051908101604052809291908181526020018280546109ab90611064565b80156109f85780601f106109cd576101008083540402835291602001916109f8565b820191906000526020600020905b8154815290600101906020018083116109db57829003601f168201915b505050505081526020019060010190610960565b600754600090610100900460ff1615610a2e5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b345760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610abc917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016110b7565b60408051601f1981840301815290829052610ad6916110e8565b6000604051808303816000865af19150503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091505080806020019051810190610b309190611104565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610276576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610258575050505050905090565b8082146108ca577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c0a9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16108ca737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610db65760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d5592916020016110b7565b60408051601f1981840301815290829052610d6f916110e8565b6000604051808303816000865af19150503d8060008114610dac576040519150601f19603f3d011682016040523d82523d6000602084013e610db1565b606091505b505050505b6007805461ff001916610100179055565b60628061112e83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e145783516001600160a01b031683529284019291840191600101610def565b50909695505050505050565b60005b83811015610e3b578181015183820152602001610e23565b83811115610e4a576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f1e57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f0757898403605f1901835284518051808652610ee8818e88018f8501610e20565b958c0195601f01601f1916949094018b019350918a0191600101610ec1565b509197505050938601935090850190600101610e77565b5092979650505050505050565b600060208284031215610f3d57600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610fe857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610fd35783516001600160e01b0319168252928b019260019290920191908b0190610fa9565b50978a01979550505091870191600101610f6c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f1e57878503603f1901845281518051808752611045818989018a8501610e20565b601f01601f19169590950186019450928501929085019060010161101e565b600181811c9082168061107857607f821691505b60208210810361109857634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110b057600080fd5b5051919050565b6001600160e01b03198316815281516000906110da816004850160208701610e20565b919091016004019392505050565b600082516110fa818460208701610e20565b9190910192915050565b60006020828403121561111657600080fd5b8151801515811461112657600080fd5b939250505056fe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212203925fa6da305bfbf9a734a1d68ca7b46b4fd50dc953f041b395bc5c61cb0ddf464736f6c634300080d0033a2646970667358221220432c8a0f9723ee58f9066ebd98b1fd50d373cce99678177b6aa0e5b7b74dd53764736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSymbolicStorageTestField

    syntax S2KtestZModSymbolicStorageTestField ::= "stdstore" [symbol(), klabel(field_test%SymbolicStorageTest_stdstore)]

    syntax S2KtestZModSymbolicStorageTestField ::= "IS_TEST" [symbol(), klabel(field_test%SymbolicStorageTest_IS_TEST)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_failed" [symbol(), klabel(field_test%SymbolicStorageTest__failed)]

    syntax S2KtestZModSymbolicStorageTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%SymbolicStorageTest_stdChainsInitialized)]

    syntax S2KtestZModSymbolicStorageTestField ::= "chains" [symbol(), klabel(field_test%SymbolicStorageTest_chains)]

    syntax S2KtestZModSymbolicStorageTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%SymbolicStorageTest_defaultRpcUrls)]

    syntax S2KtestZModSymbolicStorageTestField ::= "idToAlias" [symbol(), klabel(field_test%SymbolicStorageTest_idToAlias)]

    syntax S2KtestZModSymbolicStorageTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%SymbolicStorageTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModSymbolicStorageTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%SymbolicStorageTest_gasMeteringOff)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_excludedContracts" [symbol(), klabel(field_test%SymbolicStorageTest__excludedContracts)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_excludedSenders" [symbol(), klabel(field_test%SymbolicStorageTest__excludedSenders)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_targetedContracts" [symbol(), klabel(field_test%SymbolicStorageTest__targetedContracts)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_targetedSenders" [symbol(), klabel(field_test%SymbolicStorageTest__targetedSenders)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%SymbolicStorageTest__excludedArtifacts)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%SymbolicStorageTest__targetedArtifacts)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%SymbolicStorageTest__targetedArtifactSelectors)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%SymbolicStorageTest__targetedSelectors)]

    syntax S2KtestZModSymbolicStorageTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%SymbolicStorageTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModSymbolicStorageTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModSymbolicStorageTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModSymbolicStorageTestContract "." S2KtestZModSymbolicStorageTestMethod [function(), symbol(), klabel(method_test%SymbolicStorageTest)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KISZUndTEST_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KexcludeContracts_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KexcludeSenders_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2Kfailed_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2Kkevm_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtargetArtifacts_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtargetContracts_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtargetInterfaces_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtargetSelectors_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtargetSenders_)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtestEmptyInitialStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtestEmptyInitialStorage_uint256)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtestFailZUndSymbolicStorage_uint256)]

    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%SymbolicStorageTest_S2KtestFailZUndSymbolicStorage1_uint256)]

    rule  ( S2KtestZModSymbolicStorageTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtestEmptyInitialStorage ( V0_slot : uint256 ) => #abiCallData ( "testEmptyInitialStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtestFailZUndSymbolicStorage ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )


    rule  ( S2KtestZModSymbolicStorageTest . S2KtestFailZUndSymbolicStorage1 ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage1" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "kevm()" ) => 3601001590 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testEmptyInitialStorage(uint256)" ) => 2517793094 )


    rule  ( selector ( "testFail_SymbolicStorage(uint256)" ) => 821477045 )


    rule  ( selector ( "testFail_SymbolicStorage1(uint256)" ) => 2899744320 )


endmodule

module S2KtestZModSymbolicStore-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModSymbolicStoreContract

    syntax S2KtestZModSymbolicStoreContract ::= "S2KtestZModSymbolicStore" [symbol(), klabel(contract_test%SymbolicStore)]

    rule  ( #binRuntime ( S2KtestZModSymbolicStore ) => #parseByteStack ( "0x6080604052600080fdfea26469706673582212203925fa6da305bfbf9a734a1d68ca7b46b4fd50dc953f041b395bc5c61cb0ddf464736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModSymbolicStore ) => #parseByteStack ( "0x6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212203925fa6da305bfbf9a734a1d68ca7b46b4fd50dc953f041b395bc5c61cb0ddf464736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModSymbolicStoreField

    syntax S2KtestZModSymbolicStoreField ::= "testNumber" [symbol(), klabel(field_test%SymbolicStore_testNumber)]

    rule  ( #loc ( S2KtestZModSymbolicStore . testNumber ) => 0 )


endmodule

module S2KsrcZModTestNumber-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModTestNumberContract

    syntax S2KsrcZModTestNumberContract ::= "S2KsrcZModTestNumber" [symbol(), klabel(contract_src%TestNumber)]

    rule  ( #binRuntime ( S2KsrcZModTestNumber ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModTestNumber ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea26469706673582212208e3ab382ba3ec7a4fe8b60fc95093981bce0a187268241ec35637ba9b849504a64736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModTestNumberField

    syntax S2KsrcZModTestNumberField ::= "IS_TEST" [symbol(), klabel(field_src%TestNumber_IS_TEST)]

    syntax S2KsrcZModTestNumberField ::= "_failed" [symbol(), klabel(field_src%TestNumber__failed)]

    syntax S2KsrcZModTestNumberField ::= "testNumber" [symbol(), klabel(field_src%TestNumber_testNumber)]

    rule  ( #loc ( S2KsrcZModTestNumber . IS_TEST ) => 0 )


    rule  ( #loc ( S2KsrcZModTestNumber . _failed ) => 0 )


    rule  ( #loc ( S2KsrcZModTestNumber . testNumber ) => 1 )


    syntax Bytes ::= S2KsrcZModTestNumberContract "." S2KsrcZModTestNumberMethod [function(), symbol(), klabel(method_src%TestNumber)]

    syntax S2KsrcZModTestNumberMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_src%TestNumber_S2KISZUndTEST_)]

    syntax S2KsrcZModTestNumberMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_src%TestNumber_S2Kfailed_)]

    syntax S2KsrcZModTestNumberMethod ::= "S2Kt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_src%TestNumber_S2Kt_uint256)]

    syntax S2KsrcZModTestNumberMethod ::= "S2KtestNumber" "(" ")" [symbol(), klabel(method_src%TestNumber_S2KtestNumber_)]

    rule  ( S2KsrcZModTestNumber . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KsrcZModTestNumber . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KsrcZModTestNumber . S2Kt ( V0_a : uint256 ) => #abiCallData ( "t" , #uint256 ( V0_a ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_a )


    rule  ( S2KsrcZModTestNumber . S2KtestNumber ( ) => #abiCallData ( "testNumber" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "t(uint256)" ) => 2950864753 )


    rule  ( selector ( "testNumber()" ) => 219771635 )


endmodule

module S2KtestZModToStringTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModToStringTestContract

    syntax S2KtestZModToStringTestContract ::= "S2KtestZModToStringTest" [symbol(), klabel(contract_test%ToStringTest)]

    rule  ( #binRuntime ( S2KtestZModToStringTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806353538af9116100a2578063b5508aa911610071578063b5508aa9146101af578063ba414fa6146101b7578063e20c9f71146101cf578063f0cb13fb146101d7578063fa7626d4146101df57600080fd5b806353538af91461017557806366d9a9a01461017d57806385226c8114610192578063916a17c6146101a757600080fd5b8063302ab09d116100de578063302ab09d146101555780633e5e3c231461015d5780633f7286f414610165578063416c8c831461016d57600080fd5b806305e65172146101105780630c35d2ac1461011a5780631ed7831c146101225780632ade388014610140575b600080fd5b6101186101ec565b005b610118610297565b61012a610338565b6040516101379190611046565b60405180910390f35b61014861039a565b60405161013791906110ef565b6101186104dc565b61012a610591565b61012a6105f1565b610118610651565b610118610798565b610185610864565b60405161013791906111af565b61019a61094a565b6040516101379190611262565b610185610a1a565b61019a610b00565b6101bf610bd0565b6040519015158152602001610137565b61012a610cfd565b610118610d5d565b6007546101bf9060ff1681565b60405163348051d760e11b81526104d26004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae90602401600060405180830381865afa158015610243573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026b91908101906112da565b9050610293604051806040016040528060048152602001630c4c8ccd60e21b81525082610e02565b5050565b604051631623433d60e31b8152600060048201819052908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b11a19e890602401600060405180830381865afa1580156102ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031491908101906112da565b90506102936040518060800160405280604281526020016114dd6042913982610e02565b6060601480548060200260200160405190810160405280929190818152602001828054801561039057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610372575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156104d357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104bc57838290600052602060002001805461042f90611387565b80601f016020809104026020016040519081016040528092919081815260200182805461045b90611387565b80156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b505050505081526020019060010190610410565b5050505081525050815260200190600101906103be565b50505050905090565b604051632b65311f60e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e90602401600060405180830381865afa158015610545573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056d91908101906112da565b90506102936040518060600160405280602a815260200161151f602a913982610e02565b60606016805480602002602001604051908101604052809291908181526020018280548015610390576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610372575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610390576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610372575050505050905090565b6040516338ee73ed60e11b815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da90602401600060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106cc91908101906112da565b90506106f4604051806040016040528060048152602001637472756560e01b81525082610e02565b6040516338ee73ed60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da90602401600060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261076c91908101906112da565b90506107956040518060400160405280600581526020016466616c736560d81b81525082610e02565b50565b60408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516371aad10d60e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371aad10d906107fb9085906004016113c1565b600060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261084091908101906112da565b90506102936040518060600160405280602a81526020016114b3602a913982610e02565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104d35760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561093257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108f45790505b50505050508152505081526020019060010190610888565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104d357838290600052602060002001805461098d90611387565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990611387565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b50505050508152602001906001019061096e565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104d35760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610ae857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610aaa5790505b50505050508152505081526020019060010190610a3e565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104d3578382906000526020600020018054610b4390611387565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6f90611387565b8015610bbc5780601f10610b9157610100808354040283529160200191610bbc565b820191906000526020600020905b815481529060010190602001808311610b9f57829003601f168201915b505050505081526020019060010190610b24565b600754600090610100900460ff1615610bf25750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610cf85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610c80917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113db565b60408051601f1981840301815290829052610c9a9161140c565b6000604051808303816000865af19150503d8060008114610cd7576040519150601f19603f3d011682016040523d82523d6000602084013e610cdc565b606091505b5091505080806020019051810190610cf49190611428565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610390576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610372575050505050905090565b604051635191620760e11b81526104d1196004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a322c40e90602401600060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ddd91908101906112da565b9050610293604051806040016040528060058152602001640b4c4c8ccd60da1b815250825b80604051602001610e13919061140c565b6040516020818303038152906040528051906020012082604051602001610e3a919061140c565b6040516020818303038152906040528051906020012014610293577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610ec19060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382604051610ef8919061144a565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610f2f919061147e565b60405180910390a1610293737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110355760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610fd492916020016113db565b60408051601f1981840301815290829052610fee9161140c565b6000604051808303816000865af19150503d806000811461102b576040519150601f19603f3d011682016040523d82523d6000602084013e611030565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156110875783516001600160a01b031683529284019291840191600101611062565b50909695505050505050565b60005b838110156110ae578181015183820152602001611096565b838111156110bd576000848401525b50505050565b600081518084526110db816020860160208601611093565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561119f57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561118957605f198985030183526111778486516110c3565b948e01949350918d019160010161115b565b505050978a019794505091880191600101611116565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561125357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561123e5783516001600160e01b0319168252928b019260019290920191908b0190611214565b50978a019795505050918701916001016111d7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112b757603f198886030184526112a58583516110c3565b94509285019290850190600101611289565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156112ec57600080fd5b815167ffffffffffffffff8082111561130457600080fd5b818401915084601f83011261131857600080fd5b81518181111561132a5761132a6112c4565b604051601f8201601f19908116603f01168101908382118183101715611352576113526112c4565b8160405282815287602084870101111561136b57600080fd5b61137c836020830160208801611093565b979650505050505050565b600181811c9082168061139b57607f821691505b6020821081036113bb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020815260006113d460208301846110c3565b9392505050565b6001600160e01b03198316815281516000906113fe816004850160208701611093565b919091016004019392505050565b6000825161141e818460208701611093565b9190910192915050565b60006020828403121561143a57600080fd5b815180151581146113d457600080fd5b60408152600a6040820152690808080808081319599d60b21b60608201526080602082015260006113d460808301846110c3565b60408152600a6040820152690808080808149a59da1d60b21b60608201526080602082015260006113d460808301846110c356fe307837313039373039656366613931613830363236666633393839643638663637663562316464313264307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030307845413637346664446537313466643937396465334564463046353641413937313642383938656338a264697066735822122034f6afd94f2f4b2115efd61c0410443264e2b41b2ab70fd7e9f48e5dca4833f564736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModToStringTest ) => #parseByteStack ( "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b5061157e8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806353538af9116100a2578063b5508aa911610071578063b5508aa9146101af578063ba414fa6146101b7578063e20c9f71146101cf578063f0cb13fb146101d7578063fa7626d4146101df57600080fd5b806353538af91461017557806366d9a9a01461017d57806385226c8114610192578063916a17c6146101a757600080fd5b8063302ab09d116100de578063302ab09d146101555780633e5e3c231461015d5780633f7286f414610165578063416c8c831461016d57600080fd5b806305e65172146101105780630c35d2ac1461011a5780631ed7831c146101225780632ade388014610140575b600080fd5b6101186101ec565b005b610118610297565b61012a610338565b6040516101379190611046565b60405180910390f35b61014861039a565b60405161013791906110ef565b6101186104dc565b61012a610591565b61012a6105f1565b610118610651565b610118610798565b610185610864565b60405161013791906111af565b61019a61094a565b6040516101379190611262565b610185610a1a565b61019a610b00565b6101bf610bd0565b6040519015158152602001610137565b61012a610cfd565b610118610d5d565b6007546101bf9060ff1681565b60405163348051d760e11b81526104d26004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae90602401600060405180830381865afa158015610243573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026b91908101906112da565b9050610293604051806040016040528060048152602001630c4c8ccd60e21b81525082610e02565b5050565b604051631623433d60e31b8152600060048201819052908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b11a19e890602401600060405180830381865afa1580156102ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031491908101906112da565b90506102936040518060800160405280604281526020016114dd6042913982610e02565b6060601480548060200260200160405190810160405280929190818152602001828054801561039057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610372575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156104d357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104bc57838290600052602060002001805461042f90611387565b80601f016020809104026020016040519081016040528092919081815260200182805461045b90611387565b80156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b505050505081526020019060010190610410565b5050505081525050815260200190600101906103be565b50505050905090565b604051632b65311f60e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e90602401600060405180830381865afa158015610545573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056d91908101906112da565b90506102936040518060600160405280602a815260200161151f602a913982610e02565b60606016805480602002602001604051908101604052809291908181526020018280548015610390576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610372575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610390576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610372575050505050905090565b6040516338ee73ed60e11b815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da90602401600060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106cc91908101906112da565b90506106f4604051806040016040528060048152602001637472756560e01b81525082610e02565b6040516338ee73ed60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da90602401600060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261076c91908101906112da565b90506107956040518060400160405280600581526020016466616c736560d81b81525082610e02565b50565b60408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516371aad10d60e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371aad10d906107fb9085906004016113c1565b600060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261084091908101906112da565b90506102936040518060600160405280602a81526020016114b3602a913982610e02565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104d35760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561093257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108f45790505b50505050508152505081526020019060010190610888565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104d357838290600052602060002001805461098d90611387565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990611387565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b50505050508152602001906001019061096e565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104d35760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610ae857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610aaa5790505b50505050508152505081526020019060010190610a3e565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156104d3578382906000526020600020018054610b4390611387565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6f90611387565b8015610bbc5780601f10610b9157610100808354040283529160200191610bbc565b820191906000526020600020905b815481529060010190602001808311610b9f57829003601f168201915b505050505081526020019060010190610b24565b600754600090610100900460ff1615610bf25750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610cf85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610c80917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113db565b60408051601f1981840301815290829052610c9a9161140c565b6000604051808303816000865af19150503d8060008114610cd7576040519150601f19603f3d011682016040523d82523d6000602084013e610cdc565b606091505b5091505080806020019051810190610cf49190611428565b9150505b919050565b60606013805480602002602001604051908101604052809291908181526020018280548015610390576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610372575050505050905090565b604051635191620760e11b81526104d1196004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a322c40e90602401600060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ddd91908101906112da565b9050610293604051806040016040528060058152602001640b4c4c8ccd60da1b815250825b80604051602001610e13919061140c565b6040516020818303038152906040528051906020012082604051602001610e3a919061140c565b6040516020818303038152906040528051906020012014610293577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610ec19060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382604051610ef8919061144a565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051610f2f919061147e565b60405180910390a1610293737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110355760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610fd492916020016113db565b60408051601f1981840301815290829052610fee9161140c565b6000604051808303816000865af19150503d806000811461102b576040519150601f19603f3d011682016040523d82523d6000602084013e611030565b606091505b505050505b6007805461ff001916610100179055565b6020808252825182820181905260009190848201906040850190845b818110156110875783516001600160a01b031683529284019291840191600101611062565b50909695505050505050565b60005b838110156110ae578181015183820152602001611096565b838111156110bd576000848401525b50505050565b600081518084526110db816020860160208601611093565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101561119f57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101561118957605f198985030183526111778486516110c3565b948e01949350918d019160010161115b565b505050978a019794505091880191600101611116565b50919a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561125357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101561123e5783516001600160e01b0319168252928b019260019290920191908b0190611214565b50978a019795505050918701916001016111d7565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112b757603f198886030184526112a58583516110c3565b94509285019290850190600101611289565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156112ec57600080fd5b815167ffffffffffffffff8082111561130457600080fd5b818401915084601f83011261131857600080fd5b81518181111561132a5761132a6112c4565b604051601f8201601f19908116603f01168101908382118183101715611352576113526112c4565b8160405282815287602084870101111561136b57600080fd5b61137c836020830160208801611093565b979650505050505050565b600181811c9082168061139b57607f821691505b6020821081036113bb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020815260006113d460208301846110c3565b9392505050565b6001600160e01b03198316815281516000906113fe816004850160208701611093565b919091016004019392505050565b6000825161141e818460208701611093565b9190910192915050565b60006020828403121561143a57600080fd5b815180151581146113d457600080fd5b60408152600a6040820152690808080808081319599d60b21b60608201526080602082015260006113d460808301846110c3565b60408152600a6040820152690808080808149a59da1d60b21b60608201526080602082015260006113d460808301846110c356fe307837313039373039656366613931613830363236666633393839643638663637663562316464313264307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030307845413637346664446537313466643937396465334564463046353641413937313642383938656338a264697066735822122034f6afd94f2f4b2115efd61c0410443264e2b41b2ab70fd7e9f48e5dca4833f564736f6c634300080d0033" ) )


    syntax Field ::= S2KtestZModToStringTestField

    syntax S2KtestZModToStringTestField ::= "stdstore" [symbol(), klabel(field_test%ToStringTest_stdstore)]

    syntax S2KtestZModToStringTestField ::= "IS_TEST" [symbol(), klabel(field_test%ToStringTest_IS_TEST)]

    syntax S2KtestZModToStringTestField ::= "_failed" [symbol(), klabel(field_test%ToStringTest__failed)]

    syntax S2KtestZModToStringTestField ::= "stdChainsInitialized" [symbol(), klabel(field_test%ToStringTest_stdChainsInitialized)]

    syntax S2KtestZModToStringTestField ::= "chains" [symbol(), klabel(field_test%ToStringTest_chains)]

    syntax S2KtestZModToStringTestField ::= "defaultRpcUrls" [symbol(), klabel(field_test%ToStringTest_defaultRpcUrls)]

    syntax S2KtestZModToStringTestField ::= "idToAlias" [symbol(), klabel(field_test%ToStringTest_idToAlias)]

    syntax S2KtestZModToStringTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_test%ToStringTest_fallbackToDefaultRpcUrls)]

    syntax S2KtestZModToStringTestField ::= "gasMeteringOff" [symbol(), klabel(field_test%ToStringTest_gasMeteringOff)]

    syntax S2KtestZModToStringTestField ::= "_excludedContracts" [symbol(), klabel(field_test%ToStringTest__excludedContracts)]

    syntax S2KtestZModToStringTestField ::= "_excludedSenders" [symbol(), klabel(field_test%ToStringTest__excludedSenders)]

    syntax S2KtestZModToStringTestField ::= "_targetedContracts" [symbol(), klabel(field_test%ToStringTest__targetedContracts)]

    syntax S2KtestZModToStringTestField ::= "_targetedSenders" [symbol(), klabel(field_test%ToStringTest__targetedSenders)]

    syntax S2KtestZModToStringTestField ::= "_excludedArtifacts" [symbol(), klabel(field_test%ToStringTest__excludedArtifacts)]

    syntax S2KtestZModToStringTestField ::= "_targetedArtifacts" [symbol(), klabel(field_test%ToStringTest__targetedArtifacts)]

    syntax S2KtestZModToStringTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_test%ToStringTest__targetedArtifactSelectors)]

    syntax S2KtestZModToStringTestField ::= "_targetedSelectors" [symbol(), klabel(field_test%ToStringTest__targetedSelectors)]

    syntax S2KtestZModToStringTestField ::= "_targetedInterfaces" [symbol(), klabel(field_test%ToStringTest__targetedInterfaces)]

    rule  ( #loc ( S2KtestZModToStringTest . stdstore ) => 0 )


    rule  ( #loc ( S2KtestZModToStringTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KtestZModToStringTest . _failed ) => 7 )


    rule  ( #loc ( S2KtestZModToStringTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KtestZModToStringTest . chains ) => 8 )


    rule  ( #loc ( S2KtestZModToStringTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KtestZModToStringTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KtestZModToStringTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KtestZModToStringTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KtestZModToStringTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KtestZModToStringTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KtestZModToStringTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KtestZModToStringTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KtestZModToStringTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KtestZModToStringTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KtestZModToStringTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KtestZModToStringTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KtestZModToStringTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KtestZModToStringTestContract "." S2KtestZModToStringTestMethod [function(), symbol(), klabel(method_test%ToStringTest)]

    syntax S2KtestZModToStringTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KISZUndTEST_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KexcludeArtifacts_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KexcludeContracts_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KexcludeSenders_)]

    syntax S2KtestZModToStringTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2Kfailed_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtargetArtifactSelectors_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtargetArtifacts_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtargetContracts_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtargetInterfaces_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtargetSelectors_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtargetSenders_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtestAddressToString" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtestAddressToString_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtestBoolToString" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtestBoolToString_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtestBytes32ToString" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtestBytes32ToString_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtestBytesToString" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtestBytesToString_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtestIntToString" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtestIntToString_)]

    syntax S2KtestZModToStringTestMethod ::= "S2KtestUint256ToString" "(" ")" [symbol(), klabel(method_test%ToStringTest_S2KtestUint256ToString_)]

    rule  ( S2KtestZModToStringTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtestAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtestBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtestBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtestBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtestIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )


    rule  ( S2KtestZModToStringTest . S2KtestUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


    rule  ( selector ( "testAddressToString()" ) => 808104093 )


    rule  ( selector ( "testBoolToString()" ) => 1097632899 )


    rule  ( selector ( "testBytes32ToString()" ) => 204853932 )


    rule  ( selector ( "testBytesToString()" ) => 1397983993 )


    rule  ( selector ( "testIntToString()" ) => 4039840763 )


    rule  ( selector ( "testUint256ToString()" ) => 98980210 )


endmodule

module S2KsrcZModToken-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KsrcZModTokenContract

    syntax S2KsrcZModTokenContract ::= "S2KsrcZModToken" [symbol(), klabel(contract_src%Token)]

    rule  ( #binRuntime ( S2KsrcZModToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004361003e3660046100c9565b610045565b005b610050338383610054565b5050565b6001600160a01b038316600090815260016020526040902054610078908290610117565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546100a890829061012e565b6001600160a01b039092166000908152600160205260409020919091555050565b600080604083850312156100dc57600080fd5b82356001600160a01b03811681146100f357600080fd5b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561012957610129610101565b500390565b6000821982111561014157610141610101565b50019056fea2646970667358221220e48b937e7c9104a0808e115af1ee42e958a0c671314391ceab78b4d1e9009fe964736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KsrcZModToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004361003e3660046100c9565b610045565b005b610050338383610054565b5050565b6001600160a01b038316600090815260016020526040902054610078908290610117565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546100a890829061012e565b6001600160a01b039092166000908152600160205260409020919091555050565b600080604083850312156100dc57600080fd5b82356001600160a01b03811681146100f357600080fd5b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561012957610129610101565b500390565b6000821982111561014157610141610101565b50019056fea2646970667358221220e48b937e7c9104a0808e115af1ee42e958a0c671314391ceab78b4d1e9009fe964736f6c634300080d0033" ) )


    syntax Field ::= S2KsrcZModTokenField

    syntax S2KsrcZModTokenField ::= "x" [symbol(), klabel(field_src%Token_x)]

    syntax S2KsrcZModTokenField ::= "balances" [symbol(), klabel(field_src%Token_balances)]

    syntax S2KsrcZModTokenField ::= "allowances" [symbol(), klabel(field_src%Token_allowances)]

    syntax S2KsrcZModTokenField ::= "name" [symbol(), klabel(field_src%Token_name)]

    syntax S2KsrcZModTokenField ::= "y" [symbol(), klabel(field_src%Token_y)]

    syntax S2KsrcZModTokenField ::= "z" [symbol(), klabel(field_src%Token_z)]

    syntax S2KsrcZModTokenField ::= "a" [symbol(), klabel(field_src%Token_a)]

    syntax S2KsrcZModTokenField ::= "foos" [symbol(), klabel(field_src%Token_foos)]

    rule  ( #loc ( S2KsrcZModToken . x ) => 0 )


    rule  ( #loc ( S2KsrcZModToken . balances ) => 1 )


    rule  ( #loc ( S2KsrcZModToken . allowances ) => 2 )


    rule  ( #loc ( S2KsrcZModToken . name ) => 3 )


    rule  ( #loc ( S2KsrcZModToken . y ) => 4 )


    rule  ( #loc ( S2KsrcZModToken . z ) => 4 )


    rule  ( #loc ( S2KsrcZModToken . a ) => 4 )


    rule  ( #loc ( S2KsrcZModToken . foos ) => 5 )


    syntax Bytes ::= S2KsrcZModTokenContract "." S2KsrcZModTokenMethod [function(), symbol(), klabel(method_src%Token)]

    syntax S2KsrcZModTokenMethod ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_src%Token_S2Ktransfer_address_uint256)]

    rule  ( S2KsrcZModToken . S2Ktransfer ( V0_dst : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_dst ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))


    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )


endmodule

module S2KtestZModBytesTypeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModBytesTypeTestContract

    syntax S2KtestZModBytesTypeTestContract ::= "S2KtestZModBytesTypeTest" [symbol(), klabel(contract_test%BytesTypeTest)]

    rule  ( #binRuntime ( S2KtestZModBytesTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063176854031461006757806395a933ba1461007c578063a7c088351461008f578063ccdc3f4d146100a2578063d6bf2ada1461007c578063ffa9fc7114610067575b600080fd5b61007a6100753660046100f3565b6100b3565b005b61007a61008a36600461010c565b6100c4565b61007a61009d36600461010c565b6100db565b61007a6100b03660046100f3565b50565b60001981106100b0576100b061013d565b60e081901c63ffffffff116100b0576100b061013d565b60e081901c63ffffffff10156100b0576100b061013d565b60006020828403121561010557600080fd5b5035919050565b60006020828403121561011e57600080fd5b81356001600160e01b03198116811461013657600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220a2cda4fd602855aae073a2c5a1e77ca0cd9feae50b64c59bc764b68626628db164736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModBytesTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610189806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063176854031461006757806395a933ba1461007c578063a7c088351461008f578063ccdc3f4d146100a2578063d6bf2ada1461007c578063ffa9fc7114610067575b600080fd5b61007a6100753660046100f3565b6100b3565b005b61007a61008a36600461010c565b6100c4565b61007a61009d36600461010c565b6100db565b61007a6100b03660046100f3565b50565b60001981106100b0576100b061013d565b60e081901c63ffffffff116100b0576100b061013d565b60e081901c63ffffffff10156100b0576100b061013d565b60006020828403121561010557600080fd5b5035919050565b60006020828403121561011e57600080fd5b81356001600160e01b03198116811461013657600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220a2cda4fd602855aae073a2c5a1e77ca0cd9feae50b64c59bc764b68626628db164736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModBytesTypeTestContract "." S2KtestZModBytesTypeTestMethod [function(), symbol(), klabel(method_test%BytesTypeTest)]

    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestFailZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_test%BytesTypeTest_S2KtestFailZUndbytes32_bytes32)]

    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestFailZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_test%BytesTypeTest_S2KtestFailZUndbytes4_bytes4)]

    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_test%BytesTypeTest_S2KtestZUndbytes32_bytes32)]

    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes32ZUndfail" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_test%BytesTypeTest_S2KtestZUndbytes32ZUndfail_bytes32)]

    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_test%BytesTypeTest_S2KtestZUndbytes4_bytes4)]

    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes4ZUndfail" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_test%BytesTypeTest_S2KtestZUndbytes4ZUndfail_bytes4)]

    rule  ( S2KtestZModBytesTypeTest . S2KtestFailZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "testFail_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )


    rule  ( S2KtestZModBytesTypeTest . S2KtestFailZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "testFail_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )


    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )


    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes32ZUndfail ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32_fail" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_x )


    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )


    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes4ZUndfail ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4_fail" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )


    rule  ( selector ( "testFail_bytes32(bytes32)" ) => 4289330289 )


    rule  ( selector ( "testFail_bytes4(bytes4)" ) => 3602852570 )


    rule  ( selector ( "test_bytes32(bytes32)" ) => 3436986189 )


    rule  ( selector ( "test_bytes32_fail(bytes32)" ) => 392713219 )


    rule  ( selector ( "test_bytes4(bytes4)" ) => 2814412853 )


    rule  ( selector ( "test_bytes4_fail(bytes4)" ) => 2510894010 )


endmodule

module S2KtestZModIntTypeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModIntTypeTestContract

    syntax S2KtestZModIntTypeTestContract ::= "S2KtestZModIntTypeTest" [symbol(), klabel(contract_test%IntTypeTest)]

    rule  ( #binRuntime ( S2KtestZModIntTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80636ad45b2e116100665780636ad45b2e146100e65780636fe1d822146100ad5780637686b9d9146100c0578063a38fa320146100d3578063e3a003ce146100f957600080fd5b80633b5bed8d1461009857806346a322e3146100ad57806349f45c19146100c057806368593cf1146100d3575b600080fd5b6100ab6100a63660046101a8565b61010c565b005b6100ab6100bb3660046101d2565b61012a565b6100ab6100ce3660046101a8565b610140565b6100ab6100e13660046101eb565b61015a565b6100ab6100f43660046101eb565b610175565b6100ab6101073660046101d2565b610191565b600f81900b60016001607f1b0312156101275761012761020e565b50565b806001600160ff1b03136101275761012761020e565b600f81900b60016001607f1b03136101275761012761020e565b600781900b677fffffffffffffff136101275761012761020e565b600781900b677fffffffffffffff12156101275761012761020e565b806001600160ff1b0312156101275761012761020e565b6000602082840312156101ba57600080fd5b813580600f0b81146101cb57600080fd5b9392505050565b6000602082840312156101e457600080fd5b5035919050565b6000602082840312156101fd57600080fd5b81358060070b81146101cb57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212200d1fac94ebfd75e4d9346ed382b003aba92c93cb9e9bb2353031c80894ad28ca64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModIntTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b5061025a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636ad45b2e116100665780636ad45b2e146100e65780636fe1d822146100ad5780637686b9d9146100c0578063a38fa320146100d3578063e3a003ce146100f957600080fd5b80633b5bed8d1461009857806346a322e3146100ad57806349f45c19146100c057806368593cf1146100d3575b600080fd5b6100ab6100a63660046101a8565b61010c565b005b6100ab6100bb3660046101d2565b61012a565b6100ab6100ce3660046101a8565b610140565b6100ab6100e13660046101eb565b61015a565b6100ab6100f43660046101eb565b610175565b6100ab6101073660046101d2565b610191565b600f81900b60016001607f1b0312156101275761012761020e565b50565b806001600160ff1b03136101275761012761020e565b600f81900b60016001607f1b03136101275761012761020e565b600781900b677fffffffffffffff136101275761012761020e565b600781900b677fffffffffffffff12156101275761012761020e565b806001600160ff1b0312156101275761012761020e565b6000602082840312156101ba57600080fd5b813580600f0b81146101cb57600080fd5b9392505050565b6000602082840312156101e457600080fd5b5035919050565b6000602082840312156101fd57600080fd5b81358060070b81146101cb57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212200d1fac94ebfd75e4d9346ed382b003aba92c93cb9e9bb2353031c80894ad28ca64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModIntTypeTestContract "." S2KtestZModIntTypeTestMethod [function(), symbol(), klabel(method_test%IntTypeTest)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestFailZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestFailZUndint128_int128)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestFailZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestFailZUndint256_int256)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestFailZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestFailZUndint64_int64)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint128" "(" Int ":" "int128" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestZUndint128_int128)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint128ZUndfail" "(" Int ":" "int128" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestZUndint128ZUndfail_int128)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint256" "(" Int ":" "int256" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestZUndint256_int256)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint256ZUndfail" "(" Int ":" "int256" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestZUndint256ZUndfail_int256)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint64" "(" Int ":" "int64" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestZUndint64_int64)]

    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint64ZUndfail" "(" Int ":" "int64" ")" [symbol(), klabel(method_test%IntTypeTest_S2KtestZUndint64ZUndfail_int64)]

    rule  ( S2KtestZModIntTypeTest . S2KtestFailZUndint128 ( V0_x : int128 ) => #abiCallData ( "testFail_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestFailZUndint256 ( V0_x : int256 ) => #abiCallData ( "testFail_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestFailZUndint64 ( V0_x : int64 ) => #abiCallData ( "testFail_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint128 ( V0_x : int128 ) => #abiCallData ( "test_int128" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint128ZUndfail ( V0_x : int128 ) => #abiCallData ( "test_int128_fail" , #int128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 128 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint256 ( V0_x : int256 ) => #abiCallData ( "test_int256" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint256ZUndfail ( V0_x : int256 ) => #abiCallData ( "test_int256_fail" , #int256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint64 ( V0_x : int64 ) => #abiCallData ( "test_int64" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )


    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint64ZUndfail ( V0_x : int64 ) => #abiCallData ( "test_int64_fail" , #int64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeSInt ( 64 , V0_x )


    rule  ( selector ( "testFail_int128(int128)" ) => 1988540889 )


    rule  ( selector ( "testFail_int256(int256)" ) => 1185096419 )


    rule  ( selector ( "testFail_int64(int64)" ) => 1750678769 )


    rule  ( selector ( "test_int128(int128)" ) => 995880333 )


    rule  ( selector ( "test_int128_fail(int128)" ) => 1240751129 )


    rule  ( selector ( "test_int256(int256)" ) => 3818914766 )


    rule  ( selector ( "test_int256_fail(int256)" ) => 1877071906 )


    rule  ( selector ( "test_int64(int64)" ) => 1792301870 )


    rule  ( selector ( "test_int64_fail(int64)" ) => 2744099616 )


endmodule

module S2KtestZModStructTypeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModStructTypeTestContract

    syntax S2KtestZModStructTypeTestContract ::= "S2KtestZModStructTypeTest" [symbol(), klabel(contract_test%StructTypeTest)]

    rule  ( #binRuntime ( S2KtestZModStructTypeTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063f312018014602d575b600080fd5b603c60383660046084565b603e565b005b60496020820182609b565b60ff1660ff80161015605b57605b60c3565b6069604082016020830160d9565b63ffffffff1663ffffffff80161015608157608160c3565b50565b600060608284031215609557600080fd5b50919050565b60006020828403121560ac57600080fd5b813560ff8116811460bc57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121560ea57600080fd5b813563ffffffff8116811460bc57600080fdfea26469706673582212208d4b71859ea8c5558f2224643cd5d8007e3a774b31fd448aff3d7becdb4ff45a64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModStructTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610133806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f312018014602d575b600080fd5b603c60383660046084565b603e565b005b60496020820182609b565b60ff1660ff80161015605b57605b60c3565b6069604082016020830160d9565b63ffffffff1663ffffffff80161015608157608160c3565b50565b600060608284031215609557600080fd5b50919050565b60006020828403121560ac57600080fd5b813560ff8116811460bc57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121560ea57600080fd5b813563ffffffff8116811460bc57600080fdfea26469706673582212208d4b71859ea8c5558f2224643cd5d8007e3a774b31fd448aff3d7becdb4ff45a64736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModStructTypeTestContract "." S2KtestZModStructTypeTestMethod [function(), symbol(), klabel(method_test%StructTypeTest)]

    syntax S2KtestZModStructTypeTestMethod ::= "S2KtestZUndvars" "(" Int ":" "uint8" "," Int ":" "uint32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_test%StructTypeTest_S2KtestZUndvars_uint8_uint32_bytes32)]

    rule  ( S2KtestZModStructTypeTest . S2KtestZUndvars ( V0_a : uint8 , V1_timestamp : uint32 , V2_b : bytes32 ) => #abiCallData ( "test_vars" , #tuple ( #uint8 ( V0_a ) , #uint32 ( V1_timestamp ) , #bytes32 ( V2_b ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 8 , V0_a )
       andBool ( #rangeUInt ( 32 , V1_timestamp )
       andBool ( #rangeBytes ( 32 , V2_b )
               )))


    rule  ( selector ( "test_vars((uint8,uint32,bytes32))" ) => 4078043520 )


endmodule

module S2KtestZModUintTypeTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KtestZModUintTypeTestContract

    syntax S2KtestZModUintTypeTestContract ::= "S2KtestZModUintTypeTest" [symbol(), klabel(contract_test%UintTypeTest)]

    rule  ( #binRuntime ( S2KtestZModUintTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106105305760003560e01c80639034111c116102af578063c32ac8df11610172578063dc3a57f0116100d9578063f12bce4c11610092578063f12bce4c14610924578063f2f9691c1461089f578063f4566ec31461068d578063f7c0d17c146109bc578063f9126fa1146105f5578063f930f01c1461099657600080fd5b8063dc3a57f0146109a9578063e4d5122b146109bc578063e4f24a3f146109cf578063e920ae5914610853578063eb92aaa9146107e1578063ef35afd1146109e257600080fd5b8063d316d6851161012b578063d316d68514610583578063d3d8df2314610710578063d56555a814610911578063d606851214610983578063d822867414610996578063db522592146108eb57600080fd5b8063c32ac8df14610970578063c3aea4171461067a578063c415e5d5146107ce578063c7ce39e11461094a578063ccd4bffe1461081a578063d2b7065b146105cf57600080fd5b8063aac485ac11610216578063b9f3c162116101cf578063b9f3c16214610937578063bc8ed9a61461094a578063bde61bde146106ea578063bf6062251461095d578063bf94b1d31461076f578063bfd448f71461065457600080fd5b8063aac485ac146108eb578063aacd089d146108fe578063ae698c7c146107f4578063b09b241f146107a8578063b6fc8d8c14610911578063b82d23b31461092457600080fd5b8063a308298f11610268578063a308298f1461088c578063a315fd391461089f578063a5d0028d146108b2578063a63fc1df146108c5578063a66657e8146108d8578063aa5cd64b146106d757600080fd5b80639034111c146108405780639169462d1461085357806391d4c9ed14610866578063935fc9ff1461080757806395aca5b7146108795780639d24f4be146105bc57600080fd5b80633a5aacb8116103f757806365914c181161035e57806370fd922e1161031757806370fd922e1461081a578063774319e7146106a0578063790714c21461082d5780637abd93aa146106c45780637eaa7a22146107365780638acb32de1461062e57600080fd5b806365914c18146107bb57806365dfa08c146107ce57806367b70aa3146107e15780636cf6fd10146107f45780636d232e6d146106085780636f3d57cc1461080757600080fd5b80634b3cfeb1116103b05780634b3cfeb11461075c5780634cdd512b1461076f5780634d69982e146107825780634e6e74f914610795578063617db4a3146107a8578063647c8823146105a957600080fd5b80633a5aacb8146106ea5780633a8b8b96146106fd57806340639d891461071057806348fa8be7146107235780634a27f445146107365780634a5ad1a61461074957600080fd5b80631eb6018f1161049b5780632f300e61116104545780632f300e611461067a578063304660441461068d57806330dfd541146106a057806332beb385146106b3578063342fae45146106c45780633991d7d4146106d757600080fd5b80631eb6018f14610608578063227ccddb1461061b5780632618b7101461062e57806327a2a08c146106415780632dd4c189146106545780632ec723c91461066757600080fd5b806314673504116104ed578063146735041461059657806314bbddc9146105a957806318a442de146105bc57806319148a5d146105cf5780631b1620f9146105e25780631d4c35a4146105f557600080fd5b80630289569714610535578063037f147d1461054a57806305f6eb211461055d578063078f9137146105705780630bd5c5d21461058357806312ffa78914610535575b600080fd5b610548610543366004610fdf565b6109f5565b005b610548610558366004611013565b610a11565b61054861056b366004610fdf565b610a2a565b61054861057e36600461103c565b610a47565b610548610591366004611065565b610a60565b6105486105a436600461108e565b610a78565b6105486105b73660046110b7565b610a91565b6105486105ca3660046110de565b610aa7565b6105486105dd366004611107565b610abf565b6105486105f0366004611130565b610ad7565b610548610603366004611130565b610aef565b610548610616366004611158565b610b06565b610548610629366004611181565b610b1e565b61054861063c3660046111aa565b610b37565b61054861064f366004611158565b610b4b565b6105486106623660046111cf565b610b64565b6105486106753660046111f5565b610b79565b6105486106883660046111f5565b610b92565b61054861069b36600461121e565b610baa565b6105486106ae366004611247565b610bc2565b6105486106c1366004611271565b50565b6105486106d236600461128a565b610bdb565b6105486106e536600461103c565b610bf5565b6105486106f8366004611013565b610c0d565b61054861070b3660046111cf565b610c25565b61054861071e36600461108e565b610c3b565b6105486107313660046112b5565b610c53565b6105486107443660046112de565b610c6c565b610548610757366004611065565b610c84565b61054861076a366004611307565b610c9d565b61054861077d36600461132b565b610cb1565b6105486107903660046110b7565b610cc9565b6105486107a3366004611354565b610ce0565b6105486107b6366004611354565b610cf9565b6105486107c936600461137d565b610d11565b6105486107dc3660046113a0565b610d24565b6105486107ef3660046113c9565b610d3c565b6105486108023660046113f2565b610d54565b61054861081536600461141b565b610d6c565b610548610828366004611271565b610d84565b61054861083b3660046113a0565b610d95565b61054861084e36600461121e565b610dae565b6105486108613660046112b5565b610dc7565b61054861087436600461132b565b610ddf565b610548610887366004611247565b610df8565b61054861089a3660046112de565b610e12565b6105486108ad366004611307565b610e2b565b6105486108c0366004611444565b610e3e565b6105486108d33660046110de565b610e57565b6105486108e6366004611107565b610e70565b6105486108f936600461137d565b610e89565b61054861090c3660046111aa565b610e9b565b61054861091f366004611181565b610eb0565b61054861093236600461146d565b610ec8565b6105486109453660046113f2565b610ee0565b610548610958366004611444565b610ef9565b61054861096b36600461141b565b610f11565b61054861097e36600461146d565b610f2a565b6105486109913660046113c9565b610f43565b6105486109a4366004611496565b610f5c565b6105486109b736600461128a565b610f77565b6105486109ca3660046114c2565b610f92565b6105486109dd366004611496565b610faa565b6105486109f03660046114c2565b610fc6565b6affffffffffffffffffffff808216106106c1576106c16114eb565b66ffffffffffffff80821611156106c1576106c16114eb565b6affffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160c01b0380821611156106c1576106c16114eb565b6001600160701b03808216106106c1576106c16114eb565b6001600160c81b0380821611156106c1576106c16114eb565b64ffffffffff808216106106c1576106c16114eb565b6001600160a81b03808216106106c1576106c16114eb565b6001600160e01b03808216106106c1576106c16114eb565b65ffffffffffff80821611156106c1576106c16114eb565b65ffffffffffff808216106106c1576106c16114eb565b6001600160d01b03808216106106c1576106c16114eb565b6001600160f81b0380821611156106c1576106c16114eb565b62ffffff808216106106c1576106c16114eb565b6001600160d01b0380821611156106c1576106c16114eb565b63ffffffff808216106106c1576106c16114eb565b6001600160801b0380821611156106c1576106c16114eb565b6001600160801b03808216106106c1576106c16114eb565b6001600160b81b03808216106106c1576106c16114eb565b67ffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff808216106106c1576106c16114eb565b6001600160c01b03808216106106c1576106c16114eb565b66ffffffffffffff808216106106c1576106c16114eb565b63ffffffff80821611156106c1576106c16114eb565b6001600160c81b03808216106106c1576106c16114eb565b6001600160901b0380821611156106c1576106c16114eb565b6001600160d81b03808216106106c1576106c16114eb565b6001600160701b0380821611156106c1576106c16114eb565b61ffff80821611156106c1576106c16114eb565b6001600160a01b03808216106106c1576106c16114eb565b64ffffffffff80821611156106c1576106c16114eb565b6001600160601b0380821611156106c1576106c16114eb565b6001600160601b03808216106106c1576106c16114eb565b60ff80821611156106c1576106c16114eb565b6001600160681b03808216106106c1576106c16114eb565b6001600160881b03808216106106c1576106c16114eb565b6001600160b01b03808216106106c1576106c16114eb565b6001600160981b03808216106106c1576106c16114eb565b80600019116106c1576106c16114eb565b6001600160681b0380821611156106c1576106c16114eb565b6001600160b81b0380821611156106c1576106c16114eb565b6001600160901b03808216106106c1576106c16114eb565b6001600160a01b0380821611156106c1576106c16114eb565b67ffffffffffffffff80821611156106c1576106c16114eb565b6001600160d81b0380821611156106c1576106c16114eb565b61ffff808216106106c1576106c16114eb565b6001600160e81b0380821611156106c1576106c16114eb565b6001600160a81b0380821611156106c1576106c16114eb565b6001600160e01b0380821611156106c1576106c16114eb565b60ff808216106106c1576106c16114eb565b62ffffff80821611156106c1576106c16114eb565b6001600160f81b03808216106106c1576106c16114eb565b6001600160f01b03808216106106c1576106c16114eb565b6001600160b01b0380821611156106c1576106c16114eb565b6001600160e81b03808216106106c1576106c16114eb565b6001600160981b0380821611156106c1576106c16114eb565b6001600160f01b0380821611156106c1576106c16114eb565b6001600160881b0380821611156106c1576106c16114eb565b69ffffffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b03808216106106c1576106c16114eb565b69ffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b0380821611156106c1576106c16114eb565b600060208284031215610ff157600080fd5b81356affffffffffffffffffffff8116811461100c57600080fd5b9392505050565b60006020828403121561102557600080fd5b813566ffffffffffffff8116811461100c57600080fd5b60006020828403121561104e57600080fd5b81356001600160c01b038116811461100c57600080fd5b60006020828403121561107757600080fd5b81356001600160701b038116811461100c57600080fd5b6000602082840312156110a057600080fd5b81356001600160c81b038116811461100c57600080fd5b6000602082840312156110c957600080fd5b813564ffffffffff8116811461100c57600080fd5b6000602082840312156110f057600080fd5b81356001600160a81b038116811461100c57600080fd5b60006020828403121561111957600080fd5b81356001600160e01b038116811461100c57600080fd5b60006020828403121561114257600080fd5b813565ffffffffffff8116811461100c57600080fd5b60006020828403121561116a57600080fd5b81356001600160d01b038116811461100c57600080fd5b60006020828403121561119357600080fd5b81356001600160f81b038116811461100c57600080fd5b6000602082840312156111bc57600080fd5b813562ffffff8116811461100c57600080fd5b6000602082840312156111e157600080fd5b813563ffffffff8116811461100c57600080fd5b60006020828403121561120757600080fd5b81356001600160801b038116811461100c57600080fd5b60006020828403121561123057600080fd5b81356001600160b81b038116811461100c57600080fd5b60006020828403121561125957600080fd5b813567ffffffffffffffff8116811461100c57600080fd5b60006020828403121561128357600080fd5b5035919050565b60006020828403121561129c57600080fd5b813568ffffffffffffffffff8116811461100c57600080fd5b6000602082840312156112c757600080fd5b81356001600160901b038116811461100c57600080fd5b6000602082840312156112f057600080fd5b81356001600160d81b038116811461100c57600080fd5b60006020828403121561131957600080fd5b813561ffff8116811461100c57600080fd5b60006020828403121561133d57600080fd5b81356001600160a01b038116811461100c57600080fd5b60006020828403121561136657600080fd5b81356001600160601b038116811461100c57600080fd5b60006020828403121561138f57600080fd5b813560ff8116811461100c57600080fd5b6000602082840312156113b257600080fd5b81356001600160681b038116811461100c57600080fd5b6000602082840312156113db57600080fd5b81356001600160881b038116811461100c57600080fd5b60006020828403121561140457600080fd5b81356001600160b01b038116811461100c57600080fd5b60006020828403121561142d57600080fd5b81356001600160981b038116811461100c57600080fd5b60006020828403121561145657600080fd5b81356001600160e81b038116811461100c57600080fd5b60006020828403121561147f57600080fd5b81356001600160f01b038116811461100c57600080fd5b6000602082840312156114a857600080fd5b813569ffffffffffffffffffff8116811461100c57600080fd5b6000602082840312156114d457600080fd5b81356001600160781b038116811461100c57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212203da055bbaa68b3025e693e7ab649d1579d995cf78a041869379189a098a00f7864736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KtestZModUintTypeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50611537806100206000396000f3fe608060405234801561001057600080fd5b50600436106105305760003560e01c80639034111c116102af578063c32ac8df11610172578063dc3a57f0116100d9578063f12bce4c11610092578063f12bce4c14610924578063f2f9691c1461089f578063f4566ec31461068d578063f7c0d17c146109bc578063f9126fa1146105f5578063f930f01c1461099657600080fd5b8063dc3a57f0146109a9578063e4d5122b146109bc578063e4f24a3f146109cf578063e920ae5914610853578063eb92aaa9146107e1578063ef35afd1146109e257600080fd5b8063d316d6851161012b578063d316d68514610583578063d3d8df2314610710578063d56555a814610911578063d606851214610983578063d822867414610996578063db522592146108eb57600080fd5b8063c32ac8df14610970578063c3aea4171461067a578063c415e5d5146107ce578063c7ce39e11461094a578063ccd4bffe1461081a578063d2b7065b146105cf57600080fd5b8063aac485ac11610216578063b9f3c162116101cf578063b9f3c16214610937578063bc8ed9a61461094a578063bde61bde146106ea578063bf6062251461095d578063bf94b1d31461076f578063bfd448f71461065457600080fd5b8063aac485ac146108eb578063aacd089d146108fe578063ae698c7c146107f4578063b09b241f146107a8578063b6fc8d8c14610911578063b82d23b31461092457600080fd5b8063a308298f11610268578063a308298f1461088c578063a315fd391461089f578063a5d0028d146108b2578063a63fc1df146108c5578063a66657e8146108d8578063aa5cd64b146106d757600080fd5b80639034111c146108405780639169462d1461085357806391d4c9ed14610866578063935fc9ff1461080757806395aca5b7146108795780639d24f4be146105bc57600080fd5b80633a5aacb8116103f757806365914c181161035e57806370fd922e1161031757806370fd922e1461081a578063774319e7146106a0578063790714c21461082d5780637abd93aa146106c45780637eaa7a22146107365780638acb32de1461062e57600080fd5b806365914c18146107bb57806365dfa08c146107ce57806367b70aa3146107e15780636cf6fd10146107f45780636d232e6d146106085780636f3d57cc1461080757600080fd5b80634b3cfeb1116103b05780634b3cfeb11461075c5780634cdd512b1461076f5780634d69982e146107825780634e6e74f914610795578063617db4a3146107a8578063647c8823146105a957600080fd5b80633a5aacb8146106ea5780633a8b8b96146106fd57806340639d891461071057806348fa8be7146107235780634a27f445146107365780634a5ad1a61461074957600080fd5b80631eb6018f1161049b5780632f300e61116104545780632f300e611461067a578063304660441461068d57806330dfd541146106a057806332beb385146106b3578063342fae45146106c45780633991d7d4146106d757600080fd5b80631eb6018f14610608578063227ccddb1461061b5780632618b7101461062e57806327a2a08c146106415780632dd4c189146106545780632ec723c91461066757600080fd5b806314673504116104ed578063146735041461059657806314bbddc9146105a957806318a442de146105bc57806319148a5d146105cf5780631b1620f9146105e25780631d4c35a4146105f557600080fd5b80630289569714610535578063037f147d1461054a57806305f6eb211461055d578063078f9137146105705780630bd5c5d21461058357806312ffa78914610535575b600080fd5b610548610543366004610fdf565b6109f5565b005b610548610558366004611013565b610a11565b61054861056b366004610fdf565b610a2a565b61054861057e36600461103c565b610a47565b610548610591366004611065565b610a60565b6105486105a436600461108e565b610a78565b6105486105b73660046110b7565b610a91565b6105486105ca3660046110de565b610aa7565b6105486105dd366004611107565b610abf565b6105486105f0366004611130565b610ad7565b610548610603366004611130565b610aef565b610548610616366004611158565b610b06565b610548610629366004611181565b610b1e565b61054861063c3660046111aa565b610b37565b61054861064f366004611158565b610b4b565b6105486106623660046111cf565b610b64565b6105486106753660046111f5565b610b79565b6105486106883660046111f5565b610b92565b61054861069b36600461121e565b610baa565b6105486106ae366004611247565b610bc2565b6105486106c1366004611271565b50565b6105486106d236600461128a565b610bdb565b6105486106e536600461103c565b610bf5565b6105486106f8366004611013565b610c0d565b61054861070b3660046111cf565b610c25565b61054861071e36600461108e565b610c3b565b6105486107313660046112b5565b610c53565b6105486107443660046112de565b610c6c565b610548610757366004611065565b610c84565b61054861076a366004611307565b610c9d565b61054861077d36600461132b565b610cb1565b6105486107903660046110b7565b610cc9565b6105486107a3366004611354565b610ce0565b6105486107b6366004611354565b610cf9565b6105486107c936600461137d565b610d11565b6105486107dc3660046113a0565b610d24565b6105486107ef3660046113c9565b610d3c565b6105486108023660046113f2565b610d54565b61054861081536600461141b565b610d6c565b610548610828366004611271565b610d84565b61054861083b3660046113a0565b610d95565b61054861084e36600461121e565b610dae565b6105486108613660046112b5565b610dc7565b61054861087436600461132b565b610ddf565b610548610887366004611247565b610df8565b61054861089a3660046112de565b610e12565b6105486108ad366004611307565b610e2b565b6105486108c0366004611444565b610e3e565b6105486108d33660046110de565b610e57565b6105486108e6366004611107565b610e70565b6105486108f936600461137d565b610e89565b61054861090c3660046111aa565b610e9b565b61054861091f366004611181565b610eb0565b61054861093236600461146d565b610ec8565b6105486109453660046113f2565b610ee0565b610548610958366004611444565b610ef9565b61054861096b36600461141b565b610f11565b61054861097e36600461146d565b610f2a565b6105486109913660046113c9565b610f43565b6105486109a4366004611496565b610f5c565b6105486109b736600461128a565b610f77565b6105486109ca3660046114c2565b610f92565b6105486109dd366004611496565b610faa565b6105486109f03660046114c2565b610fc6565b6affffffffffffffffffffff808216106106c1576106c16114eb565b66ffffffffffffff80821611156106c1576106c16114eb565b6affffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160c01b0380821611156106c1576106c16114eb565b6001600160701b03808216106106c1576106c16114eb565b6001600160c81b0380821611156106c1576106c16114eb565b64ffffffffff808216106106c1576106c16114eb565b6001600160a81b03808216106106c1576106c16114eb565b6001600160e01b03808216106106c1576106c16114eb565b65ffffffffffff80821611156106c1576106c16114eb565b65ffffffffffff808216106106c1576106c16114eb565b6001600160d01b03808216106106c1576106c16114eb565b6001600160f81b0380821611156106c1576106c16114eb565b62ffffff808216106106c1576106c16114eb565b6001600160d01b0380821611156106c1576106c16114eb565b63ffffffff808216106106c1576106c16114eb565b6001600160801b0380821611156106c1576106c16114eb565b6001600160801b03808216106106c1576106c16114eb565b6001600160b81b03808216106106c1576106c16114eb565b67ffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff808216106106c1576106c16114eb565b6001600160c01b03808216106106c1576106c16114eb565b66ffffffffffffff808216106106c1576106c16114eb565b63ffffffff80821611156106c1576106c16114eb565b6001600160c81b03808216106106c1576106c16114eb565b6001600160901b0380821611156106c1576106c16114eb565b6001600160d81b03808216106106c1576106c16114eb565b6001600160701b0380821611156106c1576106c16114eb565b61ffff80821611156106c1576106c16114eb565b6001600160a01b03808216106106c1576106c16114eb565b64ffffffffff80821611156106c1576106c16114eb565b6001600160601b0380821611156106c1576106c16114eb565b6001600160601b03808216106106c1576106c16114eb565b60ff80821611156106c1576106c16114eb565b6001600160681b03808216106106c1576106c16114eb565b6001600160881b03808216106106c1576106c16114eb565b6001600160b01b03808216106106c1576106c16114eb565b6001600160981b03808216106106c1576106c16114eb565b80600019116106c1576106c16114eb565b6001600160681b0380821611156106c1576106c16114eb565b6001600160b81b0380821611156106c1576106c16114eb565b6001600160901b03808216106106c1576106c16114eb565b6001600160a01b0380821611156106c1576106c16114eb565b67ffffffffffffffff80821611156106c1576106c16114eb565b6001600160d81b0380821611156106c1576106c16114eb565b61ffff808216106106c1576106c16114eb565b6001600160e81b0380821611156106c1576106c16114eb565b6001600160a81b0380821611156106c1576106c16114eb565b6001600160e01b0380821611156106c1576106c16114eb565b60ff808216106106c1576106c16114eb565b62ffffff80821611156106c1576106c16114eb565b6001600160f81b03808216106106c1576106c16114eb565b6001600160f01b03808216106106c1576106c16114eb565b6001600160b01b0380821611156106c1576106c16114eb565b6001600160e81b03808216106106c1576106c16114eb565b6001600160981b0380821611156106c1576106c16114eb565b6001600160f01b0380821611156106c1576106c16114eb565b6001600160881b0380821611156106c1576106c16114eb565b69ffffffffffffffffffff808216106106c1576106c16114eb565b68ffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b03808216106106c1576106c16114eb565b69ffffffffffffffffffff80821611156106c1576106c16114eb565b6001600160781b0380821611156106c1576106c16114eb565b600060208284031215610ff157600080fd5b81356affffffffffffffffffffff8116811461100c57600080fd5b9392505050565b60006020828403121561102557600080fd5b813566ffffffffffffff8116811461100c57600080fd5b60006020828403121561104e57600080fd5b81356001600160c01b038116811461100c57600080fd5b60006020828403121561107757600080fd5b81356001600160701b038116811461100c57600080fd5b6000602082840312156110a057600080fd5b81356001600160c81b038116811461100c57600080fd5b6000602082840312156110c957600080fd5b813564ffffffffff8116811461100c57600080fd5b6000602082840312156110f057600080fd5b81356001600160a81b038116811461100c57600080fd5b60006020828403121561111957600080fd5b81356001600160e01b038116811461100c57600080fd5b60006020828403121561114257600080fd5b813565ffffffffffff8116811461100c57600080fd5b60006020828403121561116a57600080fd5b81356001600160d01b038116811461100c57600080fd5b60006020828403121561119357600080fd5b81356001600160f81b038116811461100c57600080fd5b6000602082840312156111bc57600080fd5b813562ffffff8116811461100c57600080fd5b6000602082840312156111e157600080fd5b813563ffffffff8116811461100c57600080fd5b60006020828403121561120757600080fd5b81356001600160801b038116811461100c57600080fd5b60006020828403121561123057600080fd5b81356001600160b81b038116811461100c57600080fd5b60006020828403121561125957600080fd5b813567ffffffffffffffff8116811461100c57600080fd5b60006020828403121561128357600080fd5b5035919050565b60006020828403121561129c57600080fd5b813568ffffffffffffffffff8116811461100c57600080fd5b6000602082840312156112c757600080fd5b81356001600160901b038116811461100c57600080fd5b6000602082840312156112f057600080fd5b81356001600160d81b038116811461100c57600080fd5b60006020828403121561131957600080fd5b813561ffff8116811461100c57600080fd5b60006020828403121561133d57600080fd5b81356001600160a01b038116811461100c57600080fd5b60006020828403121561136657600080fd5b81356001600160601b038116811461100c57600080fd5b60006020828403121561138f57600080fd5b813560ff8116811461100c57600080fd5b6000602082840312156113b257600080fd5b81356001600160681b038116811461100c57600080fd5b6000602082840312156113db57600080fd5b81356001600160881b038116811461100c57600080fd5b60006020828403121561140457600080fd5b81356001600160b01b038116811461100c57600080fd5b60006020828403121561142d57600080fd5b81356001600160981b038116811461100c57600080fd5b60006020828403121561145657600080fd5b81356001600160e81b038116811461100c57600080fd5b60006020828403121561147f57600080fd5b81356001600160f01b038116811461100c57600080fd5b6000602082840312156114a857600080fd5b813569ffffffffffffffffffff8116811461100c57600080fd5b6000602082840312156114d457600080fd5b81356001600160781b038116811461100c57600080fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212203da055bbaa68b3025e693e7ab649d1579d995cf78a041869379189a098a00f7864736f6c634300080d0033" ) )


    syntax Bytes ::= S2KtestZModUintTypeTestContract "." S2KtestZModUintTypeTestMethod [function(), symbol(), klabel(method_test%UintTypeTest)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint104_uint104)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint112_uint112)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint120_uint120)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint128_uint128)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint136_uint136)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint144_uint144)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint152_uint152)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint16_uint16)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint160_uint160)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint168_uint168)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint176_uint176)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint184_uint184)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint192_uint192)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint200_uint200)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint208_uint208)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint216_uint216)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint224_uint224)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint232_uint232)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint24_uint24)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint240_uint240)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint248_uint248)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint256_uint256)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint32_uint32)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint40_uint40)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint48_uint48)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint56_uint56)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint64_uint64)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint72_uint72)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint8_uint8)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint80_uint80)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint88_uint88)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestFailZUnduint96_uint96)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint104_uint104)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint104ZUndfail" "(" Int ":" "uint104" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint104ZUndfail_uint104)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint112_uint112)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint112ZUndfail" "(" Int ":" "uint112" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint112ZUndfail_uint112)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint120_uint120)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint120ZUndfail" "(" Int ":" "uint120" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint120ZUndfail_uint120)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint128_uint128)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint128ZUndfail" "(" Int ":" "uint128" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint128ZUndfail_uint128)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint136_uint136)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint136ZUndfail" "(" Int ":" "uint136" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint136ZUndfail_uint136)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint144_uint144)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint144ZUndfail" "(" Int ":" "uint144" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint144ZUndfail_uint144)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint152_uint152)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint152ZUndfail" "(" Int ":" "uint152" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint152ZUndfail_uint152)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint16_uint16)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint160_uint160)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint160ZUndfail" "(" Int ":" "uint160" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint160ZUndfail_uint160)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint168_uint168)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint168ZUndfail" "(" Int ":" "uint168" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint168ZUndfail_uint168)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint16ZUndfail" "(" Int ":" "uint16" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint16ZUndfail_uint16)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint176_uint176)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint176ZUndfail" "(" Int ":" "uint176" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint176ZUndfail_uint176)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint184_uint184)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint184ZUndfail" "(" Int ":" "uint184" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint184ZUndfail_uint184)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint192_uint192)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint192ZUndfail" "(" Int ":" "uint192" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint192ZUndfail_uint192)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint200_uint200)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint200ZUndfail" "(" Int ":" "uint200" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint200ZUndfail_uint200)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint208_uint208)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint208ZUndfail" "(" Int ":" "uint208" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint208ZUndfail_uint208)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint216_uint216)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint216ZUndfail" "(" Int ":" "uint216" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint216ZUndfail_uint216)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint224_uint224)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint224ZUndfail" "(" Int ":" "uint224" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint224ZUndfail_uint224)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint232_uint232)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint232ZUndfail" "(" Int ":" "uint232" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint232ZUndfail_uint232)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint24_uint24)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint240_uint240)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint240ZUndfail" "(" Int ":" "uint240" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint240ZUndfail_uint240)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint248_uint248)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint248ZUndfail" "(" Int ":" "uint248" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint248ZUndfail_uint248)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint24ZUndfail" "(" Int ":" "uint24" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint24ZUndfail_uint24)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint256_uint256)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint256ZUndfail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint256ZUndfail_uint256)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint32_uint32)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint32ZUndfail" "(" Int ":" "uint32" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint32ZUndfail_uint32)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint40_uint40)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint40ZUndfail" "(" Int ":" "uint40" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint40ZUndfail_uint40)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint48_uint48)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint48ZUndfail" "(" Int ":" "uint48" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint48ZUndfail_uint48)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint56_uint56)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint56ZUndfail" "(" Int ":" "uint56" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint56ZUndfail_uint56)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint64_uint64)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint64ZUndfail" "(" Int ":" "uint64" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint64ZUndfail_uint64)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint72_uint72)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint72ZUndfail" "(" Int ":" "uint72" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint72ZUndfail_uint72)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint8_uint8)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint80_uint80)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint80ZUndfail" "(" Int ":" "uint80" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint80ZUndfail_uint80)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint88_uint88)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint88ZUndfail" "(" Int ":" "uint88" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint88ZUndfail_uint88)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint8ZUndfail" "(" Int ":" "uint8" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint8ZUndfail_uint8)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint96_uint96)]

    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint96ZUndfail" "(" Int ":" "uint96" ")" [symbol(), klabel(method_test%UintTypeTest_S2KtestZUnduint96ZUndfail_uint96)]

    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "testFail_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "testFail_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "testFail_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "testFail_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "testFail_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "testFail_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "testFail_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "testFail_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "testFail_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "testFail_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "testFail_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "testFail_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "testFail_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "testFail_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "testFail_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "testFail_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "testFail_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "testFail_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "testFail_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "testFail_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "testFail_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "testFail_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "testFail_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "testFail_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "testFail_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "testFail_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "testFail_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "testFail_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "testFail_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "testFail_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "testFail_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "testFail_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "test_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint104ZUndfail ( V0_x : uint104 ) => #abiCallData ( "test_uint104_fail" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "test_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint112ZUndfail ( V0_x : uint112 ) => #abiCallData ( "test_uint112_fail" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "test_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint120ZUndfail ( V0_x : uint120 ) => #abiCallData ( "test_uint120_fail" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "test_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint128ZUndfail ( V0_x : uint128 ) => #abiCallData ( "test_uint128_fail" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "test_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint136ZUndfail ( V0_x : uint136 ) => #abiCallData ( "test_uint136_fail" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "test_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint144ZUndfail ( V0_x : uint144 ) => #abiCallData ( "test_uint144_fail" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "test_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint152ZUndfail ( V0_x : uint152 ) => #abiCallData ( "test_uint152_fail" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "test_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "test_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint160ZUndfail ( V0_x : uint160 ) => #abiCallData ( "test_uint160_fail" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "test_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint168ZUndfail ( V0_x : uint168 ) => #abiCallData ( "test_uint168_fail" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint16ZUndfail ( V0_x : uint16 ) => #abiCallData ( "test_uint16_fail" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "test_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint176ZUndfail ( V0_x : uint176 ) => #abiCallData ( "test_uint176_fail" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "test_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint184ZUndfail ( V0_x : uint184 ) => #abiCallData ( "test_uint184_fail" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "test_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint192ZUndfail ( V0_x : uint192 ) => #abiCallData ( "test_uint192_fail" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "test_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint200ZUndfail ( V0_x : uint200 ) => #abiCallData ( "test_uint200_fail" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "test_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint208ZUndfail ( V0_x : uint208 ) => #abiCallData ( "test_uint208_fail" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "test_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint216ZUndfail ( V0_x : uint216 ) => #abiCallData ( "test_uint216_fail" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "test_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint224ZUndfail ( V0_x : uint224 ) => #abiCallData ( "test_uint224_fail" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "test_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint232ZUndfail ( V0_x : uint232 ) => #abiCallData ( "test_uint232_fail" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "test_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "test_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint240ZUndfail ( V0_x : uint240 ) => #abiCallData ( "test_uint240_fail" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "test_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint248ZUndfail ( V0_x : uint248 ) => #abiCallData ( "test_uint248_fail" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint24ZUndfail ( V0_x : uint24 ) => #abiCallData ( "test_uint24_fail" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "test_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint256ZUndfail ( V0_x : uint256 ) => #abiCallData ( "test_uint256_fail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "test_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint32ZUndfail ( V0_x : uint32 ) => #abiCallData ( "test_uint32_fail" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "test_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint40ZUndfail ( V0_x : uint40 ) => #abiCallData ( "test_uint40_fail" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "test_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint48ZUndfail ( V0_x : uint48 ) => #abiCallData ( "test_uint48_fail" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "test_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint56ZUndfail ( V0_x : uint56 ) => #abiCallData ( "test_uint56_fail" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "test_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint64ZUndfail ( V0_x : uint64 ) => #abiCallData ( "test_uint64_fail" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "test_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint72ZUndfail ( V0_x : uint72 ) => #abiCallData ( "test_uint72_fail" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "test_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "test_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint80ZUndfail ( V0_x : uint80 ) => #abiCallData ( "test_uint80_fail" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "test_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint88ZUndfail ( V0_x : uint88 ) => #abiCallData ( "test_uint88_fail" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint8ZUndfail ( V0_x : uint8 ) => #abiCallData ( "test_uint8_fail" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "test_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )


    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint96ZUndfail ( V0_x : uint96 ) => #abiCallData ( "test_uint96_fail" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )


    rule  ( selector ( "testFail_uint104(uint104)" ) => 1709154444 )


    rule  ( selector ( "testFail_uint112(uint112)" ) => 3541489285 )


    rule  ( selector ( "testFail_uint120(uint120)" ) => 3839169067 )


    rule  ( selector ( "testFail_uint128(uint128)" ) => 791678561 )


    rule  ( selector ( "testFail_uint136(uint136)" ) => 3952257705 )


    rule  ( selector ( "testFail_uint144(uint144)" ) => 2439595565 )


    rule  ( selector ( "testFail_uint152(uint152)" ) => 1866291148 )


    rule  ( selector ( "testFail_uint16(uint16)" ) => 4076431644 )


    rule  ( selector ( "testFail_uint160(uint160)" ) => 3214193107 )


    rule  ( selector ( "testFail_uint168(uint168)" ) => 2636444862 )


    rule  ( selector ( "testFail_uint176(uint176)" ) => 1828125968 )


    rule  ( selector ( "testFail_uint184(uint184)" ) => 4099305155 )


    rule  ( selector ( "testFail_uint192(uint192)" ) => 2858210891 )


    rule  ( selector ( "testFail_uint200(uint200)" ) => 1080270217 )


    rule  ( selector ( "testFail_uint208(uint208)" ) => 1831022189 )


    rule  ( selector ( "testFail_uint216(uint216)" ) => 2125101602 )


    rule  ( selector ( "testFail_uint224(uint224)" ) => 420776541 )


    rule  ( selector ( "testFail_uint232(uint232)" ) => 3163478438 )


    rule  ( selector ( "testFail_uint24(uint24)" ) => 639153936 )


    rule  ( selector ( "testFail_uint240(uint240)" ) => 3089966003 )


    rule  ( selector ( "testFail_uint248(uint248)" ) => 3070004620 )


    rule  ( selector ( "testFail_uint256(uint256)" ) => 3436494846 )


    rule  ( selector ( "testFail_uint32(uint32)" ) => 3218360567 )


    rule  ( selector ( "testFail_uint40(uint40)" ) => 347856329 )


    rule  ( selector ( "testFail_uint48(uint48)" ) => 4178735009 )


    rule  ( selector ( "testFail_uint56(uint56)" ) => 979020984 )


    rule  ( selector ( "testFail_uint64(uint64)" ) => 819975489 )


    rule  ( selector ( "testFail_uint72(uint72)" ) => 2059244458 )


    rule  ( selector ( "testFail_uint8(uint8)" ) => 3679593874 )


    rule  ( selector ( "testFail_uint80(uint80)" ) => 4180733980 )


    rule  ( selector ( "testFail_uint88(uint88)" ) => 42555031 )


    rule  ( selector ( "testFail_uint96(uint96)" ) => 2962957343 )


    rule  ( selector ( "test_uint104(uint104)" ) => 2030507202 )


    rule  ( selector ( "test_uint104_fail(uint104)" ) => 3289769429 )


    rule  ( selector ( "test_uint112(uint112)" ) => 1247465894 )


    rule  ( selector ( "test_uint112_fail(uint112)" ) => 198559186 )


    rule  ( selector ( "test_uint120(uint120)" ) => 4013273041 )


    rule  ( selector ( "test_uint120_fail(uint120)" ) => 4156608892 )


    rule  ( selector ( "test_uint128(uint128)" ) => 784802761 )


    rule  ( selector ( "test_uint128_fail(uint128)" ) => 3283002391 )


    rule  ( selector ( "test_uint136(uint136)" ) => 3590751506 )


    rule  ( selector ( "test_uint136_fail(uint136)" ) => 1740049059 )


    rule  ( selector ( "test_uint144(uint144)" ) => 1224379367 )


    rule  ( selector ( "test_uint144_fail(uint144)" ) => 3911233113 )


    rule  ( selector ( "test_uint152(uint152)" ) => 3210764837 )


    rule  ( selector ( "test_uint152_fail(uint152)" ) => 2472528383 )


    rule  ( selector ( "test_uint16(uint16)" ) => 1262288561 )


    rule  ( selector ( "test_uint160(uint160)" ) => 2446641645 )


    rule  ( selector ( "test_uint160_fail(uint160)" ) => 1289572651 )


    rule  ( selector ( "test_uint168(uint168)" ) => 2789196255 )


    rule  ( selector ( "test_uint168_fail(uint168)" ) => 413418206 )


    rule  ( selector ( "test_uint16_fail(uint16)" ) => 2736127289 )


    rule  ( selector ( "test_uint176(uint176)" ) => 3119759714 )


    rule  ( selector ( "test_uint176_fail(uint176)" ) => 2926152828 )


    rule  ( selector ( "test_uint184(uint184)" ) => 2419331356 )


    rule  ( selector ( "test_uint184_fail(uint184)" ) => 809918532 )


    rule  ( selector ( "test_uint192(uint192)" ) => 126849335 )


    rule  ( selector ( "test_uint192_fail(uint192)" ) => 965859284 )


    rule  ( selector ( "test_uint200(uint200)" ) => 342308100 )


    rule  ( selector ( "test_uint200_fail(uint200)" ) => 3554205475 )


    rule  ( selector ( "test_uint208(uint208)" ) => 664969356 )


    rule  ( selector ( "test_uint208_fail(uint208)" ) => 515244431 )


    rule  ( selector ( "test_uint216(uint216)" ) => 2735221135 )


    rule  ( selector ( "test_uint216_fail(uint216)" ) => 1244132421 )


    rule  ( selector ( "test_uint224(uint224)" ) => 2791725032 )


    rule  ( selector ( "test_uint224_fail(uint224)" ) => 3535210075 )


    rule  ( selector ( "test_uint232(uint232)" ) => 2781872781 )


    rule  ( selector ( "test_uint232_fail(uint232)" ) => 3352181217 )


    rule  ( selector ( "test_uint24(uint24)" ) => 2865563805 )


    rule  ( selector ( "test_uint240(uint240)" ) => 3274361055 )


    rule  ( selector ( "test_uint240_fail(uint240)" ) => 4046179916 )


    rule  ( selector ( "test_uint248(uint248)" ) => 578604507 )


    rule  ( selector ( "test_uint248_fail(uint248)" ) => 3580188072 )


    rule  ( selector ( "test_uint24_fail(uint24)" ) => 2328572638 )


    rule  ( selector ( "test_uint256(uint256)" ) => 851358597 )


    rule  ( selector ( "test_uint256_fail(uint256)" ) => 1895666222 )


    rule  ( selector ( "test_uint32(uint32)" ) => 982223766 )


    rule  ( selector ( "test_uint32_fail(uint32)" ) => 768917897 )


    rule  ( selector ( "test_uint40(uint40)" ) => 1298765870 )


    rule  ( selector ( "test_uint40_fail(uint40)" ) => 1685882915 )


    rule  ( selector ( "test_uint48(uint48)" ) => 454435065 )


    rule  ( selector ( "test_uint48_fail(uint48)" ) => 491533732 )


    rule  ( selector ( "test_uint56(uint56)" ) => 58659965 )


    rule  ( selector ( "test_uint56_fail(uint56)" ) => 3185974238 )


    rule  ( selector ( "test_uint64(uint64)" ) => 2511119799 )


    rule  ( selector ( "test_uint64_fail(uint64)" ) => 2000886247 )


    rule  ( selector ( "test_uint72(uint72)" ) => 3694811120 )


    rule  ( selector ( "test_uint72_fail(uint72)" ) => 875540037 )


    rule  ( selector ( "test_uint8(uint8)" ) => 1704021016 )


    rule  ( selector ( "test_uint80(uint80)" ) => 3841083967 )


    rule  ( selector ( "test_uint80_fail(uint80)" ) => 3626141300 )


    rule  ( selector ( "test_uint88(uint88)" ) => 100068129 )


    rule  ( selector ( "test_uint88_fail(uint88)" ) => 318744457 )


    rule  ( selector ( "test_uint8_fail(uint8)" ) => 2865005996 )


    rule  ( selector ( "test_uint96(uint96)" ) => 1315861753 )


    rule  ( selector ( "test_uint96_fail(uint96)" ) => 1635628195 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModVm-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModVmContract

    syntax S2KlibZModforgeZSubstdZModsrcZModVmContract ::= "S2KlibZModforgeZSubstdZModsrcZModVm" [symbol(), klabel(contract_lib%forge-std%src%Vm)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModVm ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModVm ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModVmContract "." S2KlibZModforgeZSubstdZModsrcZModVmMethod [function(), symbol(), klabel(method_lib%forge-std%src%Vm)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kaccesses_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KactiveFork" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KactiveFork_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kaddr_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KallowCheatcodes" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KallowCheatcodes_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kassume_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kbreakpoint_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kbreakpoint_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kbroadcast_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kbroadcast_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kbroadcast_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KchainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KchainId_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KclearMockedCalls" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KclearMockedCalls_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcloseFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kcoinbase" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kcoinbase_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcomputeCreate2Address_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcomputeCreate2Address_bytes32_bytes32_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcomputeCreateAddress" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcomputeCreateAddress_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcopyFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcopyFile_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateDir_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateFork_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateFork_string_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateFork_string_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateSelectFork_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateSelectFork_string_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateSelectFork_string_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateWallet" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateWallet_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateWallet_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KcreateWallet_uint256_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kdeal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kdeal_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KdeleteSnapshot" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KdeleteSnapshot_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KdeleteSnapshots" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KdeleteSnapshots_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KderiveKey_string_string_uint32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KderiveKey_string_string_uint32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KderiveKey_string_uint32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KderiveKey_string_uint32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kdifficulty" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kdifficulty_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KdumpState" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KdumpState_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvAddress_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvAddress_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvBool_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvBool_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvBytes_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvBytes_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvBytes32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvBytes32_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvInt_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvInt_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_bool_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_int256_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_string_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvOr_string_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvString_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvString_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvUint_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KenvUint_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ketch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ketch_address_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KethZUndgetLogs" "(" Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KethZUndgetLogs_uint256_uint256_address_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kexists" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kexists_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCall_address_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCall_address_bytes_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_bytes_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_uint64_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_uint64_bytes_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectEmit_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectEmit_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectEmit_bool_bool_bool_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectEmit_bool_bool_bool_bool_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectRevert_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectRevert_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectRevert_bytes4)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectSafeMemory" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectSafeMemory_uint64_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectSafeMemoryCall" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KexpectSafeMemoryCall_uint64_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kfee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kfee_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kffi" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kffi_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KfsMetadata_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetBlockNumber" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetBlockNumber_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetBlockTimestamp" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetBlockTimestamp_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetCode_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetDeployedCode_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetLabel_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetMappingKeyAndParentOf" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetMappingKeyAndParentOf_address_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetMappingLength" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetMappingLength_address_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetMappingSlotAt" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetMappingSlotAt_address_bytes32_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetNonce" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetNonce_address_uint256_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetNonce_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KgetRecordedLogs_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisDir" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KisDir_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KisFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisPersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KisPersistent_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KkeyExists" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KkeyExists_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Klabel_address_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kload_address_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KloadAllocs" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KloadAllocs_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmakePersistent_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmakePersistent_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmakePersistent_address_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmakePersistent_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmockCall_address_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmockCall_address_uint256_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmockCallRevert_address_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KmockCallRevert_address_uint256_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseAddress_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseBool_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseBytes_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseBytes32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseInt_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJson_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJson_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonAddress_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonAddressArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonBool_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonBoolArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonBytes_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonBytes32_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonBytes32Array_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonBytesArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonInt_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonIntArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonKeys" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonKeys_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonString_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonStringArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonUint_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseJsonUintArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KparseUint_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KpauseGasMetering" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KpauseGasMetering_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprank" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kprank_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kprank_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprevrandao" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kprevrandao_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KprojectRoot" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KprojectRoot_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadCallers" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadCallers_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadDir_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadDir_string_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadDir_string_uint64_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadFileBinary_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadLine_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KreadLink_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Krecord_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrecordLogs_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrememberKey_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KremoveDir_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KremoveFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KresetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KresetNonce_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KresumeGasMetering" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KresumeGasMetering_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevertTo" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrevertTo_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevertToAndDelete" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrevertToAndDelete_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevokePersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrevokePersistent_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevokePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrevokePersistent_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kroll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kroll_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrollFork_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrollFork_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrollFork_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrollFork_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Krpc" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Krpc_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrpcUrl_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrpcUrlStructs_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KrpcUrls_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KselectFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KselectFork_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeAddress_string_string_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeAddress_string_string_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeBool_string_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeBool_string_string_bool_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeBytes_string_string_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeBytes_string_string_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeBytes32_string_string_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeBytes32_string_string_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeInt_string_string_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeInt_string_string_int256_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeJson_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeString_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeString_string_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeUint_string_string_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KserializeUint_string_string_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KsetEnv_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KsetNonce_address_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetNonceUnsafe" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KsetNonceUnsafe_address_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksign" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ksign_address_uint256_uint256_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ksign_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsignP256" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KsignP256_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kskip" "(" Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kskip_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksleep" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ksleep_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksnapshot" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ksnapshot_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartBroadcast_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartBroadcast_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartBroadcast_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartMappingRecording" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartMappingRecording_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartPrank" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartPrank_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartPrank_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartStateDiffRecording" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstartStateDiffRecording_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopAndReturnStateDiff" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstopAndReturnStateDiff_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstopBroadcast_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopMappingRecording" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstopMappingRecording_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopPrank" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KstopPrank_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kstore" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kstore_address_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoBase64" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoBase64_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoBase64" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoBase64_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoBase64URL" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoBase64URL_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoBase64URL" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoBase64URL_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoString_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoString_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoString_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoString_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoString_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtoString_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ktransact" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ktransact_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ktransact" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Ktransact_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtryFfi" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtryFfi_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtxGasPrice" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KtxGasPrice_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KunixTime" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KunixTime_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kwarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2Kwarp_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KwriteFile_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KwriteFileBinary_string_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KwriteJson_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KwriteJson_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%Vm_S2KwriteLine_string_string)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , #address ( V0_target ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_target )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KactiveFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KallowCheatcodes ( V0_account : address ) => #abiCallData ( "allowCheatcodes" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , #bool ( V0_condition ) , .TypedArgs ) )
       ensures #rangeBool ( V0_condition )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , #bool ( V1_value ) , .TypedArgs ) )
       ensures #rangeBool ( V1_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KchainId ( V0_newChainId : uint256 ) => #abiCallData ( "chainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KclearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kcoinbase ( V0_newCoinbase : address ) => #abiCallData ( "coinbase" , #address ( V0_newCoinbase ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_newCoinbase )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 , V2_deployer : address ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , #address ( V2_deployer ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
       andBool ( #rangeAddress ( V2_deployer )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcomputeCreateAddress ( V0_deployer : address , V1_nonce : uint256 ) => #abiCallData ( "computeCreateAddress" , #address ( V0_deployer ) , #uint256 ( V1_nonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_deployer )
       andBool ( #rangeUInt ( 256 , V1_nonce )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcopyFile ( V0_from : string , V1_to : string ) => #abiCallData ( "copyFile" , #string ( V0_from ) , #string ( V1_to ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_txHash )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_txHash )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateWallet ( V0_walletLabel : string ) => #abiCallData ( "createWallet" , #string ( V0_walletLabel ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateWallet ( V0_privateKey : uint256 ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateWallet ( V0_privateKey : uint256 , V1_walletLabel : string ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , #string ( V1_walletLabel ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kdeal ( V0_account : address , V1_newBalance : uint256 ) => #abiCallData ( "deal" , #address ( V0_account ) , #uint256 ( V1_newBalance ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 256 , V1_newBalance )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KdeleteSnapshot ( V0_snapshotId : uint256 ) => #abiCallData ( "deleteSnapshot" , #uint256 ( V0_snapshotId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_snapshotId )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KdeleteSnapshots ( ) => #abiCallData ( "deleteSnapshots" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 , V3_language : string ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , #string ( V3_language ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 , V2_language : string ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , #string ( V2_language ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kdifficulty ( V0_newDifficulty : uint256 ) => #abiCallData ( "difficulty" , #uint256 ( V0_newDifficulty ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newDifficulty )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KdumpState ( V0_pathToStateJson : string ) => #abiCallData ( "dumpState" , #string ( V0_pathToStateJson ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #address ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeAddress ( V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bool ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBool ( V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_defaultValue ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes32 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #int256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_defaultValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : address , V2_defaultValue_1 : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #address ( V2_defaultValue_0 ) , 2 , #address ( V2_defaultValue_0 ) , #address ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V2_defaultValue_0 )
       andBool ( #rangeAddress ( V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bool , V2_defaultValue_1 : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #bool ( V2_defaultValue_0 ) , 2 , #bool ( V2_defaultValue_0 ) , #bool ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBool ( V2_defaultValue_0 )
       andBool ( #rangeBool ( V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes32 , V2_defaultValue_1 : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #bytes32 ( V2_defaultValue_0 ) , 2 , #bytes32 ( V2_defaultValue_0 ) , #bytes32 ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V2_defaultValue_0 )
       andBool ( #rangeBytes ( 32 , V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes , V2_defaultValue_1 : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #bytes ( V2_defaultValue_0 ) , 2 , #bytes ( V2_defaultValue_0 ) , #bytes ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_1 ) )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : int256 , V2_defaultValue_1 : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #int256 ( V2_defaultValue_0 ) , 2 , #int256 ( V2_defaultValue_0 ) , #int256 ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeSInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeSInt ( 256 , V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : string , V2_defaultValue_1 : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #string ( V2_defaultValue_0 ) , 2 , #string ( V2_defaultValue_0 ) , #string ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : uint256 , V2_defaultValue_1 : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #uint256 ( V2_defaultValue_0 ) , 2 , #uint256 ( V2_defaultValue_0 ) , #uint256 ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeUInt ( 256 , V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #uint256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ketch ( V0_target : address , V1_newRuntimeBytecode : bytes ) => #abiCallData ( "etch" , #address ( V0_target ) , #bytes ( V1_newRuntimeBytecode ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_newRuntimeBytecode ) )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KethZUndgetLogs ( V0_fromBlock : uint256 , V1_toBlock : uint256 , V2_target : address , V3_topics_0 : bytes32 , V3_topics_1 : bytes32 ) => #abiCallData ( "eth_getLogs" , #uint256 ( V0_fromBlock ) , #uint256 ( V1_toBlock ) , #address ( V2_target ) , #array ( #bytes32 ( V3_topics_0 ) , 2 , #bytes32 ( V3_topics_0 ) , #bytes32 ( V3_topics_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_fromBlock )
       andBool ( #rangeUInt ( 256 , V1_toBlock )
       andBool ( #rangeAddress ( V2_target )
       andBool ( #rangeBytes ( 32 , V3_topics_0 )
       andBool ( #rangeBytes ( 32 , V3_topics_1 )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kexists ( V0_path : string ) => #abiCallData ( "exists" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_data : bytes , V2_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #bytes ( V1_data ) , #uint64 ( V2_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , V2_count )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #uint64 ( V3_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , V3_count )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_gas ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_gas ) , #bytes ( V3_data ) , #uint64 ( V4_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCallMinGas" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_minGas ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCallMinGas" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_minGas ) , #bytes ( V3_data ) , #uint64 ( V4_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( ) => #abiCallData ( "expectEmit" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_emitter : address ) => #abiCallData ( "expectEmit" , #address ( V0_emitter ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_emitter )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool ) => #abiCallData ( "expectEmit" , #bool ( V0_checkTopic1 ) , #bool ( V1_checkTopic2 ) , #bool ( V2_checkTopic3 ) , #bool ( V3_checkData ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool , V4_emitter : address ) => #abiCallData ( "expectEmit" , #bool ( V0_checkTopic1 ) , #bool ( V1_checkTopic2 ) , #bool ( V2_checkTopic3 ) , #bool ( V3_checkData ) , #address ( V4_emitter ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
       andBool ( #rangeAddress ( V4_emitter )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( V0_revertData : bytes ) => #abiCallData ( "expectRevert" , #bytes ( V0_revertData ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_revertData ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( V0_revertData : bytes4 ) => #abiCallData ( "expectRevert" , #bytes4 ( V0_revertData ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_revertData )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectSafeMemory ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemory" , #uint64 ( V0_min ) , #uint64 ( V1_max ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectSafeMemoryCall ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemoryCall" , #uint64 ( V0_min ) , #uint64 ( V1_max ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kfee ( V0_newBasefee : uint256 ) => #abiCallData ( "fee" , #uint256 ( V0_newBasefee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newBasefee )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kffi ( V0_commandInput_0 : string , V0_commandInput_1 : string ) => #abiCallData ( "ffi" , #array ( #string ( V0_commandInput_0 ) , 2 , #string ( V0_commandInput_0 ) , #string ( V0_commandInput_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetBlockNumber ( ) => #abiCallData ( "getBlockNumber" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetBlockTimestamp ( ) => #abiCallData ( "getBlockTimestamp" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , #string ( V0_artifactPath ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , #string ( V0_artifactPath ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetMappingKeyAndParentOf ( V0_target : address , V1_elementSlot : bytes32 ) => #abiCallData ( "getMappingKeyAndParentOf" , #address ( V0_target ) , #bytes32 ( V1_elementSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_elementSlot )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetMappingLength ( V0_target : address , V1_mappingSlot : bytes32 ) => #abiCallData ( "getMappingLength" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetMappingSlotAt ( V0_target : address , V1_mappingSlot : bytes32 , V2_idx : uint256 ) => #abiCallData ( "getMappingSlotAt" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , #uint256 ( V2_idx ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
       andBool ( #rangeUInt ( 256 , V2_idx )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetNonce ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 ) => #abiCallData ( "getNonce" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisDir ( V0_path : string ) => #abiCallData ( "isDir" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisFile ( V0_path : string ) => #abiCallData ( "isFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisPersistent ( V0_account : address ) => #abiCallData ( "isPersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KkeyExists ( V0_json : string , V1_key : string ) => #abiCallData ( "keyExists" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , #address ( V0_account ) , #string ( V1_newLabel ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , #address ( V0_target ) , #bytes32 ( V1_slot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KloadAllocs ( V0_pathToAllocsJson : string ) => #abiCallData ( "loadAllocs" , #string ( V0_pathToAllocsJson ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account : address ) => #abiCallData ( "makePersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address ) => #abiCallData ( "makePersistent" , #address ( V0_account0 ) , #address ( V1_account1 ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address , V2_account2 : address ) => #abiCallData ( "makePersistent" , #address ( V0_account0 ) , #address ( V1_account1 ) , #address ( V2_account2 ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
       andBool ( #rangeAddress ( V2_account2 )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_accounts_0 : address , V0_accounts_1 : address ) => #abiCallData ( "makePersistent" , #array ( #address ( V0_accounts_0 ) , 2 , #address ( V0_accounts_0 ) , #address ( V0_accounts_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_accounts_0 )
       andBool ( #rangeAddress ( V0_accounts_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCall ( V0_callee : address , V1_data : bytes , V2_returnData : bytes ) => #abiCallData ( "mockCall" , #address ( V0_callee ) , #bytes ( V1_data ) , #bytes ( V2_returnData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_returnData ) )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_returnData : bytes ) => #abiCallData ( "mockCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #bytes ( V3_returnData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_returnData ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCallRevert ( V0_callee : address , V1_data : bytes , V2_revertData : bytes ) => #abiCallData ( "mockCallRevert" , #address ( V0_callee ) , #bytes ( V1_data ) , #bytes ( V2_revertData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_revertData ) )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCallRevert ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_revertData : bytes ) => #abiCallData ( "mockCallRevert" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #bytes ( V3_revertData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_revertData ) )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonAddress ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddress" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonAddressArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddressArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBool ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBool" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBoolArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBoolArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes32 ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes32Array ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32Array" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytesArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytesArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonInt ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonInt" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonIntArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonIntArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonKeys ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonKeys" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonString ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonString" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonStringArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonStringArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonUint ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUint" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonUintArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUintArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprank ( V0_msgSender : address ) => #abiCallData ( "prank" , #address ( V0_msgSender ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_msgSender )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "prank" , #address ( V0_msgSender ) , #address ( V1_txOrigin ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprevrandao ( V0_newPrevrandao : bytes32 ) => #abiCallData ( "prevrandao" , #bytes32 ( V0_newPrevrandao ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_newPrevrandao )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadCallers ( ) => #abiCallData ( "readCallers" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , #bool ( V2_followLinks ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , #string ( V0_linkPath ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KresetNonce ( V0_account : address ) => #abiCallData ( "resetNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevertTo ( V0_snapshotId : uint256 ) => #abiCallData ( "revertTo" , #uint256 ( V0_snapshotId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_snapshotId )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevertToAndDelete ( V0_snapshotId : uint256 ) => #abiCallData ( "revertToAndDelete" , #uint256 ( V0_snapshotId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_snapshotId )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevokePersistent ( V0_account : address ) => #abiCallData ( "revokePersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevokePersistent ( V0_accounts_0 : address , V0_accounts_1 : address ) => #abiCallData ( "revokePersistent" , #array ( #address ( V0_accounts_0 ) , 2 , #address ( V0_accounts_0 ) , #address ( V0_accounts_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_accounts_0 )
       andBool ( #rangeAddress ( V0_accounts_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kroll ( V0_newHeight : uint256 ) => #abiCallData ( "roll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_txHash : bytes32 ) => #abiCallData ( "rollFork" , #bytes32 ( V0_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_txHash )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Krpc ( V0_method : string , V1_params : string ) => #abiCallData ( "rpc" , #string ( V0_method ) , #string ( V1_params ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , #string ( V0_rpcAlias ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KselectFork ( V0_forkId : uint256 ) => #abiCallData ( "selectFork" , #uint256 ( V0_forkId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_forkId )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #address ( V2_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : address , V2_values_1 : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #address ( V2_values_0 ) , 2 , #address ( V2_values_0 ) , #address ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V2_values_0 )
       andBool ( #rangeAddress ( V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bool ( V2_value ) , .TypedArgs ) )
       ensures #rangeBool ( V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bool , V2_values_1 : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #bool ( V2_values_0 ) , 2 , #bool ( V2_values_0 ) , #bool ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBool ( V2_values_0 )
       andBool ( #rangeBool ( V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V2_value ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes , V2_values_1 : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #bytes ( V2_values_0 ) , 2 , #bytes ( V2_values_0 ) , #bytes ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_values_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_values_1 ) )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes32 , V2_values_1 : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #bytes32 ( V2_values_0 ) , 2 , #bytes32 ( V2_values_0 ) , #bytes32 ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V2_values_0 )
       andBool ( #rangeBytes ( 32 , V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #int256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : int256 , V2_values_1 : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #int256 ( V2_values_0 ) , 2 , #int256 ( V2_values_0 ) , #int256 ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeSInt ( 256 , V2_values_0 )
       andBool ( #rangeSInt ( 256 , V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeJson ( V0_objectKey : string , V1_value : string ) => #abiCallData ( "serializeJson" , #string ( V0_objectKey ) , #string ( V1_value ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #string ( V2_value ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : string , V2_values_1 : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #string ( V2_values_0 ) , 2 , #string ( V2_values_0 ) , #string ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #uint256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : uint256 , V2_values_1 : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #uint256 ( V2_values_0 ) , 2 , #uint256 ( V2_values_0 ) , #uint256 ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V2_values_0 )
       andBool ( #rangeUInt ( 256 , V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , #string ( V0_name ) , #string ( V1_value ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetNonce ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonce" , #address ( V0_account ) , #uint64 ( V1_newNonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetNonceUnsafe ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonceUnsafe" , #address ( V0_account ) , #uint64 ( V1_newNonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksign ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 , V4_digest : bytes32 ) => #abiCallData ( "sign" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , #bytes32 ( V4_digest ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
       andBool ( #rangeBytes ( 32 , V4_digest )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsignP256 ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "signP256" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kskip ( V0_skipTest : bool ) => #abiCallData ( "skip" , #bool ( V0_skipTest ) , .TypedArgs ) )
       ensures #rangeBool ( V0_skipTest )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksleep ( V0_duration : uint256 ) => #abiCallData ( "sleep" , #uint256 ( V0_duration ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_duration )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksnapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartMappingRecording ( ) => #abiCallData ( "startMappingRecording" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartPrank ( V0_msgSender : address ) => #abiCallData ( "startPrank" , #address ( V0_msgSender ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_msgSender )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartPrank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "startPrank" , #address ( V0_msgSender ) , #address ( V1_txOrigin ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartStateDiffRecording ( ) => #abiCallData ( "startStateDiffRecording" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopAndReturnStateDiff ( ) => #abiCallData ( "stopAndReturnStateDiff" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopMappingRecording ( ) => #abiCallData ( "stopMappingRecording" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kstore ( V0_target : address , V1_slot : bytes32 , V2_value : bytes32 ) => #abiCallData ( "store" , #address ( V0_target ) , #bytes32 ( V1_slot ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
       andBool ( #rangeBytes ( 32 , V2_value )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoBase64 ( V0_data : bytes ) => #abiCallData ( "toBase64" , #bytes ( V0_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_data ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoBase64 ( V0_data : string ) => #abiCallData ( "toBase64" , #string ( V0_data ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoBase64URL ( V0_data : bytes ) => #abiCallData ( "toBase64URL" , #bytes ( V0_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_data ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoBase64URL ( V0_data : string ) => #abiCallData ( "toBase64URL" , #string ( V0_data ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , #address ( V0_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , #bool ( V0_value ) , .TypedArgs ) )
       ensures #rangeBool ( V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , #bytes ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_value ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , #int256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ktransact ( V0_txHash : bytes32 ) => #abiCallData ( "transact" , #bytes32 ( V0_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_txHash )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ktransact ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "transact" , #uint256 ( V0_forkId ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtryFfi ( V0_commandInput_0 : string , V0_commandInput_1 : string ) => #abiCallData ( "tryFfi" , #array ( #string ( V0_commandInput_0 ) , 2 , #string ( V0_commandInput_0 ) , #string ( V0_commandInput_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtxGasPrice ( V0_newGasPrice : uint256 ) => #abiCallData ( "txGasPrice" , #uint256 ( V0_newGasPrice ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newGasPrice )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KunixTime ( ) => #abiCallData ( "unixTime" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kwarp ( V0_newTimestamp : uint256 ) => #abiCallData ( "warp" , #uint256 ( V0_newTimestamp ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newTimestamp )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , #string ( V0_path ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_data ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , #string ( V2_valueKey ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )


    rule  ( selector ( "accesses(address)" ) => 1706857601 )


    rule  ( selector ( "activeFork()" ) => 789593890 )


    rule  ( selector ( "addr(uint256)" ) => 4288775753 )


    rule  ( selector ( "allowCheatcodes(address)" ) => 3926262417 )


    rule  ( selector ( "assume(bool)" ) => 1281615202 )


    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )


    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )


    rule  ( selector ( "broadcast()" ) => 2949218368 )


    rule  ( selector ( "broadcast(address)" ) => 3868601563 )


    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )


    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )


    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )


    rule  ( selector ( "closeFile(string)" ) => 1220748319 )


    rule  ( selector ( "coinbase(address)" ) => 4282924116 )


    rule  ( selector ( "computeCreate2Address(bytes32,bytes32)" ) => 2299275323 )


    rule  ( selector ( "computeCreate2Address(bytes32,bytes32,address)" ) => 3542319722 )


    rule  ( selector ( "computeCreateAddress(address,uint256)" ) => 1952676474 )


    rule  ( selector ( "copyFile(string,string)" ) => 2773125080 )


    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )


    rule  ( selector ( "createFork(string)" ) => 834286744 )


    rule  ( selector ( "createFork(string,bytes32)" ) => 2091030146 )


    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )


    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )


    rule  ( selector ( "createSelectFork(string,bytes32)" ) => 2228562810 )


    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )


    rule  ( selector ( "createWallet(string)" ) => 1946481106 )


    rule  ( selector ( "createWallet(uint256)" ) => 2053594038 )


    rule  ( selector ( "createWallet(uint256,string)" ) => 3984348258 )


    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )


    rule  ( selector ( "deleteSnapshot(uint256)" ) => 2788590935 )


    rule  ( selector ( "deleteSnapshots()" ) => 1109058665 )


    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )


    rule  ( selector ( "deriveKey(string,string,uint32,string)" ) => 690174751 )


    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )


    rule  ( selector ( "deriveKey(string,uint32,string)" ) => 851973997 )


    rule  ( selector ( "difficulty(uint256)" ) => 1187812057 )


    rule  ( selector ( "dumpState(string)" ) => 1889455423 )


    rule  ( selector ( "envAddress(string)" ) => 890066623 )


    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )


    rule  ( selector ( "envBool(string)" ) => 2127686781 )


    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )


    rule  ( selector ( "envBytes(string)" ) => 1299951366 )


    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )


    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )


    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )


    rule  ( selector ( "envInt(string)" ) => 2301234273 )


    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )


    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )


    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )


    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )


    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )


    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )


    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )


    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )


    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )


    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )


    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )


    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )


    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )


    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )


    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )


    rule  ( selector ( "envString(string)" ) => 4168600345 )


    rule  ( selector ( "envString(string,string)" ) => 347089865 )


    rule  ( selector ( "envUint(string)" ) => 3247934751 )


    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )


    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )


    rule  ( selector ( "eth_getLogs(uint256,uint256,address,bytes32[])" ) => 903951515 )


    rule  ( selector ( "exists(string)" ) => 639251006 )


    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )


    rule  ( selector ( "expectCall(address,bytes,uint64)" ) => 3249388543 )


    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )


    rule  ( selector ( "expectCall(address,uint256,bytes,uint64)" ) => 2729550254 )


    rule  ( selector ( "expectCall(address,uint256,uint64,bytes)" ) => 590746119 )


    rule  ( selector ( "expectCall(address,uint256,uint64,bytes,uint64)" ) => 1706538956 )


    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes)" ) => 149217558 )


    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes,uint64)" ) => 3778680884 )


    rule  ( selector ( "expectEmit()" ) => 1141821709 )


    rule  ( selector ( "expectEmit(address)" ) => 2260296205 )


    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )


    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )


    rule  ( selector ( "expectRevert()" ) => 4102309908 )


    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )


    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )


    rule  ( selector ( "expectSafeMemory(uint64,uint64)" ) => 1828808328 )


    rule  ( selector ( "expectSafeMemoryCall(uint64,uint64)" ) => 92507124 )


    rule  ( selector ( "fee(uint256)" ) => 968063664 )


    rule  ( selector ( "ffi(string[])" ) => 2299921511 )


    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )


    rule  ( selector ( "getBlockNumber()" ) => 1120645468 )


    rule  ( selector ( "getBlockTimestamp()" ) => 2037090745 )


    rule  ( selector ( "getCode(string)" ) => 2367473957 )


    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )


    rule  ( selector ( "getLabel(address)" ) => 681724336 )


    rule  ( selector ( "getMappingKeyAndParentOf(address,bytes32)" ) => 2272142566 )


    rule  ( selector ( "getMappingLength(address,bytes32)" ) => 791664191 )


    rule  ( selector ( "getMappingSlotAt(address,bytes32,uint256)" ) => 3955702452 )


    rule  ( selector ( "getNonce((address,uint256,uint256,uint256))" ) => 2775878317 )


    rule  ( selector ( "getNonce(address)" ) => 755185067 )


    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )


    rule  ( selector ( "isDir(string)" ) => 2098581529 )


    rule  ( selector ( "isFile(string)" ) => 3773498580 )


    rule  ( selector ( "isPersistent(address)" ) => 3643641597 )


    rule  ( selector ( "keyExists(string,string)" ) => 1384802364 )


    rule  ( selector ( "label(address,string)" ) => 3327641368 )


    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )


    rule  ( selector ( "loadAllocs(string)" ) => 3013629655 )


    rule  ( selector ( "makePersistent(address)" ) => 1474440670 )


    rule  ( selector ( "makePersistent(address,address)" ) => 1081401512 )


    rule  ( selector ( "makePersistent(address,address,address)" ) => 4021779061 )


    rule  ( selector ( "makePersistent(address[])" ) => 496903838 )


    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )


    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )


    rule  ( selector ( "mockCallRevert(address,bytes,bytes)" ) => 3685404999 )


    rule  ( selector ( "mockCallRevert(address,uint256,bytes,bytes)" ) => 3527200823 )


    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )


    rule  ( selector ( "parseBool(string)" ) => 2538535204 )


    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )


    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )


    rule  ( selector ( "parseInt(string)" ) => 1110731870 )


    rule  ( selector ( "parseJson(string)" ) => 1786929162 )


    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )


    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )


    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )


    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )


    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )


    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )


    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )


    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )


    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )


    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )


    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )


    rule  ( selector ( "parseJsonKeys(string,string)" ) => 557728152 )


    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )


    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )


    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )


    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )


    rule  ( selector ( "parseUint(string)" ) => 4203824461 )


    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )


    rule  ( selector ( "prank(address)" ) => 3395723175 )


    rule  ( selector ( "prank(address,address)" ) => 1206193358 )


    rule  ( selector ( "prevrandao(bytes32)" ) => 999445833 )


    rule  ( selector ( "projectRoot()" ) => 3643842790 )


    rule  ( selector ( "readCallers()" ) => 1255193289 )


    rule  ( selector ( "readDir(string)" ) => 3300678112 )


    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )


    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )


    rule  ( selector ( "readFile(string)" ) => 1626979089 )


    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )


    rule  ( selector ( "readLine(string)" ) => 1895126824 )


    rule  ( selector ( "readLink(string)" ) => 2673247394 )


    rule  ( selector ( "record()" ) => 644673801 )


    rule  ( selector ( "recordLogs()" ) => 1101999954 )


    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )


    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )


    rule  ( selector ( "removeFile(string)" ) => 4054835277 )


    rule  ( selector ( "resetNonce(address)" ) => 477246573 )


    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )


    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )


    rule  ( selector ( "revertToAndDelete(uint256)" ) => 65055913 )


    rule  ( selector ( "revokePersistent(address)" ) => 2574909986 )


    rule  ( selector ( "revokePersistent(address[])" ) => 1021929958 )


    rule  ( selector ( "roll(uint256)" ) => 528174896 )


    rule  ( selector ( "rollFork(bytes32)" ) => 254375723 )


    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )


    rule  ( selector ( "rollFork(uint256,bytes32)" ) => 4068675451 )


    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )


    rule  ( selector ( "rpc(string,string)" ) => 302434472 )


    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )


    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )


    rule  ( selector ( "rpcUrls()" ) => 2824504344 )


    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )


    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )


    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )


    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )


    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )


    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )


    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )


    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )


    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )


    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )


    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )


    rule  ( selector ( "serializeJson(string,string)" ) => 2603833520 )


    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )


    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )


    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )


    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )


    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )


    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )


    rule  ( selector ( "setNonceUnsafe(address,uint64)" ) => 2607264284 )


    rule  ( selector ( "sign((address,uint256,uint256,uint256),bytes32)" ) => 2992396837 )


    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )


    rule  ( selector ( "signP256(uint256,bytes32)" ) => 2199984960 )


    rule  ( selector ( "skip(bool)" ) => 3716337982 )


    rule  ( selector ( "sleep(uint256)" ) => 4204627731 )


    rule  ( selector ( "snapshot()" ) => 2534502746 )


    rule  ( selector ( "startBroadcast()" ) => 2142579071 )


    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )


    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )


    rule  ( selector ( "startMappingRecording()" ) => 1050084800 )


    rule  ( selector ( "startPrank(address)" ) => 105151830 )


    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )


    rule  ( selector ( "startStateDiffRecording()" ) => 3475170249 )


    rule  ( selector ( "stopAndReturnStateDiff()" ) => 2858219790 )


    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )


    rule  ( selector ( "stopMappingRecording()" ) => 222998171 )


    rule  ( selector ( "stopPrank()" ) => 2428830011 )


    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )


    rule  ( selector ( "toBase64(bytes)" ) => 2781609573 )


    rule  ( selector ( "toBase64(string)" ) => 1066132168 )


    rule  ( selector ( "toBase64URL(bytes)" ) => 3367833162 )


    rule  ( selector ( "toBase64URL(string)" ) => 2922472883 )


    rule  ( selector ( "toString(address)" ) => 1456103998 )


    rule  ( selector ( "toString(bool)" ) => 1910302682 )


    rule  ( selector ( "toString(bytes)" ) => 1907020045 )


    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )


    rule  ( selector ( "toString(int256)" ) => 2736964622 )


    rule  ( selector ( "toString(uint256)" ) => 1761649582 )


    rule  ( selector ( "transact(bytes32)" ) => 3194252705 )


    rule  ( selector ( "transact(uint256,bytes32)" ) => 1300937803 )


    rule  ( selector ( "tryFfi(string[])" ) => 4099677415 )


    rule  ( selector ( "txGasPrice(uint256)" ) => 1224018959 )


    rule  ( selector ( "unixTime()" ) => 1649641436 )


    rule  ( selector ( "warp(uint256)" ) => 3856056066 )


    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )


    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )


    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )


    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )


    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModVmSafe-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModVmSafeContract

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModVmSafe" [symbol(), klabel(contract_lib%forge-std%src%VmSafe)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModVmSafe ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModVmSafe ) => #parseByteStack ( "0x" ) )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModVmSafeContract "." S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod [function(), symbol(), klabel(method_lib%forge-std%src%VmSafe)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kaccesses_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kaddr_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kassume_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kbreakpoint_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kbreakpoint_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kbroadcast_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kbroadcast_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kbroadcast_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcloseFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcomputeCreate2Address_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcomputeCreate2Address_bytes32_bytes32_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcomputeCreateAddress" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcomputeCreateAddress_address_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcopyFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcopyFile_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcreateDir_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateWallet" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcreateWallet_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcreateWallet_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KcreateWallet_uint256_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KderiveKey_string_string_uint32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KderiveKey_string_string_uint32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KderiveKey_string_uint32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KderiveKey_string_uint32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvAddress_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvAddress_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvBool_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvBool_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvBytes_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvBytes_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvBytes32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvBytes32_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvInt_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvInt_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_bool_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_int256_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvOr_string_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvString_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvString_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvUint_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KenvUint_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KethZUndgetLogs" "(" Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KethZUndgetLogs_uint256_uint256_address_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kexists" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kexists_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kffi" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kffi_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KfsMetadata_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetBlockNumber" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetBlockNumber_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetBlockTimestamp" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetBlockTimestamp_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetCode_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetDeployedCode_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetLabel_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetMappingKeyAndParentOf" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetMappingKeyAndParentOf_address_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetMappingLength" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetMappingLength_address_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetMappingSlotAt" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetMappingSlotAt_address_bytes32_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetNonce" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetNonce_address_uint256_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetNonce_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KgetRecordedLogs_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KisDir" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KisDir_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KisFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KisFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KkeyExists" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KkeyExists_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Klabel_address_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Kload_address_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseAddress_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseBool_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseBytes_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseBytes32_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseInt_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJson_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJson_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonAddress_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonAddressArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonBool_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonBoolArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonBytes_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonBytes32_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonBytes32Array_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonBytesArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonInt_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonIntArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonKeys" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonKeys_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonString_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonStringArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonUint_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseJsonUintArray_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KparseUint_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KpauseGasMetering" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KpauseGasMetering_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KprojectRoot" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KprojectRoot_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadDir_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadDir_string_uint64)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadDir_string_uint64_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadFileBinary_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadLine_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KreadLink_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Krecord_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KrecordLogs_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KrememberKey_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KremoveDir_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KremoveFile_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KresumeGasMetering" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KresumeGasMetering_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Krpc" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Krpc_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KrpcUrl_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KrpcUrlStructs_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KrpcUrls_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeAddress_string_string_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeAddress_string_string_address_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeBool_string_string_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeBool_string_string_bool_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeBytes_string_string_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeBytes_string_string_bytes_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeBytes32_string_string_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeBytes32_string_string_bytes32_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeInt_string_string_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeInt_string_string_int256_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeJson_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeString_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeString_string_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeUint_string_string_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KserializeUint_string_string_uint256_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KsetEnv_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksign" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Ksign_address_uint256_uint256_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Ksign_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KsignP256" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KsignP256_uint256_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksleep" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2Ksleep_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstartBroadcast_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstartBroadcast_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstartBroadcast_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartMappingRecording" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstartMappingRecording_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartStateDiffRecording" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstartStateDiffRecording_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopAndReturnStateDiff" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstopAndReturnStateDiff_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstopBroadcast_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopMappingRecording" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KstopMappingRecording_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoBase64" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoBase64_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoBase64" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoBase64_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoBase64URL" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoBase64URL_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoBase64URL" "(" String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoBase64URL_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoString_address)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoString_bool)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoString_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoString_bytes32)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoString_int256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtoString_uint256)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtryFfi" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KtryFfi_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KunixTime" "(" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KunixTime_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KwriteFile_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KwriteFileBinary_string_bytes)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KwriteJson_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KwriteJson_string_string_string)]

    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_lib%forge-std%src%VmSafe_S2KwriteLine_string_string)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , #address ( V0_target ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_target )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , #bool ( V0_condition ) , .TypedArgs ) )
       ensures #rangeBool ( V0_condition )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , #bool ( V1_value ) , .TypedArgs ) )
       ensures #rangeBool ( V1_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 , V2_deployer : address ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , #address ( V2_deployer ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
       andBool ( #rangeAddress ( V2_deployer )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcomputeCreateAddress ( V0_deployer : address , V1_nonce : uint256 ) => #abiCallData ( "computeCreateAddress" , #address ( V0_deployer ) , #uint256 ( V1_nonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_deployer )
       andBool ( #rangeUInt ( 256 , V1_nonce )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcopyFile ( V0_from : string , V1_to : string ) => #abiCallData ( "copyFile" , #string ( V0_from ) , #string ( V1_to ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateWallet ( V0_walletLabel : string ) => #abiCallData ( "createWallet" , #string ( V0_walletLabel ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateWallet ( V0_privateKey : uint256 ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateWallet ( V0_privateKey : uint256 , V1_walletLabel : string ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , #string ( V1_walletLabel ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 , V3_language : string ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , #string ( V3_language ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 , V2_language : string ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , #string ( V2_language ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #address ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeAddress ( V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bool ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBool ( V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_defaultValue ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes32 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #int256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_defaultValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : address , V2_defaultValue_1 : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #address ( V2_defaultValue_0 ) , 2 , #address ( V2_defaultValue_0 ) , #address ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V2_defaultValue_0 )
       andBool ( #rangeAddress ( V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bool , V2_defaultValue_1 : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #bool ( V2_defaultValue_0 ) , 2 , #bool ( V2_defaultValue_0 ) , #bool ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBool ( V2_defaultValue_0 )
       andBool ( #rangeBool ( V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes32 , V2_defaultValue_1 : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #bytes32 ( V2_defaultValue_0 ) , 2 , #bytes32 ( V2_defaultValue_0 ) , #bytes32 ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V2_defaultValue_0 )
       andBool ( #rangeBytes ( 32 , V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes , V2_defaultValue_1 : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #bytes ( V2_defaultValue_0 ) , 2 , #bytes ( V2_defaultValue_0 ) , #bytes ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_1 ) )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : int256 , V2_defaultValue_1 : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #int256 ( V2_defaultValue_0 ) , 2 , #int256 ( V2_defaultValue_0 ) , #int256 ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeSInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeSInt ( 256 , V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : string , V2_defaultValue_1 : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #string ( V2_defaultValue_0 ) , 2 , #string ( V2_defaultValue_0 ) , #string ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : uint256 , V2_defaultValue_1 : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_delim ) , #array ( #uint256 ( V2_defaultValue_0 ) , 2 , #uint256 ( V2_defaultValue_0 ) , #uint256 ( V2_defaultValue_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeUInt ( 256 , V2_defaultValue_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #uint256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KethZUndgetLogs ( V0_fromBlock : uint256 , V1_toBlock : uint256 , V2_target : address , V3_topics_0 : bytes32 , V3_topics_1 : bytes32 ) => #abiCallData ( "eth_getLogs" , #uint256 ( V0_fromBlock ) , #uint256 ( V1_toBlock ) , #address ( V2_target ) , #array ( #bytes32 ( V3_topics_0 ) , 2 , #bytes32 ( V3_topics_0 ) , #bytes32 ( V3_topics_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_fromBlock )
       andBool ( #rangeUInt ( 256 , V1_toBlock )
       andBool ( #rangeAddress ( V2_target )
       andBool ( #rangeBytes ( 32 , V3_topics_0 )
       andBool ( #rangeBytes ( 32 , V3_topics_1 )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kexists ( V0_path : string ) => #abiCallData ( "exists" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kffi ( V0_commandInput_0 : string , V0_commandInput_1 : string ) => #abiCallData ( "ffi" , #array ( #string ( V0_commandInput_0 ) , 2 , #string ( V0_commandInput_0 ) , #string ( V0_commandInput_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetBlockNumber ( ) => #abiCallData ( "getBlockNumber" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetBlockTimestamp ( ) => #abiCallData ( "getBlockTimestamp" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , #string ( V0_artifactPath ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , #string ( V0_artifactPath ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetMappingKeyAndParentOf ( V0_target : address , V1_elementSlot : bytes32 ) => #abiCallData ( "getMappingKeyAndParentOf" , #address ( V0_target ) , #bytes32 ( V1_elementSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_elementSlot )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetMappingLength ( V0_target : address , V1_mappingSlot : bytes32 ) => #abiCallData ( "getMappingLength" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetMappingSlotAt ( V0_target : address , V1_mappingSlot : bytes32 , V2_idx : uint256 ) => #abiCallData ( "getMappingSlotAt" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , #uint256 ( V2_idx ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
       andBool ( #rangeUInt ( 256 , V2_idx )
               )))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetNonce ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 ) => #abiCallData ( "getNonce" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
               ))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KisDir ( V0_path : string ) => #abiCallData ( "isDir" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KisFile ( V0_path : string ) => #abiCallData ( "isFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KkeyExists ( V0_json : string , V1_key : string ) => #abiCallData ( "keyExists" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , #address ( V0_account ) , #string ( V1_newLabel ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , #address ( V0_target ) , #bytes32 ( V1_slot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonAddress ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddress" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonAddressArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddressArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBool ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBool" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBoolArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBoolArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes32 ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes32Array ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32Array" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytesArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytesArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonInt ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonInt" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonIntArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonIntArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonKeys ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonKeys" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonString ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonString" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonStringArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonStringArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonUint ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUint" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonUintArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUintArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , #string ( V0_stringifiedValue ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , #bool ( V2_followLinks ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , #string ( V0_linkPath ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , #string ( V0_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Krpc ( V0_method : string , V1_params : string ) => #abiCallData ( "rpc" , #string ( V0_method ) , #string ( V1_params ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , #string ( V0_rpcAlias ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #address ( V2_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : address , V2_values_1 : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #address ( V2_values_0 ) , 2 , #address ( V2_values_0 ) , #address ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V2_values_0 )
       andBool ( #rangeAddress ( V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bool ( V2_value ) , .TypedArgs ) )
       ensures #rangeBool ( V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bool , V2_values_1 : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #bool ( V2_values_0 ) , 2 , #bool ( V2_values_0 ) , #bool ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBool ( V2_values_0 )
       andBool ( #rangeBool ( V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V2_value ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes , V2_values_1 : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #bytes ( V2_values_0 ) , 2 , #bytes ( V2_values_0 ) , #bytes ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_values_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_values_1 ) )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes32 , V2_values_1 : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #bytes32 ( V2_values_0 ) , 2 , #bytes32 ( V2_values_0 ) , #bytes32 ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V2_values_0 )
       andBool ( #rangeBytes ( 32 , V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #int256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : int256 , V2_values_1 : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #int256 ( V2_values_0 ) , 2 , #int256 ( V2_values_0 ) , #int256 ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeSInt ( 256 , V2_values_0 )
       andBool ( #rangeSInt ( 256 , V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeJson ( V0_objectKey : string , V1_value : string ) => #abiCallData ( "serializeJson" , #string ( V0_objectKey ) , #string ( V1_value ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #string ( V2_value ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : string , V2_values_1 : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #string ( V2_values_0 ) , 2 , #string ( V2_values_0 ) , #string ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #uint256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V2_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : uint256 , V2_values_1 : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #array ( #uint256 ( V2_values_0 ) , 2 , #uint256 ( V2_values_0 ) , #uint256 ( V2_values_1 ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V2_values_0 )
       andBool ( #rangeUInt ( 256 , V2_values_1 )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , #string ( V0_name ) , #string ( V1_value ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksign ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 , V4_digest : bytes32 ) => #abiCallData ( "sign" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , #bytes32 ( V4_digest ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
       andBool ( #rangeBytes ( 32 , V4_digest )
               )))))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KsignP256 ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "signP256" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksleep ( V0_duration : uint256 ) => #abiCallData ( "sleep" , #uint256 ( V0_duration ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_duration )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartMappingRecording ( ) => #abiCallData ( "startMappingRecording" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartStateDiffRecording ( ) => #abiCallData ( "startStateDiffRecording" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopAndReturnStateDiff ( ) => #abiCallData ( "stopAndReturnStateDiff" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopMappingRecording ( ) => #abiCallData ( "stopMappingRecording" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoBase64 ( V0_data : bytes ) => #abiCallData ( "toBase64" , #bytes ( V0_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_data ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoBase64 ( V0_data : string ) => #abiCallData ( "toBase64" , #string ( V0_data ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoBase64URL ( V0_data : bytes ) => #abiCallData ( "toBase64URL" , #bytes ( V0_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_data ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoBase64URL ( V0_data : string ) => #abiCallData ( "toBase64URL" , #string ( V0_data ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , #address ( V0_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , #bool ( V0_value ) , .TypedArgs ) )
       ensures #rangeBool ( V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , #bytes ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_value ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , #int256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtryFfi ( V0_commandInput_0 : string , V0_commandInput_1 : string ) => #abiCallData ( "tryFfi" , #array ( #string ( V0_commandInput_0 ) , 2 , #string ( V0_commandInput_0 ) , #string ( V0_commandInput_1 ) , .TypedArgs ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KunixTime ( ) => #abiCallData ( "unixTime" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , #string ( V0_path ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_data ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , #string ( V2_valueKey ) , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )


    rule  ( selector ( "accesses(address)" ) => 1706857601 )


    rule  ( selector ( "addr(uint256)" ) => 4288775753 )


    rule  ( selector ( "assume(bool)" ) => 1281615202 )


    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )


    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )


    rule  ( selector ( "broadcast()" ) => 2949218368 )


    rule  ( selector ( "broadcast(address)" ) => 3868601563 )


    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )


    rule  ( selector ( "closeFile(string)" ) => 1220748319 )


    rule  ( selector ( "computeCreate2Address(bytes32,bytes32)" ) => 2299275323 )


    rule  ( selector ( "computeCreate2Address(bytes32,bytes32,address)" ) => 3542319722 )


    rule  ( selector ( "computeCreateAddress(address,uint256)" ) => 1952676474 )


    rule  ( selector ( "copyFile(string,string)" ) => 2773125080 )


    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )


    rule  ( selector ( "createWallet(string)" ) => 1946481106 )


    rule  ( selector ( "createWallet(uint256)" ) => 2053594038 )


    rule  ( selector ( "createWallet(uint256,string)" ) => 3984348258 )


    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )


    rule  ( selector ( "deriveKey(string,string,uint32,string)" ) => 690174751 )


    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )


    rule  ( selector ( "deriveKey(string,uint32,string)" ) => 851973997 )


    rule  ( selector ( "envAddress(string)" ) => 890066623 )


    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )


    rule  ( selector ( "envBool(string)" ) => 2127686781 )


    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )


    rule  ( selector ( "envBytes(string)" ) => 1299951366 )


    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )


    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )


    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )


    rule  ( selector ( "envInt(string)" ) => 2301234273 )


    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )


    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )


    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )


    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )


    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )


    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )


    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )


    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )


    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )


    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )


    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )


    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )


    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )


    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )


    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )


    rule  ( selector ( "envString(string)" ) => 4168600345 )


    rule  ( selector ( "envString(string,string)" ) => 347089865 )


    rule  ( selector ( "envUint(string)" ) => 3247934751 )


    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )


    rule  ( selector ( "eth_getLogs(uint256,uint256,address,bytes32[])" ) => 903951515 )


    rule  ( selector ( "exists(string)" ) => 639251006 )


    rule  ( selector ( "ffi(string[])" ) => 2299921511 )


    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )


    rule  ( selector ( "getBlockNumber()" ) => 1120645468 )


    rule  ( selector ( "getBlockTimestamp()" ) => 2037090745 )


    rule  ( selector ( "getCode(string)" ) => 2367473957 )


    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )


    rule  ( selector ( "getLabel(address)" ) => 681724336 )


    rule  ( selector ( "getMappingKeyAndParentOf(address,bytes32)" ) => 2272142566 )


    rule  ( selector ( "getMappingLength(address,bytes32)" ) => 791664191 )


    rule  ( selector ( "getMappingSlotAt(address,bytes32,uint256)" ) => 3955702452 )


    rule  ( selector ( "getNonce((address,uint256,uint256,uint256))" ) => 2775878317 )


    rule  ( selector ( "getNonce(address)" ) => 755185067 )


    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )


    rule  ( selector ( "isDir(string)" ) => 2098581529 )


    rule  ( selector ( "isFile(string)" ) => 3773498580 )


    rule  ( selector ( "keyExists(string,string)" ) => 1384802364 )


    rule  ( selector ( "label(address,string)" ) => 3327641368 )


    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )


    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )


    rule  ( selector ( "parseBool(string)" ) => 2538535204 )


    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )


    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )


    rule  ( selector ( "parseInt(string)" ) => 1110731870 )


    rule  ( selector ( "parseJson(string)" ) => 1786929162 )


    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )


    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )


    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )


    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )


    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )


    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )


    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )


    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )


    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )


    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )


    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )


    rule  ( selector ( "parseJsonKeys(string,string)" ) => 557728152 )


    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )


    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )


    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )


    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )


    rule  ( selector ( "parseUint(string)" ) => 4203824461 )


    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )


    rule  ( selector ( "projectRoot()" ) => 3643842790 )


    rule  ( selector ( "readDir(string)" ) => 3300678112 )


    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )


    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )


    rule  ( selector ( "readFile(string)" ) => 1626979089 )


    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )


    rule  ( selector ( "readLine(string)" ) => 1895126824 )


    rule  ( selector ( "readLink(string)" ) => 2673247394 )


    rule  ( selector ( "record()" ) => 644673801 )


    rule  ( selector ( "recordLogs()" ) => 1101999954 )


    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )


    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )


    rule  ( selector ( "removeFile(string)" ) => 4054835277 )


    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )


    rule  ( selector ( "rpc(string,string)" ) => 302434472 )


    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )


    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )


    rule  ( selector ( "rpcUrls()" ) => 2824504344 )


    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )


    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )


    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )


    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )


    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )


    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )


    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )


    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )


    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )


    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )


    rule  ( selector ( "serializeJson(string,string)" ) => 2603833520 )


    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )


    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )


    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )


    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )


    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )


    rule  ( selector ( "sign((address,uint256,uint256,uint256),bytes32)" ) => 2992396837 )


    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )


    rule  ( selector ( "signP256(uint256,bytes32)" ) => 2199984960 )


    rule  ( selector ( "sleep(uint256)" ) => 4204627731 )


    rule  ( selector ( "startBroadcast()" ) => 2142579071 )


    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )


    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )


    rule  ( selector ( "startMappingRecording()" ) => 1050084800 )


    rule  ( selector ( "startStateDiffRecording()" ) => 3475170249 )


    rule  ( selector ( "stopAndReturnStateDiff()" ) => 2858219790 )


    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )


    rule  ( selector ( "stopMappingRecording()" ) => 222998171 )


    rule  ( selector ( "toBase64(bytes)" ) => 2781609573 )


    rule  ( selector ( "toBase64(string)" ) => 1066132168 )


    rule  ( selector ( "toBase64URL(bytes)" ) => 3367833162 )


    rule  ( selector ( "toBase64URL(string)" ) => 2922472883 )


    rule  ( selector ( "toString(address)" ) => 1456103998 )


    rule  ( selector ( "toString(bool)" ) => 1910302682 )


    rule  ( selector ( "toString(bytes)" ) => 1907020045 )


    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )


    rule  ( selector ( "toString(int256)" ) => 2736964622 )


    rule  ( selector ( "toString(uint256)" ) => 1761649582 )


    rule  ( selector ( "tryFfi(string[])" ) => 4099677415 )


    rule  ( selector ( "unixTime()" ) => 1649641436 )


    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )


    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )


    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )


    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )


    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModconsole-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModconsoleContract

    syntax S2KlibZModforgeZSubstdZModsrcZModconsoleContract ::= "S2KlibZModforgeZSubstdZModsrcZModconsole" [symbol(), klabel(contract_lib%forge-std%src%console)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModconsole ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055cb7f21d69d5a68626bed666b69adc58fdc46d700fc111b3a1cc03e01c56ffd64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055cb7f21d69d5a68626bed666b69adc58fdc46d700fc111b3a1cc03e01c56ffd64736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModconsole2-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModconsole2Contract

    syntax S2KlibZModforgeZSubstdZModsrcZModconsole2Contract ::= "S2KlibZModforgeZSubstdZModsrcZModconsole2" [symbol(), klabel(contract_lib%forge-std%src%console2)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModconsole2 ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220960f8d81933cd5ebe21cd13b3acc336b566f7139bfa3f0613418e5412003e06164736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModconsole2 ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220960f8d81933cd5ebe21cd13b3acc336b566f7139bfa3f0613418e5412003e06164736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModsafeconsole-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModsafeconsoleContract

    syntax S2KlibZModforgeZSubstdZModsrcZModsafeconsoleContract ::= "S2KlibZModforgeZSubstdZModsrcZModsafeconsole" [symbol(), klabel(contract_lib%forge-std%src%safeconsole)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModsafeconsole ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a2d4663758ab2478722148cf51761578af92021d18dfb13347d86a29c38717f64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModsafeconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a2d4663758ab2478722148cf51761578af92021d18dfb13347d86a29c38717f64736f6c634300080d0033" ) )


endmodule

module S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract

    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract ::= "S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest" [symbol(), klabel(contract_lib%forge-std%lib%ds-test%src%DSTest)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063ba414fa61461003b578063fa7626d414610057575b600080fd5b610043610064565b604051901515815260200160405180910390f35b6000546100439060ff1681565b60008054610100900460ff16156100845750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561018a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610112917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016101ca565b60408051601f198184030181529082905261012c916101ee565b6000604051808303816000865af19150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b50915050808060200190518101906101869190610201565b9150505b919050565b6000815160005b818110156101b05760208185018101518683015201610196565b818111156101bf576000828601525b509290920192915050565b6001600160e01b03198316815260006101e6600483018461018f565b949350505050565b60006101fa828461018f565b9392505050565b60006020828403121561021357600080fd5b815180151581146101fa57600080fdfea2646970667358221220acd34c7900a0f78b52ca6e76525777d2bb4ff172d44682161ada1b655e2ff2cb64736f6c634300080d0033" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b506102598061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ba414fa61461003b578063fa7626d414610057575b600080fd5b610043610064565b604051901515815260200160405180910390f35b6000546100439060ff1681565b60008054610100900460ff16156100845750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561018a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610112917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016101ca565b60408051601f198184030181529082905261012c916101ee565b6000604051808303816000865af19150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b50915050808060200190518101906101869190610201565b9150505b919050565b6000815160005b818110156101b05760208185018101518683015201610196565b818111156101bf576000828601525b509290920192915050565b6001600160e01b03198316815260006101e6600483018461018f565b949350505050565b60006101fa828461018f565b9392505050565b60006020828403121561021357600080fd5b815180151581146101fa57600080fdfea2646970667358221220acd34c7900a0f78b52ca6e76525777d2bb4ff172d44682161ada1b655e2ff2cb64736f6c634300080d0033" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestField

    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestField ::= "IS_TEST" [symbol(), klabel(field_lib%forge-std%lib%ds-test%src%DSTest_IS_TEST)]

    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestField ::= "_failed" [symbol(), klabel(field_lib%forge-std%lib%ds-test%src%DSTest__failed)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . IS_TEST ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . _failed ) => 0 )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract "." S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod [function(), symbol(), klabel(method_lib%forge-std%lib%ds-test%src%DSTest)]

    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_lib%forge-std%lib%ds-test%src%DSTest_S2KISZUndTEST_)]

    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_lib%forge-std%lib%ds-test%src%DSTest_S2Kfailed_)]

    rule  ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "failed()" ) => 3124842406 )


endmodule

module S2KlibZModforgeZSubstdZModsrcZModTest-CONTRACT
    imports public FOUNDRY

    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModTestContract

    syntax S2KlibZModforgeZSubstdZModsrcZModTestContract ::= "S2KlibZModforgeZSubstdZModsrcZModTest" [symbol(), klabel(contract_lib%forge-std%src%Test)]

    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModTest ) => #parseByteStack ( "0x" ) )


    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModTest ) => #parseByteStack ( "0x" ) )


    syntax Field ::= S2KlibZModforgeZSubstdZModsrcZModTestField

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "stdstore" [symbol(), klabel(field_lib%forge-std%src%Test_stdstore)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "IS_TEST" [symbol(), klabel(field_lib%forge-std%src%Test_IS_TEST)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_failed" [symbol(), klabel(field_lib%forge-std%src%Test__failed)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "stdChainsInitialized" [symbol(), klabel(field_lib%forge-std%src%Test_stdChainsInitialized)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "chains" [symbol(), klabel(field_lib%forge-std%src%Test_chains)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "defaultRpcUrls" [symbol(), klabel(field_lib%forge-std%src%Test_defaultRpcUrls)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "idToAlias" [symbol(), klabel(field_lib%forge-std%src%Test_idToAlias)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "fallbackToDefaultRpcUrls" [symbol(), klabel(field_lib%forge-std%src%Test_fallbackToDefaultRpcUrls)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "gasMeteringOff" [symbol(), klabel(field_lib%forge-std%src%Test_gasMeteringOff)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_excludedContracts" [symbol(), klabel(field_lib%forge-std%src%Test__excludedContracts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_excludedSenders" [symbol(), klabel(field_lib%forge-std%src%Test__excludedSenders)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_targetedContracts" [symbol(), klabel(field_lib%forge-std%src%Test__targetedContracts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_targetedSenders" [symbol(), klabel(field_lib%forge-std%src%Test__targetedSenders)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_excludedArtifacts" [symbol(), klabel(field_lib%forge-std%src%Test__excludedArtifacts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_targetedArtifacts" [symbol(), klabel(field_lib%forge-std%src%Test__targetedArtifacts)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_targetedArtifactSelectors" [symbol(), klabel(field_lib%forge-std%src%Test__targetedArtifactSelectors)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_targetedSelectors" [symbol(), klabel(field_lib%forge-std%src%Test__targetedSelectors)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestField ::= "_targetedInterfaces" [symbol(), klabel(field_lib%forge-std%src%Test__targetedInterfaces)]

    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . stdstore ) => 0 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . IS_TEST ) => 7 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _failed ) => 7 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . stdChainsInitialized ) => 7 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . chains ) => 8 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . defaultRpcUrls ) => 9 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . idToAlias ) => 10 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . fallbackToDefaultRpcUrls ) => 11 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . gasMeteringOff ) => 11 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _excludedContracts ) => 19 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _excludedSenders ) => 20 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _targetedContracts ) => 21 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _targetedSenders ) => 22 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _excludedArtifacts ) => 23 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _targetedArtifacts ) => 24 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _targetedArtifactSelectors ) => 25 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _targetedSelectors ) => 26 )


    rule  ( #loc ( S2KlibZModforgeZSubstdZModsrcZModTest . _targetedInterfaces ) => 27 )


    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModTestContract "." S2KlibZModforgeZSubstdZModsrcZModTestMethod [function(), symbol(), klabel(method_lib%forge-std%src%Test)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KISZUndTEST_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KexcludeArtifacts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KexcludeContracts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KexcludeSenders_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2Kfailed_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KtargetArtifactSelectors_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KtargetArtifacts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KtargetContracts_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KtargetInterfaces_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KtargetSelectors_)]

    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_lib%forge-std%src%Test_S2KtargetSenders_)]

    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )


    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )


    rule  ( selector ( "IS_TEST()" ) => 4202047188 )


    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )


    rule  ( selector ( "excludeContracts()" ) => 3792478065 )


    rule  ( selector ( "excludeSenders()" ) => 517440284 )


    rule  ( selector ( "failed()" ) => 3124842406 )


    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )


    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )


    rule  ( selector ( "targetContracts()" ) => 1064470260 )


    rule  ( selector ( "targetInterfaces()" ) => 719206528 )


    rule  ( selector ( "targetSelectors()" ) => 2439649222 )


    rule  ( selector ( "targetSenders()" ) => 1046363171 )


endmodule
