requires "foundry.md"

module S2KsrcZModduplicatesZMod1ZModDuplicateName-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModduplicatesZMod1ZModDuplicateNameContract
    
    syntax S2KsrcZModduplicatesZMod1ZModDuplicateNameContract ::= "S2KsrcZModduplicatesZMod1ZModDuplicateName" [symbol("contract_src%duplicates%1%DuplicateName")]
    
    syntax Bytes ::= S2KsrcZModduplicatesZMod1ZModDuplicateNameContract "." S2KsrcZModduplicatesZMod1ZModDuplicateNameMethod [function, symbol("method_src%duplicates%1%DuplicateName")]
    
    syntax S2KsrcZModduplicatesZMod1ZModDuplicateNameMethod ::= "S2KduplicateNamedFunction" "(" ")" [symbol("method_src%duplicates%1%DuplicateName_S2KduplicateNamedFunction_")]
    
    rule  ( S2KsrcZModduplicatesZMod1ZModDuplicateName . S2KduplicateNamedFunction ( ) => #abiCallData ( "duplicateNamedFunction" , .TypedArgs ) )
      
    
    rule  ( selector ( "duplicateNamedFunction()" ) => 2708311245 )
      

endmodule

module S2KsrcZModduplicatesZMod2ZModDuplicateName-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModduplicatesZMod2ZModDuplicateNameContract
    
    syntax S2KsrcZModduplicatesZMod2ZModDuplicateNameContract ::= "S2KsrcZModduplicatesZMod2ZModDuplicateName" [symbol("contract_src%duplicates%2%DuplicateName")]
    
    syntax Bytes ::= S2KsrcZModduplicatesZMod2ZModDuplicateNameContract "." S2KsrcZModduplicatesZMod2ZModDuplicateNameMethod [function, symbol("method_src%duplicates%2%DuplicateName")]
    
    syntax S2KsrcZModduplicatesZMod2ZModDuplicateNameMethod ::= "S2KduplicateNamedFunction" "(" ")" [symbol("method_src%duplicates%2%DuplicateName_S2KduplicateNamedFunction_")]
    
    rule  ( S2KsrcZModduplicatesZMod2ZModDuplicateName . S2KduplicateNamedFunction ( ) => #abiCallData ( "duplicateNamedFunction" , .TypedArgs ) )
      
    
    rule  ( selector ( "duplicateNamedFunction()" ) => 2708311245 )
      

endmodule

module S2KtestZModAccountParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAccountParamsTestContract
    
    syntax S2KtestZModAccountParamsTestContract ::= "S2KtestZModAccountParamsTest" [symbol("contract_test%AccountParamsTest")]
    
    syntax Bytes ::= S2KtestZModAccountParamsTestContract "." S2KtestZModAccountParamsTestMethod [function, symbol("method_test%AccountParamsTest")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%AccountParamsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%AccountParamsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%AccountParamsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%AccountParamsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%AccountParamsTest_S2Kfailed_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%AccountParamsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%AccountParamsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%AccountParamsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%AccountParamsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%AccountParamsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestDealConcrete" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestDealConcrete_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestDealSymbolic" "(" Int ":" "uint256" ")" [symbol("method_test%AccountParamsTest_S2KtestDealSymbolic_uint256")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestEtchConcrete" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestEtchConcrete_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestEtchSymbolic" "(" Bytes ":" "bytes" ")" [symbol("method_test%AccountParamsTest_S2KtestEtchSymbolic_bytes")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndfalse" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestFailZUndGetNonceZUndfalse_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestFailZUndGetNonceZUndtrue" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestFailZUndGetNonceZUndtrue_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestNonceSymbolic" "(" Int ":" "uint64" ")" [symbol("method_test%AccountParamsTest_S2KtestNonceSymbolic_uint64")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndfalse" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestZUndGetNonceZUndfalse_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndGetNonceZUndtrue" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestZUndGetNonceZUndtrue_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndNonceZUndExistentAddress" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestZUndNonceZUndExistentAddress_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndNonceZUndNonExistentAddress" "(" ")" [symbol("method_test%AccountParamsTest_S2KtestZUndNonceZUndNonExistentAddress_")]
    
    syntax S2KtestZModAccountParamsTestMethod ::= "S2KtestZUndgetNonceZUndunknownSymbolic" "(" Int ":" "address" ")" [symbol("method_test%AccountParamsTest_S2KtestZUndgetNonceZUndunknownSymbolic_address")]
    
    rule  ( S2KtestZModAccountParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestDealConcrete ( ) => #abiCallData ( "testDealConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestDealSymbolic ( V0_value : uint256 ) => #abiCallData ( "testDealSymbolic" , ( #uint256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestEtchConcrete ( ) => #abiCallData ( "testEtchConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestEtchSymbolic ( V0_code : bytes ) => #abiCallData ( "testEtchSymbolic" , ( #bytes ( V0_code ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_code ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestFailZUndGetNonceZUndfalse ( ) => #abiCallData ( "testFail_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestFailZUndGetNonceZUndtrue ( ) => #abiCallData ( "testFail_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestNonceSymbolic ( V0_newNonce : uint64 ) => #abiCallData ( "testNonceSymbolic" , ( #uint64 ( V0_newNonce ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndGetNonceZUndfalse ( ) => #abiCallData ( "test_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndGetNonceZUndtrue ( ) => #abiCallData ( "test_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndNonceZUndExistentAddress ( ) => #abiCallData ( "test_Nonce_ExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndNonceZUndNonExistentAddress ( ) => #abiCallData ( "test_Nonce_NonExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAccountParamsTest . S2KtestZUndgetNonceZUndunknownSymbolic ( V0_addr : address ) => #abiCallData ( "test_getNonce_unknownSymbolic" , ( #address ( V0_addr ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testDealConcrete()" ) => 530093250 )
      
    
    rule  ( selector ( "testDealSymbolic(uint256)" ) => 2584982624 )
      
    
    rule  ( selector ( "testEtchConcrete()" ) => 807503996 )
      
    
    rule  ( selector ( "testEtchSymbolic(bytes)" ) => 2109411263 )
      
    
    rule  ( selector ( "testFail_GetNonce_false()" ) => 2393877859 )
      
    
    rule  ( selector ( "testFail_GetNonce_true()" ) => 1067907152 )
      
    
    rule  ( selector ( "testNonceSymbolic(uint64)" ) => 1310260491 )
      
    
    rule  ( selector ( "test_GetNonce_false()" ) => 3545243759 )
      
    
    rule  ( selector ( "test_GetNonce_true()" ) => 3968101798 )
      
    
    rule  ( selector ( "test_Nonce_ExistentAddress()" ) => 1598387740 )
      
    
    rule  ( selector ( "test_Nonce_NonExistentAddress()" ) => 2985064833 )
      
    
    rule  ( selector ( "test_getNonce_unknownSymbolic(address)" ) => 3941547284 )
      

endmodule

module S2KtestZModAddrTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAddrTestContract
    
    syntax S2KtestZModAddrTestContract ::= "S2KtestZModAddrTest" [symbol("contract_test%AddrTest")]
    
    syntax Bytes ::= S2KtestZModAddrTestContract "." S2KtestZModAddrTestMethod [function, symbol("method_test%AddrTest")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%AddrTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%AddrTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%AddrTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%AddrTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%AddrTest_S2Kfailed_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%AddrTest_S2Kkevm_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%AddrTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%AddrTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%AddrTest_S2KtargetContracts_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%AddrTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%AddrTest_S2KtargetSenders_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestFailZUndaddrZUndfalse" "(" ")" [symbol("method_test%AddrTest_S2KtestFailZUndaddrZUndfalse_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestFailZUndaddrZUndtrue" "(" ")" [symbol("method_test%AddrTest_S2KtestFailZUndaddrZUndtrue_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndaddrZUndfalse" "(" ")" [symbol("method_test%AddrTest_S2KtestZUndaddrZUndfalse_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndaddrZUndsymbolic" "(" Int ":" "uint256" ")" [symbol("method_test%AddrTest_S2KtestZUndaddrZUndsymbolic_uint256")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndaddrZUndtrue" "(" ")" [symbol("method_test%AddrTest_S2KtestZUndaddrZUndtrue_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndbuiltInAddresses" "(" ")" [symbol("method_test%AddrTest_S2KtestZUndbuiltInAddresses_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndconcrete" "(" ")" [symbol("method_test%AddrTest_S2KtestZUndnotBuiltinAddressZUndconcrete_")]
    
    syntax S2KtestZModAddrTestMethod ::= "S2KtestZUndnotBuiltinAddressZUndsymbolic" "(" Int ":" "address" ")" [symbol("method_test%AddrTest_S2KtestZUndnotBuiltinAddressZUndsymbolic_address")]
    
    rule  ( S2KtestZModAddrTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestFailZUndaddrZUndfalse ( ) => #abiCallData ( "testFail_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestFailZUndaddrZUndtrue ( ) => #abiCallData ( "testFail_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestZUndaddrZUndfalse ( ) => #abiCallData ( "test_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestZUndaddrZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "test_addr_symbolic" , ( #uint256 ( V0_pk ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestZUndaddrZUndtrue ( ) => #abiCallData ( "test_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestZUndbuiltInAddresses ( ) => #abiCallData ( "test_builtInAddresses" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestZUndnotBuiltinAddressZUndconcrete ( ) => #abiCallData ( "test_notBuiltinAddress_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAddrTest . S2KtestZUndnotBuiltinAddressZUndsymbolic ( V0_addr : address ) => #abiCallData ( "test_notBuiltinAddress_symbolic" , ( #address ( V0_addr ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_addr_false()" ) => 3302866643 )
      
    
    rule  ( selector ( "testFail_addr_true()" ) => 2486005453 )
      
    
    rule  ( selector ( "test_addr_false()" ) => 4124294109 )
      
    
    rule  ( selector ( "test_addr_symbolic(uint256)" ) => 3071220939 )
      
    
    rule  ( selector ( "test_addr_true()" ) => 809049819 )
      
    
    rule  ( selector ( "test_builtInAddresses()" ) => 3220291840 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_concrete()" ) => 2409208231 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_symbolic(address)" ) => 2160641203 )
      

endmodule

module S2KtestZModAllowChangesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAllowChangesTestContract
    
    syntax S2KtestZModAllowChangesTestContract ::= "S2KtestZModAllowChangesTest" [symbol("contract_test%AllowChangesTest")]
    
    syntax Bytes ::= S2KtestZModAllowChangesTestContract "." S2KtestZModAllowChangesTestMethod [function, symbol("method_test%AllowChangesTest")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%AllowChangesTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%AllowChangesTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%AllowChangesTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%AllowChangesTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%AllowChangesTest_S2Kfailed_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%AllowChangesTest_S2Kkevm_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%AllowChangesTest_S2KsetUp_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%AllowChangesTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%AllowChangesTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%AllowChangesTest_S2KtargetContracts_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%AllowChangesTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%AllowChangesTest_S2KtargetSenders_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestAllow" "(" ")" [symbol("method_test%AllowChangesTest_S2KtestAllow_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestAllowSymbolic" "(" ")" [symbol("method_test%AllowChangesTest_S2KtestAllowSymbolic_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestAllowZUndfail" "(" ")" [symbol("method_test%AllowChangesTest_S2KtestAllowZUndfail_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestFailAllowCallsToAddress" "(" ")" [symbol("method_test%AllowChangesTest_S2KtestFailAllowCallsToAddress_")]
    
    syntax S2KtestZModAllowChangesTestMethod ::= "S2KtestFailAllowChangesToStorage" "(" ")" [symbol("method_test%AllowChangesTest_S2KtestFailAllowChangesToStorage_")]
    
    rule  ( S2KtestZModAllowChangesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtestAllow ( ) => #abiCallData ( "testAllow" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtestAllowSymbolic ( ) => #abiCallData ( "testAllowSymbolic" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtestAllowZUndfail ( ) => #abiCallData ( "testAllow_fail" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtestFailAllowCallsToAddress ( ) => #abiCallData ( "testFailAllowCallsToAddress" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAllowChangesTest . S2KtestFailAllowChangesToStorage ( ) => #abiCallData ( "testFailAllowChangesToStorage" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAllow()" ) => 3693132891 )
      
    
    rule  ( selector ( "testAllowSymbolic()" ) => 4094715175 )
      
    
    rule  ( selector ( "testAllow_fail()" ) => 4129570225 )
      
    
    rule  ( selector ( "testFailAllowCallsToAddress()" ) => 1262828121 )
      
    
    rule  ( selector ( "testFailAllowChangesToStorage()" ) => 1529992487 )
      

endmodule

module S2KtestZModValueStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModValueStoreContract
    
    syntax S2KtestZModValueStoreContract ::= "S2KtestZModValueStore" [symbol("contract_test%ValueStore")]
    
    syntax Bytes ::= S2KtestZModValueStoreContract "." S2KtestZModValueStoreMethod [function, symbol("method_test%ValueStore")]
    
    syntax S2KtestZModValueStoreMethod ::= "S2KchangeSlot0" "(" Int ":" "uint256" ")" [symbol("method_test%ValueStore_S2KchangeSlot0_uint256")]
    
    syntax S2KtestZModValueStoreMethod ::= "S2KchangeSlot1" "(" Int ":" "uint256" ")" [symbol("method_test%ValueStore_S2KchangeSlot1_uint256")]
    
    syntax S2KtestZModValueStoreMethod ::= "S2Kslot0" "(" ")" [symbol("method_test%ValueStore_S2Kslot0_")]
    
    syntax S2KtestZModValueStoreMethod ::= "S2Kslot1" "(" ")" [symbol("method_test%ValueStore_S2Kslot1_")]
    
    rule  ( S2KtestZModValueStore . S2KchangeSlot0 ( V0_newValue : uint256 ) => #abiCallData ( "changeSlot0" , ( #uint256 ( V0_newValue ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KtestZModValueStore . S2KchangeSlot1 ( V0_newValue : uint256 ) => #abiCallData ( "changeSlot1" , ( #uint256 ( V0_newValue ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KtestZModValueStore . S2Kslot0 ( ) => #abiCallData ( "slot0" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModValueStore . S2Kslot1 ( ) => #abiCallData ( "slot1" , .TypedArgs ) )
      
    
    rule  ( selector ( "changeSlot0(uint256)" ) => 1508657921 )
      
    
    rule  ( selector ( "changeSlot1(uint256)" ) => 3545667351 )
      
    
    rule  ( selector ( "slot0()" ) => 944818109 )
      
    
    rule  ( selector ( "slot1()" ) => 524647605 )
      

endmodule

module S2KtestZModAmbiguousTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAmbiguousTestContract
    
    syntax S2KtestZModAmbiguousTestContract ::= "S2KtestZModAmbiguousTest" [symbol("contract_test%AmbiguousTest")]
    
    syntax Bytes ::= S2KtestZModAmbiguousTestContract "." S2KtestZModAmbiguousTestMethod [function, symbol("method_test%AmbiguousTest")]
    
    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndarrayZUndtype" "(" Int ":" "uint256" ")" [symbol("method_test%AmbiguousTest_S2KtestZUndarrayZUndtype_uint256")]
    
    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndarrayZUndtype" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%AmbiguousTest_S2KtestZUndarrayZUndtype_uint256_uint256")]
    
    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol("method_test%AmbiguousTest_S2KtestZUndassertZUndtrue_")]
    
    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" Int ":" "uint256" ")" [symbol("method_test%AmbiguousTest_S2KtestZUndassertZUndtrue_uint256")]
    
    syntax S2KtestZModAmbiguousTestMethod ::= "S2KtestZUndassertZUndtrue" "(" Int ":" "uint8" ")" [symbol("method_test%AmbiguousTest_S2KtestZUndassertZUndtrue_uint8")]
    
    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndarrayZUndtype ( V0_ : uint256 ) => #abiCallData ( "test_array_type" , ( #uint256 ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndarrayZUndtype ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "test_array_type" , ( #array ( #uint256 ( V0_numbers_0 ) , 2 , ( #uint256 ( V0_numbers_0 ) , ( #uint256 ( V0_numbers_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))
      
    
    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndassertZUndtrue ( V0_ : uint256 ) => #abiCallData ( "test_assert_true" , ( #uint256 ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KtestZModAmbiguousTest . S2KtestZUndassertZUndtrue ( V0_ : uint8 ) => #abiCallData ( "test_assert_true" , ( #uint8 ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 8 , V0_ )
      
    
    rule  ( selector ( "test_array_type(uint256)" ) => 3024847385 )
      
    
    rule  ( selector ( "test_array_type(uint256[])" ) => 43701028 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true(uint256)" ) => 466154213 )
      
    
    rule  ( selector ( "test_assert_true(uint8)" ) => 703666980 )
      

endmodule

module S2KtestZModArithmeticTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModArithmeticTestContract
    
    syntax S2KtestZModArithmeticTestContract ::= "S2KtestZModArithmeticTest" [symbol("contract_test%ArithmeticTest")]
    
    syntax Bytes ::= S2KtestZModArithmeticTestContract "." S2KtestZModArithmeticTestMethod [function, symbol("method_test%ArithmeticTest")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ArithmeticTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ArithmeticTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ArithmeticTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ArithmeticTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ArithmeticTest_S2Kfailed_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ArithmeticTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ArithmeticTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ArithmeticTest_S2KtargetContracts_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ArithmeticTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ArithmeticTest_S2KtargetSenders_")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUnddecreasingZUnddiv" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUnddecreasingZUnddiv_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndmax1" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndmax1_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndmax1ZUndbroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndmax1ZUndbroken_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndmax2" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndmax2_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwdivZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwdivZUndrounding_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasing" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasing_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndgtZUndone" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndgtZUndone_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndoverflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndoverflow_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndincreasingZUndpositive_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndrounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndrounding_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverse_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow_uint256_uint256")]
    
    syntax S2KtestZModArithmeticTestMethod ::= "S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticTest_S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive_uint256_uint256")]
    
    rule  ( S2KtestZModArithmeticTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUnddecreasingZUnddiv ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_decreasing_div" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndmax1 ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndmax1ZUndbroken ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1_broken" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndmax2 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_max2" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwdivZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wdiv_rounding" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasing ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasingZUndgtZUndone ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_gt_one" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasingZUndoverflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_overflow" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_positive" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndrounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_rounding" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndwdivZUndinverseZUndunderflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse_underflow" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModArithmeticTest . S2KtestZUndwmulZUndweaklyZUndincreasingZUndpositive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_weakly_increasing_positive" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_decreasing_div(uint256,uint256)" ) => 1011519306 )
      
    
    rule  ( selector ( "test_max1(uint256,uint256)" ) => 1625765100 )
      
    
    rule  ( selector ( "test_max1_broken(uint256,uint256)" ) => 2809107068 )
      
    
    rule  ( selector ( "test_max2(uint256,uint256)" ) => 434746443 )
      
    
    rule  ( selector ( "test_wdiv_rounding(uint256,uint256)" ) => 345004095 )
      
    
    rule  ( selector ( "test_wmul_increasing(uint256,uint256)" ) => 2784670501 )
      
    
    rule  ( selector ( "test_wmul_increasing_gt_one(uint256,uint256)" ) => 899022695 )
      
    
    rule  ( selector ( "test_wmul_increasing_overflow(uint256,uint256)" ) => 1123042280 )
      
    
    rule  ( selector ( "test_wmul_increasing_positive(uint256,uint256)" ) => 490103800 )
      
    
    rule  ( selector ( "test_wmul_rounding(uint256,uint256)" ) => 4261140569 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse(uint256,uint256)" ) => 3719613508 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse_underflow(uint256,uint256)" ) => 2736038219 )
      
    
    rule  ( selector ( "test_wmul_weakly_increasing_positive(uint256,uint256)" ) => 1421647895 )
      

endmodule

module S2KtestZModArithmeticCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModArithmeticCallTestContract
    
    syntax S2KtestZModArithmeticCallTestContract ::= "S2KtestZModArithmeticCallTest" [symbol("contract_test%ArithmeticCallTest")]
    
    syntax Bytes ::= S2KtestZModArithmeticCallTestContract "." S2KtestZModArithmeticCallTestMethod [function, symbol("method_test%ArithmeticCallTest")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ArithmeticCallTest_S2Kfailed_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KsetUp_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KtargetContracts_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ArithmeticCallTest_S2KtargetSenders_")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtestZUnddoubleZUndadd" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticCallTest_S2KtestZUnddoubleZUndadd_uint256_uint256")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtestZUnddoubleZUndaddZUnddoubleZUndsub" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticCallTest_S2KtestZUnddoubleZUndaddZUnddoubleZUndsub_uint256_uint256")]
    
    syntax S2KtestZModArithmeticCallTestMethod ::= "S2KtestZUnddoubleZUndaddZUndsubZUndexternal" "(" Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%ArithmeticCallTest_S2KtestZUnddoubleZUndaddZUndsubZUndexternal_uint256_uint256_uint256")]
    
    rule  ( S2KtestZModArithmeticCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtestZUnddoubleZUndadd ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_double_add" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtestZUnddoubleZUndaddZUnddoubleZUndsub ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_double_add_double_sub" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModArithmeticCallTest . S2KtestZUnddoubleZUndaddZUndsubZUndexternal ( V0_x : uint256 , V1_y : uint256 , V2_z : uint256 ) => #abiCallData ( "test_double_add_sub_external" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , ( #uint256 ( V2_z ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
       andBool ( #rangeUInt ( 256 , V2_z )
               )))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_double_add(uint256,uint256)" ) => 3753377488 )
      
    
    rule  ( selector ( "test_double_add_double_sub(uint256,uint256)" ) => 3787680396 )
      
    
    rule  ( selector ( "test_double_add_sub_external(uint256,uint256,uint256)" ) => 2452811148 )
      

endmodule

module S2KsrcZModArithmeticContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModArithmeticContractContract
    
    syntax S2KsrcZModArithmeticContractContract ::= "S2KsrcZModArithmeticContract" [symbol("contract_src%ArithmeticContract")]
    
    syntax Bytes ::= S2KsrcZModArithmeticContractContract "." S2KsrcZModArithmeticContractMethod [function, symbol("method_src%ArithmeticContract")]
    
    syntax S2KsrcZModArithmeticContractMethod ::= "S2Kadd" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%ArithmeticContract_S2Kadd_uint256_uint256")]
    
    syntax S2KsrcZModArithmeticContractMethod ::= "S2KaddZUndsubZUndexternal" "(" Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%ArithmeticContract_S2KaddZUndsubZUndexternal_uint256_uint256_uint256")]
    
    syntax S2KsrcZModArithmeticContractMethod ::= "S2Kaddi" "(" Int ":" "uint256" "," Int ":" "int128" ")" [symbol("method_src%ArithmeticContract_S2Kaddi_uint256_int128")]
    
    syntax S2KsrcZModArithmeticContractMethod ::= "S2Ksub" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%ArithmeticContract_S2Ksub_uint256_uint256")]
    
    syntax S2KsrcZModArithmeticContractMethod ::= "S2Ksubi" "(" Int ":" "uint256" "," Int ":" "int128" ")" [symbol("method_src%ArithmeticContract_S2Ksubi_uint256_int128")]
    
    rule  ( S2KsrcZModArithmeticContract . S2Kadd ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "add" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KsrcZModArithmeticContract . S2KaddZUndsubZUndexternal ( V0_x : uint256 , V1_y : uint256 , V2_z : uint256 ) => #abiCallData ( "add_sub_external" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , ( #uint256 ( V2_z ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
       andBool ( #rangeUInt ( 256 , V2_z )
               )))
      
    
    rule  ( S2KsrcZModArithmeticContract . S2Kaddi ( V0_x : uint256 , V1_y : int128 ) => #abiCallData ( "addi" , ( #uint256 ( V0_x ) , ( #int128 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeSInt ( 128 , V1_y )
               ))
      
    
    rule  ( S2KsrcZModArithmeticContract . S2Ksub ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "sub" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KsrcZModArithmeticContract . S2Ksubi ( V0_x : uint256 , V1_y : int128 ) => #abiCallData ( "subi" , ( #uint256 ( V0_x ) , ( #int128 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeSInt ( 128 , V1_y )
               ))
      
    
    rule  ( selector ( "add(uint256,uint256)" ) => 1997931255 )
      
    
    rule  ( selector ( "add_sub_external(uint256,uint256,uint256)" ) => 2619793463 )
      
    
    rule  ( selector ( "addi(uint256,int128)" ) => 4110074481 )
      
    
    rule  ( selector ( "sub(uint256,uint256)" ) => 3061675973 )
      
    
    rule  ( selector ( "subi(uint256,int128)" ) => 3626037339 )
      

endmodule

module S2KtestZModAssumeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAssumeTestContract
    
    syntax S2KtestZModAssumeTestContract ::= "S2KtestZModAssumeTest" [symbol("contract_test%AssumeTest")]
    
    syntax Bytes ::= S2KtestZModAssumeTestContract "." S2KtestZModAssumeTestMethod [function, symbol("method_test%AssumeTest")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%AssumeTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%AssumeTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%AssumeTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%AssumeTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%AssumeTest_S2Kfailed_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%AssumeTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%AssumeTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%AssumeTest_S2KtargetContracts_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%AssumeTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%AssumeTest_S2KtargetSenders_")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtestFailZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%AssumeTest_S2KtestFailZUndassumeZUndfalse_uint256_uint256")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtestFailZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%AssumeTest_S2KtestFailZUndassumeZUndtrue_uint256_uint256")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndassumeZUndfalse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%AssumeTest_S2KtestZUndassumeZUndfalse_uint256_uint256")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndassumeZUndstaticCall" "(" Int ":" "bool" ")" [symbol("method_test%AssumeTest_S2KtestZUndassumeZUndstaticCall_bool")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndassumeZUndtrue" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%AssumeTest_S2KtestZUndassumeZUndtrue_uint256_uint256")]
    
    syntax S2KtestZModAssumeTestMethod ::= "S2KtestZUndmultiZUndassume" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_test%AssumeTest_S2KtestZUndmultiZUndassume_address_address")]
    
    rule  ( S2KtestZModAssumeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtestFailZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_false" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModAssumeTest . S2KtestFailZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_true" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModAssumeTest . S2KtestZUndassumeZUndfalse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_false" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModAssumeTest . S2KtestZUndassumeZUndstaticCall ( V0_a : bool ) => #abiCallData ( "test_assume_staticCall" , ( #bool ( V0_a ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_a )
      
    
    rule  ( S2KtestZModAssumeTest . S2KtestZUndassumeZUndtrue ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_true" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KtestZModAssumeTest . S2KtestZUndmultiZUndassume ( V0_alice : address , V1_bob : address ) => #abiCallData ( "test_multi_assume" , ( #address ( V0_alice ) , ( #address ( V1_bob ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_alice )
       andBool ( #rangeAddress ( V1_bob )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_assume_false(uint256,uint256)" ) => 1596879099 )
      
    
    rule  ( selector ( "testFail_assume_true(uint256,uint256)" ) => 246830810 )
      
    
    rule  ( selector ( "test_assume_false(uint256,uint256)" ) => 3827036084 )
      
    
    rule  ( selector ( "test_assume_staticCall(bool)" ) => 1479621703 )
      
    
    rule  ( selector ( "test_assume_true(uint256,uint256)" ) => 1861181564 )
      
    
    rule  ( selector ( "test_multi_assume(address,address)" ) => 2625007844 )
      

endmodule

module S2KtestZModBMCLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModBMCLoopsTestContract
    
    syntax S2KtestZModBMCLoopsTestContract ::= "S2KtestZModBMCLoopsTest" [symbol("contract_test%BMCLoopsTest")]
    
    syntax Bytes ::= S2KtestZModBMCLoopsTestContract "." S2KtestZModBMCLoopsTestMethod [function, symbol("method_test%BMCLoopsTest")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%BMCLoopsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%BMCLoopsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%BMCLoopsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%BMCLoopsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%BMCLoopsTest_S2Kfailed_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%BMCLoopsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%BMCLoopsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%BMCLoopsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%BMCLoopsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%BMCLoopsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtestZUndbmc" "(" Int ":" "uint256" ")" [symbol("method_test%BMCLoopsTest_S2KtestZUndbmc_uint256")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndconcrete" "(" ")" [symbol("method_test%BMCLoopsTest_S2KtestZUndcountdownZUndconcrete_")]
    
    syntax S2KtestZModBMCLoopsTestMethod ::= "S2KtestZUndcountdownZUndsymbolic" "(" Int ":" "uint256" ")" [symbol("method_test%BMCLoopsTest_S2KtestZUndcountdownZUndsymbolic_uint256")]
    
    rule  ( S2KtestZModBMCLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtestZUndbmc ( V0_n : uint256 ) => #abiCallData ( "test_bmc" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtestZUndcountdownZUndconcrete ( ) => #abiCallData ( "test_countdown_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBMCLoopsTest . S2KtestZUndcountdownZUndsymbolic ( V0_n : uint256 ) => #abiCallData ( "test_countdown_symbolic" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_bmc(uint256)" ) => 2531276689 )
      
    
    rule  ( selector ( "test_countdown_concrete()" ) => 1189516988 )
      
    
    rule  ( selector ( "test_countdown_symbolic(uint256)" ) => 3183316184 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModCommonBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModCommonBaseContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModCommonBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModCommonBase" [symbol("contract_lib%forge-std%src%CommonBase")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModScriptBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModScriptBaseContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModScriptBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModScriptBase" [symbol("contract_lib%forge-std%src%ScriptBase")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModTestBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModTestBaseContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModTestBase" [symbol("contract_lib%forge-std%src%TestBase")]

endmodule

module S2KsrcZModcseZModAdd-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModAddContract
    
    syntax S2KsrcZModcseZModAddContract ::= "S2KsrcZModcseZModAdd" [symbol("contract_src%cse%Add")]
    
    syntax Bytes ::= S2KsrcZModcseZModAddContract "." S2KsrcZModcseZModAddMethod [function, symbol("method_src%cse%Add")]
    
    syntax S2KsrcZModcseZModAddMethod ::= "S2KapplyOp" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%cse%Add_S2KapplyOp_uint256_uint256")]
    
    rule  ( S2KsrcZModcseZModAdd . S2KapplyOp ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "applyOp(uint256,uint256)" ) => 3231763908 )
      

endmodule

module S2KsrcZModcseZModMultiply-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModMultiplyContract
    
    syntax S2KsrcZModcseZModMultiplyContract ::= "S2KsrcZModcseZModMultiply" [symbol("contract_src%cse%Multiply")]
    
    syntax Bytes ::= S2KsrcZModcseZModMultiplyContract "." S2KsrcZModcseZModMultiplyMethod [function, symbol("method_src%cse%Multiply")]
    
    syntax S2KsrcZModcseZModMultiplyMethod ::= "S2KapplyOp" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%cse%Multiply_S2KapplyOp_uint256_uint256")]
    
    rule  ( S2KsrcZModcseZModMultiply . S2KapplyOp ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "applyOp(uint256,uint256)" ) => 3231763908 )
      

endmodule

module S2KsrcZModcseZModSub-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModSubContract
    
    syntax S2KsrcZModcseZModSubContract ::= "S2KsrcZModcseZModSub" [symbol("contract_src%cse%Sub")]
    
    syntax Bytes ::= S2KsrcZModcseZModSubContract "." S2KsrcZModcseZModSubMethod [function, symbol("method_src%cse%Sub")]
    
    syntax S2KsrcZModcseZModSubMethod ::= "S2KapplyOp" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%cse%Sub_S2KapplyOp_uint256_uint256")]
    
    rule  ( S2KsrcZModcseZModSub . S2KapplyOp ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "applyOp(uint256,uint256)" ) => 3231763908 )
      

endmodule

module S2KtestZModBlockParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModBlockParamsTestContract
    
    syntax S2KtestZModBlockParamsTestContract ::= "S2KtestZModBlockParamsTest" [symbol("contract_test%BlockParamsTest")]
    
    syntax Bytes ::= S2KtestZModBlockParamsTestContract "." S2KtestZModBlockParamsTestMethod [function, symbol("method_test%BlockParamsTest")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%BlockParamsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%BlockParamsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%BlockParamsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%BlockParamsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%BlockParamsTest_S2Kfailed_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%BlockParamsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%BlockParamsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%BlockParamsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%BlockParamsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%BlockParamsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestBlockNumber" "(" ")" [symbol("method_test%BlockParamsTest_S2KtestBlockNumber_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestChainId" "(" Int ":" "uint256" ")" [symbol("method_test%BlockParamsTest_S2KtestChainId_uint256")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestCoinBase" "(" ")" [symbol("method_test%BlockParamsTest_S2KtestCoinBase_")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestFee" "(" Int ":" "uint256" ")" [symbol("method_test%BlockParamsTest_S2KtestFee_uint256")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestRoll" "(" Int ":" "uint256" ")" [symbol("method_test%BlockParamsTest_S2KtestRoll_uint256")]
    
    syntax S2KtestZModBlockParamsTestMethod ::= "S2KtestWarp" "(" Int ":" "uint256" ")" [symbol("method_test%BlockParamsTest_S2KtestWarp_uint256")]
    
    rule  ( S2KtestZModBlockParamsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtestBlockNumber ( ) => #abiCallData ( "testBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtestChainId ( V0_newChainId : uint256 ) => #abiCallData ( "testChainId" , ( #uint256 ( V0_newChainId ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtestCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtestFee ( V0_newFee : uint256 ) => #abiCallData ( "testFee" , ( #uint256 ( V0_newFee ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtestRoll ( V0_newHeight : uint256 ) => #abiCallData ( "testRoll" , ( #uint256 ( V0_newHeight ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KtestZModBlockParamsTest . S2KtestWarp ( V0_time : uint256 ) => #abiCallData ( "testWarp" , ( #uint256 ( V0_time ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testBlockNumber()" ) => 3916490861 )
      
    
    rule  ( selector ( "testChainId(uint256)" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase()" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee(uint256)" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll(uint256)" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp(uint256)" ) => 1957961066 )
      

endmodule

module S2KtestZModChainIdTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModChainIdTestContract
    
    syntax S2KtestZModChainIdTestContract ::= "S2KtestZModChainIdTest" [symbol("contract_test%ChainIdTest")]
    
    syntax Bytes ::= S2KtestZModChainIdTestContract "." S2KtestZModChainIdTestMethod [function, symbol("method_test%ChainIdTest")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ChainIdTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ChainIdTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ChainIdTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ChainIdTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ChainIdTest_S2Kfailed_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%ChainIdTest_S2KsetUp_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ChainIdTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ChainIdTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ChainIdTest_S2KtargetContracts_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ChainIdTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ChainIdTest_S2KtargetSenders_")]
    
    syntax S2KtestZModChainIdTestMethod ::= "S2KtestZUndchainidZUndsetup" "(" ")" [symbol("method_test%ChainIdTest_S2KtestZUndchainidZUndsetup_")]
    
    rule  ( S2KtestZModChainIdTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModChainIdTest . S2KtestZUndchainidZUndsetup ( ) => #abiCallData ( "test_chainid_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_chainid_setup()" ) => 1348063496 )
      

endmodule

module S2KtestZModCoinBaseTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCoinBaseTestContract
    
    syntax S2KtestZModCoinBaseTestContract ::= "S2KtestZModCoinBaseTest" [symbol("contract_test%CoinBaseTest")]
    
    syntax Bytes ::= S2KtestZModCoinBaseTestContract "." S2KtestZModCoinBaseTestMethod [function, symbol("method_test%CoinBaseTest")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%CoinBaseTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%CoinBaseTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%CoinBaseTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%CoinBaseTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%CoinBaseTest_S2Kfailed_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%CoinBaseTest_S2KsetUp_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%CoinBaseTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%CoinBaseTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%CoinBaseTest_S2KtargetContracts_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%CoinBaseTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%CoinBaseTest_S2KtargetSenders_")]
    
    syntax S2KtestZModCoinBaseTestMethod ::= "S2KtestZUndcoinbaseZUndsetup" "(" ")" [symbol("method_test%CoinBaseTest_S2KtestZUndcoinbaseZUndsetup_")]
    
    rule  ( S2KtestZModCoinBaseTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCoinBaseTest . S2KtestZUndcoinbaseZUndsetup ( ) => #abiCallData ( "test_coinbase_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_coinbase_setup()" ) => 3959929316 )
      

endmodule

module S2KtestZModFeeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModFeeTestContract
    
    syntax S2KtestZModFeeTestContract ::= "S2KtestZModFeeTest" [symbol("contract_test%FeeTest")]
    
    syntax Bytes ::= S2KtestZModFeeTestContract "." S2KtestZModFeeTestMethod [function, symbol("method_test%FeeTest")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%FeeTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%FeeTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%FeeTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%FeeTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%FeeTest_S2Kfailed_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%FeeTest_S2KsetUp_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%FeeTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%FeeTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%FeeTest_S2KtargetContracts_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%FeeTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%FeeTest_S2KtargetSenders_")]
    
    syntax S2KtestZModFeeTestMethod ::= "S2KtestZUndfeeZUndsetup" "(" ")" [symbol("method_test%FeeTest_S2KtestZUndfeeZUndsetup_")]
    
    rule  ( S2KtestZModFeeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFeeTest . S2KtestZUndfeeZUndsetup ( ) => #abiCallData ( "test_fee_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_fee_setup()" ) => 3621279154 )
      

endmodule

module S2KtestZModRollTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModRollTestContract
    
    syntax S2KtestZModRollTestContract ::= "S2KtestZModRollTest" [symbol("contract_test%RollTest")]
    
    syntax Bytes ::= S2KtestZModRollTestContract "." S2KtestZModRollTestMethod [function, symbol("method_test%RollTest")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%RollTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%RollTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%RollTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%RollTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%RollTest_S2Kfailed_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%RollTest_S2KsetUp_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%RollTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%RollTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%RollTest_S2KtargetContracts_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%RollTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%RollTest_S2KtargetSenders_")]
    
    syntax S2KtestZModRollTestMethod ::= "S2KtestZUndrollZUndsetup" "(" ")" [symbol("method_test%RollTest_S2KtestZUndrollZUndsetup_")]
    
    rule  ( S2KtestZModRollTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRollTest . S2KtestZUndrollZUndsetup ( ) => #abiCallData ( "test_roll_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_roll_setup()" ) => 2245491894 )
      

endmodule

module S2KtestZModWarpTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModWarpTestContract
    
    syntax S2KtestZModWarpTestContract ::= "S2KtestZModWarpTest" [symbol("contract_test%WarpTest")]
    
    syntax Bytes ::= S2KtestZModWarpTestContract "." S2KtestZModWarpTestMethod [function, symbol("method_test%WarpTest")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%WarpTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%WarpTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%WarpTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%WarpTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%WarpTest_S2Kfailed_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%WarpTest_S2KsetUp_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%WarpTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%WarpTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%WarpTest_S2KtargetContracts_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%WarpTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%WarpTest_S2KtargetSenders_")]
    
    syntax S2KtestZModWarpTestMethod ::= "S2KtestZUndwarpZUndsetup" "(" ")" [symbol("method_test%WarpTest_S2KtestZUndwarpZUndsetup_")]
    
    rule  ( S2KtestZModWarpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModWarpTest . S2KtestZUndwarpZUndsetup ( ) => #abiCallData ( "test_warp_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_warp_setup()" ) => 1375900050 )
      

endmodule

module S2KtestZModBroadcastTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModBroadcastTestContract
    
    syntax S2KtestZModBroadcastTestContract ::= "S2KtestZModBroadcastTest" [symbol("contract_test%BroadcastTest")]
    
    syntax Bytes ::= S2KtestZModBroadcastTestContract "." S2KtestZModBroadcastTestMethod [function, symbol("method_test%BroadcastTest")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%BroadcastTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KdeployNoArgs" "(" ")" [symbol("method_test%BroadcastTest_S2KdeployNoArgs_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KdeployOther" "(" ")" [symbol("method_test%BroadcastTest_S2KdeployOther_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%BroadcastTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%BroadcastTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%BroadcastTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%BroadcastTest_S2Kfailed_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%BroadcastTest_S2KsetUp_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%BroadcastTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%BroadcastTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%BroadcastTest_S2KtargetContracts_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%BroadcastTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%BroadcastTest_S2KtargetSenders_")]
    
    syntax S2KtestZModBroadcastTestMethod ::= "S2KtestDeploy" "(" ")" [symbol("method_test%BroadcastTest_S2KtestDeploy_")]
    
    rule  ( S2KtestZModBroadcastTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KdeployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KdeployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModBroadcastTest . S2KtestDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs()" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther()" ) => 4254441026 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testDeploy()" ) => 894117685 )
      

endmodule

module S2KtestZModCSETest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCSETestContract
    
    syntax S2KtestZModCSETestContract ::= "S2KtestZModCSETest" [symbol("contract_test%CSETest")]
    
    syntax Bytes ::= S2KtestZModCSETestContract "." S2KtestZModCSETestMethod [function, symbol("method_test%CSETest")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%CSETest_S2KISZUndTEST_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%CSETest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%CSETest_S2KexcludeContracts_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%CSETest_S2KexcludeSenders_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%CSETest_S2Kfailed_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%CSETest_S2KsetUp_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%CSETest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%CSETest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%CSETest_S2KtargetContracts_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%CSETest_S2KtargetSelectors_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%CSETest_S2KtargetSenders_")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtestZUndaddZUndconst" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%CSETest_S2KtestZUndaddZUndconst_uint256_uint256")]
    
    syntax S2KtestZModCSETestMethod ::= "S2KtestZUndidentity" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%CSETest_S2KtestZUndidentity_uint256_uint256")]
    
    rule  ( S2KtestZModCSETest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCSETest . S2KtestZUndaddZUndconst ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_add_const" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModCSETest . S2KtestZUndidentity ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_identity" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_add_const(uint256,uint256)" ) => 267266513 )
      
    
    rule  ( selector ( "test_identity(uint256,uint256)" ) => 3233645348 )
      

endmodule

module S2KtestZModStaticCallContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModStaticCallContractContract
    
    syntax S2KtestZModStaticCallContractContract ::= "S2KtestZModStaticCallContract" [symbol("contract_test%StaticCallContract")]
    
    syntax Bytes ::= S2KtestZModStaticCallContractContract "." S2KtestZModStaticCallContractMethod [function, symbol("method_test%StaticCallContract")]
    
    syntax S2KtestZModStaticCallContractMethod ::= "S2Kset" "(" Int ":" "uint256" ")" [symbol("method_test%StaticCallContract_S2Kset_uint256")]
    
    rule  ( S2KtestZModStaticCallContract . S2Kset ( V0_y : uint256 ) => #abiCallData ( "set" , ( #uint256 ( V0_y ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_y )
      
    
    rule  ( selector ( "set(uint256)" ) => 1627277233 )
      

endmodule

module S2KtestZModCallableStorageContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCallableStorageContractContract
    
    syntax S2KtestZModCallableStorageContractContract ::= "S2KtestZModCallableStorageContract" [symbol("contract_test%CallableStorageContract")]
    
    syntax Bytes ::= S2KtestZModCallableStorageContractContract "." S2KtestZModCallableStorageContractMethod [function, symbol("method_test%CallableStorageContract")]
    
    syntax S2KtestZModCallableStorageContractMethod ::= "S2Knum" "(" ")" [symbol("method_test%CallableStorageContract_S2Knum_")]
    
    syntax S2KtestZModCallableStorageContractMethod ::= "S2Kstr" "(" ")" [symbol("method_test%CallableStorageContract_S2Kstr_")]
    
    rule  ( S2KtestZModCallableStorageContract . S2Knum ( ) => #abiCallData ( "num" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageContract . S2Kstr ( ) => #abiCallData ( "str" , .TypedArgs ) )
      
    
    rule  ( selector ( "num()" ) => 1316008412 )
      
    
    rule  ( selector ( "str()" ) => 3244011140 )
      

endmodule

module S2KtestZModCallableStorageTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCallableStorageTestContract
    
    syntax S2KtestZModCallableStorageTestContract ::= "S2KtestZModCallableStorageTest" [symbol("contract_test%CallableStorageTest")]
    
    syntax Bytes ::= S2KtestZModCallableStorageTestContract "." S2KtestZModCallableStorageTestMethod [function, symbol("method_test%CallableStorageTest")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%CallableStorageTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%CallableStorageTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%CallableStorageTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%CallableStorageTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%CallableStorageTest_S2Kfailed_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%CallableStorageTest_S2Kkevm_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%CallableStorageTest_S2KsetUp_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%CallableStorageTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%CallableStorageTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%CallableStorageTest_S2KtargetContracts_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%CallableStorageTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%CallableStorageTest_S2KtargetSenders_")]
    
    syntax S2KtestZModCallableStorageTestMethod ::= "S2KtestZUndstr" "(" ")" [symbol("method_test%CallableStorageTest_S2KtestZUndstr_")]
    
    rule  ( S2KtestZModCallableStorageTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCallableStorageTest . S2KtestZUndstr ( ) => #abiCallData ( "test_str" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_str()" ) => 245500490 )
      

endmodule

module S2KtestZModConstructorArgsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModConstructorArgsTestContract
    
    syntax S2KtestZModConstructorArgsTestContract ::= "S2KtestZModConstructorArgsTest" [symbol("contract_test%ConstructorArgsTest")]
    
    syntax Bytes ::= S2KtestZModConstructorArgsTestContract "." S2KtestZModConstructorArgsTestMethod [function, symbol("method_test%ConstructorArgsTest")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2Kcount" "(" ")" [symbol("method_test%ConstructorArgsTest_S2Kcount_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ConstructorArgsTest_S2Kfailed_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2Kflag" "(" ")" [symbol("method_test%ConstructorArgsTest_S2Kflag_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModConstructorArgsTestMethod ::= "S2KtestZUndconstructorZUndargs" "(" ")" [symbol("method_test%ConstructorArgsTest_S2KtestZUndconstructorZUndargs_")]
    
    rule  ( S2KtestZModConstructorArgsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2Kflag ( ) => #abiCallData ( "flag" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorArgsTest . S2KtestZUndconstructorZUndargs ( ) => #abiCallData ( "test_constructor_args" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "flag()" ) => 2299443816 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_constructor_args()" ) => 1402220961 )
      

endmodule

module S2KtestZModConstructorTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModConstructorTestContract
    
    syntax S2KtestZModConstructorTestContract ::= "S2KtestZModConstructorTest" [symbol("contract_test%ConstructorTest")]
    
    syntax Bytes ::= S2KtestZModConstructorTestContract "." S2KtestZModConstructorTestMethod [function, symbol("method_test%ConstructorTest")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ConstructorTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ConstructorTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ConstructorTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ConstructorTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ConstructorTest_S2Kfailed_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KrunZUndconstructor" "(" ")" [symbol("method_test%ConstructorTest_S2KrunZUndconstructor_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ConstructorTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ConstructorTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ConstructorTest_S2KtargetContracts_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ConstructorTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ConstructorTest_S2KtargetSenders_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtestFailZUndconstructor" "(" ")" [symbol("method_test%ConstructorTest_S2KtestFailZUndconstructor_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtestZUndconstructor" "(" ")" [symbol("method_test%ConstructorTest_S2KtestZUndconstructor_")]
    
    syntax S2KtestZModConstructorTestMethod ::= "S2KtestZUndcontractZUndcall" "(" ")" [symbol("method_test%ConstructorTest_S2KtestZUndcontractZUndcall_")]
    
    rule  ( S2KtestZModConstructorTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KrunZUndconstructor ( ) => #abiCallData ( "run_constructor" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtestFailZUndconstructor ( ) => #abiCallData ( "testFail_constructor" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtestZUndconstructor ( ) => #abiCallData ( "test_constructor" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModConstructorTest . S2KtestZUndcontractZUndcall ( ) => #abiCallData ( "test_contract_call" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "run_constructor()" ) => 3759672075 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_constructor()" ) => 2464108477 )
      
    
    rule  ( selector ( "test_constructor()" ) => 3919276849 )
      
    
    rule  ( selector ( "test_contract_call()" ) => 660361814 )
      

endmodule

module S2KtestZModImportedContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModImportedContractContract
    
    syntax S2KtestZModImportedContractContract ::= "S2KtestZModImportedContract" [symbol("contract_test%ImportedContract")]
    
    syntax Bytes ::= S2KtestZModImportedContractContract "." S2KtestZModImportedContractMethod [function, symbol("method_test%ImportedContract")]
    
    syntax S2KtestZModImportedContractMethod ::= "S2Kadd" "(" Int ":" "uint256" ")" [symbol("method_test%ImportedContract_S2Kadd_uint256")]
    
    syntax S2KtestZModImportedContractMethod ::= "S2Kcount" "(" ")" [symbol("method_test%ImportedContract_S2Kcount_")]
    
    syntax S2KtestZModImportedContractMethod ::= "S2Kset" "(" Int ":" "uint256" ")" [symbol("method_test%ImportedContract_S2Kset_uint256")]
    
    rule  ( S2KtestZModImportedContract . S2Kadd ( V0_x : uint256 ) => #abiCallData ( "add" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModImportedContract . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImportedContract . S2Kset ( V0_x : uint256 ) => #abiCallData ( "set" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "add(uint256)" ) => 268690130 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "set(uint256)" ) => 1627277233 )
      

endmodule

module S2KtestZModContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModContractTestContract
    
    syntax S2KtestZModContractTestContract ::= "S2KtestZModContractTest" [symbol("contract_test%ContractTest")]
    
    syntax Bytes ::= S2KtestZModContractTestContract "." S2KtestZModContractTestMethod [function, symbol("method_test%ContractTest")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ContractTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ContractTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ContractTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ContractTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ContractTest_S2Kfailed_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ContractTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ContractTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ContractTest_S2KtargetContracts_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ContractTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ContractTest_S2KtargetSenders_")]
    
    syntax S2KtestZModContractTestMethod ::= "S2KtestExample" "(" ")" [symbol("method_test%ContractTest_S2KtestExample_")]
    
    rule  ( S2KtestZModContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractTest . S2KtestExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testExample()" ) => 1062881834 )
      

endmodule

module S2KtestZModContractBTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModContractBTestContract
    
    syntax S2KtestZModContractBTestContract ::= "S2KtestZModContractBTest" [symbol("contract_test%ContractBTest")]
    
    syntax Bytes ::= S2KtestZModContractBTestContract "." S2KtestZModContractBTestMethod [function, symbol("method_test%ContractBTest")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ContractBTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ContractBTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ContractBTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ContractBTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ContractBTest_S2Kfailed_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%ContractBTest_S2KsetUp_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ContractBTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ContractBTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ContractBTest_S2KtargetContracts_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ContractBTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ContractBTest_S2KtargetSenders_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtestCannotSubtract43" "(" ")" [symbol("method_test%ContractBTest_S2KtestCannotSubtract43_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtestFailSubtract43" "(" ")" [symbol("method_test%ContractBTest_S2KtestFailSubtract43_")]
    
    syntax S2KtestZModContractBTestMethod ::= "S2KtestNumberIs42" "(" ")" [symbol("method_test%ContractBTest_S2KtestNumberIs42_")]
    
    rule  ( S2KtestZModContractBTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtestCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtestFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractBTest . S2KtestNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testCannotSubtract43()" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43()" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42()" ) => 795542700 )
      

endmodule

module S2KtestZModContractFieldTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModContractFieldTestContract
    
    syntax S2KtestZModContractFieldTestContract ::= "S2KtestZModContractFieldTest" [symbol("contract_test%ContractFieldTest")]
    
    syntax Bytes ::= S2KtestZModContractFieldTestContract "." S2KtestZModContractFieldTestMethod [function, symbol("method_test%ContractFieldTest")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ContractFieldTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ContractFieldTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ContractFieldTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ContractFieldTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ContractFieldTest_S2Kfailed_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%ContractFieldTest_S2KsetUp_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ContractFieldTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ContractFieldTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ContractFieldTest_S2KtargetContracts_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ContractFieldTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ContractFieldTest_S2KtargetSenders_")]
    
    syntax S2KtestZModContractFieldTestMethod ::= "S2KtestEscrowToken" "(" ")" [symbol("method_test%ContractFieldTest_S2KtestEscrowToken_")]
    
    rule  ( S2KtestZModContractFieldTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModContractFieldTest . S2KtestEscrowToken ( ) => #abiCallData ( "testEscrowToken" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testEscrowToken()" ) => 892426400 )
      

endmodule

module S2KtestZModTEscrow-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModTEscrowContract
    
    syntax S2KtestZModTEscrowContract ::= "S2KtestZModTEscrow" [symbol("contract_test%TEscrow")]
    
    syntax Bytes ::= S2KtestZModTEscrowContract "." S2KtestZModTEscrowMethod [function, symbol("method_test%TEscrow")]
    
    syntax S2KtestZModTEscrowMethod ::= "S2KgetTokenTotalSupply" "(" ")" [symbol("method_test%TEscrow_S2KgetTokenTotalSupply_")]
    
    rule  ( S2KtestZModTEscrow . S2KgetTokenTotalSupply ( ) => #abiCallData ( "getTokenTotalSupply" , .TypedArgs ) )
      
    
    rule  ( selector ( "getTokenTotalSupply()" ) => 1474266187 )
      

endmodule

module S2KtestZModTGovernance-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModTGovernanceContract
    
    syntax S2KtestZModTGovernanceContract ::= "S2KtestZModTGovernance" [symbol("contract_test%TGovernance")]
    
    syntax Bytes ::= S2KtestZModTGovernanceContract "." S2KtestZModTGovernanceMethod [function, symbol("method_test%TGovernance")]
    
    syntax S2KtestZModTGovernanceMethod ::= "S2KgetEscrowTokenTotalSupply" "(" ")" [symbol("method_test%TGovernance_S2KgetEscrowTokenTotalSupply_")]
    
    rule  ( S2KtestZModTGovernance . S2KgetEscrowTokenTotalSupply ( ) => #abiCallData ( "getEscrowTokenTotalSupply" , .TypedArgs ) )
      
    
    rule  ( selector ( "getEscrowTokenTotalSupply()" ) => 2061189261 )
      

endmodule

module S2KtestZModTToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModTTokenContract
    
    syntax S2KtestZModTTokenContract ::= "S2KtestZModTToken" [symbol("contract_test%TToken")]
    
    syntax Bytes ::= S2KtestZModTTokenContract "." S2KtestZModTTokenMethod [function, symbol("method_test%TToken")]
    
    syntax S2KtestZModTTokenMethod ::= "S2KgetTotalSupply" "(" ")" [symbol("method_test%TToken_S2KgetTotalSupply_")]
    
    rule  ( S2KtestZModTToken . S2KgetTotalSupply ( ) => #abiCallData ( "getTotalSupply" , .TypedArgs ) )
      
    
    rule  ( selector ( "getTotalSupply()" ) => 3303283490 )
      

endmodule

module S2KsrcZModCounter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModCounterContract
    
    syntax S2KsrcZModCounterContract ::= "S2KsrcZModCounter" [symbol("contract_src%Counter")]
    
    syntax Bytes ::= S2KsrcZModCounterContract "." S2KsrcZModCounterMethod [function, symbol("method_src%Counter")]
    
    syntax S2KsrcZModCounterMethod ::= "S2Kincrement" "(" ")" [symbol("method_src%Counter_S2Kincrement_")]
    
    syntax S2KsrcZModCounterMethod ::= "S2Knumber" "(" ")" [symbol("method_src%Counter_S2Knumber_")]
    
    syntax S2KsrcZModCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" ")" [symbol("method_src%Counter_S2KsetNumber_uint256")]
    
    rule  ( S2KsrcZModCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModCounter . S2KsetNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , ( #uint256 ( V0_newNumber ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newNumber )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )
      

endmodule

module S2KsrcZModRecordedCounter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModRecordedCounterContract
    
    syntax S2KsrcZModRecordedCounterContract ::= "S2KsrcZModRecordedCounter" [symbol("contract_src%RecordedCounter")]
    
    syntax Bytes ::= S2KsrcZModRecordedCounterContract "." S2KsrcZModRecordedCounterMethod [function, symbol("method_src%RecordedCounter")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_src%RecordedCounter_S2KISZUndTEST_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_src%RecordedCounter_S2KexcludeArtifacts_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_src%RecordedCounter_S2KexcludeContracts_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_src%RecordedCounter_S2KexcludeSenders_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2Kfailed" "(" ")" [symbol("method_src%RecordedCounter_S2Kfailed_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KrecordExecutionWithDumpState" "(" ")" [symbol("method_src%RecordedCounter_S2KrecordExecutionWithDumpState_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_src%RecordedCounter_S2KtargetArtifactSelectors_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_src%RecordedCounter_S2KtargetArtifacts_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_src%RecordedCounter_S2KtargetContracts_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_src%RecordedCounter_S2KtargetSelectors_")]
    
    syntax S2KsrcZModRecordedCounterMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_src%RecordedCounter_S2KtargetSenders_")]
    
    rule  ( S2KsrcZModRecordedCounter . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KrecordExecutionWithDumpState ( ) => #abiCallData ( "recordExecutionWithDumpState" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModRecordedCounter . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "recordExecutionWithDumpState()" ) => 1179047971 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KtestZModCounter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCounterContract
    
    syntax S2KtestZModCounterContract ::= "S2KtestZModCounter" [symbol("contract_test%Counter")]
    
    syntax Bytes ::= S2KtestZModCounterContract "." S2KtestZModCounterMethod [function, symbol("method_test%Counter")]
    
    syntax S2KtestZModCounterMethod ::= "S2Kincrement" "(" ")" [symbol("method_test%Counter_S2Kincrement_")]
    
    syntax S2KtestZModCounterMethod ::= "S2Knumber" "(" ")" [symbol("method_test%Counter_S2Knumber_")]
    
    syntax S2KtestZModCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" ")" [symbol("method_test%Counter_S2KsetNumber_uint256")]
    
    rule  ( S2KtestZModCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounter . S2KsetNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , ( #uint256 ( V0_newNumber ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newNumber )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )
      

endmodule

module S2KtestZModCounterTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCounterTestContract
    
    syntax S2KtestZModCounterTestContract ::= "S2KtestZModCounterTest" [symbol("contract_test%CounterTest")]
    
    syntax Bytes ::= S2KtestZModCounterTestContract "." S2KtestZModCounterTestMethod [function, symbol("method_test%CounterTest")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%CounterTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2Kcounter" "(" ")" [symbol("method_test%CounterTest_S2Kcounter_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%CounterTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%CounterTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%CounterTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%CounterTest_S2Kfailed_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%CounterTest_S2Kkevm_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%CounterTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%CounterTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%CounterTest_S2KtargetContracts_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%CounterTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%CounterTest_S2KtargetSenders_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtestIncrement" "(" ")" [symbol("method_test%CounterTest_S2KtestIncrement_")]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtestSetNumber" "(" Int ":" "uint256" ")" [symbol("method_test%CounterTest_S2KtestSetNumber_uint256")]
    
    rule  ( S2KtestZModCounterTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2Kcounter ( ) => #abiCallData ( "counter" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtestIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtestSetNumber ( V0_x : uint256 ) => #abiCallData ( "testSetNumber" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "counter()" ) => 1639719450 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testIncrement()" ) => 3105072586 )
      
    
    rule  ( selector ( "testSetNumber(uint256)" ) => 1895400894 )
      

endmodule

module S2KtestZModDynamicTypesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModDynamicTypesTestContract
    
    syntax S2KtestZModDynamicTypesTestContract ::= "S2KtestZModDynamicTypesTest" [symbol("contract_test%DynamicTypesTest")]
    
    syntax Bytes ::= S2KtestZModDynamicTypesTestContract "." S2KtestZModDynamicTypesTestMethod [function, symbol("method_test%DynamicTypesTest")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%DynamicTypesTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%DynamicTypesTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%DynamicTypesTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%DynamicTypesTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%DynamicTypesTest_S2Kfailed_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%DynamicTypesTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%DynamicTypesTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%DynamicTypesTest_S2KtargetContracts_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%DynamicTypesTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%DynamicTypesTest_S2KtargetSenders_")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUndcomplexZUndtype" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUndcomplexZUndtype_uint256_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUndcomplexZUndtypeZUndarray" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUndcomplexZUndtypeZUndarray_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_bytes_uint256")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUnddynamicZUndbyteZUndread" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUnddynamicZUndbyteZUndread_bytes_uint256")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUnddynamicZUndnestedZUndstructZUndarray" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUnddynamicZUndnestedZUndstructZUndarray_uint256_bytes_uint256_bytes_uint256")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUnddynamicZUndstructZUndarray" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUnddynamicZUndstructZUndarray_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes_uint256_bytes")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUnddynamicZUndstructZUndnestedZUndarray" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "bool" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUnddynamicZUndstructZUndnestedZUndarray_address_address_uint256_uint256_bytes_bool")]
    
    syntax S2KtestZModDynamicTypesTestMethod ::= "S2KtestZUndnestedZUndstructZUndarray" "(" Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_test%DynamicTypesTest_S2KtestZUndnestedZUndstructZUndarray_uint256_bytes_uint256_bytes")]
    
    rule  ( S2KtestZModDynamicTypesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUndcomplexZUndtype ( V0_id : uint256 , V1_content : bytes , V2_ba_0 : bytes , V2_ba_1 : bytes , V2_ba_2 : bytes , V2_ba_3 : bytes , V2_ba_4 : bytes , V2_ba_5 : bytes , V2_ba_6 : bytes , V2_ba_7 : bytes , V2_ba_8 : bytes , V2_ba_9 : bytes ) => #abiCallData ( "test_complex_type" , ( #tuple ( ( #uint256 ( V0_id ) , ( #bytes ( V1_content ) , .TypedArgs ) ) ) , ( #array ( #bytes ( V2_ba_0 ) , 10 , ( #bytes ( V2_ba_0 ) , ( #bytes ( V2_ba_1 ) , ( #bytes ( V2_ba_2 ) , ( #bytes ( V2_ba_3 ) , ( #bytes ( V2_ba_4 ) , ( #bytes ( V2_ba_5 ) , ( #bytes ( V2_ba_6 ) , ( #bytes ( V2_ba_7 ) , ( #bytes ( V2_ba_8 ) , ( #bytes ( V2_ba_9 ) , .TypedArgs ) ) ) ) ) ) ) ) ) ) ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_id )
       andBool ( lengthBytes ( V1_content ) ==Int 10000
       andBool ( lengthBytes ( V2_ba_0 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_1 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_2 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_3 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_4 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_5 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_6 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_7 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_8 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_9 ) ==Int 600
               ))))))))))))
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUndcomplexZUndtypeZUndarray ( V0_id_0 : uint256 , V1_content_0 : bytes , V0_id_1 : uint256 , V1_content_1 : bytes , V0_id_2 : uint256 , V1_content_2 : bytes , V0_id_3 : uint256 , V1_content_3 : bytes , V0_id_4 : uint256 , V1_content_4 : bytes , V0_id_5 : uint256 , V1_content_5 : bytes , V0_id_6 : uint256 , V1_content_6 : bytes , V0_id_7 : uint256 , V1_content_7 : bytes , V0_id_8 : uint256 , V1_content_8 : bytes , V0_id_9 : uint256 , V1_content_9 : bytes , V2_ba_0 : bytes , V2_ba_1 : bytes , V2_ba_2 : bytes , V2_ba_3 : bytes , V2_ba_4 : bytes , V2_ba_5 : bytes , V2_ba_6 : bytes , V2_ba_7 : bytes , V2_ba_8 : bytes , V2_ba_9 : bytes , V3_offset : uint256 ) => #abiCallData ( "test_complex_type_array" , ( #array ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , 10 , ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_1 ) , ( #bytes ( V1_content_1 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_2 ) , ( #bytes ( V1_content_2 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_3 ) , ( #bytes ( V1_content_3 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_4 ) , ( #bytes ( V1_content_4 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_5 ) , ( #bytes ( V1_content_5 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_6 ) , ( #bytes ( V1_content_6 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_7 ) , ( #bytes ( V1_content_7 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_8 ) , ( #bytes ( V1_content_8 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_9 ) , ( #bytes ( V1_content_9 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) ) ) ) ) ) ) ) , ( #array ( #bytes ( V2_ba_0 ) , 10 , ( #bytes ( V2_ba_0 ) , ( #bytes ( V2_ba_1 ) , ( #bytes ( V2_ba_2 ) , ( #bytes ( V2_ba_3 ) , ( #bytes ( V2_ba_4 ) , ( #bytes ( V2_ba_5 ) , ( #bytes ( V2_ba_6 ) , ( #bytes ( V2_ba_7 ) , ( #bytes ( V2_ba_8 ) , ( #bytes ( V2_ba_9 ) , .TypedArgs ) ) ) ) ) ) ) ) ) ) ) , ( #uint256 ( V3_offset ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_id_0 )
       andBool ( lengthBytes ( V1_content_0 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_1 )
       andBool ( lengthBytes ( V1_content_1 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_2 )
       andBool ( lengthBytes ( V1_content_2 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_3 )
       andBool ( lengthBytes ( V1_content_3 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_4 )
       andBool ( lengthBytes ( V1_content_4 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_5 )
       andBool ( lengthBytes ( V1_content_5 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_6 )
       andBool ( lengthBytes ( V1_content_6 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_7 )
       andBool ( lengthBytes ( V1_content_7 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_8 )
       andBool ( lengthBytes ( V1_content_8 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_9 )
       andBool ( lengthBytes ( V1_content_9 ) ==Int 10000
       andBool ( lengthBytes ( V2_ba_0 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_1 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_2 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_3 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_4 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_5 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_6 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_7 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_8 ) ==Int 600
       andBool ( lengthBytes ( V2_ba_9 ) ==Int 600
       andBool ( #rangeUInt ( 256 , V3_offset )
               )))))))))))))))))))))))))))))))
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUnddynamicZUndbyteZUndread ( V0_data : bytes , V1_offset : uint256 ) => #abiCallData ( "test_dynamic_byte_read" , ( #bytes ( V0_data ) , ( #uint256 ( V1_offset ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V0_data ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUnddynamicZUndnestedZUndstructZUndarray ( V0_id_0 : uint256 , V1_content_0 : bytes , V0_id_1 : uint256 , V1_content_1 : bytes , V2_nonce : uint256 ) => #abiCallData ( "test_dynamic_nested_struct_array" , ( #tuple ( ( #array ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , 2 , ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_1 ) , ( #bytes ( V1_content_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) , ( #uint256 ( V2_nonce ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_id_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_0 ) )
       andBool ( #rangeUInt ( 256 , V0_id_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_1 ) )
       andBool ( #rangeUInt ( 256 , V2_nonce )
               )))))
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUnddynamicZUndstructZUndarray ( V0_id_0 : uint256 , V1_content_0 : bytes , V0_id_1 : uint256 , V1_content_1 : bytes , V0_id_2 : uint256 , V1_content_2 : bytes , V0_id_3 : uint256 , V1_content_3 : bytes , V0_id_4 : uint256 , V1_content_4 : bytes , V0_id_5 : uint256 , V1_content_5 : bytes , V0_id_6 : uint256 , V1_content_6 : bytes , V0_id_7 : uint256 , V1_content_7 : bytes , V0_id_8 : uint256 , V1_content_8 : bytes , V0_id_9 : uint256 , V1_content_9 : bytes ) => #abiCallData ( "test_dynamic_struct_array" , ( #array ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , 10 , ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_1 ) , ( #bytes ( V1_content_1 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_2 ) , ( #bytes ( V1_content_2 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_3 ) , ( #bytes ( V1_content_3 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_4 ) , ( #bytes ( V1_content_4 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_5 ) , ( #bytes ( V1_content_5 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_6 ) , ( #bytes ( V1_content_6 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_7 ) , ( #bytes ( V1_content_7 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_8 ) , ( #bytes ( V1_content_8 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_9 ) , ( #bytes ( V1_content_9 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) ) ) ) ) ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_id_0 )
       andBool ( lengthBytes ( V1_content_0 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_1 )
       andBool ( lengthBytes ( V1_content_1 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_2 )
       andBool ( lengthBytes ( V1_content_2 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_3 )
       andBool ( lengthBytes ( V1_content_3 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_4 )
       andBool ( lengthBytes ( V1_content_4 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_5 )
       andBool ( lengthBytes ( V1_content_5 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_6 )
       andBool ( lengthBytes ( V1_content_6 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_7 )
       andBool ( lengthBytes ( V1_content_7 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_8 )
       andBool ( lengthBytes ( V1_content_8 ) ==Int 10000
       andBool ( #rangeUInt ( 256 , V0_id_9 )
       andBool ( lengthBytes ( V1_content_9 ) ==Int 10000
               ))))))))))))))))))))
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUnddynamicZUndstructZUndnestedZUndarray ( V0_assets_0 : address , V0_assets_1 : address , V1_maxAmountsIn_0 : uint256 , V1_maxAmountsIn_1 : uint256 , V2_userData : bytes , V3_fromInternalBalance : bool ) => #abiCallData ( "test_dynamic_struct_nested_array" , ( #tuple ( ( #array ( #address ( V0_assets_0 ) , 2 , ( #address ( V0_assets_0 ) , ( #address ( V0_assets_1 ) , .TypedArgs ) ) ) , ( #array ( #uint256 ( V1_maxAmountsIn_0 ) , 2 , ( #uint256 ( V1_maxAmountsIn_0 ) , ( #uint256 ( V1_maxAmountsIn_1 ) , .TypedArgs ) ) ) , ( #bytes ( V2_userData ) , ( #bool ( V3_fromInternalBalance ) , .TypedArgs ) ) ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_assets_0 )
       andBool ( #rangeAddress ( V0_assets_1 )
       andBool ( #rangeUInt ( 256 , V1_maxAmountsIn_0 )
       andBool ( #rangeUInt ( 256 , V1_maxAmountsIn_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_userData ) )
       andBool ( #rangeBool ( V3_fromInternalBalance )
               ))))))
      
    
    rule  ( S2KtestZModDynamicTypesTest . S2KtestZUndnestedZUndstructZUndarray ( V0_id_0 : uint256 , V1_content_0 : bytes , V0_id_1 : uint256 , V1_content_1 : bytes ) => #abiCallData ( "test_nested_struct_array" , ( #array ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , 2 , ( #tuple ( ( #uint256 ( V0_id_0 ) , ( #bytes ( V1_content_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #uint256 ( V0_id_1 ) , ( #bytes ( V1_content_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_id_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_0 ) )
       andBool ( #rangeUInt ( 256 , V0_id_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_content_1 ) )
               ))))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_complex_type((uint256,bytes),bytes[])" ) => 1163356543 )
      
    
    rule  ( selector ( "test_complex_type_array((uint256,bytes)[],bytes[],uint256)" ) => 1559836154 )
      
    
    rule  ( selector ( "test_dynamic_byte_read(bytes,uint256)" ) => 4003228173 )
      
    
    rule  ( selector ( "test_dynamic_nested_struct_array(((uint256,bytes)[],uint256))" ) => 1802744855 )
      
    
    rule  ( selector ( "test_dynamic_struct_array((uint256,bytes)[])" ) => 73827068 )
      
    
    rule  ( selector ( "test_dynamic_struct_nested_array((address[],uint256[],bytes,bool))" ) => 1544336286 )
      
    
    rule  ( selector ( "test_nested_struct_array((uint256,bytes)[][])" ) => 2108146763 )
      

endmodule

module S2KsrcZModExpectEmit-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModExpectEmitContract
    
    syntax S2KsrcZModExpectEmitContract ::= "S2KsrcZModExpectEmit" [symbol("contract_src%ExpectEmit")]
    
    syntax Bytes ::= S2KsrcZModExpectEmitContract "." S2KsrcZModExpectEmitMethod [function, symbol("method_src%ExpectEmit")]
    
    syntax S2KsrcZModExpectEmitMethod ::= "S2Kt" "(" ")" [symbol("method_src%ExpectEmit_S2Kt_")]
    
    rule  ( S2KsrcZModExpectEmit . S2Kt ( ) => #abiCallData ( "t" , .TypedArgs ) )
      
    
    rule  ( selector ( "t()" ) => 2463158611 )
      

endmodule

module S2KtestZModEmitContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModEmitContractTestContract
    
    syntax S2KtestZModEmitContractTestContract ::= "S2KtestZModEmitContractTest" [symbol("contract_test%EmitContractTest")]
    
    syntax Bytes ::= S2KtestZModEmitContractTestContract "." S2KtestZModEmitContractTestMethod [function, symbol("method_test%EmitContractTest")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%EmitContractTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%EmitContractTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%EmitContractTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%EmitContractTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%EmitContractTest_S2Kfailed_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%EmitContractTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%EmitContractTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%EmitContractTest_S2KtargetContracts_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%EmitContractTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%EmitContractTest_S2KtargetSenders_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmit" "(" ")" [symbol("method_test%EmitContractTest_S2KtestExpectEmit_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmitCheckEmitter" "(" ")" [symbol("method_test%EmitContractTest_S2KtestExpectEmitCheckEmitter_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmitDoNotCheckData" "(" ")" [symbol("method_test%EmitContractTest_S2KtestExpectEmitDoNotCheckData_")]
    
    syntax S2KtestZModEmitContractTestMethod ::= "S2KtestExpectEmitLessTopics" "(" ")" [symbol("method_test%EmitContractTest_S2KtestExpectEmitLessTopics_")]
    
    rule  ( S2KtestZModEmitContractTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEmitContractTest . S2KtestExpectEmitLessTopics ( ) => #abiCallData ( "testExpectEmitLessTopics" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testExpectEmit()" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter()" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData()" ) => 4244930061 )
      
    
    rule  ( selector ( "testExpectEmitLessTopics()" ) => 3039780662 )
      

endmodule

module S2KtestZModEnum-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModEnumContract
    
    syntax S2KtestZModEnumContract ::= "S2KtestZModEnum" [symbol("contract_test%Enum")]
    
    syntax Bytes ::= S2KtestZModEnumContract "." S2KtestZModEnumMethod [function, symbol("method_test%Enum")]
    
    syntax S2KtestZModEnumMethod ::= "S2KenumZUndargumentZUndrange" "(" Int ":" "uint8" ")" [symbol("method_test%Enum_S2KenumZUndargumentZUndrange_uint8")]
    
    syntax S2KtestZModEnumMethod ::= "S2KenumZUndstorageZUndrange" "(" ")" [symbol("method_test%Enum_S2KenumZUndstorageZUndrange_")]
    
    rule  ( S2KtestZModEnum . S2KenumZUndargumentZUndrange ( V0_letter : uint8 ) => #abiCallData ( "enum_argument_range" , ( #uint8 ( V0_letter ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 8 , V0_letter )
       andBool ( V0_letter <Int 6
               ))
      
    
    rule  ( S2KtestZModEnum . S2KenumZUndstorageZUndrange ( ) => #abiCallData ( "enum_storage_range" , .TypedArgs ) )
      
    
    rule  ( selector ( "enum_argument_range(uint8)" ) => 2222733307 )
      
    
    rule  ( selector ( "enum_storage_range()" ) => 1664546334 )
      

endmodule

module S2KtestZModEnumContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModEnumContractContract
    
    syntax S2KtestZModEnumContractContract ::= "S2KtestZModEnumContract" [symbol("contract_test%EnumContract")]
    
    syntax Bytes ::= S2KtestZModEnumContractContract "." S2KtestZModEnumContractMethod [function, symbol("method_test%EnumContract")]
    
    syntax S2KtestZModEnumContractMethod ::= "S2Kcount" "(" ")" [symbol("method_test%EnumContract_S2Kcount_")]
    
    syntax S2KtestZModEnumContractMethod ::= "S2Kletter" "(" ")" [symbol("method_test%EnumContract_S2Kletter_")]
    
    rule  ( S2KtestZModEnumContract . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnumContract . S2Kletter ( ) => #abiCallData ( "letter" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "letter()" ) => 1756313567 )
      

endmodule

module S2KtestZModEnvTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModEnvTestContract
    
    syntax S2KtestZModEnvTestContract ::= "S2KtestZModEnvTest" [symbol("contract_test%EnvTest")]
    
    syntax Bytes ::= S2KtestZModEnvTestContract "." S2KtestZModEnvTestMethod [function, symbol("method_test%EnvTest")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%EnvTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%EnvTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%EnvTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%EnvTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%EnvTest_S2Kfailed_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%EnvTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%EnvTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%EnvTest_S2KtargetContracts_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%EnvTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%EnvTest_S2KtargetSenders_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvAddress" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvAddress_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvAddresseArray" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvAddresseArray_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBool" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvBool_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBoolArray" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvBoolArray_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytes" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvBytes_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytes32" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvBytes32_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytes32Array" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvBytes32Array_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvBytesArray" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvBytesArray_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvInt" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvInt_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvIntArray" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvIntArray_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvString" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvString_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvStringArray" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvStringArray_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvUInt" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvUInt_")]
    
    syntax S2KtestZModEnvTestMethod ::= "S2KtestEnvUIntArray" "(" ")" [symbol("method_test%EnvTest_S2KtestEnvUIntArray_")]
    
    rule  ( S2KtestZModEnvTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModEnvTest . S2KtestEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testEnvAddress()" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray()" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool()" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray()" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes()" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32()" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array()" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray()" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt()" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray()" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString()" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray()" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt()" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray()" ) => 551796351 )
      

endmodule

module S2KtestZModDummy-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModDummyContract
    
    syntax S2KtestZModDummyContract ::= "S2KtestZModDummy" [symbol("contract_test%Dummy")]
    
    syntax Bytes ::= S2KtestZModDummyContract "." S2KtestZModDummyMethod [function, symbol("method_test%Dummy")]
    
    syntax S2KtestZModDummyMethod ::= "S2KnumberA" "(" ")" [symbol("method_test%Dummy_S2KnumberA_")]
    
    rule  ( S2KtestZModDummy . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )
      
    
    rule  ( selector ( "numberA()" ) => 2571869527 )
      

endmodule

module S2KtestZModExpectCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModExpectCallTestContract
    
    syntax S2KtestZModExpectCallTestContract ::= "S2KtestZModExpectCallTest" [symbol("contract_test%ExpectCallTest")]
    
    syntax Bytes ::= S2KtestZModExpectCallTestContract "." S2KtestZModExpectCallTestMethod [function, symbol("method_test%ExpectCallTest")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ExpectCallTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ExpectCallTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ExpectCallTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ExpectCallTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ExpectCallTest_S2Kfailed_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%ExpectCallTest_S2Kkevm_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ExpectCallTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ExpectCallTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ExpectCallTest_S2KtargetContracts_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ExpectCallTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ExpectCallTest_S2KtargetSenders_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtestExpectRegularCall" "(" ")" [symbol("method_test%ExpectCallTest_S2KtestExpectRegularCall_")]
    
    syntax S2KtestZModExpectCallTestMethod ::= "S2KtestExpectStaticCall" "(" ")" [symbol("method_test%ExpectCallTest_S2KtestExpectStaticCall_")]
    
    rule  ( S2KtestZModExpectCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtestExpectRegularCall ( ) => #abiCallData ( "testExpectRegularCall" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectCallTest . S2KtestExpectStaticCall ( ) => #abiCallData ( "testExpectStaticCall" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testExpectRegularCall()" ) => 676731872 )
      
    
    rule  ( selector ( "testExpectStaticCall()" ) => 3219733999 )
      

endmodule

module S2KtestZModDepthReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModDepthReverterContract
    
    syntax S2KtestZModDepthReverterContract ::= "S2KtestZModDepthReverter" [symbol("contract_test%DepthReverter")]
    
    syntax Bytes ::= S2KtestZModDepthReverterContract "." S2KtestZModDepthReverterMethod [function, symbol("method_test%DepthReverter")]
    
    syntax S2KtestZModDepthReverterMethod ::= "S2KrevertAtNextDepth" "(" ")" [symbol("method_test%DepthReverter_S2KrevertAtNextDepth_")]
    
    rule  ( S2KtestZModDepthReverter . S2KrevertAtNextDepth ( ) => #abiCallData ( "revertAtNextDepth" , .TypedArgs ) )
      
    
    rule  ( selector ( "revertAtNextDepth()" ) => 332278727 )
      

endmodule

module S2KtestZModExpectRevertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModExpectRevertTestContract
    
    syntax S2KtestZModExpectRevertTestContract ::= "S2KtestZModExpectRevertTest" [symbol("contract_test%ExpectRevertTest")]
    
    syntax Bytes ::= S2KtestZModExpectRevertTestContract "." S2KtestZModExpectRevertTestMethod [function, symbol("method_test%ExpectRevertTest")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ExpectRevertTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ExpectRevertTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ExpectRevertTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ExpectRevertTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ExpectRevertTest_S2Kfailed_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KrevertDepth1" "(" ")" [symbol("method_test%ExpectRevertTest_S2KrevertDepth1_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KrevertDepth2" "(" ")" [symbol("method_test%ExpectRevertTest_S2KrevertDepth2_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtargetContracts_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtargetSenders_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndExpectRevertZUndfailAndSuccess" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestFailZUndExpectRevertZUndfailAndSuccess_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndbytes4" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndbytes4_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndempty" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndempty_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndfalse" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndfalse_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestFailZUndexpectRevertZUndmultipleReverts" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestFailZUndexpectRevertZUndmultipleReverts_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndExpectRevertZUndincreasedDepth" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndExpectRevertZUndincreasedDepth_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndbytes4" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndbytes4_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndencodedSymbolic" "(" Int ":" "address" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndencodedSymbolic_address")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinDepth" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndinDepth_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndinternalCall" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndinternalCall_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndmessage" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndmessage_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndreturnValue" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndreturnValue_")]
    
    syntax S2KtestZModExpectRevertTestMethod ::= "S2KtestZUndexpectRevertZUndtrue" "(" ")" [symbol("method_test%ExpectRevertTest_S2KtestZUndexpectRevertZUndtrue_")]
    
    rule  ( S2KtestZModExpectRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KrevertDepth1 ( ) => #abiCallData ( "revertDepth1" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KrevertDepth2 ( ) => #abiCallData ( "revertDepth2" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndExpectRevertZUndfailAndSuccess ( ) => #abiCallData ( "testFail_ExpectRevert_failAndSuccess" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "testFail_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndempty ( ) => #abiCallData ( "testFail_expectRevert_empty" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndfalse ( ) => #abiCallData ( "testFail_expectRevert_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestFailZUndexpectRevertZUndmultipleReverts ( ) => #abiCallData ( "testFail_expectRevert_multipleReverts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndExpectRevertZUndincreasedDepth ( ) => #abiCallData ( "test_ExpectRevert_increasedDepth" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndbytes4 ( ) => #abiCallData ( "test_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndencodedSymbolic ( V0_controller : address ) => #abiCallData ( "test_expectRevert_encodedSymbolic" , ( #address ( V0_controller ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndinDepth ( ) => #abiCallData ( "test_expectRevert_inDepth" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndinternalCall ( ) => #abiCallData ( "test_expectRevert_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndmessage ( ) => #abiCallData ( "test_expectRevert_message" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndreturnValue ( ) => #abiCallData ( "test_expectRevert_returnValue" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModExpectRevertTest . S2KtestZUndexpectRevertZUndtrue ( ) => #abiCallData ( "test_expectRevert_true" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "revertDepth1()" ) => 1424108987 )
      
    
    rule  ( selector ( "revertDepth2()" ) => 359727099 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_ExpectRevert_failAndSuccess()" ) => 2386222785 )
      
    
    rule  ( selector ( "testFail_expectRevert_bytes4()" ) => 3540765930 )
      
    
    rule  ( selector ( "testFail_expectRevert_empty()" ) => 3691097669 )
      
    
    rule  ( selector ( "testFail_expectRevert_false()" ) => 2152588325 )
      
    
    rule  ( selector ( "testFail_expectRevert_multipleReverts()" ) => 2539873268 )
      
    
    rule  ( selector ( "test_ExpectRevert_increasedDepth()" ) => 910856553 )
      
    
    rule  ( selector ( "test_expectRevert_bytes4()" ) => 1300765909 )
      
    
    rule  ( selector ( "test_expectRevert_encodedSymbolic(address)" ) => 27292786 )
      
    
    rule  ( selector ( "test_expectRevert_inDepth()" ) => 2412574488 )
      
    
    rule  ( selector ( "test_expectRevert_internalCall()" ) => 1766536967 )
      
    
    rule  ( selector ( "test_expectRevert_message()" ) => 3706733127 )
      
    
    rule  ( selector ( "test_expectRevert_returnValue()" ) => 4193569282 )
      
    
    rule  ( selector ( "test_expectRevert_true()" ) => 2931127071 )
      

endmodule

module S2KtestZModReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModReverterContract
    
    syntax S2KtestZModReverterContract ::= "S2KtestZModReverter" [symbol("contract_test%Reverter")]
    
    syntax Bytes ::= S2KtestZModReverterContract "." S2KtestZModReverterMethod [function, symbol("method_test%Reverter")]
    
    syntax S2KtestZModReverterMethod ::= "S2KnoRevert" "(" ")" [symbol("method_test%Reverter_S2KnoRevert_")]
    
    syntax S2KtestZModReverterMethod ::= "S2KrevertWithError" "(" Int ":" "address" "," String ":" "string" ")" [symbol("method_test%Reverter_S2KrevertWithError_address_string")]
    
    syntax S2KtestZModReverterMethod ::= "S2KrevertWithReason" "(" String ":" "string" ")" [symbol("method_test%Reverter_S2KrevertWithReason_string")]
    
    syntax S2KtestZModReverterMethod ::= "S2KrevertWithoutReason" "(" ")" [symbol("method_test%Reverter_S2KrevertWithoutReason_")]
    
    rule  ( S2KtestZModReverter . S2KnoRevert ( ) => #abiCallData ( "noRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModReverter . S2KrevertWithError ( V0_controller : address , V1_message : string ) => #abiCallData ( "revertWithError" , ( #address ( V0_controller ) , ( #string ( V1_message ) , .TypedArgs ) ) ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KtestZModReverter . S2KrevertWithReason ( V0__a : string ) => #abiCallData ( "revertWithReason" , ( #string ( V0__a ) , .TypedArgs ) ) )
      
    
    rule  ( S2KtestZModReverter . S2KrevertWithoutReason ( ) => #abiCallData ( "revertWithoutReason" , .TypedArgs ) )
      
    
    rule  ( selector ( "noRevert()" ) => 3072618433 )
      
    
    rule  ( selector ( "revertWithError(address,string)" ) => 1543116248 )
      
    
    rule  ( selector ( "revertWithReason(string)" ) => 4154655617 )
      
    
    rule  ( selector ( "revertWithoutReason()" ) => 1097275021 )
      

endmodule

module S2KtestZModReverterWithReturn-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModReverterWithReturnContract
    
    syntax S2KtestZModReverterWithReturnContract ::= "S2KtestZModReverterWithReturn" [symbol("contract_test%ReverterWithReturn")]
    
    syntax Bytes ::= S2KtestZModReverterWithReturnContract "." S2KtestZModReverterWithReturnMethod [function, symbol("method_test%ReverterWithReturn")]
    
    syntax S2KtestZModReverterWithReturnMethod ::= "S2KreturnBytesUnless" "(" Int ":" "bool" ")" [symbol("method_test%ReverterWithReturn_S2KreturnBytesUnless_bool")]
    
    syntax S2KtestZModReverterWithReturnMethod ::= "S2KreturnTupleUnless" "(" Int ":" "bool" ")" [symbol("method_test%ReverterWithReturn_S2KreturnTupleUnless_bool")]
    
    rule  ( S2KtestZModReverterWithReturn . S2KreturnBytesUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnBytesUnless" , ( #bool ( V0_revertInstead ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( S2KtestZModReverterWithReturn . S2KreturnTupleUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnTupleUnless" , ( #bool ( V0_revertInstead ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( selector ( "returnBytesUnless(bool)" ) => 3511402276 )
      
    
    rule  ( selector ( "returnTupleUnless(bool)" ) => 3931056962 )
      

endmodule

module S2KtestZModFfiTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModFfiTestContract
    
    syntax S2KtestZModFfiTestContract ::= "S2KtestZModFfiTest" [symbol("contract_test%FfiTest")]
    
    syntax Bytes ::= S2KtestZModFfiTestContract "." S2KtestZModFfiTestMethod [function, symbol("method_test%FfiTest")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%FfiTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%FfiTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%FfiTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%FfiTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%FfiTest_S2Kfailed_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%FfiTest_S2KsetUp_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%FfiTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%FfiTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%FfiTest_S2KtargetContracts_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%FfiTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%FfiTest_S2KtargetSenders_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtestFFIFOO" "(" ")" [symbol("method_test%FfiTest_S2KtestFFIFOO_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtestFFIScript" "(" ")" [symbol("method_test%FfiTest_S2KtestFFIScript_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2KtestFFIScript2" "(" ")" [symbol("method_test%FfiTest_S2KtestFFIScript2_")]
    
    syntax S2KtestZModFfiTestMethod ::= "S2Ktestffi" "(" ")" [symbol("method_test%FfiTest_S2Ktestffi_")]
    
    rule  ( S2KtestZModFfiTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtestFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtestFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2KtestFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFfiTest . S2Ktestffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFFIFOO()" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript()" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2()" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi()" ) => 4068116 )
      

endmodule

module S2KtestZModFilesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModFilesTestContract
    
    syntax S2KtestZModFilesTestContract ::= "S2KtestZModFilesTest" [symbol("contract_test%FilesTest")]
    
    syntax Bytes ::= S2KtestZModFilesTestContract "." S2KtestZModFilesTestMethod [function, symbol("method_test%FilesTest")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%FilesTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%FilesTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%FilesTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%FilesTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%FilesTest_S2Kfailed_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%FilesTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%FilesTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%FilesTest_S2KtargetContracts_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%FilesTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%FilesTest_S2KtargetSenders_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtestFailRemoveFile" "(" ")" [symbol("method_test%FilesTest_S2KtestFailRemoveFile_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtestReadWriteFile" "(" ")" [symbol("method_test%FilesTest_S2KtestReadWriteFile_")]
    
    syntax S2KtestZModFilesTestMethod ::= "S2KtestReadWriteLine" "(" ")" [symbol("method_test%FilesTest_S2KtestReadWriteLine_")]
    
    rule  ( S2KtestZModFilesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtestFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtestReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFilesTest . S2KtestReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFailRemoveFile()" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile()" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine()" ) => 3039298541 )
      

endmodule

module S2KtestZModForkTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModForkTestContract
    
    syntax S2KtestZModForkTestContract ::= "S2KtestZModForkTest" [symbol("contract_test%ForkTest")]
    
    syntax Bytes ::= S2KtestZModForkTestContract "." S2KtestZModForkTestMethod [function, symbol("method_test%ForkTest")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ForkTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ForkTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ForkTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ForkTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ForkTest_S2Kfailed_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ForkTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ForkTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ForkTest_S2KtargetContracts_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ForkTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ForkTest_S2KtargetSenders_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestActiveFork" "(" ")" [symbol("method_test%ForkTest_S2KtestActiveFork_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestAllRPCUrl" "(" ")" [symbol("method_test%ForkTest_S2KtestAllRPCUrl_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateFork" "(" ")" [symbol("method_test%ForkTest_S2KtestCreateFork_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateForkBlock" "(" ")" [symbol("method_test%ForkTest_S2KtestCreateForkBlock_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateSelectFork" "(" ")" [symbol("method_test%ForkTest_S2KtestCreateSelectFork_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestCreateSelectForkBlock" "(" ")" [symbol("method_test%ForkTest_S2KtestCreateSelectForkBlock_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestRPCUrl" "(" ")" [symbol("method_test%ForkTest_S2KtestRPCUrl_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestRPCUrlRevert" "(" ")" [symbol("method_test%ForkTest_S2KtestRPCUrlRevert_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestRollFork" "(" ")" [symbol("method_test%ForkTest_S2KtestRollFork_")]
    
    syntax S2KtestZModForkTestMethod ::= "S2KtestRollForkId" "(" ")" [symbol("method_test%ForkTest_S2KtestRollForkId_")]
    
    rule  ( S2KtestZModForkTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestActiveFork ( ) => #abiCallData ( "testActiveFork" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestAllRPCUrl ( ) => #abiCallData ( "testAllRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestCreateFork ( ) => #abiCallData ( "testCreateFork" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestCreateForkBlock ( ) => #abiCallData ( "testCreateForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestCreateSelectFork ( ) => #abiCallData ( "testCreateSelectFork" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestCreateSelectForkBlock ( ) => #abiCallData ( "testCreateSelectForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestRPCUrl ( ) => #abiCallData ( "testRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestRPCUrlRevert ( ) => #abiCallData ( "testRPCUrlRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestRollFork ( ) => #abiCallData ( "testRollFork" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModForkTest . S2KtestRollForkId ( ) => #abiCallData ( "testRollForkId" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testActiveFork()" ) => 2981024546 )
      
    
    rule  ( selector ( "testAllRPCUrl()" ) => 707490019 )
      
    
    rule  ( selector ( "testCreateFork()" ) => 9848133 )
      
    
    rule  ( selector ( "testCreateForkBlock()" ) => 2820856803 )
      
    
    rule  ( selector ( "testCreateSelectFork()" ) => 2307095206 )
      
    
    rule  ( selector ( "testCreateSelectForkBlock()" ) => 269695700 )
      
    
    rule  ( selector ( "testRPCUrl()" ) => 3938449696 )
      
    
    rule  ( selector ( "testRPCUrlRevert()" ) => 470834373 )
      
    
    rule  ( selector ( "testRollFork()" ) => 3222356361 )
      
    
    rule  ( selector ( "testRollForkId()" ) => 3215996813 )
      

endmodule

module S2KtestZModFreshBytesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModFreshBytesTestContract
    
    syntax S2KtestZModFreshBytesTestContract ::= "S2KtestZModFreshBytesTest" [symbol("contract_test%FreshBytesTest")]
    
    syntax Bytes ::= S2KtestZModFreshBytesTestContract "." S2KtestZModFreshBytesTestMethod [function, symbol("method_test%FreshBytesTest")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%FreshBytesTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%FreshBytesTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%FreshBytesTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%FreshBytesTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%FreshBytesTest_S2Kfailed_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%FreshBytesTest_S2Kkevm_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KmanipZUndsymbolicZUndbytes" "(" Bytes ":" "bytes" ")" [symbol("method_test%FreshBytesTest_S2KmanipZUndsymbolicZUndbytes_bytes")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%FreshBytesTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%FreshBytesTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%FreshBytesTest_S2KtargetContracts_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%FreshBytesTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%FreshBytesTest_S2KtargetSenders_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUnd1" "(" ")" [symbol("method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUnd1_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUnd2" "(" ")" [symbol("method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUnd2_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUnd3" "(" ")" [symbol("method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUnd3_")]
    
    syntax S2KtestZModFreshBytesTestMethod ::= "S2KtestZUndsymbolicZUndbytesZUndlength" "(" Int ":" "uint256" ")" [symbol("method_test%FreshBytesTest_S2KtestZUndsymbolicZUndbytesZUndlength_uint256")]
    
    rule  ( S2KtestZModFreshBytesTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KmanipZUndsymbolicZUndbytes ( V0_b : bytes ) => #abiCallData ( "manip_symbolic_bytes" , ( #bytes ( V0_b ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_b ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUnd1 ( ) => #abiCallData ( "test_symbolic_bytes_1" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUnd2 ( ) => #abiCallData ( "test_symbolic_bytes_2" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUnd3 ( ) => #abiCallData ( "test_symbolic_bytes_3" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshBytesTest . S2KtestZUndsymbolicZUndbytesZUndlength ( V0_l : uint256 ) => #abiCallData ( "test_symbolic_bytes_length" , ( #uint256 ( V0_l ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_l )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "manip_symbolic_bytes(bytes)" ) => 1456844847 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_symbolic_bytes_1()" ) => 1469379986 )
      
    
    rule  ( selector ( "test_symbolic_bytes_2()" ) => 1407248988 )
      
    
    rule  ( selector ( "test_symbolic_bytes_3()" ) => 1638385851 )
      
    
    rule  ( selector ( "test_symbolic_bytes_length(uint256)" ) => 1880647188 )
      

endmodule

module S2KtestZModFreshCheatcodes-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModFreshCheatcodesContract
    
    syntax S2KtestZModFreshCheatcodesContract ::= "S2KtestZModFreshCheatcodes" [symbol("contract_test%FreshCheatcodes")]
    
    syntax Bytes ::= S2KtestZModFreshCheatcodesContract "." S2KtestZModFreshCheatcodesMethod [function, symbol("method_test%FreshCheatcodes")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%FreshCheatcodes_S2KISZUndTEST_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%FreshCheatcodes_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%FreshCheatcodes_S2KexcludeContracts_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%FreshCheatcodes_S2KexcludeSenders_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%FreshCheatcodes_S2Kfailed_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%FreshCheatcodes_S2Kkevm_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtargetArtifacts_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtargetContracts_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtargetSelectors_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtargetSenders_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtestFailZUndint128" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtestFailZUndint128_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtestZUndaddress" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtestZUndaddress_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtestZUndbool" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtestZUndbool_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtestZUndfreshSymbolicWord" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtestZUndfreshSymbolicWord_")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtestZUndfreshUints" "(" Int ":" "uint8" ")" [symbol("method_test%FreshCheatcodes_S2KtestZUndfreshUints_uint8")]
    
    syntax S2KtestZModFreshCheatcodesMethod ::= "S2KtestZUndint128" "(" ")" [symbol("method_test%FreshCheatcodes_S2KtestZUndint128_")]
    
    rule  ( S2KtestZModFreshCheatcodes . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtestFailZUndint128 ( ) => #abiCallData ( "testFail_int128" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtestZUndaddress ( ) => #abiCallData ( "test_address" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtestZUndbool ( ) => #abiCallData ( "test_bool" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtestZUndfreshSymbolicWord ( ) => #abiCallData ( "test_freshSymbolicWord" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtestZUndfreshUints ( V0_x : uint8 ) => #abiCallData ( "test_freshUints" , ( #uint8 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KtestZModFreshCheatcodes . S2KtestZUndint128 ( ) => #abiCallData ( "test_int128" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_int128()" ) => 3370517098 )
      
    
    rule  ( selector ( "test_address()" ) => 3931432000 )
      
    
    rule  ( selector ( "test_bool()" ) => 1205338438 )
      
    
    rule  ( selector ( "test_freshSymbolicWord()" ) => 4235451793 )
      
    
    rule  ( selector ( "test_freshUints(uint8)" ) => 504762417 )
      
    
    rule  ( selector ( "test_int128()" ) => 3014857546 )
      

endmodule

module S2KtestZModGasTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModGasTestContract
    
    syntax S2KtestZModGasTestContract ::= "S2KtestZModGasTest" [symbol("contract_test%GasTest")]
    
    syntax Bytes ::= S2KtestZModGasTestContract "." S2KtestZModGasTestMethod [function, symbol("method_test%GasTest")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%GasTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%GasTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%GasTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%GasTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%GasTest_S2Kfailed_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%GasTest_S2Kkevm_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%GasTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%GasTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%GasTest_S2KtargetContracts_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%GasTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%GasTest_S2KtargetSenders_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtestInfiniteGas" "(" ")" [symbol("method_test%GasTest_S2KtestInfiniteGas_")]
    
    syntax S2KtestZModGasTestMethod ::= "S2KtestSetGas" "(" ")" [symbol("method_test%GasTest_S2KtestSetGas_")]
    
    rule  ( S2KtestZModGasTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtestInfiniteGas ( ) => #abiCallData ( "testInfiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGasTest . S2KtestSetGas ( ) => #abiCallData ( "testSetGas" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testInfiniteGas()" ) => 1677640502 )
      
    
    rule  ( selector ( "testSetGas()" ) => 2307678515 )
      

endmodule

module S2KtestZModGetCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModGetCodeTestContract
    
    syntax S2KtestZModGetCodeTestContract ::= "S2KtestZModGetCodeTest" [symbol("contract_test%GetCodeTest")]
    
    syntax Bytes ::= S2KtestZModGetCodeTestContract "." S2KtestZModGetCodeTestMethod [function, symbol("method_test%GetCodeTest")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%GetCodeTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%GetCodeTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%GetCodeTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%GetCodeTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%GetCodeTest_S2Kfailed_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%GetCodeTest_S2KsetUp_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%GetCodeTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%GetCodeTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%GetCodeTest_S2KtargetContracts_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%GetCodeTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%GetCodeTest_S2KtargetSenders_")]
    
    syntax S2KtestZModGetCodeTestMethod ::= "S2KtestGetCode" "(" ")" [symbol("method_test%GetCodeTest_S2KtestGetCode_")]
    
    rule  ( S2KtestZModGetCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModGetCodeTest . S2KtestGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testGetCode()" ) => 3906163359 )
      

endmodule

module S2KtestZModHevmTests-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModHevmTestsContract
    
    syntax S2KtestZModHevmTestsContract ::= "S2KtestZModHevmTests" [symbol("contract_test%HevmTests")]
    
    syntax Bytes ::= S2KtestZModHevmTestsContract "." S2KtestZModHevmTestsMethod [function, symbol("method_test%HevmTests")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%HevmTests_S2KISZUndTEST_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%HevmTests_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%HevmTests_S2KexcludeContracts_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%HevmTests_S2KexcludeSenders_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%HevmTests_S2Kfailed_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveFailZUndallZUndbranches" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveFailZUndallZUndbranches_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveFailZUndassertEq" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveFailZUndassertEq_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveFailZUndassertFalse" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveFailZUndassertFalse_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveFailZUndassumeZUndassert" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveFailZUndassumeZUndassert_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveFailZUndrequireZUndassert" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveFailZUndrequireZUndassert_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveFailZUndrevert" "(" ")" [symbol("method_test%HevmTests_S2KproveFailZUndrevert_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndassertEqZUndfalse" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndassertEqZUndfalse_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndassertEqZUndtrue" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndassertEqZUndtrue_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndassertFalse" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndassertFalse_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndassertTrue" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndassertTrue_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndassumeZUndassertZUndfalse" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndassumeZUndassertZUndfalse_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndassumeZUndassertZUndtrue" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndassumeZUndassertZUndtrue_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUnddivideZUndbyZUnd0" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUnddivideZUndbyZUnd0_uint256_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndexpectRevert" "(" ")" [symbol("method_test%HevmTests_S2KproveZUndexpectRevert_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndmoduloZUndbyZUnd0" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndmoduloZUndbyZUnd0_uint256_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndoverflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndoverflow_uint256_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndrequireZUndassertZUndfalse" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndrequireZUndassertZUndfalse_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndrequireZUndassertZUndtrue" "(" Int ":" "uint256" ")" [symbol("method_test%HevmTests_S2KproveZUndrequireZUndassertZUndtrue_uint256")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KproveZUndrevert" "(" ")" [symbol("method_test%HevmTests_S2KproveZUndrevert_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%HevmTests_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%HevmTests_S2KtargetArtifacts_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%HevmTests_S2KtargetContracts_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%HevmTests_S2KtargetSelectors_")]
    
    syntax S2KtestZModHevmTestsMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%HevmTests_S2KtargetSenders_")]
    
    rule  ( S2KtestZModHevmTests . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveFailZUndallZUndbranches ( V0_x : uint256 ) => #abiCallData ( "proveFail_all_branches" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveFailZUndassertEq ( V0_x : uint256 ) => #abiCallData ( "proveFail_assertEq" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveFailZUndassertFalse ( V0_x : uint256 ) => #abiCallData ( "proveFail_assertFalse" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveFailZUndassumeZUndassert ( V0_x : uint256 ) => #abiCallData ( "proveFail_assume_assert" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveFailZUndrequireZUndassert ( V0_x : uint256 ) => #abiCallData ( "proveFail_require_assert" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveFailZUndrevert ( ) => #abiCallData ( "proveFail_revert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndassertEqZUndfalse ( V0_x : uint256 ) => #abiCallData ( "prove_assertEq_false" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndassertEqZUndtrue ( V0_x : uint256 ) => #abiCallData ( "prove_assertEq_true" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndassertFalse ( V0_x : uint256 ) => #abiCallData ( "prove_assertFalse" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndassertTrue ( V0_x : uint256 ) => #abiCallData ( "prove_assertTrue" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndassumeZUndassertZUndfalse ( V0_x : uint256 ) => #abiCallData ( "prove_assume_assert_false" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndassumeZUndassertZUndtrue ( V0_x : uint256 ) => #abiCallData ( "prove_assume_assert_true" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUnddivideZUndbyZUnd0 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "prove_divide_by_0" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndexpectRevert ( ) => #abiCallData ( "prove_expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndmoduloZUndbyZUnd0 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "prove_modulo_by_0" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndoverflow ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "prove_overflow" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndrequireZUndassertZUndfalse ( V0_x : uint256 ) => #abiCallData ( "prove_require_assert_false" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndrequireZUndassertZUndtrue ( V0_x : uint256 ) => #abiCallData ( "prove_require_assert_true" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModHevmTests . S2KproveZUndrevert ( ) => #abiCallData ( "prove_revert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModHevmTests . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "proveFail_all_branches(uint256)" ) => 3278225731 )
      
    
    rule  ( selector ( "proveFail_assertEq(uint256)" ) => 583338350 )
      
    
    rule  ( selector ( "proveFail_assertFalse(uint256)" ) => 2063725838 )
      
    
    rule  ( selector ( "proveFail_assume_assert(uint256)" ) => 1842538834 )
      
    
    rule  ( selector ( "proveFail_require_assert(uint256)" ) => 812026407 )
      
    
    rule  ( selector ( "proveFail_revert()" ) => 2340001029 )
      
    
    rule  ( selector ( "prove_assertEq_false(uint256)" ) => 2025798032 )
      
    
    rule  ( selector ( "prove_assertEq_true(uint256)" ) => 4132089271 )
      
    
    rule  ( selector ( "prove_assertFalse(uint256)" ) => 2764004515 )
      
    
    rule  ( selector ( "prove_assertTrue(uint256)" ) => 4222478886 )
      
    
    rule  ( selector ( "prove_assume_assert_false(uint256)" ) => 1580386829 )
      
    
    rule  ( selector ( "prove_assume_assert_true(uint256)" ) => 2438130732 )
      
    
    rule  ( selector ( "prove_divide_by_0(uint256,uint256)" ) => 159554905 )
      
    
    rule  ( selector ( "prove_expectRevert()" ) => 2034138966 )
      
    
    rule  ( selector ( "prove_modulo_by_0(uint256,uint256)" ) => 1127949388 )
      
    
    rule  ( selector ( "prove_overflow(uint256,uint256)" ) => 3467137769 )
      
    
    rule  ( selector ( "prove_require_assert_false(uint256)" ) => 4266341997 )
      
    
    rule  ( selector ( "prove_require_assert_true(uint256)" ) => 2437296256 )
      
    
    rule  ( selector ( "prove_revert()" ) => 2127993698 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseContract
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseContract ::= "S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase" [symbol("contract_lib%kontrol-cheatcodes%src%KontrolCheatsBase")]
    
    syntax Bytes ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseContract "." S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod [function, symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KallowCallsToAddress" "(" Int ":" "address" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KallowCallsToAddress_address")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KallowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KallowChangesToStorage_address_uint256")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectCreate_address_uint256_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectCreate2_address_uint256_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectDelegateCall_address_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectNoCall" "(" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectNoCall_")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectRegularCall_address_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectRegularCall_address_uint256_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KexpectStaticCall_address_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KfreshAddress" "(" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KfreshAddress_")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KfreshBool" "(" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KfreshBool_")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KfreshBytes" "(" Int ":" "uint256" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KfreshBytes_uint256")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KfreshUInt" "(" Int ":" "uint8" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KfreshUInt_uint8")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KinfiniteGas" "(" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KinfiniteGas_")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KmockFunction" "(" Int ":" "address" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KmockFunction_address_address_bytes")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KsetGas" "(" Int ":" "uint256" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KsetGas_uint256")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KsymbolicStorage" "(" Int ":" "address" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheatsBase_S2KsymbolicStorage_address")]
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KallowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , ( #address ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KallowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , ( #address ( V0_ ) , ( #uint256 ( V1_ ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , ( #address ( V0_ ) , ( #uint256 ( V1_ ) , ( #bytes ( V2_ ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , ( #address ( V0_ ) , ( #uint256 ( V1_ ) , ( #bytes ( V2_ ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , ( #address ( V0_ ) , ( #bytes ( V1_ ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , ( #address ( V0_ ) , ( #bytes ( V1_ ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , ( #address ( V0_ ) , ( #uint256 ( V1_ ) , ( #bytes ( V2_ ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , ( #address ( V0_ ) , ( #bytes ( V1_ ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KfreshAddress ( ) => #abiCallData ( "freshAddress" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KfreshBool ( ) => #abiCallData ( "freshBool" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KfreshBytes ( V0_ : uint256 ) => #abiCallData ( "freshBytes" , ( #uint256 ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KfreshUInt ( V0_ : uint8 ) => #abiCallData ( "freshUInt" , ( #uint8 ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 8 , V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KinfiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KmockFunction ( V0_callee : address , V1_calledContract : address , V2_data : bytes ) => #abiCallData ( "mockFunction" , ( #address ( V0_callee ) , ( #address ( V1_calledContract ) , ( #bytes ( V2_data ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeAddress ( V1_calledContract )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KsetGas ( V0_ : uint256 ) => #abiCallData ( "setGas" , ( #uint256 ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KsymbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , ( #address ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )
      
    
    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )
      
    
    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )
      
    
    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )
      
    
    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )
      
    
    rule  ( selector ( "expectNoCall()" ) => 3861374088 )
      
    
    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )
      
    
    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )
      
    
    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )
      
    
    rule  ( selector ( "freshAddress()" ) => 2363359817 )
      
    
    rule  ( selector ( "freshBool()" ) => 2935720297 )
      
    
    rule  ( selector ( "freshBytes(uint256)" ) => 1389402351 )
      
    
    rule  ( selector ( "freshUInt(uint8)" ) => 625253732 )
      
    
    rule  ( selector ( "infiniteGas()" ) => 3986649939 )
      
    
    rule  ( selector ( "mockFunction(address,address,bytes)" ) => 2918731041 )
      
    
    rule  ( selector ( "setGas(uint256)" ) => 3713137314 )
      
    
    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract ::= "S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3" [symbol("contract_lib%forge-std%src%interfaces%IMulticall3")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract "." S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method [function, symbol("method_lib%forge-std%src%interfaces%IMulticall3")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2Kaggregate_address_bytes_address_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate3" "(" Int ":" "address" "," Int ":" "bool" "," Bytes ":" "bytes" "," Int ":" "address" "," Int ":" "bool" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2Kaggregate3_address_bool_bytes_address_bool_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate3Value" "(" Int ":" "address" "," Int ":" "bool" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "address" "," Int ":" "bool" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2Kaggregate3Value_address_bool_uint256_bytes_address_bool_uint256_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KblockAndAggregate" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KblockAndAggregate_address_bytes_address_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBasefee" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetBasefee_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBlockHash" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetBlockHash_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBlockNumber" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetBlockNumber_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetChainId" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetChainId_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockCoinbase" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockCoinbase_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockDifficulty" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockDifficulty_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockGasLimit" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockGasLimit_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockTimestamp" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetCurrentBlockTimestamp_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetEthBalance" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetEthBalance_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetLastBlockHash" "(" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KgetLastBlockHash_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KtryAggregate" "(" Int ":" "bool" "," Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KtryAggregate_bool_address_bytes_address_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KtryBlockAndAggregate" "(" Int ":" "bool" "," Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%interfaces%IMulticall3_S2KtryBlockAndAggregate_bool_address_bytes_address_bytes")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2Kaggregate ( V0_target_0 : address , V1_callData_0 : bytes , V0_target_1 : address , V1_callData_1 : bytes ) => #abiCallData ( "aggregate" , ( #array ( #tuple ( ( #address ( V0_target_0 ) , ( #bytes ( V1_callData_0 ) , .TypedArgs ) ) ) , 2 , ( #tuple ( ( #address ( V0_target_0 ) , ( #bytes ( V1_callData_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #address ( V0_target_1 ) , ( #bytes ( V1_callData_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_1 ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2Kaggregate3 ( V0_target_0 : address , V1_allowFailure_0 : bool , V2_callData_0 : bytes , V0_target_1 : address , V1_allowFailure_1 : bool , V2_callData_1 : bytes ) => #abiCallData ( "aggregate3" , ( #array ( #tuple ( ( #address ( V0_target_0 ) , ( #bool ( V1_allowFailure_0 ) , ( #bytes ( V2_callData_0 ) , .TypedArgs ) ) ) ) , 2 , ( #tuple ( ( #address ( V0_target_0 ) , ( #bool ( V1_allowFailure_0 ) , ( #bytes ( V2_callData_0 ) , .TypedArgs ) ) ) ) , ( #tuple ( ( #address ( V0_target_1 ) , ( #bool ( V1_allowFailure_1 ) , ( #bytes ( V2_callData_1 ) , .TypedArgs ) ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeBool ( V1_allowFailure_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeBool ( V1_allowFailure_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_1 ) )
               ))))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2Kaggregate3Value ( V0_target_0 : address , V1_allowFailure_0 : bool , V2_value_0 : uint256 , V3_callData_0 : bytes , V0_target_1 : address , V1_allowFailure_1 : bool , V2_value_1 : uint256 , V3_callData_1 : bytes ) => #abiCallData ( "aggregate3Value" , ( #array ( #tuple ( ( #address ( V0_target_0 ) , ( #bool ( V1_allowFailure_0 ) , ( #uint256 ( V2_value_0 ) , ( #bytes ( V3_callData_0 ) , .TypedArgs ) ) ) ) ) , 2 , ( #tuple ( ( #address ( V0_target_0 ) , ( #bool ( V1_allowFailure_0 ) , ( #uint256 ( V2_value_0 ) , ( #bytes ( V3_callData_0 ) , .TypedArgs ) ) ) ) ) , ( #tuple ( ( #address ( V0_target_1 ) , ( #bool ( V1_allowFailure_1 ) , ( #uint256 ( V2_value_1 ) , ( #bytes ( V3_callData_1 ) , .TypedArgs ) ) ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeBool ( V1_allowFailure_0 )
       andBool ( #rangeUInt ( 256 , V2_value_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeBool ( V1_allowFailure_1 )
       andBool ( #rangeUInt ( 256 , V2_value_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_callData_1 ) )
               ))))))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KblockAndAggregate ( V0_target_0 : address , V1_callData_0 : bytes , V0_target_1 : address , V1_callData_1 : bytes ) => #abiCallData ( "blockAndAggregate" , ( #array ( #tuple ( ( #address ( V0_target_0 ) , ( #bytes ( V1_callData_0 ) , .TypedArgs ) ) ) , 2 , ( #tuple ( ( #address ( V0_target_0 ) , ( #bytes ( V1_callData_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #address ( V0_target_1 ) , ( #bytes ( V1_callData_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_0 ) )
       andBool ( #rangeAddress ( V0_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_callData_1 ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBasefee ( ) => #abiCallData ( "getBasefee" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBlockHash ( V0_blockNumber : uint256 ) => #abiCallData ( "getBlockHash" , ( #uint256 ( V0_blockNumber ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBlockNumber ( ) => #abiCallData ( "getBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetChainId ( ) => #abiCallData ( "getChainId" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockCoinbase ( ) => #abiCallData ( "getCurrentBlockCoinbase" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockDifficulty ( ) => #abiCallData ( "getCurrentBlockDifficulty" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockGasLimit ( ) => #abiCallData ( "getCurrentBlockGasLimit" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockTimestamp ( ) => #abiCallData ( "getCurrentBlockTimestamp" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetEthBalance ( V0_addr : address ) => #abiCallData ( "getEthBalance" , ( #address ( V0_addr ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetLastBlockHash ( ) => #abiCallData ( "getLastBlockHash" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KtryAggregate ( V0_requireSuccess : bool , V1_target_0 : address , V2_callData_0 : bytes , V1_target_1 : address , V2_callData_1 : bytes ) => #abiCallData ( "tryAggregate" , ( #bool ( V0_requireSuccess ) , ( #array ( #tuple ( ( #address ( V1_target_0 ) , ( #bytes ( V2_callData_0 ) , .TypedArgs ) ) ) , 2 , ( #tuple ( ( #address ( V1_target_0 ) , ( #bytes ( V2_callData_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #address ( V1_target_1 ) , ( #bytes ( V2_callData_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) )
       ensures ( #rangeBool ( V0_requireSuccess )
       andBool ( #rangeAddress ( V1_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_0 ) )
       andBool ( #rangeAddress ( V1_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_1 ) )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KtryBlockAndAggregate ( V0_requireSuccess : bool , V1_target_0 : address , V2_callData_0 : bytes , V1_target_1 : address , V2_callData_1 : bytes ) => #abiCallData ( "tryBlockAndAggregate" , ( #bool ( V0_requireSuccess ) , ( #array ( #tuple ( ( #address ( V1_target_0 ) , ( #bytes ( V2_callData_0 ) , .TypedArgs ) ) ) , 2 , ( #tuple ( ( #address ( V1_target_0 ) , ( #bytes ( V2_callData_0 ) , .TypedArgs ) ) ) , ( #tuple ( ( #address ( V1_target_1 ) , ( #bytes ( V2_callData_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) )
       ensures ( #rangeBool ( V0_requireSuccess )
       andBool ( #rangeAddress ( V1_target_0 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_0 ) )
       andBool ( #rangeAddress ( V1_target_1 )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_callData_1 ) )
               )))))
      
    
    rule  ( selector ( "aggregate((address,bytes)[])" ) => 623753794 )
      
    
    rule  ( selector ( "aggregate3((address,bool,bytes)[])" ) => 2192398027 )
      
    
    rule  ( selector ( "aggregate3Value((address,bool,uint256,bytes)[])" ) => 390982257 )
      
    
    rule  ( selector ( "blockAndAggregate((address,bytes)[])" ) => 3272048553 )
      
    
    rule  ( selector ( "getBasefee()" ) => 1046783638 )
      
    
    rule  ( selector ( "getBlockHash(uint256)" ) => 4001541214 )
      
    
    rule  ( selector ( "getBlockNumber()" ) => 1120645468 )
      
    
    rule  ( selector ( "getChainId()" ) => 872998000 )
      
    
    rule  ( selector ( "getCurrentBlockCoinbase()" ) => 2830128974 )
      
    
    rule  ( selector ( "getCurrentBlockDifficulty()" ) => 1916951965 )
      
    
    rule  ( selector ( "getCurrentBlockGasLimit()" ) => 2262111976 )
      
    
    rule  ( selector ( "getCurrentBlockTimestamp()" ) => 254331261 )
      
    
    rule  ( selector ( "getEthBalance(address)" ) => 1294139852 )
      
    
    rule  ( selector ( "getLastBlockHash()" ) => 669543790 )
      
    
    rule  ( selector ( "tryAggregate(bool,(address,bytes)[])" ) => 3169029079 )
      
    
    rule  ( selector ( "tryBlockAndAggregate(bool,(address,bytes)[])" ) => 966083305 )
      

endmodule

module S2KtestZModImmutableVarsContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModImmutableVarsContractContract
    
    syntax S2KtestZModImmutableVarsContractContract ::= "S2KtestZModImmutableVarsContract" [symbol("contract_test%ImmutableVarsContract")]
    
    syntax Bytes ::= S2KtestZModImmutableVarsContractContract "." S2KtestZModImmutableVarsContractMethod [function, symbol("method_test%ImmutableVarsContract")]
    
    syntax S2KtestZModImmutableVarsContractMethod ::= "S2Ky" "(" ")" [symbol("method_test%ImmutableVarsContract_S2Ky_")]
    
    rule  ( S2KtestZModImmutableVarsContract . S2Ky ( ) => #abiCallData ( "y" , .TypedArgs ) )
      
    
    rule  ( selector ( "y()" ) => 2775449162 )
      

endmodule

module S2KtestZModImmutableVarsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModImmutableVarsTestContract
    
    syntax S2KtestZModImmutableVarsTestContract ::= "S2KtestZModImmutableVarsTest" [symbol("contract_test%ImmutableVarsTest")]
    
    syntax Bytes ::= S2KtestZModImmutableVarsTestContract "." S2KtestZModImmutableVarsTestMethod [function, symbol("method_test%ImmutableVarsTest")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ImmutableVarsTest_S2Kfailed_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ImmutableVarsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModImmutableVarsTestMethod ::= "S2KtestZUndrunZUnddeployment" "(" Int ":" "uint256" ")" [symbol("method_test%ImmutableVarsTest_S2KtestZUndrunZUnddeployment_uint256")]
    
    rule  ( S2KtestZModImmutableVarsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModImmutableVarsTest . S2KtestZUndrunZUnddeployment ( V0_x : uint256 ) => #abiCallData ( "test_run_deployment" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_run_deployment(uint256)" ) => 747070844 )
      

endmodule

module S2KtestZModInitCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModInitCodeTestContract
    
    syntax S2KtestZModInitCodeTestContract ::= "S2KtestZModInitCodeTest" [symbol("contract_test%InitCodeTest")]
    
    syntax Bytes ::= S2KtestZModInitCodeTestContract "." S2KtestZModInitCodeTestMethod [function, symbol("method_test%InitCodeTest")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%InitCodeTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%InitCodeTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%InitCodeTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%InitCodeTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%InitCodeTest_S2Kfailed_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%InitCodeTest_S2KsetUp_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%InitCodeTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%InitCodeTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%InitCodeTest_S2KtargetContracts_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%InitCodeTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%InitCodeTest_S2KtargetSenders_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtestFailZUndinit" "(" ")" [symbol("method_test%InitCodeTest_S2KtestFailZUndinit_")]
    
    syntax S2KtestZModInitCodeTestMethod ::= "S2KtestZUndinit" "(" ")" [symbol("method_test%InitCodeTest_S2KtestZUndinit_")]
    
    rule  ( S2KtestZModInitCodeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtestFailZUndinit ( ) => #abiCallData ( "testFail_init" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeTest . S2KtestZUndinit ( ) => #abiCallData ( "test_init" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_init()" ) => 3020150758 )
      
    
    rule  ( selector ( "test_init()" ) => 2521807213 )
      

endmodule

module S2KtestZModInitCodeBranchTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModInitCodeBranchTestContract
    
    syntax S2KtestZModInitCodeBranchTestContract ::= "S2KtestZModInitCodeBranchTest" [symbol("contract_test%InitCodeBranchTest")]
    
    syntax Bytes ::= S2KtestZModInitCodeBranchTestContract "." S2KtestZModInitCodeBranchTestMethod [function, symbol("method_test%InitCodeBranchTest")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%InitCodeBranchTest_S2Kfailed_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%InitCodeBranchTest_S2Kkevm_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KtargetContracts_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KtargetSenders_")]
    
    syntax S2KtestZModInitCodeBranchTestMethod ::= "S2KtestZUndbranch" "(" ")" [symbol("method_test%InitCodeBranchTest_S2KtestZUndbranch_")]
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInitCodeBranchTest . S2KtestZUndbranch ( ) => #abiCallData ( "test_branch" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_branch()" ) => 295163020 )
      

endmodule

module S2KtestZModERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModERC20Contract
    
    syntax S2KtestZModERC20Contract ::= "S2KtestZModERC20" [symbol("contract_test%ERC20")]
    
    syntax Bytes ::= S2KtestZModERC20Contract "." S2KtestZModERC20Method [function, symbol("method_test%ERC20")]
    
    syntax S2KtestZModERC20Method ::= "S2KtotalSupply" "(" ")" [symbol("method_test%ERC20_S2KtotalSupply_")]
    
    rule  ( S2KtestZModERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      

endmodule

module S2KtestZModIERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModIERC20Contract
    
    syntax S2KtestZModIERC20Contract ::= "S2KtestZModIERC20" [symbol("contract_test%IERC20")]
    
    syntax Bytes ::= S2KtestZModIERC20Contract "." S2KtestZModIERC20Method [function, symbol("method_test%IERC20")]
    
    syntax S2KtestZModIERC20Method ::= "S2KtotalSupply" "(" ")" [symbol("method_test%IERC20_S2KtotalSupply_")]
    
    rule  ( S2KtestZModIERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      

endmodule

module S2KtestZModInterfaceContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModInterfaceContractContract
    
    syntax S2KtestZModInterfaceContractContract ::= "S2KtestZModInterfaceContract" [symbol("contract_test%InterfaceContract")]
    
    syntax Bytes ::= S2KtestZModInterfaceContractContract "." S2KtestZModInterfaceContractMethod [function, symbol("method_test%InterfaceContract")]
    
    syntax S2KtestZModInterfaceContractMethod ::= "S2KcallToken" "(" ")" [symbol("method_test%InterfaceContract_S2KcallToken_")]
    
    rule  ( S2KtestZModInterfaceContract . S2KcallToken ( ) => #abiCallData ( "callToken" , .TypedArgs ) )
      
    
    rule  ( selector ( "callToken()" ) => 3734181474 )
      

endmodule

module S2KtestZModInterfaceTagTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModInterfaceTagTestContract
    
    syntax S2KtestZModInterfaceTagTestContract ::= "S2KtestZModInterfaceTagTest" [symbol("contract_test%InterfaceTagTest")]
    
    syntax Bytes ::= S2KtestZModInterfaceTagTestContract "." S2KtestZModInterfaceTagTestMethod [function, symbol("method_test%InterfaceTagTest")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%InterfaceTagTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%InterfaceTagTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%InterfaceTagTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%InterfaceTagTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%InterfaceTagTest_S2Kfailed_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%InterfaceTagTest_S2KsetUp_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%InterfaceTagTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%InterfaceTagTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%InterfaceTagTest_S2KtargetContracts_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%InterfaceTagTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%InterfaceTagTest_S2KtargetSenders_")]
    
    syntax S2KtestZModInterfaceTagTestMethod ::= "S2KtestInterface" "(" ")" [symbol("method_test%InterfaceTagTest_S2KtestInterface_")]
    
    rule  ( S2KtestZModInterfaceTagTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModInterfaceTagTest . S2KtestInterface ( ) => #abiCallData ( "testInterface" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testInterface()" ) => 98428163 )
      

endmodule

module S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsContract
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsContract ::= "S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats" [symbol("contract_lib%kontrol-cheatcodes%src%KontrolCheats")]
    
    syntax Bytes ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsContract "." S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsMethod [function, symbol("method_lib%kontrol-cheatcodes%src%KontrolCheats")]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsMethod ::= "S2Kkevm" "(" ")" [symbol("method_lib%kontrol-cheatcodes%src%KontrolCheats_S2Kkevm_")]
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      

endmodule

module S2KtestZModLabelTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModLabelTestContract
    
    syntax S2KtestZModLabelTestContract ::= "S2KtestZModLabelTest" [symbol("contract_test%LabelTest")]
    
    syntax Bytes ::= S2KtestZModLabelTestContract "." S2KtestZModLabelTestMethod [function, symbol("method_test%LabelTest")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%LabelTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%LabelTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%LabelTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%LabelTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%LabelTest_S2Kfailed_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%LabelTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%LabelTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%LabelTest_S2KtargetContracts_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%LabelTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%LabelTest_S2KtargetSenders_")]
    
    syntax S2KtestZModLabelTestMethod ::= "S2KtestLabel" "(" ")" [symbol("method_test%LabelTest_S2KtestLabel_")]
    
    rule  ( S2KtestZModLabelTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLabelTest . S2KtestLabel ( ) => #abiCallData ( "testLabel" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testLabel()" ) => 799101117 )
      

endmodule

module S2KsrcZModLoadStateDiff-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModLoadStateDiffContract
    
    syntax S2KsrcZModLoadStateDiffContract ::= "S2KsrcZModLoadStateDiff" [symbol("contract_src%LoadStateDiff")]
    
    syntax Bytes ::= S2KsrcZModLoadStateDiffContract "." S2KsrcZModLoadStateDiffMethod [function, symbol("method_src%LoadStateDiff")]
    
    syntax S2KsrcZModLoadStateDiffMethod ::= "S2KZUndnotExternalAddress" "(" Int ":" "address" ")" [symbol("method_src%LoadStateDiff_S2KZUndnotExternalAddress_address")]
    
    syntax S2KsrcZModLoadStateDiffMethod ::= "S2KrecreateState" "(" ")" [symbol("method_src%LoadStateDiff_S2KrecreateState_")]
    
    rule  ( S2KsrcZModLoadStateDiff . S2KZUndnotExternalAddress ( V0_user : address ) => #abiCallData ( "_notExternalAddress" , ( #address ( V0_user ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KsrcZModLoadStateDiff . S2KrecreateState ( ) => #abiCallData ( "recreateState" , .TypedArgs ) )
      
    
    rule  ( selector ( "_notExternalAddress(address)" ) => 2801087029 )
      
    
    rule  ( selector ( "recreateState()" ) => 1765761107 )
      

endmodule

module S2KsrcZModLoadStateDiffCode-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModLoadStateDiffCodeContract
    
    syntax S2KsrcZModLoadStateDiffCodeContract ::= "S2KsrcZModLoadStateDiffCode" [symbol("contract_src%LoadStateDiffCode")]

endmodule

module S2KsrcZModLoadStateDump-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModLoadStateDumpContract
    
    syntax S2KsrcZModLoadStateDumpContract ::= "S2KsrcZModLoadStateDump" [symbol("contract_src%LoadStateDump")]
    
    syntax Bytes ::= S2KsrcZModLoadStateDumpContract "." S2KsrcZModLoadStateDumpMethod [function, symbol("method_src%LoadStateDump")]
    
    syntax S2KsrcZModLoadStateDumpMethod ::= "S2KZUndnotExternalAddress" "(" Int ":" "address" ")" [symbol("method_src%LoadStateDump_S2KZUndnotExternalAddress_address")]
    
    syntax S2KsrcZModLoadStateDumpMethod ::= "S2KrecreateState" "(" ")" [symbol("method_src%LoadStateDump_S2KrecreateState_")]
    
    rule  ( S2KsrcZModLoadStateDump . S2KZUndnotExternalAddress ( V0_user : address ) => #abiCallData ( "_notExternalAddress" , ( #address ( V0_user ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KsrcZModLoadStateDump . S2KrecreateState ( ) => #abiCallData ( "recreateState" , .TypedArgs ) )
      
    
    rule  ( selector ( "_notExternalAddress(address)" ) => 2801087029 )
      
    
    rule  ( selector ( "recreateState()" ) => 1765761107 )
      

endmodule

module S2KsrcZModLoadStateDumpCode-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModLoadStateDumpCodeContract
    
    syntax S2KsrcZModLoadStateDumpCodeContract ::= "S2KsrcZModLoadStateDumpCode" [symbol("contract_src%LoadStateDumpCode")]

endmodule

module S2KtestZModLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModLoopsTestContract
    
    syntax S2KtestZModLoopsTestContract ::= "S2KtestZModLoopsTest" [symbol("contract_test%LoopsTest")]
    
    syntax Bytes ::= S2KtestZModLoopsTestContract "." S2KtestZModLoopsTestMethod [function, symbol("method_test%LoopsTest")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%LoopsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%LoopsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%LoopsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%LoopsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%LoopsTest_S2Kfailed_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%LoopsTest_S2Kkevm_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KsumZUndN" "(" Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KsumZUndN_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%LoopsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%LoopsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%LoopsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%LoopsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%LoopsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsNotPrime" "(" Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestIsNotPrime_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestIsPrime_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsPrimeBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestIsPrimeBroken_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestIsPrimeOpt" "(" Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestIsPrimeOpt_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestMax" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestMax_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestMaxBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestMaxBroken_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestNthPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestNthPrime_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSort" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestSort_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSortBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestSortBroken_uint256_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSqrt" "(" Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestSqrt_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSumToN" "(" Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestSumToN_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestSumToNBroken" "(" Int ":" "uint256" ")" [symbol("method_test%LoopsTest_S2KtestSumToNBroken_uint256")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestZUndsumZUnd10" "(" ")" [symbol("method_test%LoopsTest_S2KtestZUndsumZUnd10_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestZUndsumZUnd100" "(" ")" [symbol("method_test%LoopsTest_S2KtestZUndsumZUnd100_")]
    
    syntax S2KtestZModLoopsTestMethod ::= "S2KtestZUndsumZUnd1000" "(" ")" [symbol("method_test%LoopsTest_S2KtestZUndsumZUnd1000_")]
    
    rule  ( S2KtestZModLoopsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KsumZUndN ( V0_n : uint256 ) => #abiCallData ( "sum_N" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestIsNotPrime ( V0_n : uint256 ) => #abiCallData ( "testIsNotPrime" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestIsPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrime" , ( #uint256 ( V0_n ) , ( #uint256 ( V1_i ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestIsPrimeBroken ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrimeBroken" , ( #uint256 ( V0_n ) , ( #uint256 ( V1_i ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestIsPrimeOpt ( V0_n : uint256 ) => #abiCallData ( "testIsPrimeOpt" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestMax ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testMax" , ( #array ( #uint256 ( V0_numbers_0 ) , 2 , ( #uint256 ( V0_numbers_0 ) , ( #uint256 ( V0_numbers_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestMaxBroken ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testMaxBroken" , ( #array ( #uint256 ( V0_numbers_0 ) , 2 , ( #uint256 ( V0_numbers_0 ) , ( #uint256 ( V0_numbers_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestNthPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testNthPrime" , ( #uint256 ( V0_n ) , ( #uint256 ( V1_i ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestSort ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testSort" , ( #array ( #uint256 ( V0_numbers_0 ) , 2 , ( #uint256 ( V0_numbers_0 ) , ( #uint256 ( V0_numbers_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestSortBroken ( V0_numbers_0 : uint256 , V0_numbers_1 : uint256 ) => #abiCallData ( "testSortBroken" , ( #array ( #uint256 ( V0_numbers_0 ) , 2 , ( #uint256 ( V0_numbers_0 ) , ( #uint256 ( V0_numbers_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 256 , V0_numbers_0 )
       andBool ( #rangeUInt ( 256 , V0_numbers_1 )
               ))
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestSqrt ( V0_x : uint256 ) => #abiCallData ( "testSqrt" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestSumToN ( V0_n : uint256 ) => #abiCallData ( "testSumToN" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestSumToNBroken ( V0_n : uint256 ) => #abiCallData ( "testSumToNBroken" , ( #uint256 ( V0_n ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestZUndsumZUnd10 ( ) => #abiCallData ( "test_sum_10" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestZUndsumZUnd100 ( ) => #abiCallData ( "test_sum_100" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModLoopsTest . S2KtestZUndsumZUnd1000 ( ) => #abiCallData ( "test_sum_1000" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "sum_N(uint256)" ) => 2123244496 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testIsNotPrime(uint256)" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime(uint256,uint256)" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken(uint256,uint256)" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt(uint256)" ) => 404719852 )
      
    
    rule  ( selector ( "testMax(uint256[])" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken(uint256[])" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime(uint256,uint256)" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort(uint256[])" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken(uint256[])" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt(uint256)" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN(uint256)" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken(uint256)" ) => 1318374999 )
      
    
    rule  ( selector ( "test_sum_10()" ) => 1087009050 )
      
    
    rule  ( selector ( "test_sum_100()" ) => 1519953344 )
      
    
    rule  ( selector ( "test_sum_1000()" ) => 222767225 )
      

endmodule

module S2KtestZModMergeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMergeTestContract
    
    syntax S2KtestZModMergeTestContract ::= "S2KtestZModMergeTest" [symbol("contract_test%MergeTest")]
    
    syntax Bytes ::= S2KtestZModMergeTestContract "." S2KtestZModMergeTestMethod [function, symbol("method_test%MergeTest")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%MergeTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%MergeTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%MergeTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%MergeTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%MergeTest_S2Kfailed_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%MergeTest_S2Kkevm_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%MergeTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%MergeTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%MergeTest_S2KtargetContracts_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%MergeTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%MergeTest_S2KtargetSenders_")]
    
    syntax S2KtestZModMergeTestMethod ::= "S2KtestZUndbranchZUndmerge" "(" Int ":" "uint256" ")" [symbol("method_test%MergeTest_S2KtestZUndbranchZUndmerge_uint256")]
    
    rule  ( S2KtestZModMergeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMergeTest . S2KtestZUndbranchZUndmerge ( V0_x : uint256 ) => #abiCallData ( "test_branch_merge" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_branch_merge(uint256)" ) => 1000659212 )
      

endmodule

module S2KtestZModMethodDisambiguateTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMethodDisambiguateTestContract
    
    syntax S2KtestZModMethodDisambiguateTestContract ::= "S2KtestZModMethodDisambiguateTest" [symbol("contract_test%MethodDisambiguateTest")]
    
    syntax Bytes ::= S2KtestZModMethodDisambiguateTestContract "." S2KtestZModMethodDisambiguateTestMethod [function, symbol("method_test%MethodDisambiguateTest")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2Kfailed_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint256" ")" [symbol("method_test%MethodDisambiguateTest_S2KgetNumber_uint256")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KgetNumber" "(" Int ":" "uint32" ")" [symbol("method_test%MethodDisambiguateTest_S2KgetNumber_uint32")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KtargetContracts_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KtargetSenders_")]
    
    syntax S2KtestZModMethodDisambiguateTestMethod ::= "S2KtestZUndmethodZUndcall" "(" ")" [symbol("method_test%MethodDisambiguateTest_S2KtestZUndmethodZUndcall_")]
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KgetNumber ( V0_x : uint256 ) => #abiCallData ( "getNumber" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KgetNumber ( V0_x : uint32 ) => #abiCallData ( "getNumber" , ( #uint32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMethodDisambiguateTest . S2KtestZUndmethodZUndcall ( ) => #abiCallData ( "test_method_call" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "getNumber(uint256)" ) => 4233508440 )
      
    
    rule  ( selector ( "getNumber(uint32)" ) => 144150998 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_method_call()" ) => 1803637680 )
      

endmodule

module S2KsrcZModMock-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModMockContract
    
    syntax S2KsrcZModMockContract ::= "S2KsrcZModMock" [symbol("contract_src%Mock")]
    
    syntax Bytes ::= S2KsrcZModMockContract "." S2KsrcZModMockMethod [function, symbol("method_src%Mock")]
    
    syntax S2KsrcZModMockMethod ::= "S2Kadd" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%Mock_S2Kadd_uint256_uint256")]
    
    syntax S2KsrcZModMockMethod ::= "S2KgetRevert" "(" ")" [symbol("method_src%Mock_S2KgetRevert_")]
    
    syntax S2KsrcZModMockMethod ::= "S2KnoReturnValue" "(" ")" [symbol("method_src%Mock_S2KnoReturnValue_")]
    
    syntax S2KsrcZModMockMethod ::= "S2KnumberA" "(" ")" [symbol("method_src%Mock_S2KnumberA_")]
    
    syntax S2KsrcZModMockMethod ::= "S2KnumberB" "(" ")" [symbol("method_src%Mock_S2KnumberB_")]
    
    syntax S2KsrcZModMockMethod ::= "S2Kpay" "(" Int ":" "uint256" ")" [symbol("method_src%Mock_S2Kpay_uint256")]
    
    rule  ( S2KsrcZModMock . S2Kadd ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "add" , ( #uint256 ( V0_a ) , ( #uint256 ( V1_b ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KsrcZModMock . S2KgetRevert ( ) => #abiCallData ( "getRevert" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMock . S2KnoReturnValue ( ) => #abiCallData ( "noReturnValue" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMock . S2KnumberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMock . S2KnumberB ( ) => #abiCallData ( "numberB" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMock . S2Kpay ( V0_a : uint256 ) => #abiCallData ( "pay" , ( #uint256 ( V0_a ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_a )
      
    
    rule  ( selector ( "add(uint256,uint256)" ) => 1997931255 )
      
    
    rule  ( selector ( "getRevert()" ) => 3477000112 )
      
    
    rule  ( selector ( "noReturnValue()" ) => 3290253192 )
      
    
    rule  ( selector ( "numberA()" ) => 2571869527 )
      
    
    rule  ( selector ( "numberB()" ) => 1070057112 )
      
    
    rule  ( selector ( "pay(uint256)" ) => 3264272017 )
      

endmodule

module S2KsrcZModNestedMock-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModNestedMockContract
    
    syntax S2KsrcZModNestedMockContract ::= "S2KsrcZModNestedMock" [symbol("contract_src%NestedMock")]
    
    syntax Bytes ::= S2KsrcZModNestedMockContract "." S2KsrcZModNestedMockMethod [function, symbol("method_src%NestedMock")]
    
    syntax S2KsrcZModNestedMockMethod ::= "S2Ksum" "(" ")" [symbol("method_src%NestedMock_S2Ksum_")]
    
    rule  ( S2KsrcZModNestedMock . S2Ksum ( ) => #abiCallData ( "sum" , .TypedArgs ) )
      
    
    rule  ( selector ( "sum()" ) => 2234668492 )
      

endmodule

module S2KtestZModMockCallRevertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMockCallRevertTestContract
    
    syntax S2KtestZModMockCallRevertTestContract ::= "S2KtestZModMockCallRevertTest" [symbol("contract_test%MockCallRevertTest")]
    
    syntax Bytes ::= S2KtestZModMockCallRevertTestContract "." S2KtestZModMockCallRevertTestMethod [function, symbol("method_test%MockCallRevertTest")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%MockCallRevertTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%MockCallRevertTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%MockCallRevertTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%MockCallRevertTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%MockCallRevertTest_S2Kfailed_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtargetContracts_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtargetSenders_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestClearMockRevertedCalls" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestClearMockRevertedCalls_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallEmptyAccount" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCallEmptyAccount_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallResetsMockCallRevert" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCallResetsMockCallRevert_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertPartialMatch" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCallRevertPartialMatch_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertResetsMockCall" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCallRevertResetsMockCall_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertWithCall" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCallRevertWithCall_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCallRevertWithValue" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCallRevertWithValue_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockCalldataRevert" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockCalldataRevert_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockGettersRevert" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockGettersRevert_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockNestedRevert" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockNestedRevert_")]
    
    syntax S2KtestZModMockCallRevertTestMethod ::= "S2KtestMockRevertWithCustomError" "(" ")" [symbol("method_test%MockCallRevertTest_S2KtestMockRevertWithCustomError_")]
    
    rule  ( S2KtestZModMockCallRevertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestClearMockRevertedCalls ( ) => #abiCallData ( "testClearMockRevertedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallEmptyAccount ( ) => #abiCallData ( "testMockCallEmptyAccount" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallResetsMockCallRevert ( ) => #abiCallData ( "testMockCallResetsMockCallRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertPartialMatch ( ) => #abiCallData ( "testMockCallRevertPartialMatch" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertResetsMockCall ( ) => #abiCallData ( "testMockCallRevertResetsMockCall" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertWithCall ( ) => #abiCallData ( "testMockCallRevertWithCall" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCallRevertWithValue ( ) => #abiCallData ( "testMockCallRevertWithValue" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockCalldataRevert ( ) => #abiCallData ( "testMockCalldataRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockGettersRevert ( ) => #abiCallData ( "testMockGettersRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockNestedRevert ( ) => #abiCallData ( "testMockNestedRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallRevertTest . S2KtestMockRevertWithCustomError ( ) => #abiCallData ( "testMockRevertWithCustomError" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testClearMockRevertedCalls()" ) => 1795836592 )
      
    
    rule  ( selector ( "testMockCallEmptyAccount()" ) => 18109830 )
      
    
    rule  ( selector ( "testMockCallResetsMockCallRevert()" ) => 871731219 )
      
    
    rule  ( selector ( "testMockCallRevertPartialMatch()" ) => 516865658 )
      
    
    rule  ( selector ( "testMockCallRevertResetsMockCall()" ) => 1513782807 )
      
    
    rule  ( selector ( "testMockCallRevertWithCall()" ) => 3265520108 )
      
    
    rule  ( selector ( "testMockCallRevertWithValue()" ) => 659159631 )
      
    
    rule  ( selector ( "testMockCalldataRevert()" ) => 1708603604 )
      
    
    rule  ( selector ( "testMockGettersRevert()" ) => 3999550127 )
      
    
    rule  ( selector ( "testMockNestedRevert()" ) => 2395839225 )
      
    
    rule  ( selector ( "testMockRevertWithCustomError()" ) => 1012733980 )
      

endmodule

module S2KtestZModMockCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMockCallTestContract
    
    syntax S2KtestZModMockCallTestContract ::= "S2KtestZModMockCallTest" [symbol("contract_test%MockCallTest")]
    
    syntax Bytes ::= S2KtestZModMockCallTestContract "." S2KtestZModMockCallTestMethod [function, symbol("method_test%MockCallTest")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%MockCallTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%MockCallTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%MockCallTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%MockCallTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%MockCallTest_S2Kfailed_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%MockCallTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%MockCallTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%MockCallTest_S2KtargetContracts_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%MockCallTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%MockCallTest_S2KtargetSenders_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtestMockCallValue" "(" ")" [symbol("method_test%MockCallTest_S2KtestMockCallValue_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtestMockCalls" "(" ")" [symbol("method_test%MockCallTest_S2KtestMockCalls_")]
    
    syntax S2KtestZModMockCallTestMethod ::= "S2KtestSelectorMockCall" "(" ")" [symbol("method_test%MockCallTest_S2KtestSelectorMockCall_")]
    
    rule  ( S2KtestZModMockCallTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtestMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtestMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTest . S2KtestSelectorMockCall ( ) => #abiCallData ( "testSelectorMockCall" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testMockCallValue()" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls()" ) => 957910350 )
      
    
    rule  ( selector ( "testSelectorMockCall()" ) => 1385984437 )
      

endmodule

module S2KtestZModMockCallTestFoundry-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMockCallTestFoundryContract
    
    syntax S2KtestZModMockCallTestFoundryContract ::= "S2KtestZModMockCallTestFoundry" [symbol("contract_test%MockCallTestFoundry")]
    
    syntax Bytes ::= S2KtestZModMockCallTestFoundryContract "." S2KtestZModMockCallTestFoundryMethod [function, symbol("method_test%MockCallTestFoundry")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KISZUndTEST_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KexcludeContracts_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KexcludeSenders_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%MockCallTestFoundry_S2Kfailed_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtargetArtifacts_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtargetContracts_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtargetSelectors_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtargetSenders_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestClearMockedCalls" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestClearMockedCalls_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallEmptyAccount" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockCallEmptyAccount_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallMultiplePartialMatch" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockCallMultiplePartialMatch_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallWithValue" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockCallWithValue_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCallWithValueCalldataPrecedence" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockCallWithValueCalldataPrecedence_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockCalldata" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockCalldata_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockGetters" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockGetters_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockNested" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockNested_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestMockSelector" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestMockSelector_")]
    
    syntax S2KtestZModMockCallTestFoundryMethod ::= "S2KtestRevertMock" "(" ")" [symbol("method_test%MockCallTestFoundry_S2KtestRevertMock_")]
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestClearMockedCalls ( ) => #abiCallData ( "testClearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallEmptyAccount ( ) => #abiCallData ( "testMockCallEmptyAccount" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallMultiplePartialMatch ( ) => #abiCallData ( "testMockCallMultiplePartialMatch" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallWithValue ( ) => #abiCallData ( "testMockCallWithValue" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCallWithValueCalldataPrecedence ( ) => #abiCallData ( "testMockCallWithValueCalldataPrecedence" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockCalldata ( ) => #abiCallData ( "testMockCalldata" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockGetters ( ) => #abiCallData ( "testMockGetters" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockNested ( ) => #abiCallData ( "testMockNested" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestMockSelector ( ) => #abiCallData ( "testMockSelector" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockCallTestFoundry . S2KtestRevertMock ( ) => #abiCallData ( "testRevertMock" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testClearMockedCalls()" ) => 3785120424 )
      
    
    rule  ( selector ( "testMockCallEmptyAccount()" ) => 18109830 )
      
    
    rule  ( selector ( "testMockCallMultiplePartialMatch()" ) => 4122307110 )
      
    
    rule  ( selector ( "testMockCallWithValue()" ) => 1648180435 )
      
    
    rule  ( selector ( "testMockCallWithValueCalldataPrecedence()" ) => 4109519995 )
      
    
    rule  ( selector ( "testMockCalldata()" ) => 1414668956 )
      
    
    rule  ( selector ( "testMockGetters()" ) => 3597427088 )
      
    
    rule  ( selector ( "testMockNested()" ) => 404574674 )
      
    
    rule  ( selector ( "testMockSelector()" ) => 105532370 )
      
    
    rule  ( selector ( "testRevertMock()" ) => 3765809689 )
      

endmodule

module S2KtestZModMockFunctionContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMockFunctionContractContract
    
    syntax S2KtestZModMockFunctionContractContract ::= "S2KtestZModMockFunctionContract" [symbol("contract_test%MockFunctionContract")]
    
    syntax Bytes ::= S2KtestZModMockFunctionContractContract "." S2KtestZModMockFunctionContractMethod [function, symbol("method_test%MockFunctionContract")]
    
    syntax S2KtestZModMockFunctionContractMethod ::= "S2Ka" "(" ")" [symbol("method_test%MockFunctionContract_S2Ka_")]
    
    syntax S2KtestZModMockFunctionContractMethod ::= "S2KmockedZUndargsZUndfunction" "(" Int ":" "uint256" ")" [symbol("method_test%MockFunctionContract_S2KmockedZUndargsZUndfunction_uint256")]
    
    syntax S2KtestZModMockFunctionContractMethod ::= "S2KmockedZUndfunction" "(" ")" [symbol("method_test%MockFunctionContract_S2KmockedZUndfunction_")]
    
    rule  ( S2KtestZModMockFunctionContract . S2Ka ( ) => #abiCallData ( "a" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionContract . S2KmockedZUndargsZUndfunction ( V0_x : uint256 ) => #abiCallData ( "mocked_args_function" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModMockFunctionContract . S2KmockedZUndfunction ( ) => #abiCallData ( "mocked_function" , .TypedArgs ) )
      
    
    rule  ( selector ( "a()" ) => 230582047 )
      
    
    rule  ( selector ( "mocked_args_function(uint256)" ) => 3922237240 )
      
    
    rule  ( selector ( "mocked_function()" ) => 2039681555 )
      

endmodule

module S2KtestZModMockFunctionTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMockFunctionTestContract
    
    syntax S2KtestZModMockFunctionTestContract ::= "S2KtestZModMockFunctionTest" [symbol("contract_test%MockFunctionTest")]
    
    syntax Bytes ::= S2KtestZModMockFunctionTestContract "." S2KtestZModMockFunctionTestMethod [function, symbol("method_test%MockFunctionTest")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%MockFunctionTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%MockFunctionTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%MockFunctionTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%MockFunctionTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%MockFunctionTest_S2Kfailed_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%MockFunctionTest_S2Kkevm_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%MockFunctionTest_S2KsetUp_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%MockFunctionTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%MockFunctionTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%MockFunctionTest_S2KtargetContracts_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%MockFunctionTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%MockFunctionTest_S2KtargetSenders_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtestZUndmockZUndfunction" "(" ")" [symbol("method_test%MockFunctionTest_S2KtestZUndmockZUndfunction_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtestZUndmockZUndfunctionZUndallZUndargs" "(" ")" [symbol("method_test%MockFunctionTest_S2KtestZUndmockZUndfunctionZUndallZUndargs_")]
    
    syntax S2KtestZModMockFunctionTestMethod ::= "S2KtestZUndmockZUndfunctionZUndconcreteZUndargs" "(" ")" [symbol("method_test%MockFunctionTest_S2KtestZUndmockZUndfunctionZUndconcreteZUndargs_")]
    
    rule  ( S2KtestZModMockFunctionTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtestZUndmockZUndfunction ( ) => #abiCallData ( "test_mock_function" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtestZUndmockZUndfunctionZUndallZUndargs ( ) => #abiCallData ( "test_mock_function_all_args" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModMockFunctionTest . S2KtestZUndmockZUndfunctionZUndconcreteZUndargs ( ) => #abiCallData ( "test_mock_function_concrete_args" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_mock_function()" ) => 2300543320 )
      
    
    rule  ( selector ( "test_mock_function_all_args()" ) => 3385469226 )
      
    
    rule  ( selector ( "test_mock_function_concrete_args()" ) => 4288244129 )
      

endmodule

module S2KtestZModModelMockFunctionContract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModModelMockFunctionContractContract
    
    syntax S2KtestZModModelMockFunctionContractContract ::= "S2KtestZModModelMockFunctionContract" [symbol("contract_test%ModelMockFunctionContract")]
    
    syntax Bytes ::= S2KtestZModModelMockFunctionContractContract "." S2KtestZModModelMockFunctionContractMethod [function, symbol("method_test%ModelMockFunctionContract")]
    
    syntax S2KtestZModModelMockFunctionContractMethod ::= "S2Ka" "(" ")" [symbol("method_test%ModelMockFunctionContract_S2Ka_")]
    
    syntax S2KtestZModModelMockFunctionContractMethod ::= "S2KmockedZUndargsZUndfunction" "(" Int ":" "uint256" ")" [symbol("method_test%ModelMockFunctionContract_S2KmockedZUndargsZUndfunction_uint256")]
    
    syntax S2KtestZModModelMockFunctionContractMethod ::= "S2KmockedZUndfunction" "(" ")" [symbol("method_test%ModelMockFunctionContract_S2KmockedZUndfunction_")]
    
    rule  ( S2KtestZModModelMockFunctionContract . S2Ka ( ) => #abiCallData ( "a" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModModelMockFunctionContract . S2KmockedZUndargsZUndfunction ( V0_x : uint256 ) => #abiCallData ( "mocked_args_function" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModModelMockFunctionContract . S2KmockedZUndfunction ( ) => #abiCallData ( "mocked_function" , .TypedArgs ) )
      
    
    rule  ( selector ( "a()" ) => 230582047 )
      
    
    rule  ( selector ( "mocked_args_function(uint256)" ) => 3922237240 )
      
    
    rule  ( selector ( "mocked_function()" ) => 2039681555 )
      

endmodule

module S2KsrcZModMyIERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModMyIERC20Contract
    
    syntax S2KsrcZModMyIERC20Contract ::= "S2KsrcZModMyIERC20" [symbol("contract_src%MyIERC20")]
    
    syntax Bytes ::= S2KsrcZModMyIERC20Contract "." S2KsrcZModMyIERC20Method [function, symbol("method_src%MyIERC20")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%MyIERC20_S2Kapprove_address_uint256")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol("method_src%MyIERC20_S2KbalanceOf_address")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2Kdecimals" "(" ")" [symbol("method_src%MyIERC20_S2Kdecimals_")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2Ksymbol" "(" ")" [symbol("method_src%MyIERC20_S2Ksymbol_")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2KtotalSupply" "(" ")" [symbol("method_src%MyIERC20_S2KtotalSupply_")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%MyIERC20_S2Ktransfer_address_uint256")]
    
    syntax S2KsrcZModMyIERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%MyIERC20_S2KtransferFrom_address_address_uint256")]
    
    rule  ( S2KsrcZModMyIERC20 . S2Kapprove ( V0_spender : address , V1_value : uint256 ) => #abiCallData ( "approve" , ( #address ( V0_spender ) , ( #uint256 ( V1_value ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))
      
    
    rule  ( S2KsrcZModMyIERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , ( #address ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KsrcZModMyIERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMyIERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMyIERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModMyIERC20 . S2Ktransfer ( V0_recipient : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , ( #address ( V0_recipient ) , ( #uint256 ( V1_amount ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_recipient )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KsrcZModMyIERC20 . S2KtransferFrom ( V0_sender : address , V1_recipient : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , ( #address ( V0_sender ) , ( #address ( V1_recipient ) , ( #uint256 ( V2_amount ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_sender )
       andBool ( #rangeAddress ( V1_recipient )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module S2KsrcZModMyToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModMyTokenContract
    
    syntax S2KsrcZModMyTokenContract ::= "S2KsrcZModMyToken" [symbol("contract_src%MyToken")]
    
    syntax Bytes ::= S2KsrcZModMyTokenContract "." S2KsrcZModMyTokenMethod [function, symbol("method_src%MyToken")]
    
    syntax S2KsrcZModMyTokenMethod ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol("method_src%MyToken_S2KbalanceOf_address")]
    
    syntax S2KsrcZModMyTokenMethod ::= "S2Kbalances" "(" Int ":" "address" ")" [symbol("method_src%MyToken_S2Kbalances_address")]
    
    syntax S2KsrcZModMyTokenMethod ::= "S2Kpay" "(" Int ":" "address" ")" [symbol("method_src%MyToken_S2Kpay_address")]
    
    syntax S2KsrcZModMyTokenMethod ::= "S2Ktoken" "(" ")" [symbol("method_src%MyToken_S2Ktoken_")]
    
    rule  ( S2KsrcZModMyToken . S2KbalanceOf ( V0_user : address ) => #abiCallData ( "balanceOf" , ( #address ( V0_user ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KsrcZModMyToken . S2Kbalances ( V0_ : address ) => #abiCallData ( "balances" , ( #address ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KsrcZModMyToken . S2Kpay ( V0_user : address ) => #abiCallData ( "pay" , ( #address ( V0_user ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KsrcZModMyToken . S2Ktoken ( ) => #abiCallData ( "token" , .TypedArgs ) )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "balances(address)" ) => 669136355 )
      
    
    rule  ( selector ( "pay(address)" ) => 202497757 )
      
    
    rule  ( selector ( "token()" ) => 4228666474 )
      

endmodule

module S2KtestZModNoImport-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModNoImportContract
    
    syntax S2KtestZModNoImportContract ::= "S2KtestZModNoImport" [symbol("contract_test%NoImport")]
    
    syntax Bytes ::= S2KtestZModNoImportContract "." S2KtestZModNoImportMethod [function, symbol("method_test%NoImport")]
    
    syntax S2KtestZModNoImportMethod ::= "S2KtestZUndsourceZUndmap" "(" ")" [symbol("method_test%NoImport_S2KtestZUndsourceZUndmap_")]
    
    rule  ( S2KtestZModNoImport . S2KtestZUndsourceZUndmap ( ) => #abiCallData ( "test_source_map" , .TypedArgs ) )
      
    
    rule  ( selector ( "test_source_map()" ) => 3563497491 )
      

endmodule

module S2KsrcZModcseZModUIntBinaryOp-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModUIntBinaryOpContract
    
    syntax S2KsrcZModcseZModUIntBinaryOpContract ::= "S2KsrcZModcseZModUIntBinaryOp" [symbol("contract_src%cse%UIntBinaryOp")]
    
    syntax Bytes ::= S2KsrcZModcseZModUIntBinaryOpContract "." S2KsrcZModcseZModUIntBinaryOpMethod [function, symbol("method_src%cse%UIntBinaryOp")]
    
    syntax S2KsrcZModcseZModUIntBinaryOpMethod ::= "S2KapplyOp" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_src%cse%UIntBinaryOp_S2KapplyOp_uint256_uint256")]
    
    rule  ( S2KsrcZModcseZModUIntBinaryOp . S2KapplyOp ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "applyOp(uint256,uint256)" ) => 3231763908 )
      

endmodule

module S2KsrcZModcseZModUIntUnaryOp-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModUIntUnaryOpContract
    
    syntax S2KsrcZModcseZModUIntUnaryOpContract ::= "S2KsrcZModcseZModUIntUnaryOp" [symbol("contract_src%cse%UIntUnaryOp")]
    
    syntax Bytes ::= S2KsrcZModcseZModUIntUnaryOpContract "." S2KsrcZModcseZModUIntUnaryOpMethod [function, symbol("method_src%cse%UIntUnaryOp")]
    
    syntax S2KsrcZModcseZModUIntUnaryOpMethod ::= "S2KapplyOp" "(" Int ":" "uint256" ")" [symbol("method_src%cse%UIntUnaryOp_S2KapplyOp_uint256")]
    
    rule  ( S2KsrcZModcseZModUIntUnaryOp . S2KapplyOp ( V0_x : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "applyOp(uint256)" ) => 1772879777 )
      

endmodule

module S2KsrcZModOwnerUpOnly-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModOwnerUpOnlyContract
    
    syntax S2KsrcZModOwnerUpOnlyContract ::= "S2KsrcZModOwnerUpOnly" [symbol("contract_src%OwnerUpOnly")]
    
    syntax Bytes ::= S2KsrcZModOwnerUpOnlyContract "." S2KsrcZModOwnerUpOnlyMethod [function, symbol("method_src%OwnerUpOnly")]
    
    syntax S2KsrcZModOwnerUpOnlyMethod ::= "S2Kcount" "(" ")" [symbol("method_src%OwnerUpOnly_S2Kcount_")]
    
    syntax S2KsrcZModOwnerUpOnlyMethod ::= "S2Kincrement" "(" ")" [symbol("method_src%OwnerUpOnly_S2Kincrement_")]
    
    syntax S2KsrcZModOwnerUpOnlyMethod ::= "S2Kowner" "(" ")" [symbol("method_src%OwnerUpOnly_S2Kowner_")]
    
    rule  ( S2KsrcZModOwnerUpOnly . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModOwnerUpOnly . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModOwnerUpOnly . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module S2KtestZModOwnerUpOnlyTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModOwnerUpOnlyTestContract
    
    syntax S2KtestZModOwnerUpOnlyTestContract ::= "S2KtestZModOwnerUpOnlyTest" [symbol("contract_test%OwnerUpOnlyTest")]
    
    syntax Bytes ::= S2KtestZModOwnerUpOnlyTestContract "." S2KtestZModOwnerUpOnlyTestMethod [function, symbol("method_test%OwnerUpOnlyTest")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2Kfailed_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KsetUp_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtargetContracts_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtargetSenders_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtestFailIncrementAsNotOwner" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtestFailIncrementAsNotOwner_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsNotOwner" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtestIncrementAsNotOwner_")]
    
    syntax S2KtestZModOwnerUpOnlyTestMethod ::= "S2KtestIncrementAsOwner" "(" ")" [symbol("method_test%OwnerUpOnlyTest_S2KtestIncrementAsOwner_")]
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtestFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtestIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModOwnerUpOnlyTest . S2KtestIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner()" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner()" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner()" ) => 1980498343 )
      

endmodule

module S2KtestZModAdditionalToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAdditionalTokenContract
    
    syntax S2KtestZModAdditionalTokenContract ::= "S2KtestZModAdditionalToken" [symbol("contract_test%AdditionalToken")]
    
    syntax Bytes ::= S2KtestZModAdditionalTokenContract "." S2KtestZModAdditionalTokenMethod [function, symbol("method_test%AdditionalToken")]
    
    syntax S2KtestZModAdditionalTokenMethod ::= "S2Kcount" "(" ")" [symbol("method_test%AdditionalToken_S2Kcount_")]
    
    syntax S2KtestZModAdditionalTokenMethod ::= "S2KincrementCount" "(" ")" [symbol("method_test%AdditionalToken_S2KincrementCount_")]
    
    syntax S2KtestZModAdditionalTokenMethod ::= "S2Kowner" "(" ")" [symbol("method_test%AdditionalToken_S2Kowner_")]
    
    syntax S2KtestZModAdditionalTokenMethod ::= "S2KrevertOn15" "(" ")" [symbol("method_test%AdditionalToken_S2KrevertOn15_")]
    
    rule  ( S2KtestZModAdditionalToken . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAdditionalToken . S2KincrementCount ( ) => #abiCallData ( "incrementCount" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAdditionalToken . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAdditionalToken . S2KrevertOn15 ( ) => #abiCallData ( "revertOn15" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "incrementCount()" ) => 3842448270 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      
    
    rule  ( selector ( "revertOn15()" ) => 2892789969 )
      

endmodule

module S2KtestZModMyErc20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModMyErc20Contract
    
    syntax S2KtestZModMyErc20Contract ::= "S2KtestZModMyErc20" [symbol("contract_test%MyErc20")]

endmodule

module S2KtestZModPlainPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModPlainPrankTestContract
    
    syntax S2KtestZModPlainPrankTestContract ::= "S2KtestZModPlainPrankTest" [symbol("contract_test%PlainPrankTest")]
    
    syntax Bytes ::= S2KtestZModPlainPrankTestContract "." S2KtestZModPlainPrankTestMethod [function, symbol("method_test%PlainPrankTest")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%PlainPrankTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%PlainPrankTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%PlainPrankTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%PlainPrankTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%PlainPrankTest_S2Kfailed_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KinternalCounter" "(" ")" [symbol("method_test%PlainPrankTest_S2KinternalCounter_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%PlainPrankTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%PlainPrankTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%PlainPrankTest_S2KtargetContracts_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%PlainPrankTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%PlainPrankTest_S2KtargetSenders_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndexistingAlready" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestFailZUndstartPrankZUndexistingAlready_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestFailZUndstartPrankZUndinternalCall" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestFailZUndstartPrankZUndinternalCall_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestPrankCreate" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestPrankCreate_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestPrankCreateAddress" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestPrankCreateAddress_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndprankZUndexpectRevert" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestZUndprankZUndexpectRevert_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndprankZUndzeroAddressZUndtrue" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestZUndprankZUndzeroAddressZUndtrue_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstartPrankWithOriginZUndtrue" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestZUndstartPrankWithOriginZUndtrue_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndtrue" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestZUndstartPrankZUndtrue_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstartPrankZUndzeroAddressZUndtrue" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestZUndstartPrankZUndzeroAddressZUndtrue_")]
    
    syntax S2KtestZModPlainPrankTestMethod ::= "S2KtestZUndstopPrankZUndnotExistent" "(" ")" [symbol("method_test%PlainPrankTest_S2KtestZUndstopPrankZUndnotExistent_")]
    
    rule  ( S2KtestZModPlainPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KinternalCounter ( ) => #abiCallData ( "internalCounter" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestFailZUndstartPrankZUndexistingAlready ( ) => #abiCallData ( "testFail_startPrank_existingAlready" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestFailZUndstartPrankZUndinternalCall ( ) => #abiCallData ( "testFail_startPrank_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestPrankCreate ( ) => #abiCallData ( "testPrankCreate" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestPrankCreateAddress ( ) => #abiCallData ( "testPrankCreateAddress" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndprankZUndexpectRevert ( ) => #abiCallData ( "test_prank_expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndprankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_prank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstartPrankWithOriginZUndtrue ( ) => #abiCallData ( "test_startPrankWithOrigin_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstartPrankZUndtrue ( ) => #abiCallData ( "test_startPrank_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstartPrankZUndzeroAddressZUndtrue ( ) => #abiCallData ( "test_startPrank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPlainPrankTest . S2KtestZUndstopPrankZUndnotExistent ( ) => #abiCallData ( "test_stopPrank_notExistent" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "internalCounter()" ) => 2687914858 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_startPrank_existingAlready()" ) => 2262269573 )
      
    
    rule  ( selector ( "testFail_startPrank_internalCall()" ) => 3075676477 )
      
    
    rule  ( selector ( "testPrankCreate()" ) => 3934929665 )
      
    
    rule  ( selector ( "testPrankCreateAddress()" ) => 2313878016 )
      
    
    rule  ( selector ( "test_prank_expectRevert()" ) => 215353736 )
      
    
    rule  ( selector ( "test_prank_zeroAddress_true()" ) => 3793950116 )
      
    
    rule  ( selector ( "test_startPrankWithOrigin_true()" ) => 1559633499 )
      
    
    rule  ( selector ( "test_startPrank_true()" ) => 243527947 )
      
    
    rule  ( selector ( "test_startPrank_zeroAddress_true()" ) => 858618957 )
      
    
    rule  ( selector ( "test_stopPrank_notExistent()" ) => 279002555 )
      

endmodule

module S2KsrcZModPortal-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModPortalContract
    
    syntax S2KsrcZModPortalContract ::= "S2KsrcZModPortal" [symbol("contract_src%Portal")]
    
    syntax Bytes ::= S2KsrcZModPortalContract "." S2KsrcZModPortalMethod [function, symbol("method_src%Portal")]
    
    syntax S2KsrcZModPortalMethod ::= "S2KproveWithdrawalTransaction" "(" Int ":" "uint256" "," Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "bytes32" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_src%Portal_S2KproveWithdrawalTransaction_uint256_address_address_uint256_uint256_bytes_uint256_bytes32_bytes32_bytes32_bytes32_bytes_bytes")]
    
    rule  ( S2KsrcZModPortal . S2KproveWithdrawalTransaction ( V0_nonce : uint256 , V1_sender : address , V2_target : address , V3_value : uint256 , V4_gasLimit : uint256 , V5_data : bytes , V6__l2OutputIndex : uint256 , V7_version : bytes32 , V8_stateRoot : bytes32 , V9_messagePasserStorageRoot : bytes32 , V10_latestBlockhash : bytes32 , V11__withdrawalProof_0 : bytes , V11__withdrawalProof_1 : bytes ) => #abiCallData ( "proveWithdrawalTransaction" , ( #tuple ( ( #uint256 ( V0_nonce ) , ( #address ( V1_sender ) , ( #address ( V2_target ) , ( #uint256 ( V3_value ) , ( #uint256 ( V4_gasLimit ) , ( #bytes ( V5_data ) , .TypedArgs ) ) ) ) ) ) ) , ( #uint256 ( V6__l2OutputIndex ) , ( #tuple ( ( #bytes32 ( V7_version ) , ( #bytes32 ( V8_stateRoot ) , ( #bytes32 ( V9_messagePasserStorageRoot ) , ( #bytes32 ( V10_latestBlockhash ) , .TypedArgs ) ) ) ) ) , ( #array ( #bytes ( V11__withdrawalProof_0 ) , 2 , ( #bytes ( V11__withdrawalProof_0 ) , ( #bytes ( V11__withdrawalProof_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_nonce )
       andBool ( #rangeAddress ( V1_sender )
       andBool ( #rangeAddress ( V2_target )
       andBool ( #rangeUInt ( 256 , V3_value )
       andBool ( #rangeUInt ( 256 , V4_gasLimit )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V5_data ) )
       andBool ( #rangeUInt ( 256 , V6__l2OutputIndex )
       andBool ( #rangeBytes ( 32 , V7_version )
       andBool ( #rangeBytes ( 32 , V8_stateRoot )
       andBool ( #rangeBytes ( 32 , V9_messagePasserStorageRoot )
       andBool ( #rangeBytes ( 32 , V10_latestBlockhash )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V11__withdrawalProof_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V11__withdrawalProof_1 ) )
               )))))))))))))
      
    
    rule  ( selector ( "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])" ) => 1215318383 )
      

endmodule

module S2KsrcZModTypes-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModTypesContract
    
    syntax S2KsrcZModTypesContract ::= "S2KsrcZModTypes" [symbol("contract_src%Types")]

endmodule

module S2KtestZModPortalTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModPortalTestContract
    
    syntax S2KtestZModPortalTestContract ::= "S2KtestZModPortalTest" [symbol("contract_test%PortalTest")]
    
    syntax Bytes ::= S2KtestZModPortalTestContract "." S2KtestZModPortalTestMethod [function, symbol("method_test%PortalTest")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%PortalTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%PortalTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%PortalTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%PortalTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%PortalTest_S2Kfailed_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%PortalTest_S2KsetUp_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%PortalTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%PortalTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%PortalTest_S2KtargetContracts_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%PortalTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%PortalTest_S2KtargetSenders_")]
    
    syntax S2KtestZModPortalTestMethod ::= "S2KtestZUndwithdrawalZUndpaused" "(" Int ":" "uint256" "," Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint256" "," Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "bytes32" "," Bytes ":" "bytes" ")" [symbol("method_test%PortalTest_S2KtestZUndwithdrawalZUndpaused_uint256_address_address_uint256_uint256_bytes_uint256_bytes32_bytes32_bytes32_bytes32_bytes")]
    
    rule  ( S2KtestZModPortalTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPortalTest . S2KtestZUndwithdrawalZUndpaused ( V0_nonce : uint256 , V1_sender : address , V2_target : address , V3_value : uint256 , V4_gasLimit : uint256 , V5_data : bytes , V6__l2OutputIndex : uint256 , V7_version : bytes32 , V8_stateRoot : bytes32 , V9_messagePasserStorageRoot : bytes32 , V10_latestBlockhash : bytes32 , V11__withdrawalProof_0 : bytes ) => #abiCallData ( "test_withdrawal_paused" , ( #tuple ( ( #uint256 ( V0_nonce ) , ( #address ( V1_sender ) , ( #address ( V2_target ) , ( #uint256 ( V3_value ) , ( #uint256 ( V4_gasLimit ) , ( #bytes ( V5_data ) , .TypedArgs ) ) ) ) ) ) ) , ( #uint256 ( V6__l2OutputIndex ) , ( #tuple ( ( #bytes32 ( V7_version ) , ( #bytes32 ( V8_stateRoot ) , ( #bytes32 ( V9_messagePasserStorageRoot ) , ( #bytes32 ( V10_latestBlockhash ) , .TypedArgs ) ) ) ) ) , ( #array ( #bytes ( V11__withdrawalProof_0 ) , 1 , ( #bytes ( V11__withdrawalProof_0 ) , .TypedArgs ) ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_nonce )
       andBool ( #rangeAddress ( V1_sender )
       andBool ( #rangeAddress ( V2_target )
       andBool ( #rangeUInt ( 256 , V3_value )
       andBool ( #rangeUInt ( 256 , V4_gasLimit )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V5_data ) )
       andBool ( #rangeUInt ( 256 , V6__l2OutputIndex )
       andBool ( #rangeBytes ( 32 , V7_version )
       andBool ( #rangeBytes ( 32 , V8_stateRoot )
       andBool ( #rangeBytes ( 32 , V9_messagePasserStorageRoot )
       andBool ( #rangeBytes ( 32 , V10_latestBlockhash )
       andBool ( lengthBytes ( V11__withdrawalProof_0 ) ==Int 32
               ))))))))))))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_withdrawal_paused((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])" ) => 3251445116 )
      

endmodule

module S2KsrcZModPrank-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModPrankContract
    
    syntax S2KsrcZModPrankContract ::= "S2KsrcZModPrank" [symbol("contract_src%Prank")]
    
    syntax Bytes ::= S2KsrcZModPrankContract "." S2KsrcZModPrankMethod [function, symbol("method_src%Prank")]
    
    syntax S2KsrcZModPrankMethod ::= "S2Kadd" "(" Int ":" "uint256" ")" [symbol("method_src%Prank_S2Kadd_uint256")]
    
    syntax S2KsrcZModPrankMethod ::= "S2Kcount" "(" ")" [symbol("method_src%Prank_S2Kcount_")]
    
    syntax S2KsrcZModPrankMethod ::= "S2KmsgSender" "(" ")" [symbol("method_src%Prank_S2KmsgSender_")]
    
    syntax S2KsrcZModPrankMethod ::= "S2Kowner" "(" ")" [symbol("method_src%Prank_S2Kowner_")]
    
    syntax S2KsrcZModPrankMethod ::= "S2Ksubtract" "(" Int ":" "uint256" ")" [symbol("method_src%Prank_S2Ksubtract_uint256")]
    
    syntax S2KsrcZModPrankMethod ::= "S2KtxOrigin" "(" ")" [symbol("method_src%Prank_S2KtxOrigin_")]
    
    rule  ( S2KsrcZModPrank . S2Kadd ( V0_value : uint256 ) => #abiCallData ( "add" , ( #uint256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KsrcZModPrank . S2Kcount ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModPrank . S2KmsgSender ( ) => #abiCallData ( "msgSender" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModPrank . S2Kowner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModPrank . S2Ksubtract ( V0_value : uint256 ) => #abiCallData ( "subtract" , ( #uint256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KsrcZModPrank . S2KtxOrigin ( ) => #abiCallData ( "txOrigin" , .TypedArgs ) )
      
    
    rule  ( selector ( "add(uint256)" ) => 268690130 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "msgSender()" ) => 3610759367 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      
    
    rule  ( selector ( "subtract(uint256)" ) => 499146519 )
      
    
    rule  ( selector ( "txOrigin()" ) => 4184299473 )
      

endmodule

module S2KtestZModPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModPrankTestContract
    
    syntax S2KtestZModPrankTestContract ::= "S2KtestZModPrankTest" [symbol("contract_test%PrankTest")]
    
    syntax Bytes ::= S2KtestZModPrankTestContract "." S2KtestZModPrankTestMethod [function, symbol("method_test%PrankTest")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%PrankTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%PrankTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%PrankTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%PrankTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%PrankTest_S2Kfailed_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%PrankTest_S2KsetUp_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%PrankTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%PrankTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%PrankTest_S2KtargetContracts_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%PrankTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%PrankTest_S2KtargetSenders_")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestAddAsOwner" "(" Int ":" "uint256" ")" [symbol("method_test%PrankTest_S2KtestAddAsOwner_uint256")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestAddStartPrank" "(" Int ":" "uint256" ")" [symbol("method_test%PrankTest_S2KtestAddStartPrank_uint256")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestFailAddPrank" "(" Int ":" "uint256" ")" [symbol("method_test%PrankTest_S2KtestFailAddPrank_uint256")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestSubtractAsTxOrigin" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%PrankTest_S2KtestSubtractAsTxOrigin_uint256_uint256")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestSubtractFail" "(" Int ":" "uint256" ")" [symbol("method_test%PrankTest_S2KtestSubtractFail_uint256")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestSubtractStartPrank" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%PrankTest_S2KtestSubtractStartPrank_uint256_uint256")]
    
    syntax S2KtestZModPrankTestMethod ::= "S2KtestSymbolicStartPrank" "(" Int ":" "address" ")" [symbol("method_test%PrankTest_S2KtestSymbolicStartPrank_address")]
    
    rule  ( S2KtestZModPrankTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTest . S2KtestAddAsOwner ( V0_x : uint256 ) => #abiCallData ( "testAddAsOwner" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModPrankTest . S2KtestAddStartPrank ( V0_x : uint256 ) => #abiCallData ( "testAddStartPrank" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModPrankTest . S2KtestFailAddPrank ( V0_x : uint256 ) => #abiCallData ( "testFailAddPrank" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModPrankTest . S2KtestSubtractAsTxOrigin ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractAsTxOrigin" , ( #uint256 ( V0_addValue ) , ( #uint256 ( V1_subValue ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KtestZModPrankTest . S2KtestSubtractFail ( V0_x : uint256 ) => #abiCallData ( "testSubtractFail" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModPrankTest . S2KtestSubtractStartPrank ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractStartPrank" , ( #uint256 ( V0_addValue ) , ( #uint256 ( V1_subValue ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KtestZModPrankTest . S2KtestSymbolicStartPrank ( V0_addr : address ) => #abiCallData ( "testSymbolicStartPrank" , ( #address ( V0_addr ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAddAsOwner(uint256)" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank(uint256)" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank(uint256)" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin(uint256,uint256)" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail(uint256)" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank(uint256,uint256)" ) => 262874110 )
      
    
    rule  ( selector ( "testSymbolicStartPrank(address)" ) => 1757857939 )
      

endmodule

module S2KtestZModPrankTestMsgSender-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModPrankTestMsgSenderContract
    
    syntax S2KtestZModPrankTestMsgSenderContract ::= "S2KtestZModPrankTestMsgSender" [symbol("contract_test%PrankTestMsgSender")]
    
    syntax Bytes ::= S2KtestZModPrankTestMsgSenderContract "." S2KtestZModPrankTestMsgSenderMethod [function, symbol("method_test%PrankTestMsgSender")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KISZUndTEST_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KexcludeContracts_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KexcludeSenders_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%PrankTestMsgSender_S2Kfailed_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2Kprankcontract" "(" ")" [symbol("method_test%PrankTestMsgSender_S2Kprankcontract_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KsetUp_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KtargetArtifacts_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KtargetContracts_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KtargetSelectors_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KtargetSenders_")]
    
    syntax S2KtestZModPrankTestMsgSenderMethod ::= "S2KtestZUndmsgsenderZUndsetup" "(" ")" [symbol("method_test%PrankTestMsgSender_S2KtestZUndmsgsenderZUndsetup_")]
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestMsgSender . S2KtestZUndmsgsenderZUndsetup ( ) => #abiCallData ( "test_msgsender_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "prankcontract()" ) => 2746331494 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_msgsender_setup()" ) => 2760890647 )
      

endmodule

module S2KtestZModPrankTestOrigin-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModPrankTestOriginContract
    
    syntax S2KtestZModPrankTestOriginContract ::= "S2KtestZModPrankTestOrigin" [symbol("contract_test%PrankTestOrigin")]
    
    syntax Bytes ::= S2KtestZModPrankTestOriginContract "." S2KtestZModPrankTestOriginMethod [function, symbol("method_test%PrankTestOrigin")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%PrankTestOrigin_S2KISZUndTEST_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%PrankTestOrigin_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%PrankTestOrigin_S2KexcludeContracts_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%PrankTestOrigin_S2KexcludeSenders_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%PrankTestOrigin_S2Kfailed_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2Kprankcontract" "(" ")" [symbol("method_test%PrankTestOrigin_S2Kprankcontract_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%PrankTestOrigin_S2KsetUp_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%PrankTestOrigin_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%PrankTestOrigin_S2KtargetArtifacts_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%PrankTestOrigin_S2KtargetContracts_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%PrankTestOrigin_S2KtargetSelectors_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%PrankTestOrigin_S2KtargetSenders_")]
    
    syntax S2KtestZModPrankTestOriginMethod ::= "S2KtestZUndoriginZUndsetup" "(" ")" [symbol("method_test%PrankTestOrigin_S2KtestZUndoriginZUndsetup_")]
    
    rule  ( S2KtestZModPrankTestOrigin . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPrankTestOrigin . S2KtestZUndoriginZUndsetup ( ) => #abiCallData ( "test_origin_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "prankcontract()" ) => 2746331494 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_origin_setup()" ) => 3453115101 )
      

endmodule

module S2KtestZModStartPrankTestMsgSender-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModStartPrankTestMsgSenderContract
    
    syntax S2KtestZModStartPrankTestMsgSenderContract ::= "S2KtestZModStartPrankTestMsgSender" [symbol("contract_test%StartPrankTestMsgSender")]
    
    syntax Bytes ::= S2KtestZModStartPrankTestMsgSenderContract "." S2KtestZModStartPrankTestMsgSenderMethod [function, symbol("method_test%StartPrankTestMsgSender")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KISZUndTEST_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KexcludeContracts_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KexcludeSenders_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2Kfailed_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2Kprankcontract" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2Kprankcontract_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KsetUp_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KtargetArtifacts_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KtargetContracts_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KtargetSelectors_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KtargetSenders_")]
    
    syntax S2KtestZModStartPrankTestMsgSenderMethod ::= "S2KtestZUndstartprankZUndmsgsenderZUndsetup" "(" ")" [symbol("method_test%StartPrankTestMsgSender_S2KtestZUndstartprankZUndmsgsenderZUndsetup_")]
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestMsgSender . S2KtestZUndstartprankZUndmsgsenderZUndsetup ( ) => #abiCallData ( "test_startprank_msgsender_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "prankcontract()" ) => 2746331494 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_startprank_msgsender_setup()" ) => 1890385877 )
      

endmodule

module S2KtestZModStartPrankTestOrigin-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModStartPrankTestOriginContract
    
    syntax S2KtestZModStartPrankTestOriginContract ::= "S2KtestZModStartPrankTestOrigin" [symbol("contract_test%StartPrankTestOrigin")]
    
    syntax Bytes ::= S2KtestZModStartPrankTestOriginContract "." S2KtestZModStartPrankTestOriginMethod [function, symbol("method_test%StartPrankTestOrigin")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KISZUndTEST_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KexcludeContracts_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KexcludeSenders_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2Kfailed_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2Kprankcontract" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2Kprankcontract_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KsetUp_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KtargetArtifacts_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KtargetContracts_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KtargetSelectors_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KtargetSenders_")]
    
    syntax S2KtestZModStartPrankTestOriginMethod ::= "S2KtestZUndstartprankZUndoriginZUndsetup" "(" ")" [symbol("method_test%StartPrankTestOrigin_S2KtestZUndstartprankZUndoriginZUndsetup_")]
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2Kprankcontract ( ) => #abiCallData ( "prankcontract" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStartPrankTestOrigin . S2KtestZUndstartprankZUndoriginZUndsetup ( ) => #abiCallData ( "test_startprank_origin_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "prankcontract()" ) => 2746331494 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_startprank_origin_setup()" ) => 2844579021 )
      

endmodule

module S2KtestZModPreconditionsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModPreconditionsTestContract
    
    syntax S2KtestZModPreconditionsTestContract ::= "S2KtestZModPreconditionsTest" [symbol("contract_test%PreconditionsTest")]
    
    syntax Bytes ::= S2KtestZModPreconditionsTestContract "." S2KtestZModPreconditionsTestMethod [function, symbol("method_test%PreconditionsTest")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%PreconditionsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%PreconditionsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%PreconditionsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%PreconditionsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%PreconditionsTest_S2Kfailed_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%PreconditionsTest_S2Kkevm_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%PreconditionsTest_S2KsetUp_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%PreconditionsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%PreconditionsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%PreconditionsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%PreconditionsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%PreconditionsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModPreconditionsTestMethod ::= "S2KtestAssume" "(" ")" [symbol("method_test%PreconditionsTest_S2KtestAssume_")]
    
    rule  ( S2KtestZModPreconditionsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModPreconditionsTest . S2KtestAssume ( ) => #abiCallData ( "testAssume" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAssume()" ) => 3928496829 )
      

endmodule

module S2KtestZModRecordLogsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModRecordLogsTestContract
    
    syntax S2KtestZModRecordLogsTestContract ::= "S2KtestZModRecordLogsTest" [symbol("contract_test%RecordLogsTest")]
    
    syntax Bytes ::= S2KtestZModRecordLogsTestContract "." S2KtestZModRecordLogsTestMethod [function, symbol("method_test%RecordLogsTest")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%RecordLogsTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%RecordLogsTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%RecordLogsTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%RecordLogsTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%RecordLogsTest_S2Kfailed_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%RecordLogsTest_S2KsetUp_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%RecordLogsTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%RecordLogsTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%RecordLogsTest_S2KtargetContracts_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%RecordLogsTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%RecordLogsTest_S2KtargetSenders_")]
    
    syntax S2KtestZModRecordLogsTestMethod ::= "S2KtestRecordLogs" "(" ")" [symbol("method_test%RecordLogsTest_S2KtestRecordLogs_")]
    
    rule  ( S2KtestZModRecordLogsTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModRecordLogsTest . S2KtestRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testRecordLogs()" ) => 3623393624 )
      

endmodule

module S2KsrcZModSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModSafeContract
    
    syntax S2KsrcZModSafeContract ::= "S2KsrcZModSafe" [symbol("contract_src%Safe")]
    
    syntax Bytes ::= S2KsrcZModSafeContract "." S2KsrcZModSafeMethod [function, symbol("method_src%Safe")]
    
    syntax S2KsrcZModSafeMethod ::= "S2Kwithdraw" "(" ")" [symbol("method_src%Safe_S2Kwithdraw_")]
    
    rule  ( S2KsrcZModSafe . S2Kwithdraw ( ) => #abiCallData ( "withdraw" , .TypedArgs ) )
      
    
    rule  ( selector ( "withdraw()" ) => 1020253707 )
      

endmodule

module S2KtestZModSafeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSafeTestContract
    
    syntax S2KtestZModSafeTestContract ::= "S2KtestZModSafeTest" [symbol("contract_test%SafeTest")]
    
    syntax Bytes ::= S2KtestZModSafeTestContract "." S2KtestZModSafeTestMethod [function, symbol("method_test%SafeTest")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%SafeTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%SafeTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%SafeTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%SafeTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%SafeTest_S2Kfailed_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%SafeTest_S2KsetUp_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%SafeTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%SafeTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%SafeTest_S2KtargetContracts_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%SafeTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%SafeTest_S2KtargetSenders_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtestWithdraw" "(" ")" [symbol("method_test%SafeTest_S2KtestWithdraw_")]
    
    syntax S2KtestZModSafeTestMethod ::= "S2KtestWithdrawFuzz" "(" Int ":" "uint96" ")" [symbol("method_test%SafeTest_S2KtestWithdrawFuzz_uint96")]
    
    rule  ( S2KtestZModSafeTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtestWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSafeTest . S2KtestWithdrawFuzz ( V0_amount : uint96 ) => #abiCallData ( "testWithdrawFuzz" , ( #uint96 ( V0_amount ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testWithdraw()" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz(uint96)" ) => 3503970826 )
      

endmodule

module S2KtestZModSetup2Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSetup2TestContract
    
    syntax S2KtestZModSetup2TestContract ::= "S2KtestZModSetup2Test" [symbol("contract_test%Setup2Test")]
    
    syntax Bytes ::= S2KtestZModSetup2TestContract "." S2KtestZModSetup2TestMethod [function, symbol("method_test%Setup2Test")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%Setup2Test_S2KISZUndTEST_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%Setup2Test_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%Setup2Test_S2KexcludeContracts_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%Setup2Test_S2KexcludeSenders_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%Setup2Test_S2Kfailed_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%Setup2Test_S2KsetUp_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%Setup2Test_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%Setup2Test_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%Setup2Test_S2KtargetContracts_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%Setup2Test_S2KtargetSelectors_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%Setup2Test_S2KtargetSenders_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtestFailZUndsetup" "(" ")" [symbol("method_test%Setup2Test_S2KtestFailZUndsetup_")]
    
    syntax S2KtestZModSetup2TestMethod ::= "S2KtestZUndsetup" "(" ")" [symbol("method_test%Setup2Test_S2KtestZUndsetup_")]
    
    rule  ( S2KtestZModSetup2Test . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtestFailZUndsetup ( ) => #abiCallData ( "testFail_setup" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetup2Test . S2KtestZUndsetup ( ) => #abiCallData ( "test_setup" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_setup()" ) => 3501410022 )
      
    
    rule  ( selector ( "test_setup()" ) => 2001288179 )
      

endmodule

module S2KtestZModSetUpDeployTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSetUpDeployTestContract
    
    syntax S2KtestZModSetUpDeployTestContract ::= "S2KtestZModSetUpDeployTest" [symbol("contract_test%SetUpDeployTest")]
    
    syntax Bytes ::= S2KtestZModSetUpDeployTestContract "." S2KtestZModSetUpDeployTestMethod [function, symbol("method_test%SetUpDeployTest")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%SetUpDeployTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%SetUpDeployTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%SetUpDeployTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%SetUpDeployTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%SetUpDeployTest_S2Kfailed_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%SetUpDeployTest_S2KsetUp_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%SetUpDeployTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%SetUpDeployTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%SetUpDeployTest_S2KtargetContracts_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%SetUpDeployTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%SetUpDeployTest_S2KtargetSenders_")]
    
    syntax S2KtestZModSetUpDeployTestMethod ::= "S2KtestZUndextcodesize" "(" ")" [symbol("method_test%SetUpDeployTest_S2KtestZUndextcodesize_")]
    
    rule  ( S2KtestZModSetUpDeployTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpDeployTest . S2KtestZUndextcodesize ( ) => #abiCallData ( "test_extcodesize" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_extcodesize()" ) => 1657400005 )
      

endmodule

module S2KtestZModSetUpTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSetUpTestContract
    
    syntax S2KtestZModSetUpTestContract ::= "S2KtestZModSetUpTest" [symbol("contract_test%SetUpTest")]
    
    syntax Bytes ::= S2KtestZModSetUpTestContract "." S2KtestZModSetUpTestMethod [function, symbol("method_test%SetUpTest")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%SetUpTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%SetUpTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%SetUpTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%SetUpTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%SetUpTest_S2Kfailed_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%SetUpTest_S2Kkevm_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%SetUpTest_S2KsetUp_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%SetUpTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%SetUpTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%SetUpTest_S2KtargetContracts_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%SetUpTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%SetUpTest_S2KtargetSenders_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtestSetUpCalled" "(" ")" [symbol("method_test%SetUpTest_S2KtestSetUpCalled_")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtestSetUpCalledSymbolic" "(" Int ":" "uint256" ")" [symbol("method_test%SetUpTest_S2KtestSetUpCalledSymbolic_uint256")]
    
    syntax S2KtestZModSetUpTestMethod ::= "S2KtestSetupData" "(" ")" [symbol("method_test%SetUpTest_S2KtestSetupData_")]
    
    rule  ( S2KtestZModSetUpTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtestSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtestSetUpCalledSymbolic ( V0_x : uint256 ) => #abiCallData ( "testSetUpCalledSymbolic" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModSetUpTest . S2KtestSetupData ( ) => #abiCallData ( "testSetupData" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testSetUpCalled()" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic(uint256)" ) => 3332480466 )
      
    
    rule  ( selector ( "testSetupData()" ) => 1486426385 )
      

endmodule

module S2KtestZModSignTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSignTestContract
    
    syntax S2KtestZModSignTestContract ::= "S2KtestZModSignTest" [symbol("contract_test%SignTest")]
    
    syntax Bytes ::= S2KtestZModSignTestContract "." S2KtestZModSignTestMethod [function, symbol("method_test%SignTest")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%SignTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%SignTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%SignTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%SignTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%SignTest_S2Kfailed_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%SignTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%SignTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%SignTest_S2KtargetContracts_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%SignTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%SignTest_S2KtargetSenders_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtestSign" "(" ")" [symbol("method_test%SignTest_S2KtestSign_")]
    
    syntax S2KtestZModSignTestMethod ::= "S2KtestSignZUndsymbolic" "(" Int ":" "uint256" ")" [symbol("method_test%SignTest_S2KtestSignZUndsymbolic_uint256")]
    
    rule  ( S2KtestZModSignTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtestSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSignTest . S2KtestSignZUndsymbolic ( V0_pk : uint256 ) => #abiCallData ( "testSign_symbolic" , ( #uint256 ( V0_pk ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testSign()" ) => 3985576159 )
      
    
    rule  ( selector ( "testSign_symbolic(uint256)" ) => 2942025997 )
      

endmodule

module S2KtestZModAssertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModAssertTestContract
    
    syntax S2KtestZModAssertTestContract ::= "S2KtestZModAssertTest" [symbol("contract_test%AssertTest")]
    
    syntax Bytes ::= S2KtestZModAssertTestContract "." S2KtestZModAssertTestMethod [function, symbol("method_test%AssertTest")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%AssertTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KcallZUndassertZUndfalse" "(" ")" [symbol("method_test%AssertTest_S2KcallZUndassertZUndfalse_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KcheckFailZUndassertZUndfalse" "(" ")" [symbol("method_test%AssertTest_S2KcheckFailZUndassertZUndfalse_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%AssertTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%AssertTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%AssertTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%AssertTest_S2Kfailed_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%AssertTest_S2Kkevm_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KproveZUndassertZUndtrue" "(" ")" [symbol("method_test%AssertTest_S2KproveZUndassertZUndtrue_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%AssertTest_S2KsetUp_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%AssertTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%AssertTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%AssertTest_S2KtargetContracts_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%AssertTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%AssertTest_S2KtargetSenders_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestFailZUndassertZUndtrue" "(" ")" [symbol("method_test%AssertTest_S2KtestFailZUndassertZUndtrue_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestFailZUndexpectZUndrevert" "(" ")" [symbol("method_test%AssertTest_S2KtestFailZUndexpectZUndrevert_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndassertZUndfalse" "(" ")" [symbol("method_test%AssertTest_S2KtestZUndassertZUndfalse_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndassertZUndtrue" "(" ")" [symbol("method_test%AssertTest_S2KtestZUndassertZUndtrue_")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndassertZUndtrueZUndbranch" "(" Int ":" "uint256" ")" [symbol("method_test%AssertTest_S2KtestZUndassertZUndtrueZUndbranch_uint256")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndfailingZUndbranch" "(" Int ":" "uint256" ")" [symbol("method_test%AssertTest_S2KtestZUndfailingZUndbranch_uint256")]
    
    syntax S2KtestZModAssertTestMethod ::= "S2KtestZUndrevertZUndbranch" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_test%AssertTest_S2KtestZUndrevertZUndbranch_uint256_uint256")]
    
    rule  ( S2KtestZModAssertTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KcallZUndassertZUndfalse ( ) => #abiCallData ( "call_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KcheckFailZUndassertZUndfalse ( ) => #abiCallData ( "checkFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KproveZUndassertZUndtrue ( ) => #abiCallData ( "prove_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestFailZUndassertZUndtrue ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestFailZUndexpectZUndrevert ( ) => #abiCallData ( "testFail_expect_revert" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestZUndassertZUndfalse ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestZUndassertZUndtrue ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestZUndassertZUndtrueZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_assert_true_branch" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestZUndfailingZUndbranch ( V0_x : uint256 ) => #abiCallData ( "test_failing_branch" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModAssertTest . S2KtestZUndrevertZUndbranch ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_revert_branch" , ( #uint256 ( V0_x ) , ( #uint256 ( V1_y ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "call_assert_false()" ) => 4088213539 )
      
    
    rule  ( selector ( "checkFail_assert_false()" ) => 2724061172 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "prove_assert_true()" ) => 2285719382 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testFail_assert_true()" ) => 409427266 )
      
    
    rule  ( selector ( "testFail_expect_revert()" ) => 709747105 )
      
    
    rule  ( selector ( "test_assert_false()" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true_branch(uint256)" ) => 3267411143 )
      
    
    rule  ( selector ( "test_failing_branch(uint256)" ) => 1176678741 )
      
    
    rule  ( selector ( "test_revert_branch(uint256,uint256)" ) => 2349784459 )
      

endmodule

module S2KtestZModnestedZModAssertNestedTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModnestedZModAssertNestedTestContract
    
    syntax S2KtestZModnestedZModAssertNestedTestContract ::= "S2KtestZModnestedZModAssertNestedTest" [symbol("contract_test%nested%AssertNestedTest")]
    
    syntax Bytes ::= S2KtestZModnestedZModAssertNestedTestContract "." S2KtestZModnestedZModAssertNestedTestMethod [function, symbol("method_test%nested%AssertNestedTest")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2Kfailed_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2Kkevm_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KtargetContracts_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KtargetSenders_")]
    
    syntax S2KtestZModnestedZModAssertNestedTestMethod ::= "S2KtestZUndassertZUndtrueZUndnested" "(" ")" [symbol("method_test%nested%AssertNestedTest_S2KtestZUndassertZUndtrueZUndnested_")]
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModnestedZModAssertNestedTest . S2KtestZUndassertZUndtrueZUndnested ( ) => #abiCallData ( "test_assert_true_nested" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "test_assert_true_nested()" ) => 4140320263 )
      

endmodule

module S2KtestZModSnapshotTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSnapshotTestContract
    
    syntax S2KtestZModSnapshotTestContract ::= "S2KtestZModSnapshotTest" [symbol("contract_test%SnapshotTest")]
    
    syntax Bytes ::= S2KtestZModSnapshotTestContract "." S2KtestZModSnapshotTestMethod [function, symbol("method_test%SnapshotTest")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%SnapshotTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%SnapshotTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%SnapshotTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%SnapshotTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%SnapshotTest_S2Kfailed_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KsetUp" "(" ")" [symbol("method_test%SnapshotTest_S2KsetUp_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%SnapshotTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%SnapshotTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%SnapshotTest_S2KtargetContracts_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%SnapshotTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%SnapshotTest_S2KtargetSenders_")]
    
    syntax S2KtestZModSnapshotTestMethod ::= "S2KtestSnapshot" "(" ")" [symbol("method_test%SnapshotTest_S2KtestSnapshot_")]
    
    rule  ( S2KtestZModSnapshotTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSnapshotTest . S2KtestSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testSnapshot()" ) => 3204135818 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdAssertions-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdAssertions" [symbol("contract_lib%forge-std%src%StdAssertions")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract "." S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod [function, symbol("method_lib%forge-std%src%StdAssertions")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_lib%forge-std%src%StdAssertions_S2KISZUndTEST_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod ::= "S2Kfailed" "(" ")" [symbol("method_lib%forge-std%src%StdAssertions_S2Kfailed_")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdChains-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdChainsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdChains" [symbol("contract_lib%forge-std%src%StdChains")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdCheats" [symbol("contract_lib%forge-std%src%StdCheats")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe" [symbol("contract_lib%forge-std%src%StdCheatsSafe")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdError-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdErrorContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdError" [symbol("contract_lib%forge-std%src%stdError")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModstdErrorContract "." S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod [function, symbol("method_lib%forge-std%src%stdError")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KarithmeticError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KarithmeticError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KassertionError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KassertionError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KdivisionError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KdivisionError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KencodeStorageError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KencodeStorageError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KenumConversionError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KenumConversionError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KindexOOBError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KindexOOBError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KmemOverflowError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KmemOverflowError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KpopError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KpopError_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KzeroVarError" "(" ")" [symbol("method_lib%forge-std%src%stdError_S2KzeroVarError_")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KarithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KassertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KdivisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KencodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KenumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KindexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KmemOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KpopError ( ) => #abiCallData ( "popError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KzeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )
      
    
    rule  ( selector ( "arithmeticError()" ) => 2308253967 )
      
    
    rule  ( selector ( "assertionError()" ) => 271788407 )
      
    
    rule  ( selector ( "divisionError()" ) => 4202187332 )
      
    
    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )
      
    
    rule  ( selector ( "enumConversionError()" ) => 501503328 )
      
    
    rule  ( selector ( "indexOOBError()" ) => 99517970 )
      
    
    rule  ( selector ( "memOverflowError()" ) => 2557239144 )
      
    
    rule  ( selector ( "popError()" ) => 2989344077 )
      
    
    rule  ( selector ( "zeroVarError()" ) => 3061221850 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdInvariant-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdInvariant" [symbol("contract_lib%forge-std%src%StdInvariant")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract "." S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod [function, symbol("method_lib%forge-std%src%StdInvariant")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KexcludeArtifacts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KexcludeContracts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KexcludeSenders_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KtargetArtifactSelectors_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KtargetArtifacts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KtargetContracts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KtargetSelectors_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_lib%forge-std%src%StdInvariant_S2KtargetSenders_")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdJson-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdJsonContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdJsonContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdJson" [symbol("contract_lib%forge-std%src%stdJson")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdMath-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdMathContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdMathContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdMath" [symbol("contract_lib%forge-std%src%stdMath")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdStorage-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdStorageContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdStorageContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdStorage" [symbol("contract_lib%forge-std%src%stdStorage")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdStorageSafeContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdStorageSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe" [symbol("contract_lib%forge-std%src%stdStorageSafe")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdStyle-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdStyleContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdStyleContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdStyle" [symbol("contract_lib%forge-std%src%StdStyle")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdUtils-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdUtilsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdUtilsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdUtils" [symbol("contract_lib%forge-std%src%StdUtils")]

endmodule

module S2KtestZModStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModStoreContract
    
    syntax S2KtestZModStoreContract ::= "S2KtestZModStore" [symbol("contract_test%Store")]

endmodule

module S2KtestZModStoreTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModStoreTestContract
    
    syntax S2KtestZModStoreTestContract ::= "S2KtestZModStoreTest" [symbol("contract_test%StoreTest")]
    
    syntax Bytes ::= S2KtestZModStoreTestContract "." S2KtestZModStoreTestMethod [function, symbol("method_test%StoreTest")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%StoreTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%StoreTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%StoreTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%StoreTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%StoreTest_S2Kfailed_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%StoreTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%StoreTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%StoreTest_S2KtargetContracts_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%StoreTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%StoreTest_S2KtargetSenders_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestAccesses" "(" ")" [symbol("method_test%StoreTest_S2KtestAccesses_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasLoadColdVM" "(" ")" [symbol("method_test%StoreTest_S2KtestGasLoadColdVM_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasLoadWarmUp" "(" ")" [symbol("method_test%StoreTest_S2KtestGasLoadWarmUp_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasLoadWarmVM" "(" ")" [symbol("method_test%StoreTest_S2KtestGasLoadWarmVM_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasStoreColdVM" "(" ")" [symbol("method_test%StoreTest_S2KtestGasStoreColdVM_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasStoreWarmUp" "(" ")" [symbol("method_test%StoreTest_S2KtestGasStoreWarmUp_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestGasStoreWarmVM" "(" ")" [symbol("method_test%StoreTest_S2KtestGasStoreWarmVM_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestLoadNonExistent" "(" ")" [symbol("method_test%StoreTest_S2KtestLoadNonExistent_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestStoreLoad" "(" ")" [symbol("method_test%StoreTest_S2KtestStoreLoad_")]
    
    syntax S2KtestZModStoreTestMethod ::= "S2KtestStoreLoadNonExistent" "(" ")" [symbol("method_test%StoreTest_S2KtestStoreLoadNonExistent_")]
    
    rule  ( S2KtestZModStoreTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestGasLoadColdVM ( ) => #abiCallData ( "testGasLoadColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestGasLoadWarmUp ( ) => #abiCallData ( "testGasLoadWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestGasLoadWarmVM ( ) => #abiCallData ( "testGasLoadWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestGasStoreColdVM ( ) => #abiCallData ( "testGasStoreColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestGasStoreWarmUp ( ) => #abiCallData ( "testGasStoreWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestGasStoreWarmVM ( ) => #abiCallData ( "testGasStoreWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestLoadNonExistent ( ) => #abiCallData ( "testLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModStoreTest . S2KtestStoreLoadNonExistent ( ) => #abiCallData ( "testStoreLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAccesses()" ) => 159648693 )
      
    
    rule  ( selector ( "testGasLoadColdVM()" ) => 3801282741 )
      
    
    rule  ( selector ( "testGasLoadWarmUp()" ) => 604011046 )
      
    
    rule  ( selector ( "testGasLoadWarmVM()" ) => 2607902342 )
      
    
    rule  ( selector ( "testGasStoreColdVM()" ) => 2309593716 )
      
    
    rule  ( selector ( "testGasStoreWarmUp()" ) => 1546465326 )
      
    
    rule  ( selector ( "testGasStoreWarmVM()" ) => 100073271 )
      
    
    rule  ( selector ( "testLoadNonExistent()" ) => 2275977243 )
      
    
    rule  ( selector ( "testStoreLoad()" ) => 1208516723 )
      
    
    rule  ( selector ( "testStoreLoadNonExistent()" ) => 3912017339 )
      

endmodule

module S2KtestZModSymbolicStorageTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSymbolicStorageTestContract
    
    syntax S2KtestZModSymbolicStorageTestContract ::= "S2KtestZModSymbolicStorageTest" [symbol("contract_test%SymbolicStorageTest")]
    
    syntax Bytes ::= S2KtestZModSymbolicStorageTestContract "." S2KtestZModSymbolicStorageTestMethod [function, symbol("method_test%SymbolicStorageTest")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%SymbolicStorageTest_S2Kfailed_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2Kkevm" "(" ")" [symbol("method_test%SymbolicStorageTest_S2Kkevm_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KtargetContracts_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%SymbolicStorageTest_S2KtargetSenders_")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtestEmptyInitialStorage" "(" Int ":" "uint256" ")" [symbol("method_test%SymbolicStorageTest_S2KtestEmptyInitialStorage_uint256")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage" "(" Int ":" "uint256" ")" [symbol("method_test%SymbolicStorageTest_S2KtestFailZUndSymbolicStorage_uint256")]
    
    syntax S2KtestZModSymbolicStorageTestMethod ::= "S2KtestFailZUndSymbolicStorage1" "(" Int ":" "uint256" ")" [symbol("method_test%SymbolicStorageTest_S2KtestFailZUndSymbolicStorage1_uint256")]
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtestEmptyInitialStorage ( V0_slot : uint256 ) => #abiCallData ( "testEmptyInitialStorage" , ( #uint256 ( V0_slot ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtestFailZUndSymbolicStorage ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage" , ( #uint256 ( V0_slot ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KtestZModSymbolicStorageTest . S2KtestFailZUndSymbolicStorage1 ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage1" , ( #uint256 ( V0_slot ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testEmptyInitialStorage(uint256)" ) => 2517793094 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage(uint256)" ) => 821477045 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage1(uint256)" ) => 2899744320 )
      

endmodule

module S2KtestZModSymbolicStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModSymbolicStoreContract
    
    syntax S2KtestZModSymbolicStoreContract ::= "S2KtestZModSymbolicStore" [symbol("contract_test%SymbolicStore")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModTestContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestContract ::= "S2KlibZModforgeZSubstdZModsrcZModTest" [symbol("contract_lib%forge-std%src%Test")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModTestContract "." S2KlibZModforgeZSubstdZModsrcZModTestMethod [function, symbol("method_lib%forge-std%src%Test")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KISZUndTEST_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KexcludeArtifacts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KexcludeContracts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KexcludeSenders_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_lib%forge-std%src%Test_S2Kfailed_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KtargetArtifactSelectors_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KtargetArtifacts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KtargetContracts_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KtargetSelectors_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_lib%forge-std%src%Test_S2KtargetSenders_")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KsrcZModTestNumber-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModTestNumberContract
    
    syntax S2KsrcZModTestNumberContract ::= "S2KsrcZModTestNumber" [symbol("contract_src%TestNumber")]
    
    syntax Bytes ::= S2KsrcZModTestNumberContract "." S2KsrcZModTestNumberMethod [function, symbol("method_src%TestNumber")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_src%TestNumber_S2KISZUndTEST_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_src%TestNumber_S2KexcludeArtifacts_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_src%TestNumber_S2KexcludeContracts_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_src%TestNumber_S2KexcludeSenders_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2Kfailed" "(" ")" [symbol("method_src%TestNumber_S2Kfailed_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2Kt" "(" Int ":" "uint256" ")" [symbol("method_src%TestNumber_S2Kt_uint256")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_src%TestNumber_S2KtargetArtifactSelectors_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_src%TestNumber_S2KtargetArtifacts_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_src%TestNumber_S2KtargetContracts_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_src%TestNumber_S2KtargetSelectors_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_src%TestNumber_S2KtargetSenders_")]
    
    syntax S2KsrcZModTestNumberMethod ::= "S2KtestNumber" "(" ")" [symbol("method_src%TestNumber_S2KtestNumber_")]
    
    rule  ( S2KsrcZModTestNumber . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2Kt ( V0_a : uint256 ) => #abiCallData ( "t" , ( #uint256 ( V0_a ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_a )
      
    
    rule  ( S2KsrcZModTestNumber . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModTestNumber . S2KtestNumber ( ) => #abiCallData ( "testNumber" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "t(uint256)" ) => 2950864753 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testNumber()" ) => 219771635 )
      

endmodule

module S2KtestZModToStringTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModToStringTestContract
    
    syntax S2KtestZModToStringTestContract ::= "S2KtestZModToStringTest" [symbol("contract_test%ToStringTest")]
    
    syntax Bytes ::= S2KtestZModToStringTestContract "." S2KtestZModToStringTestMethod [function, symbol("method_test%ToStringTest")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_test%ToStringTest_S2KISZUndTEST_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol("method_test%ToStringTest_S2KexcludeArtifacts_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol("method_test%ToStringTest_S2KexcludeContracts_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol("method_test%ToStringTest_S2KexcludeSenders_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_test%ToStringTest_S2Kfailed_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol("method_test%ToStringTest_S2KtargetArtifactSelectors_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol("method_test%ToStringTest_S2KtargetArtifacts_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtargetContracts" "(" ")" [symbol("method_test%ToStringTest_S2KtargetContracts_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol("method_test%ToStringTest_S2KtargetSelectors_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtargetSenders" "(" ")" [symbol("method_test%ToStringTest_S2KtargetSenders_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtestAddressToString" "(" ")" [symbol("method_test%ToStringTest_S2KtestAddressToString_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtestBoolToString" "(" ")" [symbol("method_test%ToStringTest_S2KtestBoolToString_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtestBytes32ToString" "(" ")" [symbol("method_test%ToStringTest_S2KtestBytes32ToString_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtestBytesToString" "(" ")" [symbol("method_test%ToStringTest_S2KtestBytesToString_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtestIntToString" "(" ")" [symbol("method_test%ToStringTest_S2KtestIntToString_")]
    
    syntax S2KtestZModToStringTestMethod ::= "S2KtestUint256ToString" "(" ")" [symbol("method_test%ToStringTest_S2KtestUint256ToString_")]
    
    rule  ( S2KtestZModToStringTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtestAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtestBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtestBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtestBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtestIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModToStringTest . S2KtestUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testAddressToString()" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString()" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString()" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString()" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString()" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString()" ) => 98980210 )
      

endmodule

module S2KsrcZModToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModTokenContract
    
    syntax S2KsrcZModTokenContract ::= "S2KsrcZModToken" [symbol("contract_src%Token")]
    
    syntax Bytes ::= S2KsrcZModTokenContract "." S2KsrcZModTokenMethod [function, symbol("method_src%Token")]
    
    syntax S2KsrcZModTokenMethod ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%Token_S2Ktransfer_address_uint256")]
    
    rule  ( S2KsrcZModToken . S2Ktransfer ( V0_dst : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , ( #address ( V0_dst ) , ( #uint256 ( V1_amount ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      

endmodule

module S2KtestZModBytesTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModBytesTypeTestContract
    
    syntax S2KtestZModBytesTypeTestContract ::= "S2KtestZModBytesTypeTest" [symbol("contract_test%BytesTypeTest")]
    
    syntax Bytes ::= S2KtestZModBytesTypeTestContract "." S2KtestZModBytesTypeTestMethod [function, symbol("method_test%BytesTypeTest")]
    
    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestFailZUndbytes32" "(" Int ":" "bytes32" ")" [symbol("method_test%BytesTypeTest_S2KtestFailZUndbytes32_bytes32")]
    
    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestFailZUndbytes4" "(" Int ":" "bytes4" ")" [symbol("method_test%BytesTypeTest_S2KtestFailZUndbytes4_bytes4")]
    
    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes32" "(" Int ":" "bytes32" ")" [symbol("method_test%BytesTypeTest_S2KtestZUndbytes32_bytes32")]
    
    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes32ZUndfail" "(" Int ":" "bytes32" ")" [symbol("method_test%BytesTypeTest_S2KtestZUndbytes32ZUndfail_bytes32")]
    
    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes4" "(" Int ":" "bytes4" ")" [symbol("method_test%BytesTypeTest_S2KtestZUndbytes4_bytes4")]
    
    syntax S2KtestZModBytesTypeTestMethod ::= "S2KtestZUndbytes4ZUndfail" "(" Int ":" "bytes4" ")" [symbol("method_test%BytesTypeTest_S2KtestZUndbytes4ZUndfail_bytes4")]
    
    rule  ( S2KtestZModBytesTypeTest . S2KtestFailZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "testFail_bytes32" , ( #bytes32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KtestZModBytesTypeTest . S2KtestFailZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "testFail_bytes4" , ( #bytes4 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes32 ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32" , ( #bytes32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes32ZUndfail ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32_fail" , ( #bytes32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_x )
      
    
    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes4 ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4" , ( #bytes4 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KtestZModBytesTypeTest . S2KtestZUndbytes4ZUndfail ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4_fail" , ( #bytes4 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( selector ( "testFail_bytes32(bytes32)" ) => 4289330289 )
      
    
    rule  ( selector ( "testFail_bytes4(bytes4)" ) => 3602852570 )
      
    
    rule  ( selector ( "test_bytes32(bytes32)" ) => 3436986189 )
      
    
    rule  ( selector ( "test_bytes32_fail(bytes32)" ) => 392713219 )
      
    
    rule  ( selector ( "test_bytes4(bytes4)" ) => 2814412853 )
      
    
    rule  ( selector ( "test_bytes4_fail(bytes4)" ) => 2510894010 )
      

endmodule

module S2KtestZModIntTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModIntTypeTestContract
    
    syntax S2KtestZModIntTypeTestContract ::= "S2KtestZModIntTypeTest" [symbol("contract_test%IntTypeTest")]
    
    syntax Bytes ::= S2KtestZModIntTypeTestContract "." S2KtestZModIntTypeTestMethod [function, symbol("method_test%IntTypeTest")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestFailZUndint128" "(" Int ":" "int128" ")" [symbol("method_test%IntTypeTest_S2KtestFailZUndint128_int128")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestFailZUndint256" "(" Int ":" "int256" ")" [symbol("method_test%IntTypeTest_S2KtestFailZUndint256_int256")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestFailZUndint64" "(" Int ":" "int64" ")" [symbol("method_test%IntTypeTest_S2KtestFailZUndint64_int64")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint128" "(" Int ":" "int128" ")" [symbol("method_test%IntTypeTest_S2KtestZUndint128_int128")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint128ZUndfail" "(" Int ":" "int128" ")" [symbol("method_test%IntTypeTest_S2KtestZUndint128ZUndfail_int128")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint256" "(" Int ":" "int256" ")" [symbol("method_test%IntTypeTest_S2KtestZUndint256_int256")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint256ZUndfail" "(" Int ":" "int256" ")" [symbol("method_test%IntTypeTest_S2KtestZUndint256ZUndfail_int256")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint64" "(" Int ":" "int64" ")" [symbol("method_test%IntTypeTest_S2KtestZUndint64_int64")]
    
    syntax S2KtestZModIntTypeTestMethod ::= "S2KtestZUndint64ZUndfail" "(" Int ":" "int64" ")" [symbol("method_test%IntTypeTest_S2KtestZUndint64ZUndfail_int64")]
    
    rule  ( S2KtestZModIntTypeTest . S2KtestFailZUndint128 ( V0_x : int128 ) => #abiCallData ( "testFail_int128" , ( #int128 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestFailZUndint256 ( V0_x : int256 ) => #abiCallData ( "testFail_int256" , ( #int256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestFailZUndint64 ( V0_x : int64 ) => #abiCallData ( "testFail_int64" , ( #int64 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint128 ( V0_x : int128 ) => #abiCallData ( "test_int128" , ( #int128 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint128ZUndfail ( V0_x : int128 ) => #abiCallData ( "test_int128_fail" , ( #int128 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 128 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint256 ( V0_x : int256 ) => #abiCallData ( "test_int256" , ( #int256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint256ZUndfail ( V0_x : int256 ) => #abiCallData ( "test_int256_fail" , ( #int256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint64 ( V0_x : int64 ) => #abiCallData ( "test_int64" , ( #int64 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( S2KtestZModIntTypeTest . S2KtestZUndint64ZUndfail ( V0_x : int64 ) => #abiCallData ( "test_int64_fail" , ( #int64 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 64 , V0_x )
      
    
    rule  ( selector ( "testFail_int128(int128)" ) => 1988540889 )
      
    
    rule  ( selector ( "testFail_int256(int256)" ) => 1185096419 )
      
    
    rule  ( selector ( "testFail_int64(int64)" ) => 1750678769 )
      
    
    rule  ( selector ( "test_int128(int128)" ) => 995880333 )
      
    
    rule  ( selector ( "test_int128_fail(int128)" ) => 1240751129 )
      
    
    rule  ( selector ( "test_int256(int256)" ) => 3818914766 )
      
    
    rule  ( selector ( "test_int256_fail(int256)" ) => 1877071906 )
      
    
    rule  ( selector ( "test_int64(int64)" ) => 1792301870 )
      
    
    rule  ( selector ( "test_int64_fail(int64)" ) => 2744099616 )
      

endmodule

module S2KtestZModStructTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModStructTypeTestContract
    
    syntax S2KtestZModStructTypeTestContract ::= "S2KtestZModStructTypeTest" [symbol("contract_test%StructTypeTest")]
    
    syntax Bytes ::= S2KtestZModStructTypeTestContract "." S2KtestZModStructTypeTestMethod [function, symbol("method_test%StructTypeTest")]
    
    syntax S2KtestZModStructTypeTestMethod ::= "S2KtestZUndvars" "(" Int ":" "uint8" "," Int ":" "uint32" "," Int ":" "bytes32" ")" [symbol("method_test%StructTypeTest_S2KtestZUndvars_uint8_uint32_bytes32")]
    
    rule  ( S2KtestZModStructTypeTest . S2KtestZUndvars ( V0_a : uint8 , V1_timestamp : uint32 , V2_b : bytes32 ) => #abiCallData ( "test_vars" , ( #tuple ( ( #uint8 ( V0_a ) , ( #uint32 ( V1_timestamp ) , ( #bytes32 ( V2_b ) , .TypedArgs ) ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeUInt ( 8 , V0_a )
       andBool ( #rangeUInt ( 32 , V1_timestamp )
       andBool ( #rangeBytes ( 32 , V2_b )
               )))
      
    
    rule  ( selector ( "test_vars((uint8,uint32,bytes32))" ) => 4078043520 )
      

endmodule

module S2KtestZModUintTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModUintTypeTestContract
    
    syntax S2KtestZModUintTypeTestContract ::= "S2KtestZModUintTypeTest" [symbol("contract_test%UintTypeTest")]
    
    syntax Bytes ::= S2KtestZModUintTypeTestContract "." S2KtestZModUintTypeTestMethod [function, symbol("method_test%UintTypeTest")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint104" "(" Int ":" "uint104" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint104_uint104")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint112" "(" Int ":" "uint112" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint112_uint112")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint120" "(" Int ":" "uint120" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint120_uint120")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint128" "(" Int ":" "uint128" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint128_uint128")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint136" "(" Int ":" "uint136" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint136_uint136")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint144" "(" Int ":" "uint144" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint144_uint144")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint152" "(" Int ":" "uint152" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint152_uint152")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint16" "(" Int ":" "uint16" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint16_uint16")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint160" "(" Int ":" "uint160" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint160_uint160")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint168" "(" Int ":" "uint168" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint168_uint168")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint176" "(" Int ":" "uint176" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint176_uint176")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint184" "(" Int ":" "uint184" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint184_uint184")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint192" "(" Int ":" "uint192" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint192_uint192")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint200" "(" Int ":" "uint200" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint200_uint200")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint208" "(" Int ":" "uint208" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint208_uint208")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint216" "(" Int ":" "uint216" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint216_uint216")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint224" "(" Int ":" "uint224" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint224_uint224")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint232" "(" Int ":" "uint232" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint232_uint232")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint24" "(" Int ":" "uint24" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint24_uint24")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint240" "(" Int ":" "uint240" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint240_uint240")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint248" "(" Int ":" "uint248" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint248_uint248")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint256" "(" Int ":" "uint256" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint256_uint256")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint32" "(" Int ":" "uint32" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint32_uint32")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint40" "(" Int ":" "uint40" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint40_uint40")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint48" "(" Int ":" "uint48" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint48_uint48")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint56" "(" Int ":" "uint56" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint56_uint56")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint64" "(" Int ":" "uint64" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint64_uint64")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint72" "(" Int ":" "uint72" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint72_uint72")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint8" "(" Int ":" "uint8" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint8_uint8")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint80" "(" Int ":" "uint80" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint80_uint80")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint88" "(" Int ":" "uint88" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint88_uint88")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestFailZUnduint96" "(" Int ":" "uint96" ")" [symbol("method_test%UintTypeTest_S2KtestFailZUnduint96_uint96")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint104" "(" Int ":" "uint104" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint104_uint104")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint104ZUndfail" "(" Int ":" "uint104" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint104ZUndfail_uint104")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint112" "(" Int ":" "uint112" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint112_uint112")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint112ZUndfail" "(" Int ":" "uint112" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint112ZUndfail_uint112")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint120" "(" Int ":" "uint120" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint120_uint120")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint120ZUndfail" "(" Int ":" "uint120" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint120ZUndfail_uint120")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint128" "(" Int ":" "uint128" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint128_uint128")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint128ZUndfail" "(" Int ":" "uint128" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint128ZUndfail_uint128")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint136" "(" Int ":" "uint136" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint136_uint136")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint136ZUndfail" "(" Int ":" "uint136" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint136ZUndfail_uint136")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint144" "(" Int ":" "uint144" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint144_uint144")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint144ZUndfail" "(" Int ":" "uint144" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint144ZUndfail_uint144")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint152" "(" Int ":" "uint152" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint152_uint152")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint152ZUndfail" "(" Int ":" "uint152" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint152ZUndfail_uint152")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint16" "(" Int ":" "uint16" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint16_uint16")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint160" "(" Int ":" "uint160" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint160_uint160")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint160ZUndfail" "(" Int ":" "uint160" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint160ZUndfail_uint160")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint168" "(" Int ":" "uint168" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint168_uint168")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint168ZUndfail" "(" Int ":" "uint168" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint168ZUndfail_uint168")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint16ZUndfail" "(" Int ":" "uint16" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint16ZUndfail_uint16")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint176" "(" Int ":" "uint176" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint176_uint176")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint176ZUndfail" "(" Int ":" "uint176" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint176ZUndfail_uint176")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint184" "(" Int ":" "uint184" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint184_uint184")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint184ZUndfail" "(" Int ":" "uint184" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint184ZUndfail_uint184")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint192" "(" Int ":" "uint192" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint192_uint192")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint192ZUndfail" "(" Int ":" "uint192" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint192ZUndfail_uint192")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint200" "(" Int ":" "uint200" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint200_uint200")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint200ZUndfail" "(" Int ":" "uint200" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint200ZUndfail_uint200")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint208" "(" Int ":" "uint208" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint208_uint208")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint208ZUndfail" "(" Int ":" "uint208" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint208ZUndfail_uint208")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint216" "(" Int ":" "uint216" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint216_uint216")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint216ZUndfail" "(" Int ":" "uint216" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint216ZUndfail_uint216")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint224" "(" Int ":" "uint224" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint224_uint224")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint224ZUndfail" "(" Int ":" "uint224" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint224ZUndfail_uint224")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint232" "(" Int ":" "uint232" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint232_uint232")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint232ZUndfail" "(" Int ":" "uint232" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint232ZUndfail_uint232")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint24" "(" Int ":" "uint24" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint24_uint24")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint240" "(" Int ":" "uint240" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint240_uint240")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint240ZUndfail" "(" Int ":" "uint240" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint240ZUndfail_uint240")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint248" "(" Int ":" "uint248" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint248_uint248")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint248ZUndfail" "(" Int ":" "uint248" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint248ZUndfail_uint248")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint24ZUndfail" "(" Int ":" "uint24" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint24ZUndfail_uint24")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint256" "(" Int ":" "uint256" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint256_uint256")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint256ZUndfail" "(" Int ":" "uint256" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint256ZUndfail_uint256")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint32" "(" Int ":" "uint32" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint32_uint32")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint32ZUndfail" "(" Int ":" "uint32" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint32ZUndfail_uint32")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint40" "(" Int ":" "uint40" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint40_uint40")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint40ZUndfail" "(" Int ":" "uint40" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint40ZUndfail_uint40")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint48" "(" Int ":" "uint48" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint48_uint48")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint48ZUndfail" "(" Int ":" "uint48" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint48ZUndfail_uint48")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint56" "(" Int ":" "uint56" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint56_uint56")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint56ZUndfail" "(" Int ":" "uint56" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint56ZUndfail_uint56")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint64" "(" Int ":" "uint64" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint64_uint64")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint64ZUndfail" "(" Int ":" "uint64" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint64ZUndfail_uint64")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint72" "(" Int ":" "uint72" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint72_uint72")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint72ZUndfail" "(" Int ":" "uint72" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint72ZUndfail_uint72")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint8" "(" Int ":" "uint8" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint8_uint8")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint80" "(" Int ":" "uint80" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint80_uint80")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint80ZUndfail" "(" Int ":" "uint80" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint80ZUndfail_uint80")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint88" "(" Int ":" "uint88" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint88_uint88")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint88ZUndfail" "(" Int ":" "uint88" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint88ZUndfail_uint88")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint8ZUndfail" "(" Int ":" "uint8" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint8ZUndfail_uint8")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint96" "(" Int ":" "uint96" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint96_uint96")]
    
    syntax S2KtestZModUintTypeTestMethod ::= "S2KtestZUnduint96ZUndfail" "(" Int ":" "uint96" ")" [symbol("method_test%UintTypeTest_S2KtestZUnduint96ZUndfail_uint96")]
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "testFail_uint104" , ( #uint104 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "testFail_uint112" , ( #uint112 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "testFail_uint120" , ( #uint120 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "testFail_uint128" , ( #uint128 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "testFail_uint136" , ( #uint136 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "testFail_uint144" , ( #uint144 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "testFail_uint152" , ( #uint152 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "testFail_uint16" , ( #uint16 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "testFail_uint160" , ( #uint160 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "testFail_uint168" , ( #uint168 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "testFail_uint176" , ( #uint176 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "testFail_uint184" , ( #uint184 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "testFail_uint192" , ( #uint192 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "testFail_uint200" , ( #uint200 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "testFail_uint208" , ( #uint208 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "testFail_uint216" , ( #uint216 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "testFail_uint224" , ( #uint224 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "testFail_uint232" , ( #uint232 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "testFail_uint24" , ( #uint24 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "testFail_uint240" , ( #uint240 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "testFail_uint248" , ( #uint248 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "testFail_uint256" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "testFail_uint32" , ( #uint32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "testFail_uint40" , ( #uint40 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "testFail_uint48" , ( #uint48 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "testFail_uint56" , ( #uint56 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "testFail_uint64" , ( #uint64 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "testFail_uint72" , ( #uint72 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "testFail_uint8" , ( #uint8 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "testFail_uint80" , ( #uint80 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "testFail_uint88" , ( #uint88 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestFailZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "testFail_uint96" , ( #uint96 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint104 ( V0_x : uint104 ) => #abiCallData ( "test_uint104" , ( #uint104 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint104ZUndfail ( V0_x : uint104 ) => #abiCallData ( "test_uint104_fail" , ( #uint104 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint112 ( V0_x : uint112 ) => #abiCallData ( "test_uint112" , ( #uint112 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint112ZUndfail ( V0_x : uint112 ) => #abiCallData ( "test_uint112_fail" , ( #uint112 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint120 ( V0_x : uint120 ) => #abiCallData ( "test_uint120" , ( #uint120 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint120ZUndfail ( V0_x : uint120 ) => #abiCallData ( "test_uint120_fail" , ( #uint120 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint128 ( V0_x : uint128 ) => #abiCallData ( "test_uint128" , ( #uint128 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint128ZUndfail ( V0_x : uint128 ) => #abiCallData ( "test_uint128_fail" , ( #uint128 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint136 ( V0_x : uint136 ) => #abiCallData ( "test_uint136" , ( #uint136 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint136ZUndfail ( V0_x : uint136 ) => #abiCallData ( "test_uint136_fail" , ( #uint136 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint144 ( V0_x : uint144 ) => #abiCallData ( "test_uint144" , ( #uint144 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint144ZUndfail ( V0_x : uint144 ) => #abiCallData ( "test_uint144_fail" , ( #uint144 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint152 ( V0_x : uint152 ) => #abiCallData ( "test_uint152" , ( #uint152 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint152ZUndfail ( V0_x : uint152 ) => #abiCallData ( "test_uint152_fail" , ( #uint152 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint16 ( V0_x : uint16 ) => #abiCallData ( "test_uint16" , ( #uint16 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint160 ( V0_x : uint160 ) => #abiCallData ( "test_uint160" , ( #uint160 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint160ZUndfail ( V0_x : uint160 ) => #abiCallData ( "test_uint160_fail" , ( #uint160 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint168 ( V0_x : uint168 ) => #abiCallData ( "test_uint168" , ( #uint168 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint168ZUndfail ( V0_x : uint168 ) => #abiCallData ( "test_uint168_fail" , ( #uint168 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint16ZUndfail ( V0_x : uint16 ) => #abiCallData ( "test_uint16_fail" , ( #uint16 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint176 ( V0_x : uint176 ) => #abiCallData ( "test_uint176" , ( #uint176 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint176ZUndfail ( V0_x : uint176 ) => #abiCallData ( "test_uint176_fail" , ( #uint176 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint184 ( V0_x : uint184 ) => #abiCallData ( "test_uint184" , ( #uint184 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint184ZUndfail ( V0_x : uint184 ) => #abiCallData ( "test_uint184_fail" , ( #uint184 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint192 ( V0_x : uint192 ) => #abiCallData ( "test_uint192" , ( #uint192 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint192ZUndfail ( V0_x : uint192 ) => #abiCallData ( "test_uint192_fail" , ( #uint192 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint200 ( V0_x : uint200 ) => #abiCallData ( "test_uint200" , ( #uint200 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint200ZUndfail ( V0_x : uint200 ) => #abiCallData ( "test_uint200_fail" , ( #uint200 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint208 ( V0_x : uint208 ) => #abiCallData ( "test_uint208" , ( #uint208 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint208ZUndfail ( V0_x : uint208 ) => #abiCallData ( "test_uint208_fail" , ( #uint208 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint216 ( V0_x : uint216 ) => #abiCallData ( "test_uint216" , ( #uint216 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint216ZUndfail ( V0_x : uint216 ) => #abiCallData ( "test_uint216_fail" , ( #uint216 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint224 ( V0_x : uint224 ) => #abiCallData ( "test_uint224" , ( #uint224 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint224ZUndfail ( V0_x : uint224 ) => #abiCallData ( "test_uint224_fail" , ( #uint224 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint232 ( V0_x : uint232 ) => #abiCallData ( "test_uint232" , ( #uint232 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint232ZUndfail ( V0_x : uint232 ) => #abiCallData ( "test_uint232_fail" , ( #uint232 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint24 ( V0_x : uint24 ) => #abiCallData ( "test_uint24" , ( #uint24 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint240 ( V0_x : uint240 ) => #abiCallData ( "test_uint240" , ( #uint240 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint240ZUndfail ( V0_x : uint240 ) => #abiCallData ( "test_uint240_fail" , ( #uint240 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint248 ( V0_x : uint248 ) => #abiCallData ( "test_uint248" , ( #uint248 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint248ZUndfail ( V0_x : uint248 ) => #abiCallData ( "test_uint248_fail" , ( #uint248 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint24ZUndfail ( V0_x : uint24 ) => #abiCallData ( "test_uint24_fail" , ( #uint24 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint256 ( V0_x : uint256 ) => #abiCallData ( "test_uint256" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint256ZUndfail ( V0_x : uint256 ) => #abiCallData ( "test_uint256_fail" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint32 ( V0_x : uint32 ) => #abiCallData ( "test_uint32" , ( #uint32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint32ZUndfail ( V0_x : uint32 ) => #abiCallData ( "test_uint32_fail" , ( #uint32 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint40 ( V0_x : uint40 ) => #abiCallData ( "test_uint40" , ( #uint40 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint40ZUndfail ( V0_x : uint40 ) => #abiCallData ( "test_uint40_fail" , ( #uint40 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint48 ( V0_x : uint48 ) => #abiCallData ( "test_uint48" , ( #uint48 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint48ZUndfail ( V0_x : uint48 ) => #abiCallData ( "test_uint48_fail" , ( #uint48 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint56 ( V0_x : uint56 ) => #abiCallData ( "test_uint56" , ( #uint56 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint56ZUndfail ( V0_x : uint56 ) => #abiCallData ( "test_uint56_fail" , ( #uint56 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint64 ( V0_x : uint64 ) => #abiCallData ( "test_uint64" , ( #uint64 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint64ZUndfail ( V0_x : uint64 ) => #abiCallData ( "test_uint64_fail" , ( #uint64 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint72 ( V0_x : uint72 ) => #abiCallData ( "test_uint72" , ( #uint72 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint72ZUndfail ( V0_x : uint72 ) => #abiCallData ( "test_uint72_fail" , ( #uint72 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint8 ( V0_x : uint8 ) => #abiCallData ( "test_uint8" , ( #uint8 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint80 ( V0_x : uint80 ) => #abiCallData ( "test_uint80" , ( #uint80 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint80ZUndfail ( V0_x : uint80 ) => #abiCallData ( "test_uint80_fail" , ( #uint80 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint88 ( V0_x : uint88 ) => #abiCallData ( "test_uint88" , ( #uint88 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint88ZUndfail ( V0_x : uint88 ) => #abiCallData ( "test_uint88_fail" , ( #uint88 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint8ZUndfail ( V0_x : uint8 ) => #abiCallData ( "test_uint8_fail" , ( #uint8 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint96 ( V0_x : uint96 ) => #abiCallData ( "test_uint96" , ( #uint96 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KtestZModUintTypeTest . S2KtestZUnduint96ZUndfail ( V0_x : uint96 ) => #abiCallData ( "test_uint96_fail" , ( #uint96 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( selector ( "testFail_uint104(uint104)" ) => 1709154444 )
      
    
    rule  ( selector ( "testFail_uint112(uint112)" ) => 3541489285 )
      
    
    rule  ( selector ( "testFail_uint120(uint120)" ) => 3839169067 )
      
    
    rule  ( selector ( "testFail_uint128(uint128)" ) => 791678561 )
      
    
    rule  ( selector ( "testFail_uint136(uint136)" ) => 3952257705 )
      
    
    rule  ( selector ( "testFail_uint144(uint144)" ) => 2439595565 )
      
    
    rule  ( selector ( "testFail_uint152(uint152)" ) => 1866291148 )
      
    
    rule  ( selector ( "testFail_uint16(uint16)" ) => 4076431644 )
      
    
    rule  ( selector ( "testFail_uint160(uint160)" ) => 3214193107 )
      
    
    rule  ( selector ( "testFail_uint168(uint168)" ) => 2636444862 )
      
    
    rule  ( selector ( "testFail_uint176(uint176)" ) => 1828125968 )
      
    
    rule  ( selector ( "testFail_uint184(uint184)" ) => 4099305155 )
      
    
    rule  ( selector ( "testFail_uint192(uint192)" ) => 2858210891 )
      
    
    rule  ( selector ( "testFail_uint200(uint200)" ) => 1080270217 )
      
    
    rule  ( selector ( "testFail_uint208(uint208)" ) => 1831022189 )
      
    
    rule  ( selector ( "testFail_uint216(uint216)" ) => 2125101602 )
      
    
    rule  ( selector ( "testFail_uint224(uint224)" ) => 420776541 )
      
    
    rule  ( selector ( "testFail_uint232(uint232)" ) => 3163478438 )
      
    
    rule  ( selector ( "testFail_uint24(uint24)" ) => 639153936 )
      
    
    rule  ( selector ( "testFail_uint240(uint240)" ) => 3089966003 )
      
    
    rule  ( selector ( "testFail_uint248(uint248)" ) => 3070004620 )
      
    
    rule  ( selector ( "testFail_uint256(uint256)" ) => 3436494846 )
      
    
    rule  ( selector ( "testFail_uint32(uint32)" ) => 3218360567 )
      
    
    rule  ( selector ( "testFail_uint40(uint40)" ) => 347856329 )
      
    
    rule  ( selector ( "testFail_uint48(uint48)" ) => 4178735009 )
      
    
    rule  ( selector ( "testFail_uint56(uint56)" ) => 979020984 )
      
    
    rule  ( selector ( "testFail_uint64(uint64)" ) => 819975489 )
      
    
    rule  ( selector ( "testFail_uint72(uint72)" ) => 2059244458 )
      
    
    rule  ( selector ( "testFail_uint8(uint8)" ) => 3679593874 )
      
    
    rule  ( selector ( "testFail_uint80(uint80)" ) => 4180733980 )
      
    
    rule  ( selector ( "testFail_uint88(uint88)" ) => 42555031 )
      
    
    rule  ( selector ( "testFail_uint96(uint96)" ) => 2962957343 )
      
    
    rule  ( selector ( "test_uint104(uint104)" ) => 2030507202 )
      
    
    rule  ( selector ( "test_uint104_fail(uint104)" ) => 3289769429 )
      
    
    rule  ( selector ( "test_uint112(uint112)" ) => 1247465894 )
      
    
    rule  ( selector ( "test_uint112_fail(uint112)" ) => 198559186 )
      
    
    rule  ( selector ( "test_uint120(uint120)" ) => 4013273041 )
      
    
    rule  ( selector ( "test_uint120_fail(uint120)" ) => 4156608892 )
      
    
    rule  ( selector ( "test_uint128(uint128)" ) => 784802761 )
      
    
    rule  ( selector ( "test_uint128_fail(uint128)" ) => 3283002391 )
      
    
    rule  ( selector ( "test_uint136(uint136)" ) => 3590751506 )
      
    
    rule  ( selector ( "test_uint136_fail(uint136)" ) => 1740049059 )
      
    
    rule  ( selector ( "test_uint144(uint144)" ) => 1224379367 )
      
    
    rule  ( selector ( "test_uint144_fail(uint144)" ) => 3911233113 )
      
    
    rule  ( selector ( "test_uint152(uint152)" ) => 3210764837 )
      
    
    rule  ( selector ( "test_uint152_fail(uint152)" ) => 2472528383 )
      
    
    rule  ( selector ( "test_uint16(uint16)" ) => 1262288561 )
      
    
    rule  ( selector ( "test_uint160(uint160)" ) => 2446641645 )
      
    
    rule  ( selector ( "test_uint160_fail(uint160)" ) => 1289572651 )
      
    
    rule  ( selector ( "test_uint168(uint168)" ) => 2789196255 )
      
    
    rule  ( selector ( "test_uint168_fail(uint168)" ) => 413418206 )
      
    
    rule  ( selector ( "test_uint16_fail(uint16)" ) => 2736127289 )
      
    
    rule  ( selector ( "test_uint176(uint176)" ) => 3119759714 )
      
    
    rule  ( selector ( "test_uint176_fail(uint176)" ) => 2926152828 )
      
    
    rule  ( selector ( "test_uint184(uint184)" ) => 2419331356 )
      
    
    rule  ( selector ( "test_uint184_fail(uint184)" ) => 809918532 )
      
    
    rule  ( selector ( "test_uint192(uint192)" ) => 126849335 )
      
    
    rule  ( selector ( "test_uint192_fail(uint192)" ) => 965859284 )
      
    
    rule  ( selector ( "test_uint200(uint200)" ) => 342308100 )
      
    
    rule  ( selector ( "test_uint200_fail(uint200)" ) => 3554205475 )
      
    
    rule  ( selector ( "test_uint208(uint208)" ) => 664969356 )
      
    
    rule  ( selector ( "test_uint208_fail(uint208)" ) => 515244431 )
      
    
    rule  ( selector ( "test_uint216(uint216)" ) => 2735221135 )
      
    
    rule  ( selector ( "test_uint216_fail(uint216)" ) => 1244132421 )
      
    
    rule  ( selector ( "test_uint224(uint224)" ) => 2791725032 )
      
    
    rule  ( selector ( "test_uint224_fail(uint224)" ) => 3535210075 )
      
    
    rule  ( selector ( "test_uint232(uint232)" ) => 2781872781 )
      
    
    rule  ( selector ( "test_uint232_fail(uint232)" ) => 3352181217 )
      
    
    rule  ( selector ( "test_uint24(uint24)" ) => 2865563805 )
      
    
    rule  ( selector ( "test_uint240(uint240)" ) => 3274361055 )
      
    
    rule  ( selector ( "test_uint240_fail(uint240)" ) => 4046179916 )
      
    
    rule  ( selector ( "test_uint248(uint248)" ) => 578604507 )
      
    
    rule  ( selector ( "test_uint248_fail(uint248)" ) => 3580188072 )
      
    
    rule  ( selector ( "test_uint24_fail(uint24)" ) => 2328572638 )
      
    
    rule  ( selector ( "test_uint256(uint256)" ) => 851358597 )
      
    
    rule  ( selector ( "test_uint256_fail(uint256)" ) => 1895666222 )
      
    
    rule  ( selector ( "test_uint32(uint32)" ) => 982223766 )
      
    
    rule  ( selector ( "test_uint32_fail(uint32)" ) => 768917897 )
      
    
    rule  ( selector ( "test_uint40(uint40)" ) => 1298765870 )
      
    
    rule  ( selector ( "test_uint40_fail(uint40)" ) => 1685882915 )
      
    
    rule  ( selector ( "test_uint48(uint48)" ) => 454435065 )
      
    
    rule  ( selector ( "test_uint48_fail(uint48)" ) => 491533732 )
      
    
    rule  ( selector ( "test_uint56(uint56)" ) => 58659965 )
      
    
    rule  ( selector ( "test_uint56_fail(uint56)" ) => 3185974238 )
      
    
    rule  ( selector ( "test_uint64(uint64)" ) => 2511119799 )
      
    
    rule  ( selector ( "test_uint64_fail(uint64)" ) => 2000886247 )
      
    
    rule  ( selector ( "test_uint72(uint72)" ) => 3694811120 )
      
    
    rule  ( selector ( "test_uint72_fail(uint72)" ) => 875540037 )
      
    
    rule  ( selector ( "test_uint8(uint8)" ) => 1704021016 )
      
    
    rule  ( selector ( "test_uint80(uint80)" ) => 3841083967 )
      
    
    rule  ( selector ( "test_uint80_fail(uint80)" ) => 3626141300 )
      
    
    rule  ( selector ( "test_uint88(uint88)" ) => 100068129 )
      
    
    rule  ( selector ( "test_uint88_fail(uint88)" ) => 318744457 )
      
    
    rule  ( selector ( "test_uint8_fail(uint8)" ) => 2865005996 )
      
    
    rule  ( selector ( "test_uint96(uint96)" ) => 1315861753 )
      
    
    rule  ( selector ( "test_uint96_fail(uint96)" ) => 1635628195 )
      

endmodule

module S2KsrcZModcseZModAddConst-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModAddConstContract
    
    syntax S2KsrcZModcseZModAddConstContract ::= "S2KsrcZModcseZModAddConst" [symbol("contract_src%cse%AddConst")]
    
    syntax Bytes ::= S2KsrcZModcseZModAddConstContract "." S2KsrcZModcseZModAddConstMethod [function, symbol("method_src%cse%AddConst")]
    
    syntax S2KsrcZModcseZModAddConstMethod ::= "S2KapplyOp" "(" Int ":" "uint256" ")" [symbol("method_src%cse%AddConst_S2KapplyOp_uint256")]
    
    syntax S2KsrcZModcseZModAddConstMethod ::= "S2KsetConst" "(" Int ":" "uint256" ")" [symbol("method_src%cse%AddConst_S2KsetConst_uint256")]
    
    rule  ( S2KsrcZModcseZModAddConst . S2KapplyOp ( V0_x : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KsrcZModcseZModAddConst . S2KsetConst ( V0_x : uint256 ) => #abiCallData ( "setConst" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "applyOp(uint256)" ) => 1772879777 )
      
    
    rule  ( selector ( "setConst(uint256)" ) => 3910782851 )
      

endmodule

module S2KsrcZModcseZModIdentity-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModIdentityContract
    
    syntax S2KsrcZModcseZModIdentityContract ::= "S2KsrcZModcseZModIdentity" [symbol("contract_src%cse%Identity")]
    
    syntax Bytes ::= S2KsrcZModcseZModIdentityContract "." S2KsrcZModcseZModIdentityMethod [function, symbol("method_src%cse%Identity")]
    
    syntax S2KsrcZModcseZModIdentityMethod ::= "S2KapplyOp" "(" Int ":" "uint256" ")" [symbol("method_src%cse%Identity_S2KapplyOp_uint256")]
    
    syntax S2KsrcZModcseZModIdentityMethod ::= "S2Kidentity" "(" Int ":" "uint256" ")" [symbol("method_src%cse%Identity_S2Kidentity_uint256")]
    
    rule  ( S2KsrcZModcseZModIdentity . S2KapplyOp ( V0_x : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KsrcZModcseZModIdentity . S2Kidentity ( V0_x : uint256 ) => #abiCallData ( "identity" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "applyOp(uint256)" ) => 1772879777 )
      
    
    rule  ( selector ( "identity(uint256)" ) => 2889346747 )
      

endmodule

module S2KsrcZModcseZModIterate-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModIterateContract
    
    syntax S2KsrcZModcseZModIterateContract ::= "S2KsrcZModcseZModIterate" [symbol("contract_src%cse%Iterate")]
    
    syntax Bytes ::= S2KsrcZModcseZModIterateContract "." S2KsrcZModcseZModIterateMethod [function, symbol("method_src%cse%Iterate")]
    
    syntax S2KsrcZModcseZModIterateMethod ::= "S2KapplyOp" "(" Int ":" "uint256" ")" [symbol("method_src%cse%Iterate_S2KapplyOp_uint256")]
    
    rule  ( S2KsrcZModcseZModIterate . S2KapplyOp ( V0_x : uint256 ) => #abiCallData ( "applyOp" , ( #uint256 ( V0_x ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( selector ( "applyOp(uint256)" ) => 1772879777 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModVm-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModVmContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmContract ::= "S2KlibZModforgeZSubstdZModsrcZModVm" [symbol("contract_lib%forge-std%src%Vm")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModVmContract "." S2KlibZModforgeZSubstdZModsrcZModVmMethod [function, symbol("method_lib%forge-std%src%Vm")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2Kaccesses_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KactiveFork" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KactiveFork_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kaddr_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KallowCheatcodes" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KallowCheatcodes_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2Kassume_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2Kbreakpoint_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2Kbreakpoint_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2Kbroadcast_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2Kbroadcast_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kbroadcast_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KchainId" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KchainId_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KclearMockedCalls" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KclearMockedCalls_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KcloseFile_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kcoinbase" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2Kcoinbase_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateDir_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateFork_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateFork_string_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateFork_string_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateSelectFork_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateSelectFork_string_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KcreateSelectFork_string_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kdeal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kdeal_address_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol("method_lib%forge-std%src%Vm_S2KderiveKey_string_string_uint32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol("method_lib%forge-std%src%Vm_S2KderiveKey_string_uint32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kdifficulty" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kdifficulty_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvAddress_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvAddress_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvBool_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvBool_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvBytes_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvBytes_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvBytes32_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvBytes32_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvInt_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvInt_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_bool_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_bytes32_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_int256_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_string_uint256_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvOr_string_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvString_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvString_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvUint_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KenvUint_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ketch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2Ketch_address_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCall_address_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCall_address_bytes_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_bytes_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_uint64_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCall_address_uint256_uint64_bytes_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectEmit_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectEmit_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectEmit_bool_bool_bool_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectEmit_bool_bool_bool_bool_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectRevert_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectRevert_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" Int ":" "bytes4" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectRevert_bytes4")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectSafeMemory" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectSafeMemory_uint64_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectSafeMemoryCall" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KexpectSafeMemoryCall_uint64_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kfee" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kfee_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kffi" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2Kffi_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KfsMetadata_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KgetCode_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KgetDeployedCode_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KgetLabel_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KgetNonce_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KgetRecordedLogs_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisPersistent" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KisPersistent_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2Klabel_address_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2Kload_address_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KmakePersistent_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KmakePersistent_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KmakePersistent_address_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KmakePersistent_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KmockCall_address_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KmockCall_address_uint256_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KmockCallRevert_address_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KmockCallRevert_address_uint256_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseAddress_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseBool_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseBytes_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseBytes32_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseInt_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJson_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJson_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonAddress_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonAddressArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonBool_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonBoolArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonBytes_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonBytes32_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonBytes32Array_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonBytesArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonInt_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonIntArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonString_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonStringArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonUint_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseJsonUintArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KparseUint_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KpauseGasMetering" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KpauseGasMetering_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprank" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2Kprank_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2Kprank_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprevrandao" "(" Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2Kprevrandao_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KprojectRoot" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KprojectRoot_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadCallers" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadCallers_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadDir_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadDir_string_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadDir_string_uint64_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadFile_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadFileBinary_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadLine_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KreadLink_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Krecord" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2Krecord_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrecordLogs" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KrecordLogs_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KrememberKey_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KremoveDir_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KremoveFile_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KresetNonce" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KresetNonce_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KresumeGasMetering" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KresumeGasMetering_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevertTo" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KrevertTo_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevokePersistent" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KrevokePersistent_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevokePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KrevokePersistent_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kroll" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kroll_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KrollFork_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KrollFork_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KrollFork_uint256_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KrollFork_uint256_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KrpcUrl_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KrpcUrlStructs_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrls" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KrpcUrls_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KselectFork" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KselectFork_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeAddress_string_string_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeAddress_string_string_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeBool_string_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeBool_string_string_bool_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeBytes_string_string_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeBytes_string_string_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeBytes32_string_string_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeBytes32_string_string_bytes32_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeInt_string_string_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeInt_string_string_int256_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeString_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeString_string_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeUint_string_string_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KserializeUint_string_string_uint256_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KsetEnv_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KsetNonce_address_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetNonceUnsafe" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%Vm_S2KsetNonceUnsafe_address_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2Ksign_uint256_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kskip" "(" Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2Kskip_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksnapshot" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2Ksnapshot_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KstartBroadcast_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KstartBroadcast_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KstartBroadcast_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartPrank" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KstartPrank_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KstartPrank_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopBroadcast" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KstopBroadcast_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopPrank" "(" ")" [symbol("method_lib%forge-std%src%Vm_S2KstopPrank_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kstore" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2Kstore_address_bytes32_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%Vm_S2KtoString_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol("method_lib%forge-std%src%Vm_S2KtoString_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KtoString_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2KtoString_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol("method_lib%forge-std%src%Vm_S2KtoString_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KtoString_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ktransact" "(" Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2Ktransact_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ktransact" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%Vm_S2Ktransact_uint256_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtxGasPrice" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2KtxGasPrice_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kwarp" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%Vm_S2Kwarp_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KwriteFile_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%Vm_S2KwriteFileBinary_string_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KwriteJson_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KwriteJson_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%Vm_S2KwriteLine_string_string")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , ( #address ( V0_target ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_target )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KactiveFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KallowCheatcodes ( V0_account : address ) => #abiCallData ( "allowCheatcodes" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , ( #bool ( V0_condition ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_condition )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , ( #string ( V0_char ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , ( #string ( V0_char ) , ( #bool ( V1_value ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , ( #address ( V0_signer ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KchainId ( V0_newChainId : uint256 ) => #abiCallData ( "chainId" , ( #uint256 ( V0_newChainId ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KclearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kcoinbase ( V0_newCoinbase : address ) => #abiCallData ( "coinbase" , ( #address ( V0_newCoinbase ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_newCoinbase )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , ( #string ( V0_path ) , ( #bool ( V1_recursive ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string ) => #abiCallData ( "createFork" , ( #string ( V0_urlOrAlias ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createFork" , ( #string ( V0_urlOrAlias ) , ( #bytes32 ( V1_txHash ) , .TypedArgs ) ) ) )
       ensures #rangeBytes ( 32 , V1_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createFork" , ( #string ( V0_urlOrAlias ) , ( #uint256 ( V1_blockNumber ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string ) => #abiCallData ( "createSelectFork" , ( #string ( V0_urlOrAlias ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createSelectFork" , ( #string ( V0_urlOrAlias ) , ( #bytes32 ( V1_txHash ) , .TypedArgs ) ) ) )
       ensures #rangeBytes ( 32 , V1_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createSelectFork" , ( #string ( V0_urlOrAlias ) , ( #uint256 ( V1_blockNumber ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kdeal ( V0_account : address , V1_newBalance : uint256 ) => #abiCallData ( "deal" , ( #address ( V0_account ) , ( #uint256 ( V1_newBalance ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 256 , V1_newBalance )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , ( #string ( V0_mnemonic ) , ( #string ( V1_derivationPath ) , ( #uint32 ( V2_index ) , .TypedArgs ) ) ) ) )
       ensures #rangeUInt ( 32 , V2_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , ( #string ( V0_mnemonic ) , ( #uint32 ( V1_index ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 32 , V1_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kdifficulty ( V0_newDifficulty : uint256 ) => #abiCallData ( "difficulty" , ( #uint256 ( V0_newDifficulty ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newDifficulty )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #address ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeAddress ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #bool ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #bytes ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_defaultValue ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #bytes32 ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #int256 ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_defaultValue ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : address , V2_defaultValue_1 : address ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #address ( V2_defaultValue_0 ) , 2 , ( #address ( V2_defaultValue_0 ) , ( #address ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V2_defaultValue_0 )
       andBool ( #rangeAddress ( V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bool , V2_defaultValue_1 : bool ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #bool ( V2_defaultValue_0 ) , 2 , ( #bool ( V2_defaultValue_0 ) , ( #bool ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBool ( V2_defaultValue_0 )
       andBool ( #rangeBool ( V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes32 , V2_defaultValue_1 : bytes32 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #bytes32 ( V2_defaultValue_0 ) , 2 , ( #bytes32 ( V2_defaultValue_0 ) , ( #bytes32 ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBytes ( 32 , V2_defaultValue_0 )
       andBool ( #rangeBytes ( 32 , V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes , V2_defaultValue_1 : bytes ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #bytes ( V2_defaultValue_0 ) , 2 , ( #bytes ( V2_defaultValue_0 ) , ( #bytes ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_1 ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : int256 , V2_defaultValue_1 : int256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #int256 ( V2_defaultValue_0 ) , 2 , ( #int256 ( V2_defaultValue_0 ) , ( #int256 ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeSInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeSInt ( 256 , V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : string , V2_defaultValue_1 : string ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #string ( V2_defaultValue_0 ) , 2 , ( #string ( V2_defaultValue_0 ) , ( #string ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : uint256 , V2_defaultValue_1 : uint256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #uint256 ( V2_defaultValue_0 ) , 2 , ( #uint256 ( V2_defaultValue_0 ) , ( #uint256 ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeUInt ( 256 , V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #uint256 ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ketch ( V0_target : address , V1_newRuntimeBytecode : bytes ) => #abiCallData ( "etch" , ( #address ( V0_target ) , ( #bytes ( V1_newRuntimeBytecode ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_newRuntimeBytecode ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_data : bytes ) => #abiCallData ( "expectCall" , ( #address ( V0_callee ) , ( #bytes ( V1_data ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_data : bytes , V2_count : uint64 ) => #abiCallData ( "expectCall" , ( #address ( V0_callee ) , ( #bytes ( V1_data ) , ( #uint64 ( V2_count ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , V2_count )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes ) => #abiCallData ( "expectCall" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #bytes ( V2_data ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_count : uint64 ) => #abiCallData ( "expectCall" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #bytes ( V2_data ) , ( #uint64 ( V3_count ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , V3_count )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCall" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #uint64 ( V2_gas ) , ( #bytes ( V3_data ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCall" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #uint64 ( V2_gas ) , ( #bytes ( V3_data ) , ( #uint64 ( V4_count ) , .TypedArgs ) ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCallMinGas" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #uint64 ( V2_minGas ) , ( #bytes ( V3_data ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCallMinGas" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #uint64 ( V2_minGas ) , ( #bytes ( V3_data ) , ( #uint64 ( V4_count ) , .TypedArgs ) ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( ) => #abiCallData ( "expectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_emitter : address ) => #abiCallData ( "expectEmit" , ( #address ( V0_emitter ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_emitter )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool ) => #abiCallData ( "expectEmit" , ( #bool ( V0_checkTopic1 ) , ( #bool ( V1_checkTopic2 ) , ( #bool ( V2_checkTopic3 ) , ( #bool ( V3_checkData ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool , V4_emitter : address ) => #abiCallData ( "expectEmit" , ( #bool ( V0_checkTopic1 ) , ( #bool ( V1_checkTopic2 ) , ( #bool ( V2_checkTopic3 ) , ( #bool ( V3_checkData ) , ( #address ( V4_emitter ) , .TypedArgs ) ) ) ) ) ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
       andBool ( #rangeAddress ( V4_emitter )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( V0_revertData : bytes ) => #abiCallData ( "expectRevert" , ( #bytes ( V0_revertData ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_revertData ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( V0_revertData : bytes4 ) => #abiCallData ( "expectRevert" , ( #bytes4 ( V0_revertData ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 4 , V0_revertData )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectSafeMemory ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemory" , ( #uint64 ( V0_min ) , ( #uint64 ( V1_max ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectSafeMemoryCall ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemoryCall" , ( #uint64 ( V0_min ) , ( #uint64 ( V1_max ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kfee ( V0_newBasefee : uint256 ) => #abiCallData ( "fee" , ( #uint256 ( V0_newBasefee ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newBasefee )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kffi ( V0_commandInput_0 : string , V0_commandInput_1 : string ) => #abiCallData ( "ffi" , ( #array ( #string ( V0_commandInput_0 ) , 2 , ( #string ( V0_commandInput_0 ) , ( #string ( V0_commandInput_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , ( #string ( V0_artifactPath ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , ( #string ( V0_artifactPath ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisPersistent ( V0_account : address ) => #abiCallData ( "isPersistent" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , ( #address ( V0_account ) , ( #string ( V1_newLabel ) , .TypedArgs ) ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , ( #address ( V0_target ) , ( #bytes32 ( V1_slot ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account : address ) => #abiCallData ( "makePersistent" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address ) => #abiCallData ( "makePersistent" , ( #address ( V0_account0 ) , ( #address ( V1_account1 ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address , V2_account2 : address ) => #abiCallData ( "makePersistent" , ( #address ( V0_account0 ) , ( #address ( V1_account1 ) , ( #address ( V2_account2 ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
       andBool ( #rangeAddress ( V2_account2 )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_accounts_0 : address , V0_accounts_1 : address ) => #abiCallData ( "makePersistent" , ( #array ( #address ( V0_accounts_0 ) , 2 , ( #address ( V0_accounts_0 ) , ( #address ( V0_accounts_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_accounts_0 )
       andBool ( #rangeAddress ( V0_accounts_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCall ( V0_callee : address , V1_data : bytes , V2_returnData : bytes ) => #abiCallData ( "mockCall" , ( #address ( V0_callee ) , ( #bytes ( V1_data ) , ( #bytes ( V2_returnData ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_returnData ) )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_returnData : bytes ) => #abiCallData ( "mockCall" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #bytes ( V2_data ) , ( #bytes ( V3_returnData ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_returnData ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCallRevert ( V0_callee : address , V1_data : bytes , V2_revertData : bytes ) => #abiCallData ( "mockCallRevert" , ( #address ( V0_callee ) , ( #bytes ( V1_data ) , ( #bytes ( V2_revertData ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_revertData ) )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCallRevert ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_revertData : bytes ) => #abiCallData ( "mockCallRevert" , ( #address ( V0_callee ) , ( #uint256 ( V1_msgValue ) , ( #bytes ( V2_data ) , ( #bytes ( V3_revertData ) , .TypedArgs ) ) ) ) ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V3_revertData ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , ( #string ( V0_json ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , ( #string ( V0_json ) , ( #string ( V1_key ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddress" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonAddressArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddressArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBool ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBool" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBoolArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBoolArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes32Array ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32Array" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytesArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytesArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonInt ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonInt" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonIntArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonIntArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonString ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonString" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonStringArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonStringArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonUint ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUint" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonUintArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUintArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprank ( V0_msgSender : address ) => #abiCallData ( "prank" , ( #address ( V0_msgSender ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_msgSender )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "prank" , ( #address ( V0_msgSender ) , ( #address ( V1_txOrigin ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprevrandao ( V0_newPrevrandao : bytes32 ) => #abiCallData ( "prevrandao" , ( #bytes32 ( V0_newPrevrandao ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_newPrevrandao )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadCallers ( ) => #abiCallData ( "readCallers" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , ( #string ( V0_path ) , ( #uint64 ( V1_maxDepth ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , ( #string ( V0_path ) , ( #uint64 ( V1_maxDepth ) , ( #bool ( V2_followLinks ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , ( #string ( V0_linkPath ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , ( #string ( V0_path ) , ( #bool ( V1_recursive ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KresetNonce ( V0_account : address ) => #abiCallData ( "resetNonce" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevertTo ( V0_snapshotId : uint256 ) => #abiCallData ( "revertTo" , ( #uint256 ( V0_snapshotId ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_snapshotId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevokePersistent ( V0_account : address ) => #abiCallData ( "revokePersistent" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevokePersistent ( V0_accounts_0 : address , V0_accounts_1 : address ) => #abiCallData ( "revokePersistent" , ( #array ( #address ( V0_accounts_0 ) , 2 , ( #address ( V0_accounts_0 ) , ( #address ( V0_accounts_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
       ensures ( #rangeAddress ( V0_accounts_0 )
       andBool ( #rangeAddress ( V0_accounts_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kroll ( V0_newHeight : uint256 ) => #abiCallData ( "roll" , ( #uint256 ( V0_newHeight ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_txHash : bytes32 ) => #abiCallData ( "rollFork" , ( #bytes32 ( V0_txHash ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_blockNumber : uint256 ) => #abiCallData ( "rollFork" , ( #uint256 ( V0_blockNumber ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "rollFork" , ( #uint256 ( V0_forkId ) , ( #bytes32 ( V1_txHash ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , ( #uint256 ( V0_forkId ) , ( #uint256 ( V1_blockNumber ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , ( #string ( V0_rpcAlias ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KselectFork ( V0_forkId : uint256 ) => #abiCallData ( "selectFork" , ( #uint256 ( V0_forkId ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_forkId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #address ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeAddress ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : address , V2_values_1 : address ) => #abiCallData ( "serializeAddress" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #address ( V2_values_0 ) , 2 , ( #address ( V2_values_0 ) , ( #address ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V2_values_0 )
       andBool ( #rangeAddress ( V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #bool ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeBool ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bool , V2_values_1 : bool ) => #abiCallData ( "serializeBool" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #bool ( V2_values_0 ) , 2 , ( #bool ( V2_values_0 ) , ( #bool ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBool ( V2_values_0 )
       andBool ( #rangeBool ( V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #bytes ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V2_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes , V2_values_1 : bytes ) => #abiCallData ( "serializeBytes" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #bytes ( V2_values_0 ) , 2 , ( #bytes ( V2_values_0 ) , ( #bytes ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_values_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_values_1 ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #bytes32 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeBytes ( 32 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes32 , V2_values_1 : bytes32 ) => #abiCallData ( "serializeBytes32" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #bytes32 ( V2_values_0 ) , 2 , ( #bytes32 ( V2_values_0 ) , ( #bytes32 ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBytes ( 32 , V2_values_0 )
       andBool ( #rangeBytes ( 32 , V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #int256 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeSInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : int256 , V2_values_1 : int256 ) => #abiCallData ( "serializeInt" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #int256 ( V2_values_0 ) , 2 , ( #int256 ( V2_values_0 ) , ( #int256 ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeSInt ( 256 , V2_values_0 )
       andBool ( #rangeSInt ( 256 , V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #string ( V2_value ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : string , V2_values_1 : string ) => #abiCallData ( "serializeString" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #string ( V2_values_0 ) , 2 , ( #string ( V2_values_0 ) , ( #string ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #uint256 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeUInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : uint256 , V2_values_1 : uint256 ) => #abiCallData ( "serializeUint" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #uint256 ( V2_values_0 ) , 2 , ( #uint256 ( V2_values_0 ) , ( #uint256 ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V2_values_0 )
       andBool ( #rangeUInt ( 256 , V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , ( #string ( V0_name ) , ( #string ( V1_value ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetNonce ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonce" , ( #address ( V0_account ) , ( #uint64 ( V1_newNonce ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetNonceUnsafe ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonceUnsafe" , ( #address ( V0_account ) , ( #uint64 ( V1_newNonce ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , ( #uint256 ( V0_privateKey ) , ( #bytes32 ( V1_digest ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kskip ( V0_skipTest : bool ) => #abiCallData ( "skip" , ( #bool ( V0_skipTest ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_skipTest )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksnapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , ( #address ( V0_signer ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartPrank ( V0_msgSender : address ) => #abiCallData ( "startPrank" , ( #address ( V0_msgSender ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_msgSender )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartPrank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "startPrank" , ( #address ( V0_msgSender ) , ( #address ( V1_txOrigin ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kstore ( V0_target : address , V1_slot : bytes32 , V2_value : bytes32 ) => #abiCallData ( "store" , ( #address ( V0_target ) , ( #bytes32 ( V1_slot ) , ( #bytes32 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
       andBool ( #rangeBytes ( 32 , V2_value )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , ( #address ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , ( #bool ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , ( #bytes ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , ( #bytes32 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , ( #int256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , ( #uint256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ktransact ( V0_txHash : bytes32 ) => #abiCallData ( "transact" , ( #bytes32 ( V0_txHash ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ktransact ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "transact" , ( #uint256 ( V0_forkId ) , ( #bytes32 ( V1_txHash ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtxGasPrice ( V0_newGasPrice : uint256 ) => #abiCallData ( "txGasPrice" , ( #uint256 ( V0_newGasPrice ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newGasPrice )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kwarp ( V0_newTimestamp : uint256 ) => #abiCallData ( "warp" , ( #uint256 ( V0_newTimestamp ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_newTimestamp )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , ( #string ( V0_path ) , ( #string ( V1_data ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , ( #string ( V0_path ) , ( #bytes ( V1_data ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_data ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , ( #string ( V0_json ) , ( #string ( V1_path ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , ( #string ( V0_json ) , ( #string ( V1_path ) , ( #string ( V2_valueKey ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , ( #string ( V0_path ) , ( #string ( V1_data ) , .TypedArgs ) ) ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "activeFork()" ) => 789593890 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "allowCheatcodes(address)" ) => 3926262417 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )
      
    
    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )
      
    
    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )
      
    
    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "coinbase(address)" ) => 4282924116 )
      
    
    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )
      
    
    rule  ( selector ( "createFork(string)" ) => 834286744 )
      
    
    rule  ( selector ( "createFork(string,bytes32)" ) => 2091030146 )
      
    
    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )
      
    
    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )
      
    
    rule  ( selector ( "createSelectFork(string,bytes32)" ) => 2228562810 )
      
    
    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )
      
    
    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "difficulty(uint256)" ) => 1187812057 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )
      
    
    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )
      
    
    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )
      
    
    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )
      
    
    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )
      
    
    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )
      
    
    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )
      
    
    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )
      
    
    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )
      
    
    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )
      
    
    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )
      
    
    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )
      
    
    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )
      
    
    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )
      
    
    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )
      
    
    rule  ( selector ( "expectCall(address,bytes,uint64)" ) => 3249388543 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes,uint64)" ) => 2729550254 )
      
    
    rule  ( selector ( "expectCall(address,uint256,uint64,bytes)" ) => 590746119 )
      
    
    rule  ( selector ( "expectCall(address,uint256,uint64,bytes,uint64)" ) => 1706538956 )
      
    
    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes)" ) => 149217558 )
      
    
    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes,uint64)" ) => 3778680884 )
      
    
    rule  ( selector ( "expectEmit()" ) => 1141821709 )
      
    
    rule  ( selector ( "expectEmit(address)" ) => 2260296205 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )
      
    
    rule  ( selector ( "expectRevert()" ) => 4102309908 )
      
    
    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )
      
    
    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )
      
    
    rule  ( selector ( "expectSafeMemory(uint64,uint64)" ) => 1828808328 )
      
    
    rule  ( selector ( "expectSafeMemoryCall(uint64,uint64)" ) => 92507124 )
      
    
    rule  ( selector ( "fee(uint256)" ) => 968063664 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )
      
    
    rule  ( selector ( "getLabel(address)" ) => 681724336 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "isPersistent(address)" ) => 3643641597 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "makePersistent(address)" ) => 1474440670 )
      
    
    rule  ( selector ( "makePersistent(address,address)" ) => 1081401512 )
      
    
    rule  ( selector ( "makePersistent(address,address,address)" ) => 4021779061 )
      
    
    rule  ( selector ( "makePersistent(address[])" ) => 496903838 )
      
    
    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )
      
    
    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )
      
    
    rule  ( selector ( "mockCallRevert(address,bytes,bytes)" ) => 3685404999 )
      
    
    rule  ( selector ( "mockCallRevert(address,uint256,bytes,bytes)" ) => 3527200823 )
      
    
    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )
      
    
    rule  ( selector ( "parseBool(string)" ) => 2538535204 )
      
    
    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )
      
    
    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )
      
    
    rule  ( selector ( "parseInt(string)" ) => 1110731870 )
      
    
    rule  ( selector ( "parseJson(string)" ) => 1786929162 )
      
    
    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )
      
    
    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )
      
    
    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )
      
    
    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )
      
    
    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )
      
    
    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )
      
    
    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )
      
    
    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )
      
    
    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )
      
    
    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )
      
    
    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )
      
    
    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )
      
    
    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )
      
    
    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )
      
    
    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )
      
    
    rule  ( selector ( "parseUint(string)" ) => 4203824461 )
      
    
    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )
      
    
    rule  ( selector ( "prank(address)" ) => 3395723175 )
      
    
    rule  ( selector ( "prank(address,address)" ) => 1206193358 )
      
    
    rule  ( selector ( "prevrandao(bytes32)" ) => 999445833 )
      
    
    rule  ( selector ( "projectRoot()" ) => 3643842790 )
      
    
    rule  ( selector ( "readCallers()" ) => 1255193289 )
      
    
    rule  ( selector ( "readDir(string)" ) => 3300678112 )
      
    
    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )
      
    
    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "readLink(string)" ) => 2673247394 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )
      
    
    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "resetNonce(address)" ) => 477246573 )
      
    
    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )
      
    
    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )
      
    
    rule  ( selector ( "revokePersistent(address)" ) => 2574909986 )
      
    
    rule  ( selector ( "revokePersistent(address[])" ) => 1021929958 )
      
    
    rule  ( selector ( "roll(uint256)" ) => 528174896 )
      
    
    rule  ( selector ( "rollFork(bytes32)" ) => 254375723 )
      
    
    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )
      
    
    rule  ( selector ( "rollFork(uint256,bytes32)" ) => 4068675451 )
      
    
    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )
      
    
    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )
      
    
    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )
      
    
    rule  ( selector ( "setNonceUnsafe(address,uint64)" ) => 2607264284 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "skip(bool)" ) => 3716337982 )
      
    
    rule  ( selector ( "snapshot()" ) => 2534502746 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )
      
    
    rule  ( selector ( "startPrank(address)" ) => 105151830 )
      
    
    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopPrank()" ) => 2428830011 )
      
    
    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "transact(bytes32)" ) => 3194252705 )
      
    
    rule  ( selector ( "transact(uint256,bytes32)" ) => 1300937803 )
      
    
    rule  ( selector ( "txGasPrice(uint256)" ) => 1224018959 )
      
    
    rule  ( selector ( "warp(uint256)" ) => 3856056066 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )
      
    
    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )
      
    
    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModVmSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModVmSafeContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModVmSafe" [symbol("contract_lib%forge-std%src%VmSafe")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModVmSafeContract "." S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod [function, symbol("method_lib%forge-std%src%VmSafe")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kaccesses_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kaddr_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kassume_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kbreakpoint_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kbreakpoint_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kbroadcast_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kbroadcast_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kbroadcast_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KcloseFile_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KcreateDir_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KderiveKey_string_string_uint32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KderiveKey_string_uint32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvAddress_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvAddress_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvBool_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvBool_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvBytes_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvBytes_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvBytes32_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvBytes32_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvInt_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvInt_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_bool_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_bytes32_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_int256_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_string_uint256_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvOr_string_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvString_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvString_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvUint_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KenvUint_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kffi" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kffi_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KfsMetadata_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KgetCode_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KgetDeployedCode_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KgetLabel_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KgetNonce_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KgetRecordedLogs_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Klabel_address_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Kload_address_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseAddress_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseBool_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseBytes_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseBytes32_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseInt_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJson_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJson_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonAddress_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonAddressArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonBool_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonBoolArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonBytes_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonBytes32_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonBytes32Array_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonBytesArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonInt_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonIntArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonString_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonStringArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonUint_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseJsonUintArray_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KparseUint_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KpauseGasMetering" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KpauseGasMetering_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KprojectRoot" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KprojectRoot_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadDir_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadDir_string_uint64")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadDir_string_uint64_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadFile_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadFileBinary_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadLine_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KreadLink_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Krecord" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Krecord_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrecordLogs" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KrecordLogs_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KrememberKey_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KremoveDir_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KremoveFile_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KresumeGasMetering" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KresumeGasMetering_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KrpcUrl_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KrpcUrlStructs_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrls" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KrpcUrls_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeAddress_string_string_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" "," Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeAddress_string_string_address_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeBool_string_string_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeBool_string_string_bool_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeBytes_string_string_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeBytes_string_string_bytes_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeBytes32_string_string_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeBytes32_string_string_bytes32_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeInt_string_string_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" "," Int ":" "int256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeInt_string_string_int256_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeString_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeString_string_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeUint_string_string_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KserializeUint_string_string_uint256_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KsetEnv_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2Ksign_uint256_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KstartBroadcast_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KstartBroadcast_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KstartBroadcast_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopBroadcast" "(" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KstopBroadcast_")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KtoString_address")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KtoString_bool")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KtoString_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KtoString_bytes32")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KtoString_int256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KtoString_uint256")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KwriteFile_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KwriteFileBinary_string_bytes")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KwriteJson_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KwriteJson_string_string_string")]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol("method_lib%forge-std%src%VmSafe_S2KwriteLine_string_string")]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , ( #address ( V0_target ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_target )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , ( #bool ( V0_condition ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_condition )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , ( #string ( V0_char ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , ( #string ( V0_char ) , ( #bool ( V1_value ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , ( #address ( V0_signer ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , ( #string ( V0_path ) , ( #bool ( V1_recursive ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , ( #string ( V0_mnemonic ) , ( #string ( V1_derivationPath ) , ( #uint32 ( V2_index ) , .TypedArgs ) ) ) ) )
       ensures #rangeUInt ( 32 , V2_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , ( #string ( V0_mnemonic ) , ( #uint32 ( V1_index ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 32 , V1_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #address ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeAddress ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #bool ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #bytes ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_defaultValue ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #bytes32 ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #int256 ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_defaultValue ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : address , V2_defaultValue_1 : address ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #address ( V2_defaultValue_0 ) , 2 , ( #address ( V2_defaultValue_0 ) , ( #address ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V2_defaultValue_0 )
       andBool ( #rangeAddress ( V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bool , V2_defaultValue_1 : bool ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #bool ( V2_defaultValue_0 ) , 2 , ( #bool ( V2_defaultValue_0 ) , ( #bool ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBool ( V2_defaultValue_0 )
       andBool ( #rangeBool ( V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes32 , V2_defaultValue_1 : bytes32 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #bytes32 ( V2_defaultValue_0 ) , 2 , ( #bytes32 ( V2_defaultValue_0 ) , ( #bytes32 ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBytes ( 32 , V2_defaultValue_0 )
       andBool ( #rangeBytes ( 32 , V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : bytes , V2_defaultValue_1 : bytes ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #bytes ( V2_defaultValue_0 ) , 2 , ( #bytes ( V2_defaultValue_0 ) , ( #bytes ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_defaultValue_1 ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : int256 , V2_defaultValue_1 : int256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #int256 ( V2_defaultValue_0 ) , 2 , ( #int256 ( V2_defaultValue_0 ) , ( #int256 ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeSInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeSInt ( 256 , V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : string , V2_defaultValue_1 : string ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #string ( V2_defaultValue_0 ) , 2 , ( #string ( V2_defaultValue_0 ) , ( #string ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_delim : string , V2_defaultValue_0 : uint256 , V2_defaultValue_1 : uint256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #string ( V1_delim ) , ( #array ( #uint256 ( V2_defaultValue_0 ) , 2 , ( #uint256 ( V2_defaultValue_0 ) , ( #uint256 ( V2_defaultValue_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V2_defaultValue_0 )
       andBool ( #rangeUInt ( 256 , V2_defaultValue_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , ( #string ( V0_name ) , ( #uint256 ( V1_defaultValue ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , ( #string ( V0_name ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , ( #string ( V0_name ) , ( #string ( V1_delim ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kffi ( V0_commandInput_0 : string , V0_commandInput_1 : string ) => #abiCallData ( "ffi" , ( #array ( #string ( V0_commandInput_0 ) , 2 , ( #string ( V0_commandInput_0 ) , ( #string ( V0_commandInput_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , ( #string ( V0_artifactPath ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , ( #string ( V0_artifactPath ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , ( #address ( V0_account ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , ( #address ( V0_account ) , ( #string ( V1_newLabel ) , .TypedArgs ) ) ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , ( #address ( V0_target ) , ( #bytes32 ( V1_slot ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , ( #string ( V0_json ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , ( #string ( V0_json ) , ( #string ( V1_key ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddress" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonAddressArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonAddressArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBool ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBool" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBoolArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBoolArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes32Array ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytes32Array" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytesArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonBytesArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonInt ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonInt" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonIntArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonIntArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonString ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonString" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonStringArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonStringArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonUint ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUint" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonUintArray ( V0_ : string , V1_ : string ) => #abiCallData ( "parseJsonUintArray" , ( #string ( V0_ ) , ( #string ( V1_ ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , ( #string ( V0_stringifiedValue ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , ( #string ( V0_path ) , ( #uint64 ( V1_maxDepth ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , ( #string ( V0_path ) , ( #uint64 ( V1_maxDepth ) , ( #bool ( V2_followLinks ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , ( #string ( V0_linkPath ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , ( #string ( V0_path ) , ( #bool ( V1_recursive ) , .TypedArgs ) ) ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , ( #string ( V0_path ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , ( #string ( V0_rpcAlias ) , .TypedArgs ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #address ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeAddress ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : address , V2_values_1 : address ) => #abiCallData ( "serializeAddress" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #address ( V2_values_0 ) , 2 , ( #address ( V2_values_0 ) , ( #address ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V2_values_0 )
       andBool ( #rangeAddress ( V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #bool ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeBool ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bool , V2_values_1 : bool ) => #abiCallData ( "serializeBool" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #bool ( V2_values_0 ) , 2 , ( #bool ( V2_values_0 ) , ( #bool ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBool ( V2_values_0 )
       andBool ( #rangeBool ( V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #bytes ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V2_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes , V2_values_1 : bytes ) => #abiCallData ( "serializeBytes" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #bytes ( V2_values_0 ) , 2 , ( #bytes ( V2_values_0 ) , ( #bytes ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 64 , lengthBytes ( V2_values_0 ) )
       andBool ( #rangeUInt ( 64 , lengthBytes ( V2_values_1 ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #bytes32 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeBytes ( 32 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : bytes32 , V2_values_1 : bytes32 ) => #abiCallData ( "serializeBytes32" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #bytes32 ( V2_values_0 ) , 2 , ( #bytes32 ( V2_values_0 ) , ( #bytes32 ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeBytes ( 32 , V2_values_0 )
       andBool ( #rangeBytes ( 32 , V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #int256 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeSInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : int256 , V2_values_1 : int256 ) => #abiCallData ( "serializeInt" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #int256 ( V2_values_0 ) , 2 , ( #int256 ( V2_values_0 ) , ( #int256 ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeSInt ( 256 , V2_values_0 )
       andBool ( #rangeSInt ( 256 , V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #string ( V2_value ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : string , V2_values_1 : string ) => #abiCallData ( "serializeString" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #string ( V2_values_0 ) , 2 , ( #string ( V2_values_0 ) , ( #string ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #uint256 ( V2_value ) , .TypedArgs ) ) ) ) )
       ensures #rangeUInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_values_0 : uint256 , V2_values_1 : uint256 ) => #abiCallData ( "serializeUint" , ( #string ( V0_objectKey ) , ( #string ( V1_valueKey ) , ( #array ( #uint256 ( V2_values_0 ) , 2 , ( #uint256 ( V2_values_0 ) , ( #uint256 ( V2_values_1 ) , .TypedArgs ) ) ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeUInt ( 256 , V2_values_0 )
       andBool ( #rangeUInt ( 256 , V2_values_1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , ( #string ( V0_name ) , ( #string ( V1_value ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , ( #uint256 ( V0_privateKey ) , ( #bytes32 ( V1_digest ) , .TypedArgs ) ) ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , ( #address ( V0_signer ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , ( #uint256 ( V0_privateKey ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , ( #address ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , ( #bool ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeBool ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , ( #bytes ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V0_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , ( #bytes32 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeBytes ( 32 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , ( #int256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeSInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , ( #uint256 ( V0_value ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , ( #string ( V0_path ) , ( #string ( V1_data ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , ( #string ( V0_path ) , ( #bytes ( V1_data ) , .TypedArgs ) ) ) )
       ensures #rangeUInt ( 64 , lengthBytes ( V1_data ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , ( #string ( V0_json ) , ( #string ( V1_path ) , .TypedArgs ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , ( #string ( V0_json ) , ( #string ( V1_path ) , ( #string ( V2_valueKey ) , .TypedArgs ) ) ) ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , ( #string ( V0_path ) , ( #string ( V1_data ) , .TypedArgs ) ) ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )
      
    
    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )
      
    
    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )
      
    
    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )
      
    
    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )
      
    
    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )
      
    
    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )
      
    
    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )
      
    
    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )
      
    
    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )
      
    
    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )
      
    
    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )
      
    
    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )
      
    
    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )
      
    
    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )
      
    
    rule  ( selector ( "getLabel(address)" ) => 681724336 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )
      
    
    rule  ( selector ( "parseBool(string)" ) => 2538535204 )
      
    
    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )
      
    
    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )
      
    
    rule  ( selector ( "parseInt(string)" ) => 1110731870 )
      
    
    rule  ( selector ( "parseJson(string)" ) => 1786929162 )
      
    
    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )
      
    
    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )
      
    
    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )
      
    
    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )
      
    
    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )
      
    
    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )
      
    
    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )
      
    
    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )
      
    
    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )
      
    
    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )
      
    
    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )
      
    
    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )
      
    
    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )
      
    
    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )
      
    
    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )
      
    
    rule  ( selector ( "parseUint(string)" ) => 4203824461 )
      
    
    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )
      
    
    rule  ( selector ( "projectRoot()" ) => 3643842790 )
      
    
    rule  ( selector ( "readDir(string)" ) => 3300678112 )
      
    
    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )
      
    
    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "readLink(string)" ) => 2673247394 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )
      
    
    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )
      
    
    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )
      
    
    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )
      
    
    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )
      
    
    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module S2KsrcZModcseZModWETH9-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModcseZModWETH9Contract
    
    syntax S2KsrcZModcseZModWETH9Contract ::= "S2KsrcZModcseZModWETH9" [symbol("contract_src%cse%WETH9")]
    
    syntax Bytes ::= S2KsrcZModcseZModWETH9Contract "." S2KsrcZModcseZModWETH9Method [function, symbol("method_src%cse%WETH9")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Kallowance" "(" Int ":" "address" "," Int ":" "address" ")" [symbol("method_src%cse%WETH9_S2Kallowance_address_address")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%cse%WETH9_S2Kapprove_address_uint256")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol("method_src%cse%WETH9_S2KbalanceOf_address")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Kdecimals" "(" ")" [symbol("method_src%cse%WETH9_S2Kdecimals_")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Kdeposit" "(" ")" [symbol("method_src%cse%WETH9_S2Kdeposit_")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Kname" "(" ")" [symbol("method_src%cse%WETH9_S2Kname_")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Ksymbol" "(" ")" [symbol("method_src%cse%WETH9_S2Ksymbol_")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2KtotalSupply" "(" ")" [symbol("method_src%cse%WETH9_S2KtotalSupply_")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%cse%WETH9_S2Ktransfer_address_uint256")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol("method_src%cse%WETH9_S2KtransferFrom_address_address_uint256")]
    
    syntax S2KsrcZModcseZModWETH9Method ::= "S2Kwithdraw" "(" Int ":" "uint256" ")" [symbol("method_src%cse%WETH9_S2Kwithdraw_uint256")]
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Kallowance ( V0_ : address , V1_ : address ) => #abiCallData ( "allowance" , ( #address ( V0_ ) , ( #address ( V1_ ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Kapprove ( V0_guy : address , V1_wad : uint256 ) => #abiCallData ( "approve" , ( #address ( V0_guy ) , ( #uint256 ( V1_wad ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_guy )
       andBool ( #rangeUInt ( 256 , V1_wad )
               ))
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , ( #address ( V0_ ) , .TypedArgs ) ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Kdeposit ( ) => #abiCallData ( "deposit" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Kname ( ) => #abiCallData ( "name" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Ktransfer ( V0_dst : address , V1_wad : uint256 ) => #abiCallData ( "transfer" , ( #address ( V0_dst ) , ( #uint256 ( V1_wad ) , .TypedArgs ) ) ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_wad )
               ))
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2KtransferFrom ( V0_src : address , V1_dst : address , V2_wad : uint256 ) => #abiCallData ( "transferFrom" , ( #address ( V0_src ) , ( #address ( V1_dst ) , ( #uint256 ( V2_wad ) , .TypedArgs ) ) ) ) )
       ensures ( #rangeAddress ( V0_src )
       andBool ( #rangeAddress ( V1_dst )
       andBool ( #rangeUInt ( 256 , V2_wad )
               )))
      
    
    rule  ( S2KsrcZModcseZModWETH9 . S2Kwithdraw ( V0_wad : uint256 ) => #abiCallData ( "withdraw" , ( #uint256 ( V0_wad ) , .TypedArgs ) ) )
       ensures #rangeUInt ( 256 , V0_wad )
      
    
    rule  ( selector ( "allowance(address,address)" ) => 3714247998 )
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "deposit()" ) => 3504541104 )
      
    
    rule  ( selector ( "name()" ) => 117300739 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      
    
    rule  ( selector ( "withdraw(uint256)" ) => 773487949 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModconsole-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModconsoleContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModconsoleContract ::= "S2KlibZModforgeZSubstdZModsrcZModconsole" [symbol("contract_lib%forge-std%src%console")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModconsole2-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModconsole2Contract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModconsole2Contract ::= "S2KlibZModforgeZSubstdZModsrcZModconsole2" [symbol("contract_lib%forge-std%src%console2")]

endmodule

module S2KlibZModforgeZSubstdZModsrcZModsafeconsole-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModsafeconsoleContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModsafeconsoleContract ::= "S2KlibZModforgeZSubstdZModsrcZModsafeconsole" [symbol("contract_lib%forge-std%src%safeconsole")]

endmodule

module S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract
    
    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract ::= "S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest" [symbol("contract_lib%forge-std%lib%ds-test%src%DSTest")]
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract "." S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod [function, symbol("method_lib%forge-std%lib%ds-test%src%DSTest")]
    
    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol("method_lib%forge-std%lib%ds-test%src%DSTest_S2KISZUndTEST_")]
    
    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod ::= "S2Kfailed" "(" ")" [symbol("method_lib%forge-std%lib%ds-test%src%DSTest_S2Kfailed_")]
    
    rule  ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule
