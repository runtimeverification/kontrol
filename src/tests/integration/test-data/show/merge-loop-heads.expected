
┌─ 1 (root, init)
│   k: #execute ~> CONTINUATION:K
│   pc: 0
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode
│
│  (350 steps)
├─ 3 (split)
│   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 0 ) ~> #pc [ JUMPI ] ~> #execute ...
│   pc: 1449
│   callDepth: 0
│   statusCode: STATUSCODE:StatusCode
┃
┃ (branch)
┣━━┓ constraint: VV0_n_114b9705:Int <=Int 0
┃  │
┃  ├─ 4
┃  │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 0 ) ~> #pc [ JUMPI ] ~> #execute ...
┃  │   pc: 1449
┃  │   callDepth: 0
┃  │   statusCode: STATUSCODE:StatusCode
┃  │
┃  ┊  constraint: OMITTED CONSTRAINT
┃  ┊  subst: OMITTED SUBST
┃  ├─ 20
┃  │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int V_8ae8c0f0:Int ) ~> #pc [ JUMPI  ...
┃  │   pc: 1449
┃  │   callDepth: 0
┃  │   statusCode: STATUSCODE:StatusCode
┃  │
┃  │  (135 steps)
┃  └─ 23 (leaf, pending)
┃      k: #end EVMC_SUCCESS ~> #pc [ STOP ] ~> #execute ~> CONTINUATION:K
┃      pc: 350
┃      callDepth: 0
┃      statusCode: STATUSCODE:StatusCode
┃
┗━━┓ constraint: 0 <Int VV0_n_114b9705:Int
   │
   ├─ 5
   │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 0 ) ~> #pc [ JUMPI ] ~> #execute ...
   │   pc: 1449
   │   callDepth: 0
   │   statusCode: STATUSCODE:StatusCode
   │
   │  (224 steps)
   ├─ 7 (split)
   │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 1 ) ~> #pc [ JUMPI ] ~> #execute ...
   │   pc: 1449
   │   callDepth: 0
   │   statusCode: STATUSCODE:StatusCode
   ┃
   ┃ (branch)
   ┣━━┓ constraint: VV0_n_114b9705:Int <=Int 1
   ┃  │
   ┃  ├─ 9
   ┃  │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 1 ) ~> #pc [ JUMPI ] ~> #execute ...
   ┃  │   pc: 1449
   ┃  │   callDepth: 0
   ┃  │   statusCode: STATUSCODE:StatusCode
   ┃  │
   ┃  ┊  constraint: OMITTED CONSTRAINT
   ┃  ┊  subst: OMITTED SUBST
   ┃  └─ 20
   ┃      k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int V_8ae8c0f0:Int ) ~> #pc [ JUMPI  ...
   ┃      pc: 1449
   ┃      callDepth: 0
   ┃      statusCode: STATUSCODE:StatusCode
   ┃     (continues as previously)
   ┃
   ┗━━┓ constraint: 1 <Int VV0_n_114b9705:Int
      │
      ├─ 10
      │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 1 ) ~> #pc [ JUMPI ] ~> #execute ...
      │   pc: 1449
      │   callDepth: 0
      │   statusCode: STATUSCODE:StatusCode
      │
      │  (224 steps)
      ├─ 13 (split)
      │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 2 ) ~> #pc [ JUMPI ] ~> #execute ...
      │   pc: 1449
      │   callDepth: 0
      │   statusCode: STATUSCODE:StatusCode
      ┃
      ┃ (branch)
      ┣━━┓ constraint: VV0_n_114b9705:Int <=Int 2
      ┃  │
      ┃  ├─ 15
      ┃  │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 2 ) ~> #pc [ JUMPI ] ~> #execute ...
      ┃  │   pc: 1449
      ┃  │   callDepth: 0
      ┃  │   statusCode: STATUSCODE:StatusCode
      ┃  │
      ┃  ┊  constraint: OMITTED CONSTRAINT
      ┃  ┊  subst: OMITTED SUBST
      ┃  └─ 20
      ┃      k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int V_8ae8c0f0:Int ) ~> #pc [ JUMPI  ...
      ┃      pc: 1449
      ┃      callDepth: 0
      ┃      statusCode: STATUSCODE:StatusCode
      ┃     (continues as previously)
      ┃
      ┗━━┓ constraint: 2 <Int VV0_n_114b9705:Int
         │
         ├─ 16
         │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 2 ) ~> #pc [ JUMPI ] ~> #execute ...
         │   pc: 1449
         │   callDepth: 0
         │   statusCode: STATUSCODE:StatusCode
         │
         │  (224 steps)
         ├─ 19 (split)
         │   k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 3 ) ~> #pc [ JUMPI ] ~> #execute ...
         │   pc: 1449
         │   callDepth: 0
         │   statusCode: STATUSCODE:StatusCode
         ┃
         ┃ (branch)
         ┣━━┓ constraint: VV0_n_114b9705:Int <=Int 3
         ┃  │
         ┃  └─ 21 (leaf, pending)
         ┃      k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 3 ) ~> #pc [ JUMPI ] ~> #execute ...
         ┃      pc: 1449
         ┃      callDepth: 0
         ┃      statusCode: STATUSCODE:StatusCode
         ┃
         ┗━━┓ constraint: 3 <Int VV0_n_114b9705:Int
            │
            └─ 22 (leaf, pending)
                k: JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 3 ) ~> #pc [ JUMPI ] ~> #execute ...
                pc: 1449
                callDepth: 0
                statusCode: STATUSCODE:StatusCode


┌─ 2 (root, leaf, target, terminal)
│   k: #halt ~> CONTINUATION:K
│   pc: PC_CELL_5d410f2a:Int
│   callDepth: CALLDEPTH_CELL_5d410f2a:Int
│   statusCode: STATUSCODE_FINAL:StatusCode


Node 21:

( <generatedTop>
  <foundry>
    <kevm>
      <k>
        JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 3 )
        ~> #pc [ JUMPI ]
        ~> #execute
        ~> CONTINUATION:K
      </k>
      <mode>
        NORMAL
      </mode>
      <schedule>
        SHANGHAI
      </schedule>
      <useGas>
        false
      </useGas>
      <ethereum>
        <evm>
          <output>
            b""
          </output>
          <callStack>
            .List
          </callStack>
          <interimStates>
            .List
          </interimStates>
          <touchedAccounts>
            .Set
          </touchedAccounts>
          <callState>
            <id>
              728815563385977040452943777879061427756277306518
            </id>
            <caller>
              CALLER_ID:Int
            </caller>
            <callData>
              b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
            </callData>
            <callValue>
              0
            </callValue>
            <wordStack>
              ( 3 : ( 3 : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) )
            </wordStack>
            <localMem>
              b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
            </localMem>
            <memoryUsed>
              0
            </memoryUsed>
            <callGas>
              0
            </callGas>
            <static>
              false
            </static>
            <callDepth>
              0
            </callDepth>
            ...
          </callState>
          <substate>
            <log>
              .List
            </log>
            <refund>
              0
            </refund>
            <accessedAccounts>
              .Set
            </accessedAccounts>
            <accessedStorage>
              .Map
            </accessedStorage>
            ...
          </substate>
          <origin>
            ORIGIN_ID:Int
          </origin>
          <block>
            <number>
              NUMBER_CELL:Int
            </number>
            <timestamp>
              TIMESTAMP_CELL:Int
            </timestamp>
            ...
          </block>
          ...
        </evm>
        <network>
          <accounts>
            ( <account>
              <acctID>
                645326474426547203313410069153905908525362434349
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                0
              </nonce>
              ...
            </account>
            <account>
              <acctID>
                728815563385977040452943777879061427756277306518
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                1
              </nonce>
              ...
            </account> )
          </accounts>
          ...
        </network>
      </ethereum>
      ...
    </kevm>
    <cheatcodes>
      <prank>
        <active>
          false
        </active>
        <singleCall>
          false
        </singleCall>
        ...
      </prank>
      <expectedRevert>
        <isRevertExpected>
          false
        </isRevertExpected>
        ...
      </expectedRevert>
      <expectedOpcode>
        <isOpcodeExpected>
          false
        </isOpcodeExpected>
        ...
      </expectedOpcode>
      <expectEmit>
        <recordEvent>
          false
        </recordEvent>
        <isEventExpected>
          false
        </isEventExpected>
        ...
      </expectEmit>
      <whitelist>
        <isCallWhitelistActive>
          false
        </isCallWhitelistActive>
        <isStorageWhitelistActive>
          false
        </isStorageWhitelistActive>
        <addressSet>
          .Set
        </addressSet>
        <storageSlotSet>
          .Set
        </storageSlotSet>
      </whitelist>
      <mockCalls>
        .MockCallCellMap
      </mockCalls>
    </cheatcodes>
    <KEVMTracing>
      <activeTracing>
        false
      </activeTracing>
      <traceStorage>
        false
      </traceStorage>
      <traceWordStack>
        false
      </traceWordStack>
      <traceMemory>
        false
      </traceMemory>
      <recordedTrace>
        false
      </recordedTrace>
      <traceData>
        .List
      </traceData>
    </KEVMTracing>
  </foundry>
  ...
</generatedTop>
#And ( { true #Equals 0 <=Int CALLER_ID:Int }
#And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
#And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
#And ( { true #Equals 0 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 1 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 2 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 0 <=Int TIMESTAMP_CELL:Int }
#And ( { true #Equals 0 <=Int VV0_n_114b9705:Int }
#And ( { true #Equals VV0_n_114b9705:Int <=Int 3 }
#And ( { true #Equals CALLER_ID:Int <Int pow160 }
#And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
#And ( { true #Equals NUMBER_CELL:Int <=Int maxSInt256 }
#And ( { true #Equals TIMESTAMP_CELL:Int <Int pow256 }
#And ( { true #Equals VV0_n_114b9705:Int <Int pow256 }
#And ( { true #Equals ( notBool CALLER_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool ORIGIN_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool C_BMCLOOPSTEST_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) ) }
#And { true #Equals ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <foundry>
    <kevm>
      <k>
        JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 3 )
        ~> #pc [ JUMPI ]
        ~> #execute
        ~> CONTINUATION:K
      </k>
      <mode>
        NORMAL
      </mode>
      <schedule>
        SHANGHAI
      </schedule>
      <useGas>
        false
      </useGas>
      <ethereum>
        <evm>
          <output>
            b""
          </output>
          <callStack>
            .List
          </callStack>
          <interimStates>
            .List
          </interimStates>
          <touchedAccounts>
            .Set
          </touchedAccounts>
          <callState>
            <id>
              728815563385977040452943777879061427756277306518
            </id>
            <caller>
              CALLER_ID:Int
            </caller>
            <callData>
              b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
            </callData>
            <callValue>
              0
            </callValue>
            <wordStack>
              ( 3 : ( 3 : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) )
            </wordStack>
            <localMem>
              b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
            </localMem>
            <memoryUsed>
              0
            </memoryUsed>
            <callGas>
              0
            </callGas>
            <static>
              false
            </static>
            <callDepth>
              0
            </callDepth>
            ...
          </callState>
          <substate>
            <log>
              .List
            </log>
            <refund>
              0
            </refund>
            <accessedAccounts>
              .Set
            </accessedAccounts>
            <accessedStorage>
              .Map
            </accessedStorage>
            ...
          </substate>
          <origin>
            ORIGIN_ID:Int
          </origin>
          <block>
            <number>
              NUMBER_CELL:Int
            </number>
            <timestamp>
              TIMESTAMP_CELL:Int
            </timestamp>
            ...
          </block>
          ...
        </evm>
        <network>
          <accounts>
            ( <account>
              <acctID>
                645326474426547203313410069153905908525362434349
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                0
              </nonce>
              ...
            </account>
            <account>
              <acctID>
                728815563385977040452943777879061427756277306518
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                1
              </nonce>
              ...
            </account> )
          </accounts>
          ...
        </network>
      </ethereum>
      ...
    </kevm>
    <cheatcodes>
      <prank>
        <active>
          false
        </active>
        <singleCall>
          false
        </singleCall>
        ...
      </prank>
      <expectedRevert>
        <isRevertExpected>
          false
        </isRevertExpected>
        ...
      </expectedRevert>
      <expectedOpcode>
        <isOpcodeExpected>
          false
        </isOpcodeExpected>
        ...
      </expectedOpcode>
      <expectEmit>
        <recordEvent>
          false
        </recordEvent>
        <isEventExpected>
          false
        </isEventExpected>
        ...
      </expectEmit>
      <whitelist>
        <isCallWhitelistActive>
          false
        </isCallWhitelistActive>
        <isStorageWhitelistActive>
          false
        </isStorageWhitelistActive>
        <addressSet>
          .Set
        </addressSet>
        <storageSlotSet>
          .Set
        </storageSlotSet>
      </whitelist>
      <mockCalls>
        .MockCallCellMap
      </mockCalls>
    </cheatcodes>
    <KEVMTracing>
      <activeTracing>
        false
      </activeTracing>
      <traceStorage>
        false
      </traceStorage>
      <traceWordStack>
        false
      </traceWordStack>
      <traceMemory>
        false
      </traceMemory>
      <recordedTrace>
        false
      </recordedTrace>
      <traceData>
        .List
      </traceData>
    </KEVMTracing>
  </foundry>
  ...
</generatedTop>
#And ( { true #Equals 0 <=Int CALLER_ID:Int }
#And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
#And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
#And ( { true #Equals 0 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 1 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 2 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 3 <Int VV0_n_114b9705:Int }
#And ( { true #Equals 0 <=Int TIMESTAMP_CELL:Int }
#And ( { true #Equals 0 <=Int VV0_n_114b9705:Int }
#And ( { true #Equals CALLER_ID:Int <Int pow160 }
#And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
#And ( { true #Equals NUMBER_CELL:Int <=Int maxSInt256 }
#And ( { true #Equals TIMESTAMP_CELL:Int <Int pow256 }
#And ( { true #Equals VV0_n_114b9705:Int <Int pow256 }
#And ( { true #Equals ( notBool CALLER_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool ORIGIN_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool C_BMCLOOPSTEST_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) ) }
#And { true #Equals ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 23:

( <generatedTop>
  <foundry>
    <kevm>
      <k>
        #end EVMC_SUCCESS
        ~> #pc [ STOP ]
        ~> #execute
        ~> CONTINUATION:K
      </k>
      <mode>
        NORMAL
      </mode>
      <schedule>
        SHANGHAI
      </schedule>
      <useGas>
        false
      </useGas>
      <ethereum>
        <evm>
          <output>
            b""
          </output>
          <callStack>
            .List
          </callStack>
          <interimStates>
            .List
          </interimStates>
          <touchedAccounts>
            .Set
          </touchedAccounts>
          <callState>
            <id>
              728815563385977040452943777879061427756277306518
            </id>
            <caller>
              CALLER_ID:Int
            </caller>
            <callData>
              b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
            </callData>
            <callValue>
              0
            </callValue>
            <wordStack>
              ( selector ( "test_bmc(uint256)" ) : .WordStack )
            </wordStack>
            <localMem>
              b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
            </localMem>
            <memoryUsed>
              0
            </memoryUsed>
            <callGas>
              0
            </callGas>
            <static>
              false
            </static>
            <callDepth>
              0
            </callDepth>
            ...
          </callState>
          <substate>
            <log>
              .List
            </log>
            <refund>
              0
            </refund>
            <accessedAccounts>
              .Set
            </accessedAccounts>
            <accessedStorage>
              .Map
            </accessedStorage>
            ...
          </substate>
          <origin>
            ORIGIN_ID:Int
          </origin>
          <block>
            <number>
              NUMBER_CELL:Int
            </number>
            <timestamp>
              TIMESTAMP_CELL:Int
            </timestamp>
            ...
          </block>
          ...
        </evm>
        <network>
          <accounts>
            ( <account>
              <acctID>
                645326474426547203313410069153905908525362434349
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                0
              </nonce>
              ...
            </account>
            <account>
              <acctID>
                728815563385977040452943777879061427756277306518
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                1
              </nonce>
              ...
            </account> )
          </accounts>
          ...
        </network>
      </ethereum>
      ...
    </kevm>
    <cheatcodes>
      <prank>
        <active>
          false
        </active>
        <singleCall>
          false
        </singleCall>
        ...
      </prank>
      <expectedRevert>
        <isRevertExpected>
          false
        </isRevertExpected>
        ...
      </expectedRevert>
      <expectedOpcode>
        <isOpcodeExpected>
          false
        </isOpcodeExpected>
        ...
      </expectedOpcode>
      <expectEmit>
        <recordEvent>
          false
        </recordEvent>
        <isEventExpected>
          false
        </isEventExpected>
        ...
      </expectEmit>
      <whitelist>
        <isCallWhitelistActive>
          false
        </isCallWhitelistActive>
        <isStorageWhitelistActive>
          false
        </isStorageWhitelistActive>
        <addressSet>
          .Set
        </addressSet>
        <storageSlotSet>
          .Set
        </storageSlotSet>
      </whitelist>
      <mockCalls>
        .MockCallCellMap
      </mockCalls>
    </cheatcodes>
    <KEVMTracing>
      <activeTracing>
        false
      </activeTracing>
      <traceStorage>
        false
      </traceStorage>
      <traceWordStack>
        false
      </traceWordStack>
      <traceMemory>
        false
      </traceMemory>
      <recordedTrace>
        false
      </recordedTrace>
      <traceData>
        .List
      </traceData>
    </KEVMTracing>
  </foundry>
  ...
</generatedTop>
#And ( { true #Equals 0 <=Int CALLER_ID:Int }
#And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
#And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
#And ( { true #Equals 0 <=Int TIMESTAMP_CELL:Int }
#And ( { true #Equals 0 <=Int VV0_n_114b9705:Int }
#And ( { true #Equals VV0_n_114b9705:Int <=Int V_8ae8c0f0:Int }
#And ( { true #Equals CALLER_ID:Int <Int pow160 }
#And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
#And ( { true #Equals NUMBER_CELL:Int <=Int maxSInt256 }
#And ( { true #Equals TIMESTAMP_CELL:Int <Int pow256 }
#And ( { true #Equals VV0_n_114b9705:Int <Int pow256 }
#And ( { true #Equals ( notBool CALLER_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool ORIGIN_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) }
#And ( { true #Equals ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) ) }
#And ( { true #Equals ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) ) }
#And { true #Equals ( ( V_8ae8c0f0:Int ==Int V_45741f39:Int andBool ( ( V_45741f39:Int ==Int 0 andBool VV0_n_114b9705:Int <=Int 0 ) orBool ( V_45741f39:Int ==Int 1 andBool #range ( 0 < VV0_n_114b9705:Int <= 1 ) ) ) ) orBool ( V_8ae8c0f0:Int ==Int 2 andBool ( 0 <Int VV0_n_114b9705:Int andBool ( 1 <Int VV0_n_114b9705:Int andBool ( VV0_n_114b9705:Int <=Int 2 andBool ( notBool C_BMCLOOPSTEST_ID:Int ==Int 645326474426547203313410069153905908525362434349 ) ) ) ) ) ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



module SUMMARY-TEST%BMCLOOPSTEST.TEST-BMC(UINT256):0
    
    
    rule [BASIC-BLOCK-1-TO-3]: <foundry>
           <kevm>
             <k>
               ( .K => JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int 0 )
               ~> #pc [ JUMPI ] )
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 0 : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <refund>
                     0
                   </refund>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
           </cheatcodes>
           <KEVMTracing>
             <activeTracing>
               false
             </activeTracing>
             <traceStorage>
               false
             </traceStorage>
             <traceWordStack>
               false
             </traceWordStack>
             <traceMemory>
               false
             </traceMemory>
             <recordedTrace>
               false
             </recordedTrace>
             <traceData>
               .List
             </traceData>
           </KEVMTracing>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int TIMESTAMP_CELL:Int
       andBool ( 0 <=Int VV0_n_114b9705:Int
       andBool ( CALLER_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ORIGIN_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( _C_BMCLOOPSTEST_ID =/=Int 645326474426547203313410069153905908525362434349
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( TIMESTAMP_CELL:Int <Int pow256
       andBool ( VV0_n_114b9705:Int <Int pow256
       andBool ( ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) )
       andBool ( ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) )
               )))))))))))))))
      [priority(20), label(BASIC-BLOCK-1-TO-3)]
    
    rule [BASIC-BLOCK-5-TO-7]: <foundry>
           <kevm>
             <k>
               JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int ( 0 => 1 ) )
               ~> #pc [ JUMPI ]
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( ( 0 => 1 ) : ( ( 0 => 1 ) : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <refund>
                     0
                   </refund>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
           </cheatcodes>
           <KEVMTracing>
             <activeTracing>
               false
             </activeTracing>
             <traceStorage>
               false
             </traceStorage>
             <traceWordStack>
               false
             </traceWordStack>
             <traceMemory>
               false
             </traceMemory>
             <recordedTrace>
               false
             </recordedTrace>
             <traceData>
               .List
             </traceData>
           </KEVMTracing>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <Int VV0_n_114b9705:Int
       andBool ( 0 <=Int TIMESTAMP_CELL:Int
       andBool ( 0 <=Int VV0_n_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( TIMESTAMP_CELL:Int <Int pow256
       andBool ( VV0_n_114b9705:Int <Int pow256
       andBool ( CALLER_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ORIGIN_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( _C_BMCLOOPSTEST_ID =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) )
       andBool ( ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) )
               ))))))))))))))))
      [priority(20), label(BASIC-BLOCK-5-TO-7)]
    
    rule [BASIC-BLOCK-10-TO-13]: <foundry>
           <kevm>
             <k>
               JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int ( 1 => 2 ) )
               ~> #pc [ JUMPI ]
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( ( 1 => 2 ) : ( ( 1 => 2 ) : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <refund>
                     0
                   </refund>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
           </cheatcodes>
           <KEVMTracing>
             <activeTracing>
               false
             </activeTracing>
             <traceStorage>
               false
             </traceStorage>
             <traceWordStack>
               false
             </traceWordStack>
             <traceMemory>
               false
             </traceMemory>
             <recordedTrace>
               false
             </recordedTrace>
             <traceData>
               .List
             </traceData>
           </KEVMTracing>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <Int VV0_n_114b9705:Int
       andBool ( 1 <Int VV0_n_114b9705:Int
       andBool ( 0 <=Int TIMESTAMP_CELL:Int
       andBool ( 0 <=Int VV0_n_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( TIMESTAMP_CELL:Int <Int pow256
       andBool ( VV0_n_114b9705:Int <Int pow256
       andBool ( CALLER_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ORIGIN_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( _C_BMCLOOPSTEST_ID =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) )
       andBool ( ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) )
               )))))))))))))))))
      [priority(20), label(BASIC-BLOCK-10-TO-13)]
    
    rule [BASIC-BLOCK-16-TO-19]: <foundry>
           <kevm>
             <k>
               JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int ( 2 => 3 ) )
               ~> #pc [ JUMPI ]
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( ( 2 => 3 ) : ( ( 2 => 3 ) : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <refund>
                     0
                   </refund>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
           </cheatcodes>
           <KEVMTracing>
             <activeTracing>
               false
             </activeTracing>
             <traceStorage>
               false
             </traceStorage>
             <traceWordStack>
               false
             </traceWordStack>
             <traceMemory>
               false
             </traceMemory>
             <recordedTrace>
               false
             </recordedTrace>
             <traceData>
               .List
             </traceData>
           </KEVMTracing>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <Int VV0_n_114b9705:Int
       andBool ( 1 <Int VV0_n_114b9705:Int
       andBool ( 2 <Int VV0_n_114b9705:Int
       andBool ( 0 <=Int TIMESTAMP_CELL:Int
       andBool ( 0 <=Int VV0_n_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( TIMESTAMP_CELL:Int <Int pow256
       andBool ( VV0_n_114b9705:Int <Int pow256
       andBool ( CALLER_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ORIGIN_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( _C_BMCLOOPSTEST_ID =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) )
       andBool ( ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) )
               ))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-16-TO-19)]
    
    rule [BASIC-BLOCK-20-TO-23]: <foundry>
           <kevm>
             <k>
               ( JUMPI 1478 bool2Word ( VV0_n_114b9705:Int <=Int V_8ae8c0f0:Int )
               ~> #pc [ JUMPI ] => #end EVMC_SUCCESS
               ~> #pc [ STOP ] )
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               SHANGHAI
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <touchedAccounts>
                   .Set
                 </touchedAccounts>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x96\xe07\x91" +Bytes #buf ( 32 , VV0_n_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( ( V_8ae8c0f0:Int => selector ( "test_bmc(uint256)" ) ) : ( ( V_8ae8c0f0:Int : ( VV0_n_114b9705:Int : ( 349 : ( selector ( "test_bmc(uint256)" ) : .WordStack ) ) ) ) => .WordStack ) )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <refund>
                     0
                   </refund>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
           </cheatcodes>
           <KEVMTracing>
             <activeTracing>
               false
             </activeTracing>
             <traceStorage>
               false
             </traceStorage>
             <traceWordStack>
               false
             </traceWordStack>
             <traceMemory>
               false
             </traceMemory>
             <recordedTrace>
               false
             </recordedTrace>
             <traceData>
               .List
             </traceData>
           </KEVMTracing>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int TIMESTAMP_CELL:Int
       andBool ( 0 <=Int VV0_n_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( TIMESTAMP_CELL:Int <Int pow256
       andBool ( VV0_n_114b9705:Int <Int pow256
       andBool ( CALLER_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ORIGIN_ID:Int =/=Int 645326474426547203313410069153905908525362434349
       andBool ( ( notBool #range ( 0 < CALLER_ID:Int <= 9 ) )
       andBool ( ( notBool #range ( 0 < ORIGIN_ID:Int <= 9 ) )
       andBool ( ( ( V_8ae8c0f0 ==K V_45741f39:Int
           andBool ( ( ( V_45741f39 ==K 0
               andBool ( VV0_n_114b9705:Int <=Int 0
                       ))
              orBool ( ( V_45741f39 ==K 1
               andBool ( 0 <Int VV0_n_114b9705:Int
               andBool ( VV0_n_114b9705:Int <=Int 1
                       )))
                     ))
                   ))
          orBool ( ( V_8ae8c0f0 ==K 2
           andBool ( 0 <Int VV0_n_114b9705:Int
           andBool ( 1 <Int VV0_n_114b9705:Int
           andBool ( VV0_n_114b9705:Int <=Int 2
           andBool ( C_BMCLOOPSTEST_ID:Int =/=Int 645326474426547203313410069153905908525362434349
                   )))))
                 ))
               )))))))))))))))
       ensures ( VV0_n_114b9705:Int <=Int V_8ae8c0f0:Int
       andBool ( ( ( V_8ae8c0f0:Int ==Int V_45741f39:Int
           andBool ( ( ( V_45741f39:Int ==Int 0
               andBool ( VV0_n_114b9705:Int <=Int 0
                       ))
              orBool ( ( V_45741f39:Int ==Int 1
               andBool ( 0 <Int VV0_n_114b9705:Int
               andBool ( VV0_n_114b9705:Int <=Int 1
                       )))
                     ))
                   ))
          orBool ( ( V_8ae8c0f0:Int ==Int 2
           andBool ( 0 <Int VV0_n_114b9705:Int
           andBool ( 1 <Int VV0_n_114b9705:Int
           andBool ( VV0_n_114b9705:Int <=Int 2
           andBool ( C_BMCLOOPSTEST_ID:Int =/=Int 645326474426547203313410069153905908525362434349
                   )))))
                 ))
               ))
      [priority(20), label(BASIC-BLOCK-20-TO-23)]

endmodule
3 Failure nodes. (3 pending and 0 failing)

Pending nodes:

ID: 21:

ID: 22:

ID: 23:

Join the Runtime Verification Discord server for support: https://discord.com/invite/CurfmXNtbN

See `foundry_success` predicate for more information:
https://github.com/runtimeverification/kontrol/blob/master/src/kontrol/kdist/foundry.md#foundry-success-predicate

Access documentation for Kontrol at https://docs.runtimeverification.com/kontrol