
┌─ 1 (root, split, init)
│   k: #execute ~> CONTINUATION:K
│   pc: 0
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE:StatusCode
│   src: test/nested/SimpleNested.t.sol:7:11
│   method: test%Enum.enum_storage_range()
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 134
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 25 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 135
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 26 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 138
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 34 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 139
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 35 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 142
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 43 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 143
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 44 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 146
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 52 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 147
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 53 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 150
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 61 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 151
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 62 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 154
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 70 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 155
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 71 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 158
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 79 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 159
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 80 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 162
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 88 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 163
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 89 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 166
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  ├─ 97 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 465
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 167
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  ├─ 98 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 519
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:90:90
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool <acctID>
  C_ENUM_ID:Int
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊      ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 170
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (527 steps)
┃  └─ 106 (leaf, pending)
┃      k: #halt ~> CONTINUATION:K
┃      pc: 465
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: EVMC_REVERT
┃      method: test%Enum.enum_storage_range()
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 171
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (472 steps)
┃  └─ 107 (leaf, pending)
┃      k: #halt ~> CONTINUATION:K
┃      pc: 519
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: EVMC_REVERT
┃      src: lib/forge-std/src/StdInvariant.sol:90:90
┃      method: test%Enum.enum_storage_range()
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 174
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (457 steps)
┃  └─ 108 (leaf, pending)
┃      k: JUMPI 520 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ...
┃      pc: 515
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: lib/forge-std/src/StdInvariant.sol:90:90
┃      method: test%Enum.enum_storage_range()
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) )
┃  │
┃  ├─ 175
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (457 steps)
┃  └─ 109 (leaf, pending)
┃      k: JUMPI 520 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ...
┃      pc: 515
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: lib/forge-std/src/StdInvariant.sol:90:90
┃      method: test%Enum.enum_storage_range()
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  │
┃  ├─ 176
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (270 steps)
┃  └─ 102 (leaf, pending)
┃      k: 1 ~> #push ~> #setLocalMem 128 32 b"" ~> #pc [ STATICCALL ] ~> #execute ~> CONTI ...
┃      pc: 145
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: test/nested/SimpleNested.t.sol:7:11
┃      method: test%Enum.enum_storage_range()
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  │
┃  ├─ 178
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (269 steps)
┃  └─ 103 (leaf, pending)
┃      k: #consoleLog 1756313567 b"" ~> 1 ~> #push ~> #setLocalMem 128 32 b"" ~> #pc [ STA ...
┃      pc: 145
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: test/nested/SimpleNested.t.sol:7:11
┃      method: test%Enum.enum_storage_range()
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool C_ENUM_ID:Int ==Int #address ( FoundryConsole ) )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  │
┃  ├─ 180
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: test%Enum.enum_storage_range()
┃  │
┃  │  (268 steps)
┃  └─ 104 (leaf, pending)
┃      k: STATICCALL 0 C_ENUM_MEMBER_CONTRACT_ID:Int 128 4 128 32 ~> #pc [ STATICCALL ] ~> ...
┃      pc: 145
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: test/nested/SimpleNested.t.sol:7:11
┃      method: test%Enum.enum_storage_range()
┃
┗━━┓ subst: .Subst
   ┃ constraint: true
   │
   ├─ 181
   │   k: #execute ~> CONTINUATION:K
   │   pc: 0
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE:StatusCode
   │   src: test/nested/SimpleNested.t.sol:7:11
   │   method: test%Enum.enum_storage_range()
   │
   │  (268 steps)
   └─ 105 (leaf, pending)
       k: STATICCALL 0 C_ENUM_MEMBER_CONTRACT_ID:Int 128 4 128 32 ~> #pc [ STATICCALL ] ~> ...
       pc: 145
       callDepth: CALLDEPTH_CELL:Int
       statusCode: STATUSCODE:StatusCode
       src: test/nested/SimpleNested.t.sol:7:11
       method: test%Enum.enum_storage_range()




module SUMMARY-TEST%ENUM.ENUM-STORAGE-RANGE():0
    
    
    rule [BASIC-BLOCK-180-TO-104]: <foundry>
           <kevm>
             <k>
               ( .K => STATICCALL 0 C_ENUM_MEMBER_CONTRACT_ID:Int 128 4 128 32
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 132 : ( 1756313567 : ( C_ENUM_MEMBER_CONTRACT_ID:Int : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       C_ENUM_ID:Int
                     </acctID>
                     <balance>
                       C_ENUM_BAL:Int
                     </balance>
                     <storage>
                       ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map )
                     </storage>
                     <nonce>
                       C_ENUM_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       C_ENUM_MEMBER_CONTRACT_ID:Int
                     </acctID>
                     <balance>
                       C_ENUM_MEMBER_CONTRACT_BAL:Int
                     </balance>
                     <storage>
                       C_ENUM_MEMBER_CONTRACT_STORAGE:Map
                     </storage>
                     <nonce>
                       C_ENUM_MEMBER_CONTRACT_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               ))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-180-TO-104)]
    
    rule [BASIC-BLOCK-181-TO-105]: <foundry>
           <kevm>
             <k>
               ( .K => STATICCALL 0 C_ENUM_MEMBER_CONTRACT_ID:Int 128 4 128 32
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 132 : ( 1756313567 : ( C_ENUM_MEMBER_CONTRACT_ID:Int : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       C_ENUM_ID:Int
                     </acctID>
                     <balance>
                       C_ENUM_BAL:Int
                     </balance>
                     <storage>
                       ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map )
                     </storage>
                     <nonce>
                       C_ENUM_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       C_ENUM_MEMBER_CONTRACT_ID:Int
                     </acctID>
                     <balance>
                       C_ENUM_MEMBER_CONTRACT_BAL:Int
                     </balance>
                     <storage>
                       C_ENUM_MEMBER_CONTRACT_STORAGE:Map
                     </storage>
                     <nonce>
                       C_ENUM_MEMBER_CONTRACT_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-181-TO-105)]
    
    rule [BASIC-BLOCK-176-TO-102]: <foundry>
           <kevm>
             <k>
               ( .K => 1
               ~> #push
               ~> #setLocalMem 128 32 b""
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 132 : ( 1756313567 : ( #address ( FoundryConsole ) : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               ))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-176-TO-102)]
    
    rule [BASIC-BLOCK-178-TO-103]: <foundry>
           <kevm>
             <k>
               ( .K => #consoleLog 1756313567 b""
               ~> 1
               ~> #push
               ~> #setLocalMem 128 32 b""
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 132 : ( 1756313567 : ( #address ( FoundryConsole ) : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               ))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-178-TO-103)]
    
    rule [BASIC-BLOCK-134-TO-25]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-134-TO-25)]
    
    rule [BASIC-BLOCK-135-TO-26]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-135-TO-26)]
    
    rule [BASIC-BLOCK-138-TO-34]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-138-TO-34)]
    
    rule [BASIC-BLOCK-139-TO-35]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-139-TO-35)]
    
    rule [BASIC-BLOCK-142-TO-43]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-142-TO-43)]
    
    rule [BASIC-BLOCK-143-TO-44]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-143-TO-44)]
    
    rule [BASIC-BLOCK-146-TO-52]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-146-TO-52)]
    
    rule [BASIC-BLOCK-147-TO-53]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-147-TO-53)]
    
    rule [BASIC-BLOCK-150-TO-61]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-150-TO-61)]
    
    rule [BASIC-BLOCK-151-TO-62]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-151-TO-62)]
    
    rule [BASIC-BLOCK-154-TO-70]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-154-TO-70)]
    
    rule [BASIC-BLOCK-155-TO-71]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-155-TO-71)]
    
    rule [BASIC-BLOCK-158-TO-79]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-158-TO-79)]
    
    rule [BASIC-BLOCK-159-TO-80]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-159-TO-80)]
    
    rule [BASIC-BLOCK-162-TO-88]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-162-TO-88)]
    
    rule [BASIC-BLOCK-163-TO-89]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-163-TO-89)]
    
    rule [BASIC-BLOCK-166-TO-97]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-166-TO-97)]
    
    rule [BASIC-BLOCK-167-TO-98]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-167-TO-98)]
    
    rule [BASIC-BLOCK-170-TO-106]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 495 : ( 47350120097113101904103772844726262947438265984446388056509121813378311913472 : ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-170-TO-106)]
    
    rule [BASIC-BLOCK-171-TO-107]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-171-TO-107)]
    
    rule [BASIC-BLOCK-174-TO-108]: <foundry>
           <kevm>
             <k>
               ( .K => JUMPI 520 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
               ~> #pc [ JUMPI ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   OUTPUT_CELL:Bytes
                 </output>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-174-TO-108)]
    
    rule [BASIC-BLOCK-175-TO-109]: <foundry>
           <kevm>
             <k>
               ( .K => JUMPI 520 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
               ~> #pc [ JUMPI ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   OUTPUT_CELL:Bytes
                 </output>
                 <callState>
                   <id>
                     C_ENUM_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"c6\xf6\x1e"
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 5 : ( 67 : ( 1664546334 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xaf7\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_ENUM_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_ENUM_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       ( C_ENUM_BAL:Int => C_ENUM_MEMBER_CONTRACT_BAL:Int )
                     </balance>
                     <storage>
                       ( ( ( 0 |-> C_ENUM_MEMBER_CONTRACT_ID:Int )
                       C_ENUM_STORAGE:Map ) => C_ENUM_MEMBER_CONTRACT_STORAGE:Map )
                     </storage>
                     <origStorage>
                       ( C_ENUM_ORIGSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_TRANSIENTSTORAGE:Map => C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_NONCE:Int => C_ENUM_MEMBER_CONTRACT_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ( <account>
                     <acctID>
                       ( C_ENUM_MEMBER_CONTRACT_ID:Int => C_ENUM_ID:Int )
                     </acctID>
                     <balance>
                       ( C_ENUM_MEMBER_CONTRACT_BAL:Int => C_ENUM_BAL:Int )
                     </balance>
                     <storage>
                       ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map => ( ( 0 |-> #address ( FoundryConsole ) )
                       C_ENUM_STORAGE:Map ) )
                     </storage>
                     <origStorage>
                       ( C_ENUM_MEMBER_CONTRACT_ORIGSTORAGE:Map => C_ENUM_ORIGSTORAGE:Map )
                     </origStorage>
                     <transientStorage>
                       ( C_ENUM_MEMBER_CONTRACT_TRANSIENTSTORAGE:Map => C_ENUM_TRANSIENTSTORAGE:Map )
                     </transientStorage>
                     <nonce>
                       ( C_ENUM_MEMBER_CONTRACT_NONCE:Int => C_ENUM_NONCE:Int )
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int C_ENUM_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_ENUM_BAL:Int
       andBool ( 0 <=Int C_ENUM_NONCE:Int
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryConsole )
       andBool ( C_ENUM_ID:Int =/=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_ID:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_BAL:Int
       andBool ( 0 <=Int C_ENUM_MEMBER_CONTRACT_NONCE:Int
       andBool ( C_ENUM_NONCE:Int <Int maxUInt64
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_ENUM_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ( notBool 0 in_keys ( C_ENUM_STORAGE:Map ) )
       andBool ( C_ENUM_MEMBER_CONTRACT_NONCE:Int <Int maxUInt64
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( C_ENUM_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_ENUM_MEMBER_CONTRACT_ID:Int <Int pow160
       andBool ( C_ENUM_BAL:Int <Int pow256
       andBool ( C_ENUM_MEMBER_CONTRACT_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_ENUM_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          C_ENUM_MEMBER_CONTRACT_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( #lookup ( C_ENUM_MEMBER_CONTRACT_STORAGE:Map , 1 ) <Int 6
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( C_ENUM_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_ENUM_MEMBER_CONTRACT_ID:Int <=Int 0
          orBool ( 10 <Int C_ENUM_MEMBER_CONTRACT_ID:Int
                 ))
       andBool ( 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
               )))))))))))))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-175-TO-109)]

endmodule