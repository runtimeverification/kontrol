
┌─ 1 (root, split, init)
│   k: #execute ~> CONTINUATION:K
│   pc: 0
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE:StatusCode
│   src: test/nested/SimpleNested.t.sol:7:11
│   method: src%cse%Identity.applyOp(uint256)
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 134
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 25 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 135
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 26 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 138
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 34 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 139
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 35 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 142
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 43 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 143
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 44 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 146
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 52 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 147
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 53 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 150
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 61 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 151
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 62 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 154
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 70 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 155
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 71 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 158
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 79 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 159
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 80 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 162
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 88 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 163
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 89 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 166
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 97 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 167
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 98 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 170
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 106 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 171
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 107 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 174
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 187 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 175
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 188 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 284
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 196 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 285
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 197 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 286
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 205 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 287
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 206 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 288
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 214 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 289
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 215 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 306
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 223 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 307
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 224 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 310
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 232 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 311
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 233 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 314
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 241 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 315
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 242 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 318
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 250 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 319
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 251 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 322
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 259 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 323
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 260 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 326
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  ├─ 268 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 87
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_SUCCESS
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 327
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  ├─ 269 (terminal)
┃  │   k: #halt ~> CONTINUATION:K
┃  │   pc: 244
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: EVMC_REVERT
┃  │   src: lib/forge-std/src/StdInvariant.sol:77:79
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target, terminal)
┃      k: #halt ~> CONTINUATION:K
┃      pc: PC_CELL_5d410f2a:Int
┃      callDepth: CALLDEPTH_CELL_5d410f2a:Int
┃      statusCode: STATUSCODE_FINAL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 330
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (689 steps)
┃  └─ 277 (leaf, pending)
┃      k: #halt ~> CONTINUATION:K
┃      pc: 87
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: EVMC_SUCCESS
┃      src: test/nested/SimpleNested.t.sol:7:11
┃      method: src%cse%Identity.applyOp(uint256)
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 331
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (567 steps)
┃  └─ 278 (leaf, pending)
┃      k: #halt ~> CONTINUATION:K
┃      pc: 244
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: EVMC_REVERT
┃      src: lib/forge-std/src/StdInvariant.sol:77:79
┃      method: src%cse%Identity.applyOp(uint256)
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
┃  │
┃  ├─ 334
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (552 steps)
┃  └─ 279 (leaf, pending)
┃      k: JUMPI 245 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ...
┃      pc: 240
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: lib/forge-std/src/StdInvariant.sol:77:79
┃      method: src%cse%Identity.applyOp(uint256)
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  ┃     ( notBool ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
┃  │
┃  ├─ 335
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (552 steps)
┃  └─ 280 (leaf, pending)
┃      k: JUMPI 245 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ...
┃      pc: 240
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: lib/forge-std/src/StdInvariant.sol:77:79
┃      method: src%cse%Identity.applyOp(uint256)
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  │
┃  ├─ 336
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (552 steps)
┃  └─ 281 (leaf, pending)
┃      k: JUMPI 245 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ...
┃      pc: 240
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: lib/forge-std/src/StdInvariant.sol:77:79
┃      method: src%cse%Identity.applyOp(uint256)
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  │
┃  ├─ 338
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (364 steps)
┃  └─ 274 (leaf, pending)
┃      k: #consoleLog 2889346747 #buf ( 32 , KV0_x:Int ) ~> 1 ~> #push ~> #setLocalMem 128 ...
┃      pc: 148
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: test/nested/SimpleNested.t.sol:7:11
┃      method: src%cse%Identity.applyOp(uint256)
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
┃  ┃     ( notBool <acctID>
  #address ( FoundryConsole )
</acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
┃  │
┃  ├─ 340
┃  │   k: #execute ~> CONTINUATION:K
┃  │   pc: 0
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE:StatusCode
┃  │   src: test/nested/SimpleNested.t.sol:7:11
┃  │   method: src%cse%Identity.applyOp(uint256)
┃  │
┃  │  (363 steps)
┃  └─ 275 (leaf, pending)
┃      k: STATICCALL 0 C_IDENTITY_ID:Int 128 36 128 32 ~> #pc [ STATICCALL ] ~> #execute ~ ...
┃      pc: 148
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: STATUSCODE:StatusCode
┃      src: test/nested/SimpleNested.t.sol:7:11
┃      method: src%cse%Identity.applyOp(uint256)
┃
┗━━┓ subst: .Subst
   ┃ constraint: true
   │
   ├─ 341
   │   k: #execute ~> CONTINUATION:K
   │   pc: 0
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE:StatusCode
   │   src: test/nested/SimpleNested.t.sol:7:11
   │   method: src%cse%Identity.applyOp(uint256)
   │
   │  (363 steps)
   └─ 276 (leaf, pending)
       k: STATICCALL 0 C_IDENTITY_ID:Int 128 36 128 32 ~> #pc [ STATICCALL ] ~> #execute ~ ...
       pc: 148
       callDepth: CALLDEPTH_CELL:Int
       statusCode: STATUSCODE:StatusCode
       src: test/nested/SimpleNested.t.sol:7:11
       method: src%cse%Identity.applyOp(uint256)




module SUMMARY-SRC%CSE%IDENTITY.APPLYOP(UINT256):0
    
    
    rule [BASIC-BLOCK-134-TO-25]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-134-TO-25)]
    
    rule [BASIC-BLOCK-135-TO-26]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-135-TO-26)]
    
    rule [BASIC-BLOCK-138-TO-34]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-138-TO-34)]
    
    rule [BASIC-BLOCK-139-TO-35]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-139-TO-35)]
    
    rule [BASIC-BLOCK-142-TO-43]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-142-TO-43)]
    
    rule [BASIC-BLOCK-143-TO-44]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-143-TO-44)]
    
    rule [BASIC-BLOCK-146-TO-52]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-146-TO-52)]
    
    rule [BASIC-BLOCK-147-TO-53]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-147-TO-53)]
    
    rule [BASIC-BLOCK-150-TO-61]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-150-TO-61)]
    
    rule [BASIC-BLOCK-151-TO-62]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-151-TO-62)]
    
    rule [BASIC-BLOCK-154-TO-70]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-154-TO-70)]
    
    rule [BASIC-BLOCK-155-TO-71]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-155-TO-71)]
    
    rule [BASIC-BLOCK-158-TO-79]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-158-TO-79)]
    
    rule [BASIC-BLOCK-159-TO-80]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-159-TO-80)]
    
    rule [BASIC-BLOCK-162-TO-88]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-162-TO-88)]
    
    rule [BASIC-BLOCK-163-TO-89]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-163-TO-89)]
    
    rule [BASIC-BLOCK-166-TO-97]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-166-TO-97)]
    
    rule [BASIC-BLOCK-167-TO-98]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-167-TO-98)]
    
    rule [BASIC-BLOCK-170-TO-106]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-170-TO-106)]
    
    rule [BASIC-BLOCK-171-TO-107]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-171-TO-107)]
    
    rule [BASIC-BLOCK-174-TO-187]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-174-TO-187)]
    
    rule [BASIC-BLOCK-175-TO-188]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-175-TO-188)]
    
    rule [BASIC-BLOCK-340-TO-275]: <foundry>
           <kevm>
             <k>
               ( .K => STATICCALL 0 C_IDENTITY_ID:Int 128 36 128 32
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     C_IDENTITY_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 164 : ( 2889346747 : ( C_IDENTITY_ID:Int : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_IDENTITY_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       C_IDENTITY_ID:Int
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               )))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-340-TO-275)]
    
    rule [BASIC-BLOCK-341-TO-276]: <foundry>
           <kevm>
             <k>
               ( .K => STATICCALL 0 C_IDENTITY_ID:Int 128 36 128 32
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     C_IDENTITY_ID:Int
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 164 : ( 2889346747 : ( C_IDENTITY_ID:Int : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     C_IDENTITY_ID:Int
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       C_IDENTITY_ID:Int
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               )))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-341-TO-276)]
    
    rule [BASIC-BLOCK-284-TO-196]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-284-TO-196)]
    
    rule [BASIC-BLOCK-285-TO-197]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-285-TO-197)]
    
    rule [BASIC-BLOCK-286-TO-205]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-286-TO-205)]
    
    rule [BASIC-BLOCK-287-TO-206]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-287-TO-206)]
    
    rule [BASIC-BLOCK-288-TO-214]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-288-TO-214)]
    
    rule [BASIC-BLOCK-289-TO-215]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-289-TO-215)]
    
    rule [BASIC-BLOCK-336-TO-281]: <foundry>
           <kevm>
             <k>
               ( .K => JUMPI 245 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
               ~> #pc [ JUMPI ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   OUTPUT_CELL:Bytes
                 </output>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               )))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-336-TO-281)]
    
    rule [BASIC-BLOCK-338-TO-274]: <foundry>
           <kevm>
             <k>
               ( .K => #consoleLog 2889346747 #buf ( 32 , KV0_x:Int )
               ~> 1
               ~> #push
               ~> #setLocalMem 128 32 b""
               ~> #pc [ STATICCALL ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 164 : ( 2889346747 : ( #address ( FoundryConsole ) : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               )))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-338-TO-274)]
    
    rule [BASIC-BLOCK-306-TO-223]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-306-TO-223)]
    
    rule [BASIC-BLOCK-307-TO-224]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-307-TO-224)]
    
    rule [BASIC-BLOCK-310-TO-232]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-310-TO-232)]
    
    rule [BASIC-BLOCK-311-TO-233]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-311-TO-233)]
    
    rule [BASIC-BLOCK-314-TO-241]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-314-TO-241)]
    
    rule [BASIC-BLOCK-315-TO-242]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-315-TO-242)]
    
    rule [BASIC-BLOCK-318-TO-250]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-318-TO-250)]
    
    rule [BASIC-BLOCK-319-TO-251]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-319-TO-251)]
    
    rule [BASIC-BLOCK-322-TO-259]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-322-TO-259)]
    
    rule [BASIC-BLOCK-323-TO-260]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-323-TO-260)]
    
    rule [BASIC-BLOCK-326-TO-268]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-326-TO-268)]
    
    rule [BASIC-BLOCK-327-TO-269]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-327-TO-269)]
    
    rule [BASIC-BLOCK-330-TO-277]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) , chop ( ( chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 160 ) ) -Int #asWord ( #range ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] , 64 , 32 ) ) ) ) ) )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_SUCCESS )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 1772879777 : .WordStack ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) [ chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) := b"\xac7\xee\xbb" +Bytes #range ( #buf ( 32 , KV0_x:Int ) , 0 , 28 ) ] )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-330-TO-277)]
    
    rule [BASIC-BLOCK-331-TO-278]: <foundry>
           <kevm>
             <k>
               ( #execute => #halt )
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   ( OUTPUT_CELL:Bytes => b"" )
                 </output>
                 <statusCode>
                   ( _STATUSCODE:StatusCode => EVMC_REVERT )
                 </statusCode>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
       ensures 0 =/=Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
      [priority(20), label(BASIC-BLOCK-331-TO-278)]
    
    rule [BASIC-BLOCK-334-TO-279]: <foundry>
           <kevm>
             <k>
               ( .K => JUMPI 245 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
               ~> #pc [ JUMPI ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   OUTPUT_CELL:Bytes
                 </output>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( 0 ==Int ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-334-TO-279)]
    
    rule [BASIC-BLOCK-335-TO-280]: <foundry>
           <kevm>
             <k>
               ( .K => JUMPI 245 bool2Word ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) ==Int 0 )
               ~> #pc [ JUMPI ] )
               ~> #execute
               ~> _CONTINUATION:K
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               CANCUN
             </schedule>
             <useGas>
               false
             </useGas>
             <ethereum>
               <evm>
                 <output>
                   OUTPUT_CELL:Bytes
                 </output>
                 <callState>
                   <id>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"i\xab\xff\xa1" +Bytes #buf ( 32 , KV0_x:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( 0 : ( 128 : ( chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int 128 ) ) : ( 198 : ( 0 : ( KV0_x:Int : ( 70 : ( 1772879777 : .WordStack ) ) ) ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"" => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +Bytes #buf ( 32 , chop ( ( ( notMaxUInt5 &Int chop ( ( lengthBytes ( OUTPUT_CELL:Bytes ) +Int maxUInt5 ) ) ) +Int 128 ) ) ) +Bytes b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac7\xee\xbb" +Bytes #buf ( 32 , KV0_x:Int ) )
                   </localMem>
                   <memoryUsed>
                     0
                   </memoryUsed>
                   <callGas>
                     0
                   </callGas>
                   <callDepth>
                     CALLDEPTH_CELL:Int
                   </callDepth>
                   <codeAddr>
                     ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                   </codeAddr>
                   ...
                 </callState>
                 <substate>
                   <refund>
                     0
                   </refund>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   <timestamp>
                     TIMESTAMP_CELL:Int
                   </timestamp>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <chainID>
                   1
                 </chainID>
                 <accounts>
                   ( <account>
                     <acctID>
                       ( C_IDENTITY_ID:Int => #address ( FoundryConsole ) )
                     </acctID>
                     <balance>
                       C_IDENTITY_BAL:Int
                     </balance>
                     <nonce>
                       C_IDENTITY_NONCE:Int
                     </nonce>
                     ...
                   </account>
                   ACCOUNTS_REST:AccountCellMap )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <stackChecks>
             true
           </stackChecks>
           <cheatcodes>
             <prank>
               <active>
                 false
               </active>
               <depth>
                 0
               </depth>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               <expectedDepth>
                 0
               </expectedDepth>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               ...
             </expectedOpcode>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <allowedCallsList>
                 .List
               </allowedCallsList>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <storageSlotList>
                 .List
               </storageSlotList>
             </whitelist>
             <mockCalls>
               .MockCallCellMap
             </mockCalls>
             <mockFunctions>
               .MockFunctionCellMap
             </mockFunctions>
             ...
           </cheatcodes>
         </foundry>
      requires ( ( notBool _ACTIVE_CELL:Bool )
       andBool ( ( notBool _ISREVERTEXPECTED_CELL:Bool )
       andBool ( C_IDENTITY_ID:Int ==Int #address ( FoundryConsole )
       andBool ( 0 <=Int KV0_x:Int
       andBool ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int C_IDENTITY_ID:Int
       andBool ( 0 <=Int C_IDENTITY_BAL:Int
       andBool ( 0 <=Int C_IDENTITY_NONCE:Int
       andBool ( pow24 <Int NUMBER_CELL:Int
       andBool ( NUMBER_CELL:Int <Int pow32
       andBool ( 1073741824 <Int TIMESTAMP_CELL:Int
       andBool ( TIMESTAMP_CELL:Int <Int 34359738368
       andBool ( _DEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( _EXPECTEDDEPTH_CELL:Int <Int CALLDEPTH_CELL:Int
       andBool ( C_IDENTITY_NONCE:Int <Int maxUInt64
       andBool ( CALLER_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( ORIGIN_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( C_IDENTITY_ID:Int =/=Int #address ( FoundryCheat )
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( C_IDENTITY_ID:Int <Int pow160
       andBool ( KV0_x:Int <Int pow256
       andBool ( C_IDENTITY_BAL:Int <Int pow256
       andBool ( ( notBool <acctID>
          C_IDENTITY_ID:Int
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( notBool <acctID>
          #address ( FoundryConsole )
        </acctID> in_keys ( ACCOUNTS_REST:AccountCellMap ) )
       andBool ( ( CALLER_ID:Int <=Int 0
          orBool ( 10 <Int CALLER_ID:Int
                 ))
       andBool ( ( ORIGIN_ID:Int <=Int 0
          orBool ( 10 <Int ORIGIN_ID:Int
                 ))
       andBool ( ( C_IDENTITY_ID:Int <=Int 0
          orBool ( 10 <Int C_IDENTITY_ID:Int
                 ))
       andBool ( ( (chop ( lengthBytes ( OUTPUT_CELL:Bytes ) )) s<Word (32) ) =/=Int 0
               ))))))))))))))))))))))))))))))
      [priority(20), label(BASIC-BLOCK-335-TO-280)]

endmodule