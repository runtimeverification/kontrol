# Generated from src/kontrol/solidity/Solidity.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,187,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,3,13,90,8,13,1,14,4,14,93,8,14,11,14,12,
        14,94,1,15,1,15,1,15,1,15,4,15,101,8,15,11,15,12,15,102,1,16,1,16,
        5,16,107,8,16,10,16,12,16,110,9,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,155,
        8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,179,8,23,
        1,24,4,24,182,8,24,11,24,12,24,183,1,24,1,24,0,0,25,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,
        5,1,0,48,57,3,0,48,57,65,70,97,102,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,197,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,54,1,0,
        0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,0,0,0,13,65,1,
        0,0,0,15,67,1,0,0,0,17,69,1,0,0,0,19,71,1,0,0,0,21,74,1,0,0,0,23,
        76,1,0,0,0,25,78,1,0,0,0,27,89,1,0,0,0,29,92,1,0,0,0,31,96,1,0,0,
        0,33,104,1,0,0,0,35,111,1,0,0,0,37,120,1,0,0,0,39,125,1,0,0,0,41,
        130,1,0,0,0,43,132,1,0,0,0,45,156,1,0,0,0,47,178,1,0,0,0,49,181,
        1,0,0,0,51,52,5,38,0,0,52,53,5,38,0,0,53,2,1,0,0,0,54,55,5,124,0,
        0,55,56,5,124,0,0,56,4,1,0,0,0,57,58,5,33,0,0,58,6,1,0,0,0,59,60,
        5,40,0,0,60,8,1,0,0,0,61,62,5,41,0,0,62,10,1,0,0,0,63,64,5,43,0,
        0,64,12,1,0,0,0,65,66,5,45,0,0,66,14,1,0,0,0,67,68,5,42,0,0,68,16,
        1,0,0,0,69,70,5,47,0,0,70,18,1,0,0,0,71,72,5,42,0,0,72,73,5,42,0,
        0,73,20,1,0,0,0,74,75,5,46,0,0,75,22,1,0,0,0,76,77,5,91,0,0,77,24,
        1,0,0,0,78,79,5,93,0,0,79,26,1,0,0,0,80,81,5,116,0,0,81,82,5,114,
        0,0,82,83,5,117,0,0,83,90,5,101,0,0,84,85,5,102,0,0,85,86,5,97,0,
        0,86,87,5,108,0,0,87,88,5,115,0,0,88,90,5,101,0,0,89,80,1,0,0,0,
        89,84,1,0,0,0,90,28,1,0,0,0,91,93,7,0,0,0,92,91,1,0,0,0,93,94,1,
        0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,30,1,0,0,0,96,97,5,48,0,0,97,
        98,5,120,0,0,98,100,1,0,0,0,99,101,7,1,0,0,100,99,1,0,0,0,101,102,
        1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,32,1,0,0,0,104,108,7,
        2,0,0,105,107,7,3,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,
        0,0,0,108,109,1,0,0,0,109,34,1,0,0,0,110,108,1,0,0,0,111,112,3,33,
        16,0,112,113,5,46,0,0,113,114,5,108,0,0,114,115,5,101,0,0,115,116,
        5,110,0,0,116,117,5,103,0,0,117,118,5,116,0,0,118,119,5,104,0,0,
        119,36,1,0,0,0,120,121,3,33,16,0,121,122,5,91,0,0,122,123,3,29,14,
        0,123,124,5,93,0,0,124,38,1,0,0,0,125,126,3,33,16,0,126,127,5,91,
        0,0,127,128,3,33,16,0,128,129,5,93,0,0,129,40,1,0,0,0,130,131,3,
        31,15,0,131,42,1,0,0,0,132,133,5,98,0,0,133,134,5,108,0,0,134,135,
        5,111,0,0,135,136,5,99,0,0,136,137,5,107,0,0,137,138,5,46,0,0,138,
        154,1,0,0,0,139,140,5,116,0,0,140,141,5,105,0,0,141,142,5,109,0,
        0,142,143,5,101,0,0,143,144,5,115,0,0,144,145,5,116,0,0,145,146,
        5,97,0,0,146,147,5,109,0,0,147,155,5,112,0,0,148,149,5,110,0,0,149,
        150,5,117,0,0,150,151,5,109,0,0,151,152,5,98,0,0,152,153,5,101,0,
        0,153,155,5,114,0,0,154,139,1,0,0,0,154,148,1,0,0,0,155,44,1,0,0,
        0,156,157,5,109,0,0,157,158,5,115,0,0,158,159,5,103,0,0,159,160,
        5,46,0,0,160,161,1,0,0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,
        164,5,110,0,0,164,165,5,100,0,0,165,166,5,101,0,0,166,167,5,114,
        0,0,167,46,1,0,0,0,168,179,5,60,0,0,169,170,5,60,0,0,170,179,5,61,
        0,0,171,179,5,62,0,0,172,173,5,62,0,0,173,179,5,61,0,0,174,175,5,
        61,0,0,175,179,5,61,0,0,176,177,5,33,0,0,177,179,5,61,0,0,178,168,
        1,0,0,0,178,169,1,0,0,0,178,171,1,0,0,0,178,172,1,0,0,0,178,174,
        1,0,0,0,178,176,1,0,0,0,179,48,1,0,0,0,180,182,7,4,0,0,181,180,1,
        0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,
        0,0,0,185,186,6,24,0,0,186,50,1,0,0,0,8,0,89,94,102,108,154,178,
        183,1,6,0,0
    ]

class SolidityLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    BOOLEAN_LITERAL = 14
    INTEGER = 15
    ADDRESS = 16
    VariableName = 17
    LengthAccess = 18
    ArrayElement = 19
    MappingElement = 20
    AddressLiteral = 21
    BlockAccess = 22
    MsgAccess = 23
    RelOp = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&&'", "'||'", "'!'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
            "'**'", "'.'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "BOOLEAN_LITERAL", "INTEGER", "ADDRESS", "VariableName", "LengthAccess", 
            "ArrayElement", "MappingElement", "AddressLiteral", "BlockAccess", 
            "MsgAccess", "RelOp", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "BOOLEAN_LITERAL", 
                  "INTEGER", "ADDRESS", "VariableName", "LengthAccess", 
                  "ArrayElement", "MappingElement", "AddressLiteral", "BlockAccess", 
                  "MsgAccess", "RelOp", "WS" ]

    grammarFileName = "Solidity.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


